<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacefcmaes_1_1evaluator" kind="namespace" language="Python">
    <compoundname>fcmaes::evaluator</compoundname>
    <innerclass refid="classfcmaes_1_1evaluator_1_1__fitness" prot="protected">fcmaes::evaluator::_fitness</innerclass>
    <innerclass refid="classfcmaes_1_1evaluator_1_1callback" prot="public">fcmaes::evaluator::callback</innerclass>
    <innerclass refid="classfcmaes_1_1evaluator_1_1callback__mo" prot="public">fcmaes::evaluator::callback_mo</innerclass>
    <innerclass refid="classfcmaes_1_1evaluator_1_1callback__par" prot="public">fcmaes::evaluator::callback_par</innerclass>
    <innerclass refid="classfcmaes_1_1evaluator_1_1callback__so" prot="public">fcmaes::evaluator::callback_so</innerclass>
    <innerclass refid="classfcmaes_1_1evaluator_1_1_evaluator" prot="public">fcmaes::evaluator::Evaluator</innerclass>
    <innerclass refid="classfcmaes_1_1evaluator_1_1parallel" prot="public">fcmaes::evaluator::parallel</innerclass>
    <innerclass refid="classfcmaes_1_1evaluator_1_1parallel__mo" prot="public">fcmaes::evaluator::parallel_mo</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacefcmaes_1_1evaluator_1a68d2ca2ef338645b599a081c8a9d47e8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int fcmaes::evaluator.pipe_limit</definition>
        <argsstring></argsstring>
        <name>pipe_limit</name>
        <qualifiedname>fcmaes.evaluator.pipe_limit</qualifiedname>
        <initializer>=  64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="59" column="1" bodyfile="fcmaes/evaluator.py" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1evaluator_1a7e6692c75e37badbe9b2a64268404720" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::evaluator.basepath</definition>
        <argsstring></argsstring>
        <name>basepath</name>
        <qualifiedname>fcmaes.evaluator.basepath</qualifiedname>
        <initializer>=  os.path.dirname(os.path.abspath(__file__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="970" column="1" bodyfile="fcmaes/evaluator.py" bodystart="970" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1evaluator_1a18b6b20a32631ee3da1b0728bb8aad22" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::evaluator.libcmalib</definition>
        <argsstring></argsstring>
        <name>libcmalib</name>
        <qualifiedname>fcmaes.evaluator.libcmalib</qualifiedname>
        <initializer>=  ct.cdll.LoadLibrary(<ref refid="namespacefcmaes_1_1evaluator_1a7e6692c75e37badbe9b2a64268404720" kindref="member">basepath</ref> + &apos;/lib/libacmalib.so&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="974" column="1" bodyfile="fcmaes/evaluator.py" bodystart="974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1evaluator_1a0cd19ddbe59785956b8547b6a0352f66" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::evaluator.mo_call_back_type</definition>
        <argsstring></argsstring>
        <name>mo_call_back_type</name>
        <qualifiedname>fcmaes.evaluator.mo_call_back_type</qualifiedname>
        <initializer>=  ct.CFUNCTYPE(ct.c_bool, ct.c_int, ct.POINTER(ct.c_double), ct.POINTER(ct.c_double))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="983" column="1" bodyfile="fcmaes/evaluator.py" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1evaluator_1ae4b67a512622d25a7afbdeb83357e371" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::evaluator.call_back_type</definition>
        <argsstring></argsstring>
        <name>call_back_type</name>
        <qualifiedname>fcmaes.evaluator.call_back_type</qualifiedname>
        <initializer>=  ct.CFUNCTYPE(ct.c_double, ct.c_int, ct.POINTER(ct.c_double))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="985" column="1" bodyfile="fcmaes/evaluator.py" bodystart="985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1evaluator_1a88261dcfd3a319b63ff1e856f1b3d84d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::evaluator.call_back_par</definition>
        <argsstring></argsstring>
        <name>call_back_par</name>
        <qualifiedname>fcmaes.evaluator.call_back_par</qualifiedname>
        <initializer>=  ct.CFUNCTYPE(None, ct.c_int, ct.c_int, \
                                  ct.POINTER(ct.c_double), ct.POINTER(ct.c_double))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="987" column="1" bodyfile="fcmaes/evaluator.py" bodystart="987" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1ab8a6f2f441a50ed78841e55af7af2f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator.is_log_level_active</definition>
        <argsstring>(level)</argsstring>
        <name>is_log_level_active</name>
        <qualifiedname>fcmaes.evaluator.is_log_level_active</qualifiedname>
        <param>
          <type>level</type>
          <defname>level</defname>
        </param>
        <briefdescription>
<para>Determines if the specified log level is currently active. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the provided logging level is active by iterating through the logger handlers and comparing their level settings.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The logging level to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>bool True if the specified logging level is active, otherwise False. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="73" column="1" bodyfile="fcmaes/evaluator.py" bodystart="73" bodyend="81"/>
        <referencedby refid="namespacefcmaes_1_1evaluator_1ab8164b41a79c6e2e9836dbcc301d3369" compoundref="evaluator_8py" startline="93" endline="95">fcmaes.evaluator.is_debug_active</referencedby>
        <referencedby refid="namespacefcmaes_1_1evaluator_1a629b44d3fbb8de96604cf0cedb48452e" compoundref="evaluator_8py" startline="105" endline="107">fcmaes.evaluator.is_trace_active</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1ab8164b41a79c6e2e9836dbcc301d3369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator.is_debug_active</definition>
        <argsstring>()</argsstring>
        <name>is_debug_active</name>
        <qualifiedname>fcmaes.evaluator.is_debug_active</qualifiedname>
        <briefdescription>
<para>Determines if the debug log level is currently active. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the &quot;DEBUG&quot; log level is active by invoking the <computeroutput>is_log_level_active</computeroutput> function with the &quot;DEBUG&quot; string as an argument. It is useful for determining if debug-level logging is enabled in the application.</para>
<para><simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>bool True if the &quot;DEBUG&quot; log level is active, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="93" column="1" bodyfile="fcmaes/evaluator.py" bodystart="93" bodyend="95"/>
        <references refid="namespacefcmaes_1_1evaluator_1ab8a6f2f441a50ed78841e55af7af2f5f" compoundref="evaluator_8py" startline="73" endline="81">fcmaes.evaluator.is_log_level_active</references>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1a629b44d3fbb8de96604cf0cedb48452e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator.is_trace_active</definition>
        <argsstring>()</argsstring>
        <name>is_trace_active</name>
        <qualifiedname>fcmaes.evaluator.is_trace_active</qualifiedname>
        <briefdescription>
<para>Checks if the TRACE log level is currently active. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines whether the TRACE level of logging is enabled, typically indicating if detailed debug information should be logged.</para>
<para><simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>bool True if the TRACE log level is active, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="105" column="1" bodyfile="fcmaes/evaluator.py" bodystart="105" bodyend="107"/>
        <references refid="namespacefcmaes_1_1evaluator_1ab8a6f2f441a50ed78841e55af7af2f5f" compoundref="evaluator_8py" startline="73" endline="81">fcmaes.evaluator.is_log_level_active</references>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1a3f1de81bb9ebb3f1026990d51627f5e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator.eval_parallel</definition>
        <argsstring>(ArrayLike xs, Evaluator evaluator)</argsstring>
        <name>eval_parallel</name>
        <qualifiedname>fcmaes.evaluator.eval_parallel</qualifiedname>
        <param>
          <type>ArrayLike</type>
          <declname>xs</declname>
        </param>
        <param>
          <type><ref refid="classfcmaes_1_1evaluator_1_1_evaluator" kindref="compound">Evaluator</ref></type>
          <declname>evaluator</declname>
        </param>
        <briefdescription>
<para>Evaluates a set of inputs in parallel using a provided evaluator function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes a sequence of elements in chunks, using a custom evaluator. It supports efficiently evaluating large data by dividing the inputs into smaller segments and processing them iteratively in a pipeline.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array-like collection of inputs to be evaluated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluator</parametername>
</parameternamelist>
<parameterdescription>
<para>An evaluator callable or function responsible for computing the results of the inputs provided.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>np Array containing the evaluation results corresponding to the input elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="124" column="1" bodyfile="fcmaes/evaluator.py" bodystart="125" bodyend="137"/>
        <references refid="namespacefcmaes_1_1evaluator_1afe255aa77cf706556cd5740a6d9dc120" compoundref="evaluator_8py" startline="262" endline="269">fcmaes.evaluator._eval_parallel_segment</references>
        <referencedby refid="classfcmaes_1_1evaluator_1_1parallel_1a63cfd5289e05dc71f2b53e24e268350f" compoundref="evaluator_8py" startline="600" endline="602">fcmaes.evaluator.parallel.__call__</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1a7fd3b71184ba68c9fc886a0da91030a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator.eval_parallel_mo</definition>
        <argsstring>(ArrayLike xs, Evaluator evaluator, int nobj)</argsstring>
        <name>eval_parallel_mo</name>
        <qualifiedname>fcmaes.evaluator.eval_parallel_mo</qualifiedname>
        <param>
          <type>ArrayLike</type>
          <declname>xs</declname>
        </param>
        <param>
          <type><ref refid="classfcmaes_1_1evaluator_1_1_evaluator" kindref="compound">Evaluator</ref></type>
          <declname>evaluator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nobj</declname>
        </param>
        <briefdescription>
<para>Evaluates a population of solutions in parallel for a multi-objective optimization problem. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes a population of solutions and evaluates them in parallel to compute objective values. It is designed to handle large populations by dividing them into segments and processing each segment iteratively. The computed objective values are returned in a 2-dimensional array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>The input population of solutions to evaluate. Each solution should be represented as an array-like structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluator</parametername>
</parameternamelist>
<parameterdescription>
<para>The evaluator object that computes objective values for the given solutions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objectives being evaluated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>np A 2-dimensional array where each row corresponds to the computed objective values of a solution in the input population. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="157" column="1" bodyfile="fcmaes/evaluator.py" bodystart="159" bodyend="171"/>
        <references refid="namespacefcmaes_1_1evaluator_1afe255aa77cf706556cd5740a6d9dc120" compoundref="evaluator_8py" startline="262" endline="269">fcmaes.evaluator._eval_parallel_segment</references>
        <referencedby refid="classfcmaes_1_1evaluator_1_1parallel__mo_1a2e2dfb664e0d8c322934abcba87e59a4" compoundref="evaluator_8py" startline="667" endline="669">fcmaes.evaluator.parallel_mo.__call__</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1afe255aa77cf706556cd5740a6d9dc120" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator._eval_parallel_segment</definition>
        <argsstring>(xs, ys, i0, i1, evaluator)</argsstring>
        <name>_eval_parallel_segment</name>
        <qualifiedname>fcmaes.evaluator._eval_parallel_segment</qualifiedname>
        <param>
          <type>xs</type>
          <defname>xs</defname>
        </param>
        <param>
          <type>ys</type>
          <defname>ys</defname>
        </param>
        <param>
          <type>i0</type>
          <defname>i0</defname>
        </param>
        <param>
          <type>i1</type>
          <defname>i1</defname>
        </param>
        <param>
          <type><ref refid="classevaluator" kindref="compound">evaluator</ref></type>
          <defname>evaluator</defname>
        </param>
        <briefdescription>
<para>Evaluates a segment of data in parallel by sending and receiving data through a pipe. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes a segment of input data specified by the indices i0 and i1 using the evaluator&apos;s pipeline. It sends values from the input <computeroutput>xs</computeroutput> to the evaluator, and receives processed results to update the output <computeroutput>ys</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>A sequence of input data to be evaluated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>A sequence to store the results after evaluation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i0</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index of the segment to be processed (inclusive). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>The ending index of the segment to be processed (exclusive). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evaluator</parametername>
</parameternamelist>
<parameterdescription>
<para>An object with a communication pipe for parallel processing.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The updated <computeroutput>ys</computeroutput> sequence containing the evaluated results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="262" column="1" bodyfile="fcmaes/evaluator.py" bodystart="262" bodyend="269"/>
        <referencedby refid="namespacefcmaes_1_1evaluator_1a3f1de81bb9ebb3f1026990d51627f5e3" compoundref="evaluator_8py" startline="125" endline="137">fcmaes.evaluator.eval_parallel</referencedby>
        <referencedby refid="namespacefcmaes_1_1evaluator_1a7fd3b71184ba68c9fc886a0da91030a1" compoundref="evaluator_8py" startline="159" endline="171">fcmaes.evaluator.eval_parallel_mo</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1ad73ccd9d36e41634dfd83907b1fa2872" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator._evaluate</definition>
        <argsstring>(fun, pipe, read_mutex, write_mutex)</argsstring>
        <name>_evaluate</name>
        <qualifiedname>fcmaes.evaluator._evaluate</qualifiedname>
        <param>
          <type>fun</type>
          <defname>fun</defname>
        </param>
        <param>
          <type>pipe</type>
          <defname>pipe</defname>
        </param>
        <param>
          <type>read_mutex</type>
          <defname>read_mutex</defname>
        </param>
        <param>
          <type>write_mutex</type>
          <defname>write_mutex</defname>
        </param>
        <briefdescription>
<para>Execute a given function on inputs received from a communication pipe in a thread-safe manner and send results back through the pipe. </para>
        </briefdescription>
        <detaileddescription>
<para>Handles potential exceptions during function execution and ensures proper synchronization using the provided mutex locks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to be executed on input data received from the pipe. pipe (Tuple[Connection, Connection]): A pair of connection objects for inter-process communication, used for receiving inputs and sending results. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>A threading lock ensuring safe reading from the input pipe. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>A threading lock ensuring safe writing to the output pipe. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="285" column="1" bodyfile="fcmaes/evaluator.py" bodystart="285" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1a4cbc79347af4303863c4d9b57a251e0d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator._check_bounds</definition>
        <argsstring>(bounds, guess, rg)</argsstring>
        <name>_check_bounds</name>
        <qualifiedname>fcmaes.evaluator._check_bounds</qualifiedname>
        <param>
          <type>bounds</type>
          <defname>bounds</defname>
        </param>
        <param>
          <type>guess</type>
          <defname>guess</defname>
        </param>
        <param>
          <type>rg</type>
          <defname>rg</defname>
        </param>
        <briefdescription>
<para>Checks and processes bounds, guesses, and random generator inputs for optimization. </para>
        </briefdescription>
        <detaileddescription>
<para>This function ensures that either bounds or guesses are properly defined, as they are necessary to perform any optimization task. If <computeroutput>bounds</computeroutput> is not provided, but <computeroutput>guess</computeroutput> is, it returns a processed version of the guess. If <computeroutput>bounds</computeroutput> is provided but <computeroutput>guess</computeroutput> is absent, it generates a random guess within the bounds using the provided random generator. Ultimately, it arranges and returns bounds and guesses as numpy arrays.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>Object containing lower (<computeroutput>lb</computeroutput>) and upper (<computeroutput>ub</computeroutput>) bounds. Can be None if guess is provided directly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess of the parameters. Can be None if bounds are provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>A random number generator instance used to generate guesses when they are not explicitly provided.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple containing:<itemizedlist>
<listitem><para>Lower bounds array (numpy.ndarray) or None if bounds are not provided.</para>
</listitem><listitem><para>Upper bounds array (numpy.ndarray) or None if bounds are not provided.</para>
</listitem><listitem><para>Guess array (numpy.ndarray) processed from the provided inputs.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ValueError</parametername>
</parameternamelist>
<parameterdescription>
<para>If both bounds and guess are None. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="327" column="1" bodyfile="fcmaes/evaluator.py" bodystart="327" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1a8e9d001859be2ec90b8511ef634bfdda" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator._get_bounds</definition>
        <argsstring>(dim, bounds, guess, rg)</argsstring>
        <name>_get_bounds</name>
        <qualifiedname>fcmaes.evaluator._get_bounds</qualifiedname>
        <param>
          <type>dim</type>
          <defname>dim</defname>
        </param>
        <param>
          <type>bounds</type>
          <defname>bounds</defname>
        </param>
        <param>
          <type>guess</type>
          <defname>guess</defname>
        </param>
        <param>
          <type>rg</type>
          <defname>rg</defname>
        </param>
        <briefdescription>
<para>Configures and validates bounds, initial guesses, and dimensionality for a process. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes and ensures the compatibility of dimensionality, bounds, and guesses for an optimization or computational routine. It also generates default values where absent, ensuring all return values align with the given inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensionality of the problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower and upper bounds for each dimension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess for the optimization variable(s). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator used for generating uniformly distributed guesses if <computeroutput>guess</computeroutput> is not provided.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[Optional[np.ndarray], Optional[np.ndarray], np.ndarray]: A tuple containing the processed lower bounds, upper bounds, and initial guess. Returns (None, None, guess) when bounds is not specified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="358" column="1" bodyfile="fcmaes/evaluator.py" bodystart="358" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1a91fda48468c86eb01e6ef3959d4087c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator.serial</definition>
        <argsstring>(fun)</argsstring>
        <name>serial</name>
        <qualifiedname>fcmaes.evaluator.serial</qualifiedname>
        <param>
          <type>fun</type>
          <defname>fun</defname>
        </param>
        <briefdescription>
<para>Creates a function that applies a given function to each element in a list. </para>
        </briefdescription>
        <detaileddescription>
<para>This decorator takes a function as input and returns a new function. The returned function, when called with a list of elements, applies the input function to each element in the list sequentially. If the input function fails for an element, the resulting behavior is handled by an internal mechanism.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be applied to each element in a list.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new function that takes a list of elements and applies &apos;fun&apos; to each element, returning a list of results. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="512" column="1" bodyfile="fcmaes/evaluator.py" bodystart="512" bodyend="515"/>
        <references refid="namespacefcmaes_1_1evaluator_1a2070228090b71531c5734270831835f1" compoundref="evaluator_8py" startline="553" endline="559">fcmaes.evaluator._tryfun</references>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1a208b8277669b6cfffba7bbafa42702fe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator._func_serial</definition>
        <argsstring>(fun, num, pid, xs, ys)</argsstring>
        <name>_func_serial</name>
        <qualifiedname>fcmaes.evaluator._func_serial</qualifiedname>
        <param>
          <type>fun</type>
          <defname>fun</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <param>
          <type>pid</type>
          <defname>pid</defname>
        </param>
        <param>
          <type>xs</type>
          <defname>xs</defname>
        </param>
        <param>
          <type>ys</type>
          <defname>ys</defname>
        </param>
        <briefdescription>
<para>Applies a function to elements of a list in a serial manner based on a processing strategy using process ID and total number of processes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function modifies the <computeroutput>ys</computeroutput> list in place, applying the <computeroutput>fun</computeroutput> function to elements in <computeroutput>xs</computeroutput> at specific indices determined by the process ID (<computeroutput>pid</computeroutput>) and total number of processes (<computeroutput>num</computeroutput>). It ensures elements are processed in a distributed order across processes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>Callable function to apply to elements of the input list. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>int. Total number of processes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>int. Process ID, indicating the current process index starting at 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>list. Input list of elements to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>list. Output list where results are stored at corresponding indices. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="534" column="1" bodyfile="fcmaes/evaluator.py" bodystart="534" bodyend="537"/>
        <references refid="namespacefcmaes_1_1evaluator_1a2070228090b71531c5734270831835f1" compoundref="evaluator_8py" startline="553" endline="559">fcmaes.evaluator._tryfun</references>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1evaluator_1a2070228090b71531c5734270831835f1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.evaluator._tryfun</definition>
        <argsstring>(fun, x)</argsstring>
        <name>_tryfun</name>
        <qualifiedname>fcmaes.evaluator._tryfun</qualifiedname>
        <param>
          <type>fun</type>
          <defname>fun</defname>
        </param>
        <param>
          <type>x</type>
          <defname>x</defname>
        </param>
        <briefdescription>
<para>Attempts to evaluate the specified function with a given input and handle errors gracefully. </para>
        </briefdescription>
        <detaileddescription>
<para>If the result is a finite value, it is returned. Otherwise, or if the evaluation raises an exception, the maximum floating-point value is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>A callable that represents the function to be evaluated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input value passed to the function for evaluation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the function evaluation if it produces a finite value. Otherwise, returns the maximum floating-point value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/evaluator.py" line="553" column="1" bodyfile="fcmaes/evaluator.py" bodystart="553" bodyend="559"/>
        <referencedby refid="namespacefcmaes_1_1evaluator_1a208b8277669b6cfffba7bbafa42702fe" compoundref="evaluator_8py" startline="534" endline="537">fcmaes.evaluator._func_serial</referencedby>
        <referencedby refid="namespacefcmaes_1_1evaluator_1a91fda48468c86eb01e6ef3959d4087c8" compoundref="evaluator_8py" startline="512" endline="515">fcmaes.evaluator.serial</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="fcmaes/evaluator.py" line="1" column="1"/>
  </compounddef>
</doxygen>
