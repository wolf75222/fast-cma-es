<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classfcmaes_1_1optimizer_1_1_dual__annealing" kind="class" language="Python" prot="public">
    <compoundname>fcmaes::optimizer::Dual_annealing</compoundname>
    <basecompoundref refid="classfcmaes_1_1optimizer_1_1_optimizer" prot="public" virt="non-virtual">fcmaes.optimizer.Optimizer</basecompoundref>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classfcmaes_1_1optimizer_1_1_dual__annealing_1a9b9402e2a5a598d792164d460b82056d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.optimizer.Dual_annealing::no_local_search</definition>
        <argsstring></argsstring>
        <name>no_local_search</name>
        <qualifiedname>fcmaes.optimizer.Dual_annealing.no_local_search</qualifiedname>
        <initializer>=  not use_local_search</initializer>
        <briefdescription>
<para>A flag indicating whether local search is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2747" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2747" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_dual__annealing_1aae221326dd0bd3d5b646badbf6a59133" compoundref="optimizer_8py" startline="2787" endline="2794">fcmaes.optimizer.Dual_annealing.minimize</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_dual__annealing_1ae4f414368932eac040e7431fec8fd6bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.optimizer.Dual_annealing.__init__</definition>
        <argsstring>(self, Optional[int] max_evaluations=50000, Optional[bool] use_local_search=True)</argsstring>
        <name>__init__</name>
        <qualifiedname>fcmaes.optimizer.Dual_annealing.__init__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>50000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>use_local_search</declname>
          <array>[bool]</array>
          <defval>True</defval>
        </param>
        <briefdescription>
<para>Initializes an optimizer instance that uses the scipy differential annealing algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>This class inherits from the base <computeroutput><ref refid="classfcmaes_1_1optimizer_1_1_optimizer" kindref="compound">Optimizer</ref></computeroutput> class.</para>
<para>It allows customization of the maximum number of evaluations and whether local search should be employed as part of the optimization process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional; maximum number of evaluations allowed during optimization. Defaults to 50000 if not provided. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_local_search</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional; flag indicating whether to use local search during optimization. Defaults to True if not provided. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2743" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2745" bodyend="2748"/>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_dual__annealing_1aae221326dd0bd3d5b646badbf6a59133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, float, int]</type>
        <definition> Tuple[np.ndarray, float, int] fcmaes.optimizer.Dual_annealing.minimize</definition>
        <argsstring>(self, Callable[[ArrayLike], float] fun, Optional[Bounds] bounds, Optional[ArrayLike] guess=None, Optional[float] sdevs=None, rg=Generator(PCG64DXSM()), store=None)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.optimizer.Dual_annealing.minimize</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>float]</type>
          <declname>fun</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>bounds</declname>
          <defname>guess</defname>
          <array>[Bounds]</array>
        </param>
        <param>
          <type>Optional</type>
          <declname>guess</declname>
          <defname>sdevs</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>sdevs</declname>
          <defname>rg</defname>
          <array>[float]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>rg</type>
          <defname>store</defname>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>store</type>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Minimizes a scalar function of one or more variables using the Dual Annealing optimization method. </para>
        </briefdescription>
        <detaileddescription>
<para>This method minimizes an objective function over a domain defined by bounds and an optional initial guess. It allows specifying a random number generator and provides an option for storing intermediate results. The optimization is done using the Dual Annealing algorithm, which is particularly effective for global optimization problems.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>Callable function to minimize. It must accept a single argument, which is the optimization variable(s), and return a scalar value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>Bounds object defining the lower and upper limits for each optimization variable. The bounds must be specified for all dimensions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional initial guess for the optimization variables. It provides a starting point for the optimization algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional float intended for standard deviations. This parameter is currently ignored in the implementation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator instance used for seeding the optimization process to ensure reproducibility. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional storage used to manage intermediate results or post-process optimization details. If provided, results may be customized based on storage behavior.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple containing:<itemizedlist>
<listitem><para>The optimized variable(s) <computeroutput>np.ndarray</computeroutput>, representing the location of the minimum.</para>
</listitem><listitem><para>The scalar value of the objective function at the minimum.</para>
</listitem><listitem><para>The total number of function evaluations performed during optimization. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2781" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2787" bodyend="2794"/>
        <references refid="classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a" compoundref="optimizer_8py" startline="304" endline="307">fcmaes.optimizer.Optimizer.max_eval_num</references>
        <references refid="classfcmaes_1_1optimizer_1_1_dual__annealing_1a9b9402e2a5a598d792164d460b82056d" compoundref="optimizer_8py" startline="2747">fcmaes.optimizer.Dual_annealing.no_local_search</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Dual annealing optimization algorithm implementation. </para>
    </briefdescription>
    <detaileddescription>
<para>This class facilitates performing optimization using the dual-annealing algorithm, as implemented in SciPy. It provides functionality for finding the global minimum of a function within given bounds. Local search can also be enabled or disabled for refinement after the global optimization phase.</para>
<para><verbatim>       If True, local search is not applied.
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>fcmaes.optimizer.Dual_annealing</label>
        <link refid="classfcmaes_1_1optimizer_1_1_dual__annealing"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>fcmaes.optimizer.Dual_annealing</label>
        <link refid="classfcmaes_1_1optimizer_1_1_dual__annealing"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </collaborationgraph>
    <location file="fcmaes/optimizer.py" line="2720" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2720" bodyend="2794"/>
    <listofallmembers>
      <member refid="classfcmaes_1_1optimizer_1_1_dual__annealing_1ae4f414368932eac040e7431fec8fd6bc" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Dual_annealing</scope><name>__init__</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1acf09b9b314cc4faf25c9935e76ae1821" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Dual_annealing</scope><name>get_count_runs</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Dual_annealing</scope><name>max_eval_num</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Dual_annealing</scope><name>max_evaluations</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_dual__annealing_1aae221326dd0bd3d5b646badbf6a59133" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Dual_annealing</scope><name>minimize</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1ae0423ec54db7b25862e01d7863ab4708" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Dual_annealing</scope><name>name</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_dual__annealing_1a9b9402e2a5a598d792164d460b82056d" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Dual_annealing</scope><name>no_local_search</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
