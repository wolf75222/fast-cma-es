<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="deoptimizer_8cpp" kind="file" language="C++">
    <compoundname>deoptimizer.cpp</compoundname>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">iostream</includes>
    <includes local="no">float.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">ctime</includes>
    <includes local="no">random</includes>
    <includes local="no">queue</includes>
    <includes local="no">tuple</includes>
    <includes refid="evaluator_8h" local="yes">evaluator.h</includes>
    <incdepgraph>
      <node id="1">
        <label>_fcmaescpp/deoptimizer.cpp</label>
        <link refid="deoptimizer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>evaluator.h</label>
        <link refid="evaluator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Eigen/Core</label>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="15">
        <label>chrono</label>
      </node>
      <node id="16">
        <label>condition_variable</label>
      </node>
      <node id="6">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>float.h</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>mutex</label>
      </node>
      <node id="17">
        <label>pcg_random.hpp</label>
      </node>
      <node id="8">
        <label>queue</label>
      </node>
      <node id="7">
        <label>random</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="13">
        <label>thread</label>
      </node>
      <node id="9">
        <label>tuple</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classdifferential__evolution_1_1_de_optimizer" prot="public">differential_evolution::DeOptimizer</innerclass>
    <innernamespace refid="namespacedifferential__evolution">differential_evolution</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="deoptimizer_8cpp_1aa394124712525387121d6045a579b805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void optimizeDE_C</definition>
        <argsstring>(long runid, callback_type func, int dim, int seed, double *lower, double *upper, double *init, double *sigma, double minSigma, bool *ints, int maxEvals, double keep, double stopfitness, int popsize, double F, double CR, double min_mutate, double max_mutate, int workers, double *res)</argsstring>
        <name>optimizeDE_C</name>
        <param>
          <type>long</type>
          <declname>runid</declname>
        </param>
        <param>
          <type><ref refid="evaluator_8h_1af419da391481d5e767cbe038009da309" kindref="member">callback_type</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>init</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minSigma</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>ints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxEvals</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keep</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stopfitness</declname>
        </param>
        <param>
          <type>int</type>
          <declname>popsize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>F</declname>
        </param>
        <param>
          <type>double</type>
          <declname>CR</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_mutate</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_mutate</declname>
        </param>
        <param>
          <type>int</type>
          <declname>workers</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/deoptimizer.cpp" line="451" column="6" bodyfile="_fcmaescpp/deoptimizer.cpp" bodystart="451" bodyend="501"/>
        <references refid="class_fitness_1aba60038eac4e0e15d995e57f4ba079e1" compoundref="evaluator_8h" startline="313" endline="315">Fitness::evaluations</references>
        <references refid="evaluator_8h_1ac05c49788a31e5f7cb8efbe8ca3b548e" compoundref="evaluator_8h" startline="90" endline="91">noop_callback_par</references>
      </memberdef>
      <memberdef kind="function" id="deoptimizer_8cpp_1a8af4088f11fb8bc902b5a17f4b3c67f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>uintptr_t initDE_C</definition>
        <argsstring>(long runid, int dim, int seed, double *lower, double *upper, double *init, double *sigma, double minSigma, bool *ints, double keep, int popsize, double F, double CR, double min_mutate, double max_mutate)</argsstring>
        <name>initDE_C</name>
        <param>
          <type>long</type>
          <declname>runid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>upper</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>init</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minSigma</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>ints</declname>
        </param>
        <param>
          <type>double</type>
          <declname>keep</declname>
        </param>
        <param>
          <type>int</type>
          <declname>popsize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>F</declname>
        </param>
        <param>
          <type>double</type>
          <declname>CR</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_mutate</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_mutate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/deoptimizer.cpp" line="503" column="11" bodyfile="_fcmaescpp/deoptimizer.cpp" bodystart="503" bodyend="537"/>
        <references refid="evaluator_8h_1ad0943ebd623281f526e5aee2aa818895" compoundref="evaluator_8h" startline="86" endline="88">noop_callback</references>
        <references refid="evaluator_8h_1ac05c49788a31e5f7cb8efbe8ca3b548e" compoundref="evaluator_8h" startline="90" endline="91">noop_callback_par</references>
      </memberdef>
      <memberdef kind="function" id="deoptimizer_8cpp_1ab3fd3d1530a822a0b7a020d2b68a0406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroyDE_C</definition>
        <argsstring>(uintptr_t ptr)</argsstring>
        <name>destroyDE_C</name>
        <param>
          <type>uintptr_t</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/deoptimizer.cpp" line="539" column="6" bodyfile="_fcmaescpp/deoptimizer.cpp" bodystart="539" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="deoptimizer_8cpp_1af3c55844c8d3850d96ddf517996fca30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void askDE_C</definition>
        <argsstring>(uintptr_t ptr, double *xs)</argsstring>
        <name>askDE_C</name>
        <param>
          <type>uintptr_t</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/deoptimizer.cpp" line="546" column="6" bodyfile="_fcmaescpp/deoptimizer.cpp" bodystart="546" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="deoptimizer_8cpp_1a913e842ff9af1d5b517e26a27696ab26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tellDE_C</definition>
        <argsstring>(uintptr_t ptr, double *ys)</argsstring>
        <name>tellDE_C</name>
        <param>
          <type>uintptr_t</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/deoptimizer.cpp" line="559" column="5" bodyfile="_fcmaescpp/deoptimizer.cpp" bodystart="559" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="deoptimizer_8cpp_1af52980108e82b3df67f48b2efbda2755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int populationDE_C</definition>
        <argsstring>(uintptr_t ptr, double *xs)</argsstring>
        <name>populationDE_C</name>
        <param>
          <type>uintptr_t</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/deoptimizer.cpp" line="569" column="5" bodyfile="_fcmaescpp/deoptimizer.cpp" bodystart="569" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="deoptimizer_8cpp_1a57cc84b1da95b58421bcd567fb01f67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int resultDE_C</definition>
        <argsstring>(uintptr_t ptr, double *res)</argsstring>
        <name>resultDE_C</name>
        <param>
          <type>uintptr_t</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/deoptimizer.cpp" line="582" column="5" bodyfile="_fcmaescpp/deoptimizer.cpp" bodystart="582" bodyend="595"/>
        <references refid="class_fitness_1aba60038eac4e0e15d995e57f4ba079e1" compoundref="evaluator_8h" startline="313" endline="315">Fitness::evaluations</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>Dietmar<sp/>Wolz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Eigen<sp/>based<sp/>implementation<sp/>of<sp/>differential<sp/>evolution<sp/>using<sp/>on<sp/>the<sp/>DE/best/1<sp/>strategy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Uses<sp/>two<sp/>deviations<sp/>from<sp/>the<sp/>standard<sp/>DE<sp/>algorithm:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a)<sp/>temporal<sp/>locality<sp/>introduced<sp/>in<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://www.researchgate.net/publication/309179699_Differential_evolution_for_protein_folding_optimization_based_on_a_three-dimensional_AB_off-lattice_model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>b)<sp/>reinitialization<sp/>of<sp/>individuals<sp/>based<sp/>on<sp/>their<sp/>age.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Requires<sp/>Eigen<sp/>version<sp/>&gt;=<sp/>3.4<sp/>because<sp/>new<sp/>slicing<sp/>capabilities<sp/>are<sp/>used,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://eigen.tuxfamily.org/dox-devel/group__TutorialSlicingIndexing.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>requires<sp/>https://github.com/bab2min/EigenRand<sp/>for<sp/>random<sp/>number<sp/>generation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Supports<sp/>parallel<sp/>fitness<sp/>function<sp/>evaluation.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>keep<sp/>parameters<sp/>F<sp/>and<sp/>CR<sp/>at<sp/>their<sp/>defaults<sp/>since<sp/>this<sp/>implementation<sp/>works<sp/>well<sp/>with<sp/>the<sp/>given<sp/>settings<sp/>for<sp/>most<sp/>problems,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>since<sp/>the<sp/>algorithm<sp/>oscillates<sp/>between<sp/>different<sp/>F<sp/>and<sp/>CR<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>expensive<sp/>objective<sp/>functions<sp/>(e.g.<sp/>machine<sp/>learning<sp/>parameter<sp/>optimization)<sp/>use<sp/>the<sp/>workers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter<sp/>to<sp/>parallelize<sp/>objective<sp/>function<sp/>evaluation.<sp/>The<sp/>workers<sp/>parameter<sp/>is<sp/>limited<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>population<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ints<sp/>parameter<sp/>is<sp/>a<sp/>boolean<sp/>array<sp/>indicating<sp/>which<sp/>parameters<sp/>are<sp/>discrete<sp/>integer<sp/>values.<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter<sp/>was<sp/>introduced<sp/>after<sp/>observing<sp/>non<sp/>optimal<sp/>DE-results<sp/>for<sp/>the<sp/>ESP2<sp/>benchmark<sp/>problem:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/AlgTUDelft/ExpensiveOptimBenchmark/blob/master/expensiveoptimbenchmark/problems/DockerCFDBenchmark.py</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>defined<sp/>it<sp/>causes<sp/>a<sp/>&quot;special<sp/>treatment&quot;<sp/>for<sp/>discrete<sp/>variables:<sp/>They<sp/>are<sp/>rounded<sp/>to<sp/>the<sp/>next<sp/>integer<sp/>value<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>an<sp/>additional<sp/>mutation<sp/>to<sp/>avoid<sp/>getting<sp/>stuck<sp/>at<sp/>local<sp/>minima.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="evaluator_8h" kindref="compound">evaluator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="namespacedifferential__evolution" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedifferential__evolution" kindref="compound">differential_evolution</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classdifferential__evolution_1_1_de_optimizer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdifferential__evolution_1_1_de_optimizer_1a88f53bfd99efb252ac0e6d53b1457edf" kindref="member">DeOptimizer</ref><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classdifferential__evolution_1_1_de_optimizer_1a88f53bfd99efb252ac0e6d53b1457edf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a88f53bfd99efb252ac0e6d53b1457edf" kindref="member">DeOptimizer</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>runid_,<sp/><ref refid="class_fitness" kindref="compound">Fitness</ref><sp/>*fitfun_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed_,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>popsize_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxEvaluations_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>keep_,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stopfitness_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CR_,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_mutate_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_mutate_,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*isInt_,<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;guess_,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;inputSigma_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minSigma_)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>runid<sp/>used<sp/>to<sp/>identify<sp/>a<sp/>specific<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a1b66dc0c337d6bab9b3235c7eeeb49af" kindref="member">runid</ref><sp/>=<sp/>runid_;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fitness<sp/>function<sp/>to<sp/>minimize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref><sp/>=<sp/>fitfun_;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>objective<sp/>variables/problem<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref><sp/>=<sp/>dim_;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Population<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref><sp/>=<sp/>popsize_<sp/>&gt;<sp/>0<sp/>?<sp/>popsize_<sp/>:<sp/>15<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>maximal<sp/>number<sp/>of<sp/>evaluations<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2" kindref="member">maxEvaluations</ref><sp/>=<sp/>maxEvaluations_<sp/>&gt;<sp/>0<sp/>?<sp/>maxEvaluations_<sp/>:<sp/>50000;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>best<sp/>young<sp/>after<sp/>each<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8" kindref="member">keep</ref><sp/>=<sp/>keep_<sp/>&gt;<sp/>0<sp/>?<sp/>keep_<sp/>:<sp/>30;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Limit<sp/>for<sp/>fitness<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13" kindref="member">stopfitness</ref><sp/>=<sp/>stopfitness_;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4" kindref="member">F</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd" kindref="member">F0</ref><sp/>=<sp/>F_<sp/>&gt;<sp/>0<sp/>?<sp/>F_<sp/>:<sp/>0.5;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab" kindref="member">CR</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078" kindref="member">CR0</ref><sp/>=<sp/>CR_<sp/>&gt;<sp/>0<sp/>?<sp/>CR_<sp/>:<sp/>0.9;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>iterations<sp/>already<sp/>performed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref><sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99" kindref="member">stop</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2" kindref="member">pos</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" kindref="member">rs</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pcg64(seed_);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Indicating<sp/>which<sp/>parameters<sp/>are<sp/>discrete<sp/>integer<sp/>values.<sp/>If<sp/>defined<sp/>these<sp/>parameters<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rounded<sp/>to<sp/>the<sp/>next<sp/>integer<sp/>and<sp/>some<sp/>additional<sp/>mutation<sp/>of<sp/>discrete<sp/>parameters<sp/>are<sp/>performed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50" kindref="member">isInt</ref><sp/>=<sp/>isInt_;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DE<sp/>population<sp/>update<sp/>parameter<sp/>used<sp/>in<sp/>connection<sp/>with<sp/>isInt.<sp/>Determines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>mutation<sp/>rate<sp/>for<sp/>discrete<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7" kindref="member">min_mutate</ref><sp/>=<sp/>min_mutate_<sp/>&gt;<sp/>0<sp/>?<sp/>min_mutate_<sp/>:<sp/>0.1;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3dae73ea54686df165fc76d29be7aa58" kindref="member">max_mutate</ref><sp/>=<sp/>max_mutate_<sp/>&gt;<sp/>0<sp/>?<sp/>max_mutate_<sp/>:<sp/>0.5;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc" kindref="member">useNormal</ref><sp/>=<sp/>guess_.size()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d" kindref="member">mean</ref><sp/>=<sp/>guess_;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" kindref="member">sigma</ref><sp/>=<sp/>inputSigma_;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b" kindref="member">minSigmaVal</ref><sp/>=<sp/>minSigma_;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a4a4034e862bdd75aead3dd069ec36583" kindref="member">init</ref>();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="classdifferential__evolution_1_1_de_optimizer_1a33d01cb4aa66ec253c8505a466298e4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a33d01cb4aa66ec253c8505a466298e4c" kindref="member">~DeOptimizer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" kindref="member">rs</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b" kindref="member">rnd01</ref>()<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" kindref="member">distr_01</ref>(*<ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" kindref="member">rs</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69" kindref="member">rndInt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(max<sp/>*<sp/><ref refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" kindref="member">distr_01</ref>(*<ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" kindref="member">rs</ref>));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf" kindref="member">sample</ref>()<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc" kindref="member">useNormal</ref>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;getClosestFeasible(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d" kindref="member">mean</ref><sp/>+<sp/>(<ref refid="evaluator_8h_1a5b652df2286e1f0c4dae7d4dd841bb8f" kindref="member">normalVec</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>,<sp/>*<ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" kindref="member">rs</ref>).array()<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" kindref="member">sigma</ref>.array()).matrix());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;sample(*<ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" kindref="member">rs</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classdifferential__evolution_1_1_de_optimizer_1a427ae953a5503dc4369da1bbb338fe67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a427ae953a5503dc4369da1bbb338fe67" kindref="member">sample_i</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc" kindref="member">useNormal</ref>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;getClosestFeasible_i(i,<sp/><ref refid="evaluator_8h_1aa3d770d0f4bda035e2cc8c6f5c1b0aee" kindref="member">normreal</ref>(*<ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" kindref="member">rs</ref>,<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d" kindref="member">mean</ref>[i],<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" kindref="member">sigma</ref>[i]));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;sample_i(i,<sp/>*<ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" kindref="member">rs</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classdifferential__evolution_1_1_de_optimizer_1ac2c05bd08ebf41841869016986381905" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac2c05bd08ebf41841869016986381905" kindref="member">update_mean</ref>()<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc" kindref="member">useNormal</ref>)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d" kindref="member">meanHist</ref>.col(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148" kindref="member">meanHistIndex</ref>)<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(<ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148" kindref="member">meanHistIndex</ref><sp/>=<sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148" kindref="member">meanHistIndex</ref><sp/>+<sp/>1)<sp/>%<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d" kindref="member">meanHist</ref>.cols();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>delta<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d" kindref="member">meanHist</ref>.rowwise().maxCoeff()<sp/>-<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d" kindref="member">meanHist</ref>.rowwise().minCoeff();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>sigma_new<sp/>=<sp/>delta.cwiseMin(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a10983927cb3fb32ef29b0e00d648cdc9" kindref="member">maxSigma</ref>).cwiseMax(<ref refid="classdifferential__evolution_1_1_de_optimizer_1ac59ec7255ba605669b82e5f06acfe580" kindref="member">minSigma</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" kindref="member">sigma</ref><sp/>=<sp/>sigma_new.mean()<sp/>&gt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" kindref="member">sigma</ref>.mean()<sp/>?<sp/>sigma_new<sp/>:<sp/><sp/>0.9<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" kindref="member">sigma</ref><sp/>+<sp/>0.1<sp/>*<sp/>sigma_new;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d" kindref="member">mean</ref><sp/>=<sp/>0.9<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d" kindref="member">mean</ref><sp/>+<sp/>0.1<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(<ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classdifferential__evolution_1_1_de_optimizer_1a8babf7e82f12af63653d0d26df11e8b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a8babf7e82f12af63653d0d26df11e8b0" kindref="member">nextX</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;xp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;xb)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref>++;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab" kindref="member">CR</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>%<sp/>2<sp/>==<sp/>0<sp/>?<sp/>0.5<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078" kindref="member">CR0</ref><sp/>:<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078" kindref="member">CR0</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4" kindref="member">F</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>%<sp/>2<sp/>==<sp/>0<sp/>?<sp/>0.5<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd" kindref="member">F0</ref><sp/>:<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd" kindref="member">F0</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac2c05bd08ebf41841869016986381905" kindref="member">update_mean</ref>();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r1,<sp/>r2;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69" kindref="member">rndInt</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r1<sp/>==<sp/>p<sp/>||<sp/>r1<sp/>==<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r2<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69" kindref="member">rndInt</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r2<sp/>==<sp/>p<sp/>||<sp/>r2<sp/>==<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref><sp/>||<sp/>r2<sp/>==<sp/>r1);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x1<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(r1);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x2<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(r2);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/>xb<sp/>+<sp/>(x1<sp/>-<sp/>x2)<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4" kindref="member">F</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69" kindref="member">rndInt</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>!=<sp/>r<sp/>&amp;&amp;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b" kindref="member">rnd01</ref>()<sp/>&gt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab" kindref="member">CR</ref>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[j]<sp/>=<sp/>xp[j];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>nextx<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;getClosestFeasible(x);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9" kindref="member">modify</ref>(nextx);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nextx;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="classdifferential__evolution_1_1_de_optimizer_1aff18de19791b75f799d4aa5e9c60b5fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aff18de19791b75f799d4aa5e9c60b5fa" kindref="member">next_improve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;xb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;xi)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>nextx<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;getClosestFeasible(xb<sp/>+<sp/>((x<sp/>-<sp/>xi)<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd" kindref="member">F0</ref>));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9" kindref="member">modify</ref>(nextx);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nextx;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9" kindref="member">modify</ref>(<ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50" kindref="member">isInt</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n_ints<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50" kindref="member">isInt</ref>[i])<sp/>n_ints++;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>to_mutate<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7" kindref="member">min_mutate</ref><sp/>+<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b" kindref="member">rnd01</ref>()*(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a3dae73ea54686df165fc76d29be7aa58" kindref="member">max_mutate</ref><sp/>-<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7" kindref="member">min_mutate</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50" kindref="member">isInt</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b" kindref="member">rnd01</ref>()<sp/>&lt;<sp/>to_mutate/n_ints)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>(int)<ref refid="classdifferential__evolution_1_1_de_optimizer_1a427ae953a5503dc4369da1bbb338fe67" kindref="member">sample_i</ref>(i);<sp/></highlight><highlight class="comment">//<sp/>resample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6" kindref="member">ask</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;p)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ask<sp/>for<sp/>one<sp/>new<sp/>argument<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af" kindref="member">improvesX</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a8babf7e82f12af63653d0d26df11e8b0" kindref="member">nextX</ref>(p,<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(p),<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(<ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2" kindref="member">pos</ref><sp/>=<sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2" kindref="member">pos</ref><sp/>+<sp/>1)<sp/>%<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a" kindref="member">improvesP</ref>.front();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af" kindref="member">improvesX</ref>.front();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a" kindref="member">improvesP</ref>.pop();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af" kindref="member">improvesX</ref>.pop();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classdifferential__evolution_1_1_de_optimizer_1accf9be34ac5d30b9a2df15dba24f4dce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1accf9be34ac5d30b9a2df15dba24f4dce" kindref="member">tell</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tell<sp/>function<sp/>value<sp/>for<sp/>a<sp/>argument<sp/>list<sp/>retrieved<sp/>by<sp/>ask_one().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isfinite(y)<sp/>&amp;&amp;<sp/>y<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>[p])<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>temporal<sp/>locality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a" kindref="member">improvesP</ref>.push(p);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af" kindref="member">improvesX</ref>.push(<ref refid="classdifferential__evolution_1_1_de_optimizer_1aff18de19791b75f799d4aa5e9c60b5fa" kindref="member">next_improve</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(<ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>),<sp/>x,<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09" kindref="member">popX0</ref>.col(p)));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09" kindref="member">popX0</ref>.col(p)<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(p);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(p)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>[p]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc" kindref="member">popIter</ref>[p]<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>[<ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>])<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref>)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33" kindref="member">bestX</ref><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isfinite(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13" kindref="member">stopfitness</ref>)<sp/>&amp;&amp;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref><sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13" kindref="member">stopfitness</ref>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99" kindref="member">stop</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reinitialize<sp/>individual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8" kindref="member">keep</ref><sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b" kindref="member">rnd01</ref>()<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>-<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc" kindref="member">popIter</ref>[p])<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(p)<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf" kindref="member">sample</ref>();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>[p]<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99" kindref="member">stop</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="classdifferential__evolution_1_1_de_optimizer_1a0dcd44cbcddd9e0dde1ccd2ea5fbf96d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a0dcd44cbcddd9e0dde1ccd2ea5fbf96d" kindref="member">askAll</ref>()<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>;)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6" kindref="member">ask</ref>(p);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4" kindref="member">askedP</ref>[i]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa" kindref="member">askedX</ref>.col(i)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa" kindref="member">askedX</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classdifferential__evolution_1_1_de_optimizer_1aa1d0f0d9ddbb192cb30b470d8c3c1af0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa1d0f0d9ddbb192cb30b470d8c3c1af0" kindref="member">tellAll</ref>(<ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;ys)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1accf9be34ac5d30b9a2df15dba24f4dce" kindref="member">tell</ref>(ys[i],<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa" kindref="member">askedX</ref>.col(i),<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4" kindref="member">askedP</ref>[i]);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>fitfun-&gt;evaluations()<sp/>&lt;&lt;<sp/>&quot;<sp/>y<sp/>&quot;<sp/>&lt;&lt;<sp/>ys.transpose()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99" kindref="member">stop</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classdifferential__evolution_1_1_de_optimizer_1a18f5c0a1c724443666e4827126716315" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a18f5c0a1c724443666e4827126716315" kindref="member">doOptimize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------<sp/>Generation<sp/>Loop<sp/>--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>=<sp/>1;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;evaluations()<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2" kindref="member">maxEvaluations</ref></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!<ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;terminate();<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac2c05bd08ebf41841869016986381905" kindref="member">update_mean</ref>();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab" kindref="member">CR</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>%<sp/>2<sp/>==<sp/>0<sp/>?<sp/>0.5<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078" kindref="member">CR0</ref><sp/>:<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078" kindref="member">CR0</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4" kindref="member">F</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>%<sp/>2<sp/>==<sp/>0<sp/>?<sp/>0.5<sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd" kindref="member">F0</ref><sp/>:<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd" kindref="member">F0</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>xp<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(p);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>xb<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(<ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r1,<sp/>r2;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69" kindref="member">rndInt</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r1<sp/>==<sp/>p<sp/>||<sp/>r1<sp/>==<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r2<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69" kindref="member">rndInt</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r2<sp/>==<sp/>p<sp/>||<sp/>r2<sp/>==<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref><sp/>||<sp/>r2<sp/>==<sp/>r1);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x1<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(r1);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x2<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(r2);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69" kindref="member">rndInt</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref>(xp);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>r<sp/>||<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b" kindref="member">rnd01</ref>()<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab" kindref="member">CR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[j]<sp/>=<sp/>xb[j]<sp/>+<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4" kindref="member">F</ref><sp/>*<sp/>(x1[j]<sp/>-<sp/>x2[j]);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;feasible(j,<sp/>x[j]))</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[j]<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a427ae953a5503dc4369da1bbb338fe67" kindref="member">sample_i</ref>(j);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9" kindref="member">modify</ref>(x);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;eval(x)(0);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isfinite(y)<sp/>&amp;&amp;<sp/>y<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>[p])<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>temporal<sp/>locality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x2<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aff18de19791b75f799d4aa5e9c60b5fa" kindref="member">next_improve</ref>(xb,<sp/>x,<sp/>xp);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;eval(x2)(0);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isfinite(y2)<sp/>&amp;&amp;<sp/>y2<sp/>&lt;<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(p)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>(p)<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc" kindref="member">popIter</ref>[p]<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>[<ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>])<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref><sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33" kindref="member">bestX</ref><sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isfinite(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13" kindref="member">stopfitness</ref>)<sp/>&amp;&amp;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref><sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13" kindref="member">stopfitness</ref>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99" kindref="member">stop</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reinitialize<sp/>individual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8" kindref="member">keep</ref><sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b" kindref="member">rnd01</ref>()<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>-<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc" kindref="member">popIter</ref>[p])<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(p)<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf" kindref="member">sample</ref>();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>[p]<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="classdifferential__evolution_1_1_de_optimizer_1a0af3433f0f60f99f8a9fbf9f10f36360" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a0af3433f0f60f99f8a9fbf9f10f36360" kindref="member">do_optimize_delayed_update</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>workers)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;resetEvaluations();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers<sp/>=<sp/>std::min(workers,<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);<sp/></highlight><highlight class="comment">//<sp/>workers<sp/>&lt;=<sp/>popsize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator" kindref="compound">evaluator</ref><sp/>eval(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>,<sp/>1,<sp/>workers);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>evals_size<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>*10;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>evals_x[evals_size];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>evals_p[evals_size];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>eval<sp/>queue<sp/>with<sp/>initial<sp/>population</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>workers;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6" kindref="member">ask</ref>(p);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval.<ref refid="classevaluator_1a62e9fb557b5a2ecfabc49a01eb7f59d5" kindref="member">evaluate</ref>(x,<sp/>cp);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evals_x[cp]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evals_p[cp]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>(cp<sp/>+<sp/>1)<sp/>%<sp/>evals_size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;evaluations()<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2" kindref="member">maxEvaluations</ref><sp/>&amp;&amp;<sp/>!<ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;terminate())<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvec__id" kindref="compound">vec_id</ref>*<sp/>vid<sp/>=<sp/>eval.<ref refid="classevaluator_1a71fc6fd970c9d9f19af8202500c51b05" kindref="member">result</ref>();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>y<sp/>=<sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref>(vid-&gt;<ref refid="structvec__id_1af5bf436ff9f915e145a897a73e4cdac9" kindref="member">_v</ref>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>vid-&gt;<ref refid="structvec__id_1a126c3cb731d047e25c08742f735f0f13" kindref="member">_id</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>vid;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/>evals_x[id];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>evals_p[id];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1accf9be34ac5d30b9a2df15dba24f4dce" kindref="member">tell</ref>(y(0),<sp/>x,<sp/>p);<sp/></highlight><highlight class="comment">//<sp/>tell<sp/>evaluated<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isfinite(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13" kindref="member">stopfitness</ref>)<sp/>&amp;&amp;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref><sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13" kindref="member">stopfitness</ref>)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99" kindref="member">stop</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>-&gt;evaluations()<sp/>&gt;=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2" kindref="member">maxEvaluations</ref>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6" kindref="member">ask</ref>(p);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval.<ref refid="classevaluator_1a62e9fb557b5a2ecfabc49a01eb7f59d5" kindref="member">evaluate</ref>(x,<sp/>cp);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evals_x[cp]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evals_p[cp]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>(cp<sp/>+<sp/>1)<sp/>%<sp/>evals_size;<sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="classdifferential__evolution_1_1_de_optimizer_1a4a4034e862bdd75aead3dd069ec36583" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a4a4034e862bdd75aead3dd069ec36583" kindref="member">init</ref>()<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref><sp/>=<sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>,<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09" kindref="member">popX0</ref><sp/>=<sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>,<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref><sp/>=<sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d" kindref="member">meanHist</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d" kindref="member">mean</ref>.replicate(1,10);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148" kindref="member">meanHistIndex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a10983927cb3fb32ef29b0e00d648cdc9" kindref="member">maxSigma</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" kindref="member">sigma</ref><sp/>/<sp/>(.1<sp/>+<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b" kindref="member">minSigmaVal</ref>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac59ec7255ba605669b82e5f06acfe580" kindref="member">minSigma</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b" kindref="member">minSigmaVal</ref><sp/>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" kindref="member">sigma</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09" kindref="member">popX0</ref>.col(p)<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(p)<sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf" kindref="member">sample</ref>();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>[p]<sp/>=<sp/>DBL_MAX;<sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33" kindref="member">bestX</ref><sp/>=<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>.col(<ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc" kindref="member">popIter</ref><sp/>=<sp/><ref refid="evaluator_8h_1a909812174fa9829bc49f6e00edb00b90" kindref="member">zeros</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa" kindref="member">askedX</ref><sp/>=<sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>,<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4" kindref="member">askedP</ref><sp/>=<sp/><ref refid="daoptimizer_8cpp_1aa45a218a6a9d424e78898121d21f082d" kindref="member">ivec</ref>(<ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="classdifferential__evolution_1_1_de_optimizer_1af3cb231427f53598ae45ba8c320b1231" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1af3cb231427f53598ae45ba8c320b1231" kindref="member">getBestX</ref>()<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33" kindref="member">bestX</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="classdifferential__evolution_1_1_de_optimizer_1a9588f30973550e4b1083fd67641dadbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9588f30973550e4b1083fd67641dadbb" kindref="member">getBestValue</ref>()<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="classdifferential__evolution_1_1_de_optimizer_1ab8e8cfb1d04f3cd8dd5c82978f425eb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab8e8cfb1d04f3cd8dd5c82978f425eb1" kindref="member">getIterations</ref>()<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="classdifferential__evolution_1_1_de_optimizer_1ab5aa75486c266ec520613a4e00c2ad52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_fitness" kindref="compound">Fitness</ref>*<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab5aa75486c266ec520613a4e00c2ad52" kindref="member">getFitfun</ref>()<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="classdifferential__evolution_1_1_de_optimizer_1aa3653941bc72f8c6e32688f1e09ba76b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa3653941bc72f8c6e32688f1e09ba76b" kindref="member">getDim</ref>()<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="classdifferential__evolution_1_1_de_optimizer_1a4842f3a4aae6868fbe69fdc154032ca5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a4842f3a4aae6868fbe69fdc154032ca5" kindref="member">getPopulation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa" kindref="member">askedX</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="classdifferential__evolution_1_1_de_optimizer_1a4cf73cd0c13cf54880eb91edb58db9a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a4cf73cd0c13cf54880eb91edb58db9a9" kindref="member">getStop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99" kindref="member">stop</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="classdifferential__evolution_1_1_de_optimizer_1a7c4a14f47ad8a07a84cad2132661b004" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a7c4a14f47ad8a07a84cad2132661b004" kindref="member">getPopsize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="406" refid="classdifferential__evolution_1_1_de_optimizer_1a1b66dc0c337d6bab9b3235c7eeeb49af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a1b66dc0c337d6bab9b3235c7eeeb49af" kindref="member">runid</ref>;</highlight></codeline>
<codeline lineno="407" refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_fitness" kindref="compound">Fitness</ref><sp/>*<ref refid="classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463" kindref="member">fitfun</ref>;</highlight></codeline>
<codeline lineno="408" refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e" kindref="member">popsize</ref>;<sp/></highlight><highlight class="comment">//<sp/>population<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791" kindref="member">dim</ref>;</highlight></codeline>
<codeline lineno="410" refid="classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2" kindref="member">maxEvaluations</ref>;</highlight></codeline>
<codeline lineno="411" refid="classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8" kindref="member">keep</ref>;</highlight></codeline>
<codeline lineno="412" refid="classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13" kindref="member">stopfitness</ref>;</highlight></codeline>
<codeline lineno="413" refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f" kindref="member">iterations</ref>;</highlight></codeline>
<codeline lineno="414" refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65" kindref="member">bestY</ref>;</highlight></codeline>
<codeline lineno="415" refid="classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33" kindref="member">bestX</ref>;</highlight></codeline>
<codeline lineno="416" refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f" kindref="member">bestI</ref>;</highlight></codeline>
<codeline lineno="417" refid="classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99" kindref="member">stop</ref>;</highlight></codeline>
<codeline lineno="418" refid="classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd" kindref="member">F0</ref>;</highlight></codeline>
<codeline lineno="419" refid="classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078" kindref="member">CR0</ref>;</highlight></codeline>
<codeline lineno="420" refid="classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4" kindref="member">F</ref>;</highlight></codeline>
<codeline lineno="421" refid="classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab" kindref="member">CR</ref>;</highlight></codeline>
<codeline lineno="422" refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>pcg64<sp/>*<ref refid="classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248" kindref="member">rs</ref>;</highlight></codeline>
<codeline lineno="423" refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1" kindref="member">popX</ref>;</highlight></codeline>
<codeline lineno="424" refid="classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09" kindref="member">popX0</ref>;</highlight></codeline>
<codeline lineno="425" refid="classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa" kindref="member">askedX</ref>;</highlight></codeline>
<codeline lineno="426" refid="classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aa45a218a6a9d424e78898121d21f082d" kindref="member">ivec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4" kindref="member">askedP</ref>;</highlight></codeline>
<codeline lineno="427" refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af" kindref="member">popY</ref>;</highlight></codeline>
<codeline lineno="428" refid="classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc" kindref="member">popIter</ref>;</highlight></codeline>
<codeline lineno="429" refid="classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>queue&lt;vec&gt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af" kindref="member">improvesX</ref>;</highlight></codeline>
<codeline lineno="430" refid="classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>queue&lt;int&gt;<sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a" kindref="member">improvesP</ref>;</highlight></codeline>
<codeline lineno="431" refid="classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="432" refid="classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7" kindref="member">min_mutate</ref>;</highlight></codeline>
<codeline lineno="433" refid="classdifferential__evolution_1_1_de_optimizer_1a3dae73ea54686df165fc76d29be7aa58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a3dae73ea54686df165fc76d29be7aa58" kindref="member">max_mutate</ref>;</highlight></codeline>
<codeline lineno="434" refid="classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*<ref refid="classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50" kindref="member">isInt</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc" kindref="member">useNormal</ref>;</highlight></codeline>
<codeline lineno="437" refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90" kindref="member">sigma</ref>;</highlight></codeline>
<codeline lineno="438" refid="classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d" kindref="member">mean</ref>;</highlight></codeline>
<codeline lineno="439" refid="classdifferential__evolution_1_1_de_optimizer_1a10983927cb3fb32ef29b0e00d648cdc9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a10983927cb3fb32ef29b0e00d648cdc9" kindref="member">maxSigma</ref>;</highlight></codeline>
<codeline lineno="440" refid="classdifferential__evolution_1_1_de_optimizer_1ac59ec7255ba605669b82e5f06acfe580" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ac59ec7255ba605669b82e5f06acfe580" kindref="member">minSigma</ref>;</highlight></codeline>
<codeline lineno="441" refid="classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b" kindref="member">minSigmaVal</ref>;</highlight></codeline>
<codeline lineno="442" refid="classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d" kindref="member">meanHist</ref>;</highlight></codeline>
<codeline lineno="443" refid="classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148" kindref="member">meanHistIndex</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedifferential__evolution" kindref="compound">differential_evolution</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="451" refid="deoptimizer_8cpp_1aa394124712525387121d6045a579b805" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="deoptimizer_8cpp_1aa394124712525387121d6045a579b805" kindref="member">optimizeDE_C</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>runid,<sp/><ref refid="evaluator_8h_1af419da391481d5e767cbe038009da309" kindref="member">callback_type</ref><sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lower,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*upper,<sp/></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*init,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*sigma,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minSigma,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*ints,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxEvals,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>keep,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stopfitness,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>popsize,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CR,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_mutate,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_mutate,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>workers,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>guess(dim),<sp/>lower_limit(dim),<sp/>upper_limit(dim),<sp/>inputSigma(dim);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init<sp/>!=<sp/>NULL<sp/>and<sp/>sigma<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guess[i]<sp/>=<sp/>init[i];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputSigma[i]<sp/>=<sp/>sigma[i];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guess.resize(0);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputSigma.resize(0);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minSigma<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lower<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>upper<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_limit[i]<sp/>=<sp/>lower[i];</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_limit[i]<sp/>=<sp/>upper[i];</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_limit.resize(0);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_limit.resize(0);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_fitness" kindref="compound">Fitness</ref><sp/>fitfun(func,<sp/><ref refid="evaluator_8h_1ac05c49788a31e5f7cb8efbe8ca3b548e" kindref="member">noop_callback_par</ref>,<sp/>dim,<sp/>1,<sp/>lower_limit,<sp/>upper_limit);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref><sp/>opt(runid,<sp/>&amp;fitfun,<sp/>dim,<sp/>seed,<sp/>popsize,<sp/>maxEvals,<sp/>keep,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stopfitness,<sp/>F,<sp/>CR,<sp/>min_mutate,<sp/>max_mutate,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ints,<sp/>guess,<sp/>inputSigma,<sp/>minSigma);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(workers<sp/>&lt;=<sp/>1)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt.doOptimize();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt.do_optimize_delayed_update(workers);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>bestX<sp/>=<sp/>opt.getBestX();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bestY<sp/>=<sp/>opt.getBestValue();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res[i]<sp/>=<sp/>bestX[i];</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res[dim]<sp/>=<sp/>bestY;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res[dim<sp/>+<sp/>1]<sp/>=<sp/>fitfun.<ref refid="class_fitness_1aba60038eac4e0e15d995e57f4ba079e1" kindref="member">evaluations</ref>();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res[dim<sp/>+<sp/>2]<sp/>=<sp/>opt.getIterations();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res[dim<sp/>+<sp/>3]<sp/>=<sp/>opt.getStop();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="deoptimizer_8cpp_1a8af4088f11fb8bc902b5a17f4b3c67f4" refkind="member"><highlight class="normal">uintptr_t<sp/><ref refid="deoptimizer_8cpp_1a8af4088f11fb8bc902b5a17f4b3c67f4" kindref="member">initDE_C</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>runid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lower,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*upper,<sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*init,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*sigma,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minSigma,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*ints,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>keep,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>popsize,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CR,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_mutate,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_mutate)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>guess(dim),<sp/>lower_limit(dim),<sp/>upper_limit(dim),<sp/>inputSigma(dim);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init<sp/>!=<sp/>NULL<sp/>and<sp/>sigma<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guess[i]<sp/>=<sp/>init[i];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputSigma[i]<sp/>=<sp/>sigma[i];</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guess.resize(0);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputSigma.resize(0);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minSigma<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lower<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>upper<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_limit[i]<sp/>=<sp/>lower[i];</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_limit[i]<sp/>=<sp/>upper[i];</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_limit.resize(0);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper_limit.resize(0);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_fitness" kindref="compound">Fitness</ref>*<sp/>fitfun<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_fitness" kindref="compound">Fitness</ref>(<ref refid="evaluator_8h_1ad0943ebd623281f526e5aee2aa818895" kindref="member">noop_callback</ref>,<sp/><ref refid="evaluator_8h_1ac05c49788a31e5f7cb8efbe8ca3b548e" kindref="member">noop_callback_par</ref>,<sp/>dim,<sp/>1,<sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower_limit,<sp/>upper_limit);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref>*<sp/>opt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref>(runid,<sp/>fitfun,<sp/>dim,<sp/>seed,<sp/>popsize,<sp/>0,<sp/>keep,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DBL_MAX,<sp/>F,<sp/>CR,<sp/>min_mutate,<sp/>max_mutate,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ints,<sp/>guess,<sp/>inputSigma,<sp/>minSigma);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uintptr_t)<sp/>opt;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="deoptimizer_8cpp_1ab3fd3d1530a822a0b7a020d2b68a0406" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="deoptimizer_8cpp_1ab3fd3d1530a822a0b7a020d2b68a0406" kindref="member">destroyDE_C</ref>(uintptr_t<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref>*<sp/>opt<sp/>=<sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref>*)ptr;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_fitness" kindref="compound">Fitness</ref>*<sp/>fitfun<sp/>=<sp/>opt-&gt;getFitfun();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fitfun;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="deoptimizer_8cpp_1af3c55844c8d3850d96ddf517996fca30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="deoptimizer_8cpp_1af3c55844c8d3850d96ddf517996fca30" kindref="member">askDE_C</ref>(uintptr_t<sp/>ptr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref><sp/>*opt<sp/>=<sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref>*)<sp/>ptr;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>opt-&gt;getDim();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lamb<sp/>=<sp/>opt-&gt;getPopsize();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/>popX<sp/>=<sp/>opt-&gt;askAll();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_fitness" kindref="compound">Fitness</ref>*<sp/>fitfun<sp/>=<sp/>opt-&gt;getFitfun();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>lamb;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/>popX.col(p);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs[p<sp/>*<sp/>n<sp/>+<sp/>i]<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="deoptimizer_8cpp_1a913e842ff9af1d5b517e26a27696ab26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="deoptimizer_8cpp_1a913e842ff9af1d5b517e26a27696ab26" kindref="member">tellDE_C</ref>(uintptr_t<sp/>ptr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>ys)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref><sp/>*opt<sp/>=<sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref>*)<sp/>ptr;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lamb<sp/>=<sp/>opt-&gt;getPopsize();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>vals(lamb);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lamb;<sp/>i++)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals[i]<sp/>=<sp/>ys[i];</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>opt-&gt;tellAll(vals);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;getStop();</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="deoptimizer_8cpp_1af52980108e82b3df67f48b2efbda2755" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="deoptimizer_8cpp_1af52980108e82b3df67f48b2efbda2755" kindref="member">populationDE_C</ref>(uintptr_t<sp/>ptr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>xs)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref><sp/>*opt<sp/>=<sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref>*)<sp/>ptr;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>opt-&gt;getDim();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lamb<sp/>=<sp/>opt-&gt;getPopsize();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/>popX<sp/>=<sp/>opt-&gt;getPopulation();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>lamb;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/>popX.col(p);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>xs[p<sp/>*<sp/>dim<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;getStop();</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="deoptimizer_8cpp_1a57cc84b1da95b58421bcd567fb01f67b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="deoptimizer_8cpp_1a57cc84b1da95b58421bcd567fb01f67b" kindref="member">resultDE_C</ref>(uintptr_t<sp/>ptr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref><sp/>*opt<sp/>=<sp/>(<ref refid="classdifferential__evolution_1_1_de_optimizer" kindref="compound">DeOptimizer</ref>*)<sp/>ptr;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>bestX<sp/>=<sp/>opt-&gt;getBestX();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bestY<sp/>=<sp/>opt-&gt;getBestValue();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>bestX.size();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>bestX.size();<sp/>i++)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res[i]<sp/>=<sp/>bestX[i];</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>res[n]<sp/>=<sp/>bestY;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_fitness" kindref="compound">Fitness</ref>*<sp/>fitfun<sp/>=<sp/>opt-&gt;getFitfun();</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>res[n<sp/>+<sp/>1]<sp/>=<sp/>fitfun-&gt;<ref refid="class_fitness_1aba60038eac4e0e15d995e57f4ba079e1" kindref="member">evaluations</ref>();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>res[n<sp/>+<sp/>2]<sp/>=<sp/>opt-&gt;getIterations();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>res[n<sp/>+<sp/>3]<sp/>=<sp/>opt-&gt;getStop();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt-&gt;getStop();</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="_fcmaescpp/deoptimizer.cpp"/>
  </compounddef>
</doxygen>
