<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacefcmaes_1_1modecpp" kind="namespace" language="Python">
    <compoundname>fcmaes::modecpp</compoundname>
    <innerclass refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c" prot="public">fcmaes::modecpp::MODE_C</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacefcmaes_1_1modecpp_1a7983baf5cae97002769592e7d8e8643b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::modecpp.initMODE_C</definition>
        <argsstring></argsstring>
        <name>initMODE_C</name>
        <qualifiedname>fcmaes.modecpp.initMODE_C</qualifiedname>
        <initializer>=  libcmalib.initMODE_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="649" column="1" bodyfile="fcmaes/modecpp.py" bodystart="649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1modecpp_1aa26b72a8ba02fae562ed03e63087522b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::modecpp.argtypes</definition>
        <argsstring></argsstring>
        <name>argtypes</name>
        <qualifiedname>fcmaes.modecpp.argtypes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="650" column="1" bodyfile="fcmaes/modecpp.py" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1modecpp_1a23ec54ef3fec9755ffc5d870d9d73c7a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::modecpp.restype</definition>
        <argsstring></argsstring>
        <name>restype</name>
        <qualifiedname>fcmaes.modecpp.restype</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="655" column="1" bodyfile="fcmaes/modecpp.py" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1modecpp_1a8667a04257d49d4eabd9d64d0e8301a4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::modecpp.destroyMODE_C</definition>
        <argsstring></argsstring>
        <name>destroyMODE_C</name>
        <qualifiedname>fcmaes.modecpp.destroyMODE_C</qualifiedname>
        <initializer>=  libcmalib.destroyMODE_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="657" column="1" bodyfile="fcmaes/modecpp.py" bodystart="657" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a580bb3d8baef2a338186cac64df0ea45" compoundref="modecpp_8py" startline="423" endline="425">fcmaes.modecpp.MODE_C.__del__</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1modecpp_1a44851bd7f89116b8d2704123ae52b295" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::modecpp.askMODE_C</definition>
        <argsstring></argsstring>
        <name>askMODE_C</name>
        <qualifiedname>fcmaes.modecpp.askMODE_C</qualifiedname>
        <initializer>=  libcmalib.askMODE_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="660" column="1" bodyfile="fcmaes/modecpp.py" bodystart="660" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1" compoundref="modecpp_8py" startline="471" endline="485">fcmaes.modecpp.MODE_C.ask</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1modecpp_1a3f5c0d6338d68c18374d7fbcaeba9930" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::modecpp.tellMODE_C</definition>
        <argsstring></argsstring>
        <name>tellMODE_C</name>
        <qualifiedname>fcmaes.modecpp.tellMODE_C</qualifiedname>
        <initializer>=  libcmalib.tellMODE_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="663" column="1" bodyfile="fcmaes/modecpp.py" bodystart="663" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07" compoundref="modecpp_8py" startline="505" endline="519">fcmaes.modecpp.MODE_C.tell</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1modecpp_1a754aecb7c3cb6174c472f001c7b24e1f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::modecpp.tellMODE_switchC</definition>
        <argsstring></argsstring>
        <name>tellMODE_switchC</name>
        <qualifiedname>fcmaes.modecpp.tellMODE_switchC</qualifiedname>
        <initializer>=  libcmalib.tellMODE_switchC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="667" column="1" bodyfile="fcmaes/modecpp.py" bodystart="667" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a92426eb6d5a2f38b3a1218fd9479a1bc" compoundref="modecpp_8py" startline="542" endline="550">fcmaes.modecpp.MODE_C.tell_switch</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1modecpp_1ae6223aa5cb7a9c8f005870cb8f3c4d58" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::modecpp.populationMODE_C</definition>
        <argsstring></argsstring>
        <name>populationMODE_C</name>
        <qualifiedname>fcmaes.modecpp.populationMODE_C</qualifiedname>
        <initializer>=  libcmalib.populationMODE_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="671" column="1" bodyfile="fcmaes/modecpp.py" bodystart="671" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3433826fba507128212dc6dd455a7227" compoundref="modecpp_8py" startline="569" endline="583">fcmaes.modecpp.MODE_C.population</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1modecpp_1ad27774b75048f71df3a93ace96ffadf7" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::modecpp.setPopulationMODE_C</definition>
        <argsstring></argsstring>
        <name>setPopulationMODE_C</name>
        <qualifiedname>fcmaes.modecpp.setPopulationMODE_C</qualifiedname>
        <initializer>=  libcmalib.setPopulationMODE_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="674" column="1" bodyfile="fcmaes/modecpp.py" bodystart="674" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07" compoundref="modecpp_8py" startline="505" endline="519">fcmaes.modecpp.MODE_C.tell</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacefcmaes_1_1modecpp_1a1fc7328d1bfb4cc8c339722697ea5429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, np.ndarray]</type>
        <definition> Tuple[np.ndarray, np.ndarray] fcmaes.modecpp.minimize</definition>
        <argsstring>(Callable[[ArrayLike], ArrayLike] mofun, int nobj, int ncon, Bounds bounds, Optional[np.ndarray] guess=None, Optional[int] popsize=64, Optional[int] max_evaluations=100000, Optional[int] workers=1, Optional[float] f=0.5, Optional[float] cr=0.9, Optional[float] pro_c=0.5, Optional[float] dis_c=15.0, Optional[float] pro_m=0.9, Optional[float] dis_m=20.0, Optional[bool] nsga_update=True, Optional[int] pareto_update=0, Optional[ArrayLike] ints=None, Optional[float] min_mutate=0.1, Optional[float] max_mutate=0.5, Optional[Generator] rg=Generator(PCG64DXSM()), Optional[store] store=None, Optional[int] runid=0)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.modecpp.minimize</qualifiedname>
        <param>
          <type>Callable</type>
          <defname>mofun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>ArrayLike]</type>
          <declname>mofun</declname>
          <defname>nobj</defname>
        </param>
        <param>
          <type>int</type>
          <declname>nobj</declname>
          <defname>ncon</defname>
        </param>
        <param>
          <type>int</type>
          <declname>ncon</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Bounds</type>
          <declname>bounds</declname>
          <defname>guess</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>guess</declname>
          <defname>popsize</defname>
          <array>[np.ndarray]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <defname>max_evaluations</defname>
          <array>[int]</array>
          <defval>64</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <defname>workers</defname>
          <array>[int]</array>
          <defval>100000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <defname>f</defname>
          <array>[int]</array>
          <defval>1</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>f</declname>
          <defname>cr</defname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>cr</declname>
          <defname>pro_c</defname>
          <array>[float]</array>
          <defval>0.9</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pro_c</declname>
          <defname>dis_c</defname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>dis_c</declname>
          <defname>pro_m</defname>
          <array>[float]</array>
          <defval>15.0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pro_m</declname>
          <defname>dis_m</defname>
          <array>[float]</array>
          <defval>0.9</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>dis_m</declname>
          <defname>nsga_update</defname>
          <array>[float]</array>
          <defval>20.0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>nsga_update</declname>
          <defname>pareto_update</defname>
          <array>[bool]</array>
          <defval>True</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pareto_update</declname>
          <defname>ints</defname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>ints</declname>
          <defname>min_mutate</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>min_mutate</declname>
          <defname>max_mutate</defname>
          <array>[float]</array>
          <defval>0.1</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_mutate</declname>
          <defname>rg</defname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>rg</declname>
          <defname>store</defname>
          <array>[Generator]</array>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>store</declname>
          <defname>runid</defname>
          <array>[store]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>runid</declname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Minimizes a multi-objective optimization problem using evolutionary strategies. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements a multi-objective optimization routine that supports various configurations such as population size, mutation and crossover probabilities, and constraints. It provides options for parallel computation and supports custom random number generation. Additionally, results can be stored in the provided storage object if specified.</para>
<para><verbatim>   mofun (Callable[[ArrayLike], ArrayLike]): The objective function to be minimized.
       It must accept a single numpy array as input and return an array of objective
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>values.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objectives in the problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncon</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of constraints in the problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounds for the decision variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional initial guess for the decision variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the population. Defaults to 64. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of function evaluations allowed. Defaults to 100,000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of workers for parallel computation. Defaults to 1 (serial). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Differential weight used in mutation step. Defaults to 0.5. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cr</parametername>
</parameternamelist>
<parameterdescription>
<para>Crossover probability. Defaults to 0.9. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pro_c</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability of crossover operation. Defaults to 0.5. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis_c</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution index for crossover. Defaults to 15.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pro_m</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability of mutation. Defaults to 0.9. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis_m</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution index for mutation. Defaults to 20.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsga_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to apply NSGA-II updates. Defaults to True. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pareto_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Interval for Pareto front updates. Defaults to 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ints</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies which decision variables are integer-valued. Defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_mutate</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum mutation step size as fraction of variable range. Defaults to 0.1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_mutate</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum mutation step size as fraction of variable range. Defaults to 0.5. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator. Defaults to <computeroutput>Generator(PCG64DXSM())</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage object to store results if specified. Defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runid</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for the run. Can be used for logging or tracking. Defaults to 0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, np.ndarray]: A tuple containing the population of solutions (decision variable values) and their objective function values.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Exception</parametername>
</parameternamelist>
<parameterdescription>
<para>If any error occurs during the optimization process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="148" column="1" bodyfile="fcmaes/modecpp.py" bodystart="169" bodyend="187"/>
        <referencedby refid="namespacefcmaes_1_1modecpp_1ae779b2337bd3227701e148a6a6997a0a" compoundref="modecpp_8py" startline="294" endline="307">fcmaes.modecpp._retry_loop</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1modecpp_1aecf03e3039759695759cbf7f028546d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.modecpp.retry</definition>
        <argsstring>(Callable[[ArrayLike], ArrayLike] mofun, int nobj, int ncon, Bounds bounds, Optional[np.ndarray] guess=None, Optional[int] num_retries=64, Optional[int] popsize=64, Optional[int] max_evaluations=100000, Optional[int] workers=mp.cpu_count(), Optional[bool] nsga_update=False, Optional[int] pareto_update=0, Optional[ArrayLike] ints=None, Optional[int] capacity=None)</argsstring>
        <name>retry</name>
        <qualifiedname>fcmaes.modecpp.retry</qualifiedname>
        <param>
          <type>Callable</type>
          <defname>mofun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>ArrayLike]</type>
          <declname>mofun</declname>
          <defname>nobj</defname>
        </param>
        <param>
          <type>int</type>
          <declname>nobj</declname>
          <defname>ncon</defname>
        </param>
        <param>
          <type>int</type>
          <declname>ncon</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Bounds</type>
          <declname>bounds</declname>
          <defname>guess</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>guess</declname>
          <defname>num_retries</defname>
          <array>[np.ndarray]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>num_retries</declname>
          <defname>popsize</defname>
          <array>[int]</array>
          <defval>64</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <defname>max_evaluations</defname>
          <array>[int]</array>
          <defval>64</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <defname>workers</defname>
          <array>[int]</array>
          <defval>100000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <defname>nsga_update</defname>
          <array>[int]</array>
          <defval>mp.cpu_count()</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>nsga_update</declname>
          <defname>pareto_update</defname>
          <array>[bool]</array>
          <defval>False</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pareto_update</declname>
          <defname>ints</defname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>ints</declname>
          <defname>capacity</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>capacity</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Retries a multi-objective optimization process in parallel to optimize given objective functions and constraints. </para>
        </briefdescription>
        <detaileddescription>
<para>This function orchestrates the process of executing an optimization task multiple times across multiple workers, each working with different random seeds. It uses a population-based approach to iteratively search for optimal solutions for a given multi-objective problem, leveraging parallel computing to efficiently handle large workloads.</para>
<para><verbatim>   mofun (Callable[[ArrayLike], ArrayLike]): The objective function to optimize,
       mapping input parameters to objective and constraint values.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of objective functions in the optimization problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncon</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of constraints in the optimization problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounds for the decision variables. This defines the lower and upper bounds for optimization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess for the input variables. Default is None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_retries</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of retries allowed for each worker. <programlisting><codeline><highlight class="normal">Default<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>64.</highlight></codeline>
</programlisting> popsize (Optional[int]): The population size for the optimization algorithm. <programlisting><codeline><highlight class="normal">Default<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>64.</highlight></codeline>
</programlisting> max_evaluations (Optional[int]): Maximum number of function evaluations <programlisting><codeline><highlight class="normal">allowed.<sp/>Default<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>100000.</highlight></codeline>
</programlisting> workers (Optional[int]): Number of workers to run in parallel. If not specified, it defaults to the number of CPUs available on the machine. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsga_update</parametername>
</parameternamelist>
<parameterdescription>
<para>If True, enables an additional NSGA update step in the optimization. Default is False. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pareto_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency of updating the Pareto front during optimization. Default is 0 (no updates). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ints</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of decision variables that are integers. Default is None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Capacity of the storage system for maintaining results during optimization. If not provided, it defaults to 2048 times the population size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, np.ndarray]: A tuple containing:<itemizedlist>
<listitem><para>xs: The input configurations corresponding to the Pareto-optimal solutions.</para>
</listitem><listitem><para>ys: The objective and constraint evaluation results for the Pareto-optimal solutions. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="237" column="1" bodyfile="fcmaes/modecpp.py" bodystart="249" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1modecpp_1ae779b2337bd3227701e148a6a6997a0a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.modecpp._retry_loop</definition>
        <argsstring>(num_retries, pid, rgs, mofun, nobj, ncon, bounds, guess, popsize, max_evaluations, workers, nsga_update, pareto_update, store, ints)</argsstring>
        <name>_retry_loop</name>
        <qualifiedname>fcmaes.modecpp._retry_loop</qualifiedname>
        <param>
          <type>num_retries</type>
          <defname>num_retries</defname>
        </param>
        <param>
          <type>pid</type>
          <defname>pid</defname>
        </param>
        <param>
          <type>rgs</type>
          <defname>rgs</defname>
        </param>
        <param>
          <type>mofun</type>
          <defname>mofun</defname>
        </param>
        <param>
          <type>nobj</type>
          <defname>nobj</defname>
        </param>
        <param>
          <type>ncon</type>
          <defname>ncon</defname>
        </param>
        <param>
          <type>bounds</type>
          <defname>bounds</defname>
        </param>
        <param>
          <type>guess</type>
          <defname>guess</defname>
        </param>
        <param>
          <type>popsize</type>
          <defname>popsize</defname>
        </param>
        <param>
          <type>max_evaluations</type>
          <defname>max_evaluations</defname>
        </param>
        <param>
          <type>workers</type>
          <defname>workers</defname>
        </param>
        <param>
          <type>nsga_update</type>
          <defname>nsga_update</defname>
        </param>
        <param>
          <type>pareto_update</type>
          <defname>pareto_update</defname>
        </param>
        <param>
          <type><ref refid="classfcmaes_1_1mode_1_1store" kindref="compound">store</ref></type>
          <defname>store</defname>
        </param>
        <param>
          <type>ints</type>
          <defname>ints</defname>
        </param>
        <briefdescription>
<para>Executes a retry loop for parallel optimization tasks, ensuring multiple minimization attempts are conducted until a sufficient number of results are added to the storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_retries</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of retry attempts for the optimization loop. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>Process identifier used for dealing with random generators. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgs</parametername>
</parameternamelist>
<parameterdescription>
<para>List of random number generators for each process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mofun</parametername>
</parameternamelist>
<parameterdescription>
<para>Multi-objective function to be minimized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of objectives in the optimization problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncon</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of constraints in the optimization problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundaries for the decision variables in the optimization problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess values for the optimization variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Population size for the optimization algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of evaluations for each optimization attempt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of worker processes available for parallelization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsga_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback or function for handling NSGA updates during optimization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pareto_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback or function for managing Pareto updates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage object for managing results and tracking progress. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ints</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of decision variables that are integer-constrained. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="292" column="1" bodyfile="fcmaes/modecpp.py" bodystart="294" bodyend="307"/>
        <references refid="namespacefcmaes_1_1modecpp_1a1fc7328d1bfb4cc8c339722697ea5429" compoundref="modecpp_8py" startline="169" endline="187">fcmaes.modecpp.minimize</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="fcmaes/modecpp.py" line="1" column="1"/>
  </compounddef>
</doxygen>
