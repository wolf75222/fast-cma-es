<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="evaluator_8h" kind="file" language="C++">
    <compoundname>evaluator.h</compoundname>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">queue</includes>
    <includes local="no">mutex</includes>
    <includes local="no">thread</includes>
    <includes local="no">random</includes>
    <includes local="no">vector</includes>
    <includes local="no">chrono</includes>
    <includes local="no">condition_variable</includes>
    <includes local="yes">pcg_random.hpp</includes>
    <includedby refid="acmaesoptimizer_8cpp" local="yes">_fcmaescpp/acmaesoptimizer.cpp</includedby>
    <includedby refid="biteoptimizer_8cpp" local="yes">_fcmaescpp/biteoptimizer.cpp</includedby>
    <includedby refid="crfmnes_8cpp" local="yes">_fcmaescpp/crfmnes.cpp</includedby>
    <includedby refid="deoptimizer_8cpp" local="yes">_fcmaescpp/deoptimizer.cpp</includedby>
    <includedby refid="modeoptimizer_8cpp" local="yes">_fcmaescpp/modeoptimizer.cpp</includedby>
    <includedby refid="pgpe_8cpp" local="yes">_fcmaescpp/pgpe.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>_fcmaescpp/include/evaluator.h</label>
        <link refid="evaluator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Eigen/Core</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="11">
        <label>condition_variable</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>mutex</label>
      </node>
      <node id="12">
        <label>pcg_random.hpp</label>
      </node>
      <node id="5">
        <label>queue</label>
      </node>
      <node id="8">
        <label>random</label>
      </node>
      <node id="7">
        <label>thread</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>_fcmaescpp/acmaesoptimizer.cpp</label>
        <link refid="acmaesoptimizer_8cpp"/>
      </node>
      <node id="3">
        <label>_fcmaescpp/biteoptimizer.cpp</label>
        <link refid="biteoptimizer_8cpp"/>
      </node>
      <node id="4">
        <label>_fcmaescpp/crfmnes.cpp</label>
        <link refid="crfmnes_8cpp"/>
      </node>
      <node id="5">
        <label>_fcmaescpp/deoptimizer.cpp</label>
        <link refid="deoptimizer_8cpp"/>
      </node>
      <node id="1">
        <label>_fcmaescpp/include/evaluator.h</label>
        <link refid="evaluator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>_fcmaescpp/modeoptimizer.cpp</label>
        <link refid="modeoptimizer_8cpp"/>
      </node>
      <node id="7">
        <label>_fcmaescpp/pgpe.cpp</label>
        <link refid="pgpe_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classblocking__queue" prot="public">blocking_queue</innerclass>
    <innerclass refid="struct_index_val" prot="public">IndexVal</innerclass>
    <innerclass refid="class_fitness" prot="public">Fitness</innerclass>
    <innerclass refid="structvec__id" prot="public">vec_id</innerclass>
    <innerclass refid="classevaluator" prot="public">evaluator</innerclass>
    <innerclass refid="classevaluator_1_1evaluator__job" prot="private">evaluator::evaluator_job</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="evaluator_8h_1ab911b458d875aed088497f4823d543ae" prot="public" static="no">
        <name>EIGEN_VECTORIZE_SSE2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="24" column="9" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="24" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="evaluator_8h_1a19bfb27380067c74ae297dd7dad5fb37" prot="public" static="no">
        <type>std::chrono::steady_clock</type>
        <definition>using Clock =  std::chrono::steady_clock</definition>
        <argsstring></argsstring>
        <name>Clock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="27" column="1" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;double, Eigen::Dynamic, 1&gt; vec</definition>
        <argsstring></argsstring>
        <name>vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="77" column="23" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="evaluator_8h_1aa45a218a6a9d424e78898121d21f082d" prot="public" static="no">
        <type>Eigen::Matrix&lt; int, Eigen::Dynamic, 1 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;int, Eigen::Dynamic, 1&gt; ivec</definition>
        <argsstring></argsstring>
        <name>ivec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="78" column="23" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="evaluator_8h_1af0f7533253586ad2aba962e9537d90bc" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>typedef Eigen::Matrix&lt;double, Eigen::Dynamic, Eigen::Dynamic&gt; mat</definition>
        <argsstring></argsstring>
        <name>mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="79" column="23" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="evaluator_8h_1abf39fef19e3ec51cce88f380c3370bff" prot="public" static="no">
        <type>Eigen::Matrix&lt; int, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>typedef Eigen::Matrix&lt;int, Eigen::Dynamic, Eigen::Dynamic&gt; imat</definition>
        <argsstring></argsstring>
        <name>imat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="80" column="23" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="evaluator_8h_1af419da391481d5e767cbe038009da309" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* callback_type) (int, const double *, double *)</definition>
        <argsstring>)(int, const double *, double *)</argsstring>
        <name>callback_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="82" column="9" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="evaluator_8h_1a1adc681c70e547867358d25d5cf7eedc" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* callback_parallel) (int, int, double *, double *)</definition>
        <argsstring>)(int, int, double *, double *)</argsstring>
        <name>callback_parallel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="84" column="9" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="84" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" prot="public" static="yes" mutable="no">
        <type>std::uniform_real_distribution</type>
        <definition>std::uniform_real_distribution distr_01</definition>
        <argsstring></argsstring>
        <name>distr_01</name>
        <initializer>=
        std::uniform_real_distribution&lt;&gt;(0, 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="93" column="9" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="93" bodyend="-1"/>
        <referencedby refid="evaluator_8h_1a0007d50439e7d7122b6dd54d05c7c45b" compoundref="evaluator_8h" startline="122" endline="124">rand01</referencedby>
        <referencedby refid="evaluator_8h_1a3f89a72cbd8f38570fbb77117bdc7cbb" compoundref="evaluator_8h" startline="126" endline="128">randInt</referencedby>
        <referencedby refid="classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b" compoundref="deoptimizer_8cpp" startline="97" endline="99">differential_evolution::DeOptimizer::rnd01</referencedby>
        <referencedby refid="classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69" compoundref="deoptimizer_8cpp" startline="101" endline="103">differential_evolution::DeOptimizer::rndInt</referencedby>
        <referencedby refid="class_fitness_1a517d31dc4378bfb8d94db9ccedaf948b" compoundref="evaluator_8h" startline="303" endline="307">Fitness::sample_i</referencedby>
        <referencedby refid="class_fitness_1a34d84883637889310f026e2aed3d1bf3" compoundref="evaluator_8h" startline="309" endline="311">Fitness::sample_i</referencedby>
        <referencedby refid="evaluator_8h_1ad408c1ac0c479863b2d1291c483c5593" compoundref="evaluator_8h" startline="110" endline="114">uniform</referencedby>
        <referencedby refid="evaluator_8h_1a28d3e754a2edfdf68753c5562acd87d0" compoundref="evaluator_8h" startline="116" endline="120">uniformVec</referencedby>
      </memberdef>
      <memberdef kind="variable" id="evaluator_8h_1a74490c9b525b6b9b79b11e2d0f2fc0be" prot="public" static="yes" mutable="no">
        <type>std::normal_distribution</type>
        <definition>std::normal_distribution gauss_01</definition>
        <argsstring></argsstring>
        <name>gauss_01</name>
        <initializer>= std::normal_distribution&lt;&gt;(0, 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="96" column="9" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="96" bodyend="-1"/>
        <referencedby refid="evaluator_8h_1a231544ac51b3f9312c104a3b7a3c49a6" compoundref="evaluator_8h" startline="98" endline="102">normal</referencedby>
        <referencedby refid="evaluator_8h_1a5b652df2286e1f0c4dae7d4dd841bb8f" compoundref="evaluator_8h" startline="104" endline="108">normalVec</referencedby>
        <referencedby refid="evaluator_8h_1aa3d770d0f4bda035e2cc8c6f5c1b0aee" compoundref="evaluator_8h" startline="130" endline="132">normreal</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="evaluator_8h_1ad0943ebd623281f526e5aee2aa818895" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool noop_callback</definition>
        <argsstring>(int popsize, const double *x, double *y)</argsstring>
        <name>noop_callback</name>
        <param>
          <type>int</type>
          <declname>popsize</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="86" column="13" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="86" bodyend="88"/>
        <referencedby refid="acmaesoptimizer_8cpp_1ab128d45080b4023edb28550611997afe" compoundref="acmaesoptimizer_8cpp" startline="606" endline="634">initACMA_C</referencedby>
        <referencedby refid="crfmnes_8cpp_1a8ad70c1b6cadd1ed7b3bfa0d60d96911" compoundref="crfmnes_8cpp" startline="405" endline="430">initCRFMNES_C</referencedby>
        <referencedby refid="deoptimizer_8cpp_1a8af4088f11fb8bc902b5a17f4b3c67f4" compoundref="deoptimizer_8cpp" startline="503" endline="537">initDE_C</referencedby>
        <referencedby refid="modeoptimizer_8cpp_1a53418a6215cc2512fc8379c813113f7f" compoundref="modeoptimizer_8cpp" startline="583" endline="604">initMODE_C</referencedby>
        <referencedby refid="pgpe_8cpp_1a15e7e7ada6ad4ab26263681ac00ac55b" compoundref="pgpe_8cpp" startline="358" endline="388">initPGPE_C</referencedby>
        <referencedby refid="crfmnes_8cpp_1a9081791c22cd931e965641b985273b52" compoundref="crfmnes_8cpp" startline="365" endline="403">optimizeCRFMNES_C</referencedby>
        <referencedby refid="pgpe_8cpp_1a83f6d1c91509d2c28e236afbea4bd172" compoundref="pgpe_8cpp" startline="306" endline="356">optimizePGPE_C</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1ac05c49788a31e5f7cb8efbe8ca3b548e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void noop_callback_par</definition>
        <argsstring>(int popsize, int dim, double *x, double *y)</argsstring>
        <name>noop_callback_par</name>
        <param>
          <type>int</type>
          <declname>popsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="90" column="13" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="90" bodyend="91"/>
        <referencedby refid="acmaesoptimizer_8cpp_1ab128d45080b4023edb28550611997afe" compoundref="acmaesoptimizer_8cpp" startline="606" endline="634">initACMA_C</referencedby>
        <referencedby refid="crfmnes_8cpp_1a8ad70c1b6cadd1ed7b3bfa0d60d96911" compoundref="crfmnes_8cpp" startline="405" endline="430">initCRFMNES_C</referencedby>
        <referencedby refid="deoptimizer_8cpp_1a8af4088f11fb8bc902b5a17f4b3c67f4" compoundref="deoptimizer_8cpp" startline="503" endline="537">initDE_C</referencedby>
        <referencedby refid="modeoptimizer_8cpp_1a53418a6215cc2512fc8379c813113f7f" compoundref="modeoptimizer_8cpp" startline="583" endline="604">initMODE_C</referencedby>
        <referencedby refid="pgpe_8cpp_1a15e7e7ada6ad4ab26263681ac00ac55b" compoundref="pgpe_8cpp" startline="358" endline="388">initPGPE_C</referencedby>
        <referencedby refid="biteoptimizer_8cpp_1a3a44f6d1b82c40e137d534553af547b1" compoundref="biteoptimizer_8cpp" startline="126" endline="158">optimizeBite_C</referencedby>
        <referencedby refid="deoptimizer_8cpp_1aa394124712525387121d6045a579b805" compoundref="deoptimizer_8cpp" startline="451" endline="501">optimizeDE_C</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a231544ac51b3f9312c104a3b7a3c49a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>static Eigen::MatrixXd normal</definition>
        <argsstring>(int dx, int dy, pcg64 &amp;rs)</argsstring>
        <name>normal</name>
        <param>
          <type>int</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>pcg64 &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="98" column="24" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="98" bodyend="102"/>
        <references refid="evaluator_8h_1a74490c9b525b6b9b79b11e2d0f2fc0be" compoundref="evaluator_8h" startline="96">gauss_01</references>
        <referencedby refid="classfcmaes_1_1de_1_1_d_e_1adf6645de9d62c0900bad93d5a6934a4b" compoundref="de_8py" startline="775" endline="783">fcmaes.de.DE._sample</referencedby>
        <referencedby refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a8eb775858ef6da65ce5d71629503e622" compoundref="mode_8py" startline="799" endline="804">fcmaes.mode.MODE._sample</referencedby>
        <referencedby refid="classcrmfnes_1_1_crfmnes_optimizer_1ac3695788414c855140e6615040309e42" compoundref="crfmnes_8cpp" startline="141" endline="153">crmfnes::CrfmnesOptimizer::ask</referencedby>
        <referencedby refid="classpgpe_1_1_p_g_p_e_optimizer_1a431dca3f8ed9c12e85c449474001930c" compoundref="pgpe_8cpp" startline="181" endline="193">pgpe::PGPEOptimizer::ask</referencedby>
        <referencedby refid="classacmaes_1_1_acmaes_optimizer_1ae6ef63f98f9b5b9034438301df2ca323" compoundref="acmaesoptimizer_8cpp" startline="280" endline="290">acmaes::AcmaesOptimizer::ask_all</referencedby>
        <referencedby refid="classexamples_1_1rover_1_1_rover_domain_1a5fc4dbfdeeeb45e828c2db21fe2eb908" compoundref="rover_8py" startline="136" endline="140">examples.rover.RoverDomain.set_params</referencedby>
        <referencedby refid="classacmaes_1_1_acmaes_optimizer_1ac1703b5f2c650cf8da235ea475e17d6f" compoundref="acmaesoptimizer_8cpp" startline="324" endline="344">acmaes::AcmaesOptimizer::tell</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a5b652df2286e1f0c4dae7d4dd841bb8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>static Eigen::MatrixXd normalVec</definition>
        <argsstring>(int dim, pcg64 &amp;rs)</argsstring>
        <name>normalVec</name>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>pcg64 &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="104" column="24" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="104" bodyend="108"/>
        <references refid="evaluator_8h_1a74490c9b525b6b9b79b11e2d0f2fc0be" compoundref="evaluator_8h" startline="96">gauss_01</references>
        <referencedby refid="classacmaes_1_1_acmaes_optimizer_1a76117dfd997b8f098304f5d4f0fbf52e" compoundref="acmaesoptimizer_8cpp" startline="315" endline="322">acmaes::AcmaesOptimizer::ask</referencedby>
        <referencedby refid="classcrmfnes_1_1_crfmnes_optimizer_1a05253e344b7c87ba83627a8b15bf384b" compoundref="crfmnes_8cpp" startline="43" endline="85">crmfnes::CrfmnesOptimizer::CrfmnesOptimizer</referencedby>
        <referencedby refid="evaluator_8h_1a26c726f0e49c18836df96a8489dc9147" compoundref="evaluator_8h" startline="134" endline="137">normalVec</referencedby>
        <referencedby refid="classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf" compoundref="deoptimizer_8cpp" startline="105" endline="110">differential_evolution::DeOptimizer::sample</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1ad408c1ac0c479863b2d1291c483c5593" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>static Eigen::MatrixXd uniform</definition>
        <argsstring>(int dx, int dy, pcg64 &amp;rs)</argsstring>
        <name>uniform</name>
        <param>
          <type>int</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>pcg64 &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="110" column="24" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="110" bodyend="114"/>
        <references refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" compoundref="evaluator_8h" startline="93">distr_01</references>
        <referencedby refid="classfcmaes_1_1de_1_1_d_e_1a61072489f9cd73c41286fbaf8d89357b" compoundref="de_8py" startline="820" endline="831">fcmaes.de.DE._modifier</referencedby>
        <referencedby refid="classfcmaes_1_1mode_1_1_m_o_d_e_1ab6f842a65bbcbab7bc6821c25737d0aa" compoundref="mode_8py" startline="838" endline="849">fcmaes.mode.MODE._modifier</referencedby>
        <referencedby refid="namespacefcmaes_1_1pygmoretry_1a9ee4304fb34177166a0d9bcfd176c179" compoundref="pygmoretry_8py" startline="151" endline="170">fcmaes.pygmoretry._retry_loop</referencedby>
        <referencedby refid="classfcmaes_1_1de_1_1_d_e_1adf6645de9d62c0900bad93d5a6934a4b" compoundref="de_8py" startline="775" endline="783">fcmaes.de.DE._sample</referencedby>
        <referencedby refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a8eb775858ef6da65ce5d71629503e622" compoundref="mode_8py" startline="799" endline="804">fcmaes.mode.MODE._sample</referencedby>
        <referencedby refid="classfcmaes_1_1advretry_1_1_store_1a879e1014d958865e37c48d5d271c8dc6" compoundref="advretry_8py" startline="592" endline="608">fcmaes.advretry.Store.crossover</referencedby>
        <referencedby refid="classfcmaes_1_1advretry_1_1_store_1ab543494f5cc2e6a7f877ca8cb0e35591" compoundref="advretry_8py" startline="529" endline="546">fcmaes.advretry.Store.limits</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a28d3e754a2edfdf68753c5562acd87d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>static Eigen::MatrixXd uniformVec</definition>
        <argsstring>(int dim, pcg64 &amp;rs)</argsstring>
        <name>uniformVec</name>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>pcg64 &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="116" column="24" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="116" bodyend="120"/>
        <references refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" compoundref="evaluator_8h" startline="93">distr_01</references>
        <referencedby refid="class_fitness_1a0bfcc395cf728a4b91e740f4197f927b" compoundref="evaluator_8h" startline="291" endline="296">Fitness::sample</referencedby>
        <referencedby refid="class_fitness_1ae05d628784c7ca1954d012f23e82abf5" compoundref="evaluator_8h" startline="298" endline="301">Fitness::sample</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a0455034273652829d554dd3858b4b6e1" compoundref="modeoptimizer_8cpp" startline="115" endline="169">mode_optimizer::MoDeOptimizer::variation</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a0007d50439e7d7122b6dd54d05c7c45b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double rand01</definition>
        <argsstring>(pcg64 &amp;rs)</argsstring>
        <name>rand01</name>
        <param>
          <type>pcg64 &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="122" column="15" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="122" bodyend="124"/>
        <references refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" compoundref="evaluator_8h" startline="93">distr_01</references>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1af3c43901c39d8ee6f6ec5fb1d02f327e" compoundref="modeoptimizer_8cpp" startline="210" endline="224">mode_optimizer::MoDeOptimizer::modify</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1ae0edab6fb47d84a669d402f893ff4b6f" compoundref="modeoptimizer_8cpp" startline="171" endline="208">mode_optimizer::MoDeOptimizer::nextX</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a0455034273652829d554dd3858b4b6e1" compoundref="modeoptimizer_8cpp" startline="115" endline="169">mode_optimizer::MoDeOptimizer::variation</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a3f89a72cbd8f38570fbb77117bdc7cbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int randInt</definition>
        <argsstring>(pcg64 &amp;rs, int max)</argsstring>
        <name>randInt</name>
        <param>
          <type>pcg64 &amp;</type>
          <declname>rs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="126" column="12" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="126" bodyend="128"/>
        <references refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" compoundref="evaluator_8h" startline="93">distr_01</references>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1ae0edab6fb47d84a669d402f893ff4b6f" compoundref="modeoptimizer_8cpp" startline="171" endline="208">mode_optimizer::MoDeOptimizer::nextX</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1aa3d770d0f4bda035e2cc8c6f5c1b0aee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double normreal</definition>
        <argsstring>(pcg64 &amp;rs, double mu, double sdev)</argsstring>
        <name>normreal</name>
        <param>
          <type>pcg64 &amp;</type>
          <declname>rs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sdev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="130" column="15" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="130" bodyend="132"/>
        <references refid="evaluator_8h_1a74490c9b525b6b9b79b11e2d0f2fc0be" compoundref="evaluator_8h" startline="96">gauss_01</references>
        <referencedby refid="classdifferential__evolution_1_1_de_optimizer_1a427ae953a5503dc4369da1bbb338fe67" compoundref="deoptimizer_8cpp" startline="112" endline="117">differential_evolution::DeOptimizer::sample_i</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a26c726f0e49c18836df96a8489dc9147" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref></type>
        <definition>static vec normalVec</definition>
        <argsstring>(const vec &amp;mean, const vec &amp;sdev, int dim, pcg64 &amp;rs)</argsstring>
        <name>normalVec</name>
        <param>
          <type>const <ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref> &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>const <ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref> &amp;</type>
          <declname>sdev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>pcg64 &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="134" column="12" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="134" bodyend="137"/>
        <references refid="evaluator_8h_1a5b652df2286e1f0c4dae7d4dd841bb8f" compoundref="evaluator_8h" startline="104" endline="108">normalVec</references>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a909812174fa9829bc49f6e00edb00b90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref></type>
        <definition>static vec zeros</definition>
        <argsstring>(int n)</argsstring>
        <name>zeros</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="139" column="12" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="139" bodyend="141"/>
        <referencedby refid="classacmaes_1_1_acmaes_optimizer_1a1a141c42370061770c70d35a2e72e22f" compoundref="acmaesoptimizer_8cpp" startline="56" endline="174">acmaes::AcmaesOptimizer::AcmaesOptimizer</referencedby>
        <referencedby refid="classpgpe_1_1_a_d_a_m_1adb338e468abbeabd2afd13d4d676b205" compoundref="pgpe_8cpp" startline="38" endline="49">pgpe::ADAM::ADAM</referencedby>
        <referencedby refid="classcrmfnes_1_1_crfmnes_optimizer_1a05253e344b7c87ba83627a8b15bf384b" compoundref="crfmnes_8cpp" startline="43" endline="85">crmfnes::CrfmnesOptimizer::CrfmnesOptimizer</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a6ef6cfaa4da734c923fcdbf8692875f5" compoundref="modeoptimizer_8cpp" startline="226" endline="248">mode_optimizer::MoDeOptimizer::crowd_dist</referencedby>
        <referencedby refid="classdifferential__evolution_1_1_de_optimizer_1a4a4034e862bdd75aead3dd069ec36583" compoundref="deoptimizer_8cpp" startline="353" endline="370">differential_evolution::DeOptimizer::init</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a3762607fa33f7bb558fd7aae9690fc37" compoundref="modeoptimizer_8cpp" startline="326" endline="386">mode_optimizer::MoDeOptimizer::pareto</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a10363d0716952c74500da8ca679dc95b" compoundref="modeoptimizer_8cpp" startline="264" endline="288">mode_optimizer::MoDeOptimizer::pareto_levels</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a7d415b38158a793f2a2d666e921d838b" compoundref="modeoptimizer_8cpp" startline="302" endline="324">mode_optimizer::MoDeOptimizer::ranks</referencedby>
        <referencedby refid="classcrmfnes_1_1_crfmnes_optimizer_1aae1806b3f5cca0f2f27363c38c83a836" compoundref="crfmnes_8cpp" startline="155" endline="262">crmfnes::CrfmnesOptimizer::tell</referencedby>
        <referencedby refid="class_fitness_1a233793c918d3978ec0e52ef8431102b6" compoundref="evaluator_8h" startline="371" endline="382">Fitness::violations</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1ae5c3f13d61f9d2fc9daf17f7c1c56c98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref></type>
        <definition>static mat zeros</definition>
        <argsstring>(int n, int m)</argsstring>
        <name>zeros</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="143" column="12" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a493b3a74ec3481711548e4b506b009cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref></type>
        <definition>static vec constant</definition>
        <argsstring>(int n, double val)</argsstring>
        <name>constant</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="147" column="12" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="147" bodyend="149"/>
        <referencedby refid="classpgpe_1_1_a_d_a_m_1adb338e468abbeabd2afd13d4d676b205" compoundref="pgpe_8cpp" startline="38" endline="49">pgpe::ADAM::ADAM</referencedby>
        <referencedby refid="classpgpe_1_1_p_g_p_e_optimizer_1aedf86311561b4c064c713229e9fff837" compoundref="pgpe_8cpp" startline="147" endline="171">pgpe::PGPEOptimizer::compute_reinforce_update</referencedby>
        <referencedby refid="classcrmfnes_1_1_crfmnes_optimizer_1a05253e344b7c87ba83627a8b15bf384b" compoundref="crfmnes_8cpp" startline="43" endline="85">crmfnes::CrfmnesOptimizer::CrfmnesOptimizer</referencedby>
        <referencedby refid="classevaluator_1a39a80a3c8535b71a004ef2b395015ade" compoundref="evaluator_8h" startline="449" endline="464">evaluator::execute</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a5e864a8ba16fb9f3ab38260f7cbfa773" compoundref="modeoptimizer_8cpp" startline="487" endline="498">mode_optimizer::MoDeOptimizer::init</referencedby>
        <referencedby refid="classcrmfnes_1_1_crfmnes_optimizer_1aae1806b3f5cca0f2f27363c38c83a836" compoundref="crfmnes_8cpp" startline="155" endline="262">crmfnes::CrfmnesOptimizer::tell</referencedby>
        <referencedby refid="classpgpe_1_1_a_d_a_m_1a6023c4206a0929ea3b8f907d09081af1" compoundref="pgpe_8cpp" startline="51" endline="67">pgpe::ADAM::update</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1af16be3da823298a97b79f99d38769f75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref></type>
        <definition>static mat constant</definition>
        <argsstring>(int n, int m, double val)</argsstring>
        <name>constant</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="151" column="12" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a85426eb5cecc23caa06090d795034e5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool compareIndexVal</definition>
        <argsstring>(IndexVal i1, IndexVal i2)</argsstring>
        <name>compareIndexVal</name>
        <param>
          <type><ref refid="struct_index_val" kindref="compound">IndexVal</ref></type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="struct_index_val" kindref="compound">IndexVal</ref></type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="160" column="13" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="160" bodyend="162"/>
        <references refid="struct_index_val_1a912365899c31aab0e77ec045f32a0b42" compoundref="evaluator_8h" startline="157">IndexVal::val</references>
        <referencedby refid="evaluator_8h_1a7689f88ea48c85c22d9b34208decd67c" compoundref="evaluator_8h" startline="164" endline="175">sort_index</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a7689f88ea48c85c22d9b34208decd67c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="daoptimizer_8cpp_1aa45a218a6a9d424e78898121d21f082d" kindref="member">ivec</ref></type>
        <definition>static ivec sort_index</definition>
        <argsstring>(const vec &amp;x)</argsstring>
        <name>sort_index</name>
        <param>
          <type>const <ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="164" column="13" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="164" bodyend="175"/>
        <references refid="evaluator_8h_1a85426eb5cecc23caa06090d795034e5c" compoundref="evaluator_8h" startline="160" endline="162">compareIndexVal</references>
        <references refid="struct_index_val_1a22dbaf9b662c668008e740239224f208" compoundref="evaluator_8h" startline="156">IndexVal::index</references>
        <references refid="struct_index_val_1a912365899c31aab0e77ec045f32a0b42" compoundref="evaluator_8h" startline="157">IndexVal::val</references>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a6ef6cfaa4da734c923fcdbf8692875f5" compoundref="modeoptimizer_8cpp" startline="226" endline="248">mode_optimizer::MoDeOptimizer::crowd_dist</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a1d4ce60e415e141efaef2728d9952933" compoundref="modeoptimizer_8cpp" startline="290" endline="300">mode_optimizer::MoDeOptimizer::objranks</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a3762607fa33f7bb558fd7aae9690fc37" compoundref="modeoptimizer_8cpp" startline="326" endline="386">mode_optimizer::MoDeOptimizer::pareto</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a8941e256d6ff3843da336b4473513363" compoundref="modeoptimizer_8cpp" startline="397" endline="451">mode_optimizer::MoDeOptimizer::pop_update</referencedby>
        <referencedby refid="classpgpe_1_1_p_g_p_e_optimizer_1a94f0a09e1ac629bc2daa0782f0b78b7a" compoundref="pgpe_8cpp" startline="135" endline="145">pgpe::PGPEOptimizer::process_scores</referencedby>
        <referencedby refid="classmode__optimizer_1_1_mo_de_optimizer_1a7d415b38158a793f2a2d666e921d838b" compoundref="modeoptimizer_8cpp" startline="302" endline="324">mode_optimizer::MoDeOptimizer::ranks</referencedby>
        <referencedby refid="classcrmfnes_1_1_crfmnes_optimizer_1a914d39cf65f7277f14b0ed3cbf4e0d73" compoundref="crfmnes_8cpp" startline="290" endline="309">crmfnes::CrfmnesOptimizer::sort_indices_by</referencedby>
        <referencedby refid="classacmaes_1_1_acmaes_optimizer_1a36c0bd51d20f3c63e8cadf76421fc5d4" compoundref="acmaesoptimizer_8cpp" startline="346" endline="422">acmaes::AcmaesOptimizer::updateCMA</referencedby>
        <referencedby refid="classacmaes_1_1_acmaes_optimizer_1a911e67d9e8445b3a8be575f184341b8e" compoundref="acmaesoptimizer_8cpp" startline="201" endline="242">acmaes::AcmaesOptimizer::updateCovariance</referencedby>
      </memberdef>
      <memberdef kind="function" id="evaluator_8h_1a5f25c709f7baaf3ad28d4523f16fa93e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int index_min</definition>
        <argsstring>(vec &amp;v)</argsstring>
        <name>index_min</name>
        <param>
          <type><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/evaluator.h" line="177" column="12" bodyfile="_fcmaescpp/include/evaluator.h" bodystart="177" bodyend="187"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>evaluator.hpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Jul<sp/>12,<sp/>2021</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Dietmar<sp/>Wolz</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EVALUATOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVALUATOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;condition_variable&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="evaluator_8h_1ab911b458d875aed088497f4823d543ae" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EIGEN_VECTORIZE_SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pcg_random.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="evaluator_8h_1a19bfb27380067c74ae297dd7dad5fb37" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="evaluator_8h_1a19bfb27380067c74ae297dd7dad5fb37" kindref="member">Clock</ref><sp/>=<sp/>std::chrono::steady_clock;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::chrono::time_point;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::chrono::duration_cast;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::chrono::milliseconds;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="33" refid="classblocking__queue" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classblocking__queue_1aa80c0526fd4282dbd3a537e050f45757" kindref="member">blocking_queue</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36" refid="classblocking__queue_1a2c33ed2e7a23141fd39cce581856876c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classblocking__queue_1a2c33ed2e7a23141fd39cce581856876c" kindref="member">_capacity</ref>;</highlight></codeline>
<codeline lineno="37" refid="classblocking__queue_1a8f6f27d4596ce964f00897ebeeafa992" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::queue&lt;T&gt;<sp/><ref refid="classblocking__queue_1a8f6f27d4596ce964f00897ebeeafa992" kindref="member">_queue</ref>;</highlight></codeline>
<codeline lineno="38" refid="classblocking__queue_1a13f1090b20fcc4c35c45c89c16af5c17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::mutex<sp/><ref refid="classblocking__queue_1a13f1090b20fcc4c35c45c89c16af5c17" kindref="member">_mutex</ref>;</highlight></codeline>
<codeline lineno="39" refid="classblocking__queue_1a3b8b273812e1cc86624b5f6820c56dc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::condition_variable<sp/><ref refid="classblocking__queue_1a3b8b273812e1cc86624b5f6820c56dc2" kindref="member">_not_full</ref>;</highlight></codeline>
<codeline lineno="40" refid="classblocking__queue_1a35fddf01ee4f71752ab9e8e1ad1a2938" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::condition_variable<sp/><ref refid="classblocking__queue_1a35fddf01ee4f71752ab9e8e1ad1a2938" kindref="member">_not_empty</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43" refid="classblocking__queue_1aa80c0526fd4282dbd3a537e050f45757" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classblocking__queue_1aa80c0526fd4282dbd3a537e050f45757" kindref="member">blocking_queue</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity)<sp/>:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classblocking__queue_1a2c33ed2e7a23141fd39cce581856876c" kindref="member">_capacity</ref>(capacity)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classblocking__queue_1a33cda0a4f4daedc90e64d9761e826575" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classblocking__queue_1a33cda0a4f4daedc90e64d9761e826575" kindref="member">size</ref>()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(<ref refid="classblocking__queue_1a13f1090b20fcc4c35c45c89c16af5c17" kindref="member">_mutex</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classblocking__queue_1a8f6f27d4596ce964f00897ebeeafa992" kindref="member">_queue</ref>.size();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Inserts<sp/>the<sp/>specified<sp/>element<sp/>into<sp/>this<sp/>queue,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>waiting<sp/>if<sp/>necessary<sp/>for<sp/>space<sp/>to<sp/>become<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classblocking__queue_1a092ad63d2f69ac2d669a91c21fb2eb37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classblocking__queue_1a092ad63d2f69ac2d669a91c21fb2eb37" kindref="member">put</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;elem)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(<ref refid="classblocking__queue_1a13f1090b20fcc4c35c45c89c16af5c17" kindref="member">_mutex</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classblocking__queue_1a8f6f27d4596ce964f00897ebeeafa992" kindref="member">_queue</ref>.size()<sp/>&gt;=<sp/><ref refid="classblocking__queue_1a2c33ed2e7a23141fd39cce581856876c" kindref="member">_capacity</ref>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classblocking__queue_1a3b8b273812e1cc86624b5f6820c56dc2" kindref="member">_not_full</ref>.wait(lock);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classblocking__queue_1a8f6f27d4596ce964f00897ebeeafa992" kindref="member">_queue</ref>.push(elem);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classblocking__queue_1a35fddf01ee4f71752ab9e8e1ad1a2938" kindref="member">_not_empty</ref>.notify_one();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieves<sp/>and<sp/>removes<sp/>the<sp/>head<sp/>of<sp/>this<sp/>queue,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>waiting<sp/>if<sp/>necessary<sp/>until<sp/>an<sp/>element<sp/>becomes<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classblocking__queue_1af79de0306312960a6818b90ffbcee65a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classblocking__queue_1af79de0306312960a6818b90ffbcee65a" kindref="member">take</ref>()<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(<ref refid="classblocking__queue_1a13f1090b20fcc4c35c45c89c16af5c17" kindref="member">_mutex</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classblocking__queue_1a8f6f27d4596ce964f00897ebeeafa992" kindref="member">_queue</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classblocking__queue_1a35fddf01ee4f71752ab9e8e1ad1a2938" kindref="member">_not_empty</ref>.wait(lock);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>&amp;front<sp/>=<sp/><ref refid="classblocking__queue_1a8f6f27d4596ce964f00897ebeeafa992" kindref="member">_queue</ref>.front();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classblocking__queue_1a8f6f27d4596ce964f00897ebeeafa992" kindref="member">_queue</ref>.pop();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classblocking__queue_1a3b8b273812e1cc86624b5f6820c56dc2" kindref="member">_not_full</ref>.notify_one();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>front;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;double,<sp/>Eigen::Dynamic,<sp/>1&gt;<sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref>;</highlight></codeline>
<codeline lineno="78" refid="evaluator_8h_1aa45a218a6a9d424e78898121d21f082d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;int,<sp/>Eigen::Dynamic,<sp/>1&gt;<sp/><ref refid="daoptimizer_8cpp_1aa45a218a6a9d424e78898121d21f082d" kindref="member">ivec</ref>;</highlight></codeline>
<codeline lineno="79" refid="evaluator_8h_1af0f7533253586ad2aba962e9537d90bc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;double,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref>;</highlight></codeline>
<codeline lineno="80" refid="evaluator_8h_1abf39fef19e3ec51cce88f380c3370bff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;int,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/><ref refid="evaluator_8h_1abf39fef19e3ec51cce88f380c3370bff" kindref="member">imat</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="evaluator_8h_1af419da391481d5e767cbe038009da309" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bool<sp/>(*<ref refid="evaluator_8h_1af419da391481d5e767cbe038009da309" kindref="member">callback_type</ref>)(int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="evaluator_8h_1a1adc681c70e547867358d25d5cf7eedc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="evaluator_8h_1a1adc681c70e547867358d25d5cf7eedc" kindref="member">callback_parallel</ref>)(int,<sp/>int,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="evaluator_8h_1ad0943ebd623281f526e5aee2aa818895" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1ad0943ebd623281f526e5aee2aa818895" kindref="member">noop_callback</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>popsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="evaluator_8h_1ac05c49788a31e5f7cb8efbe8ca3b548e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1ac05c49788a31e5f7cb8efbe8ca3b548e" kindref="member">noop_callback_par</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>popsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::uniform_real_distribution&lt;&gt;<sp/><ref refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" kindref="member">distr_01</ref><sp/>=</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uniform_real_distribution&lt;&gt;(0,<sp/>1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="evaluator_8h_1a74490c9b525b6b9b79b11e2d0f2fc0be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::normal_distribution&lt;&gt;<sp/><ref refid="evaluator_8h_1a74490c9b525b6b9b79b11e2d0f2fc0be" kindref="member">gauss_01</ref><sp/>=<sp/>std::normal_distribution&lt;&gt;(0,<sp/>1);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="evaluator_8h_1a231544ac51b3f9312c104a3b7a3c49a6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/><ref refid="evaluator_8h_1a231544ac51b3f9312c104a3b7a3c49a6" kindref="member">normal</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy,<sp/>pcg64<sp/>&amp;rs)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::MatrixXd::NullaryExpr(dx,<sp/>dy,<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a74490c9b525b6b9b79b11e2d0f2fc0be" kindref="member">gauss_01</ref>(rs);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="evaluator_8h_1a5b652df2286e1f0c4dae7d4dd841bb8f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/><ref refid="evaluator_8h_1a5b652df2286e1f0c4dae7d4dd841bb8f" kindref="member">normalVec</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>pcg64<sp/>&amp;rs)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::MatrixXd::NullaryExpr(dim,<sp/>1,<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a74490c9b525b6b9b79b11e2d0f2fc0be" kindref="member">gauss_01</ref>(rs);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="evaluator_8h_1ad408c1ac0c479863b2d1291c483c5593" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/><ref refid="evaluator_8h_1ad408c1ac0c479863b2d1291c483c5593" kindref="member">uniform</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy,<sp/>pcg64<sp/>&amp;rs)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::MatrixXd::NullaryExpr(dx,<sp/>dy,<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" kindref="member">distr_01</ref>(rs);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="evaluator_8h_1a28d3e754a2edfdf68753c5562acd87d0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Eigen::MatrixXd<sp/><ref refid="evaluator_8h_1a28d3e754a2edfdf68753c5562acd87d0" kindref="member">uniformVec</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>pcg64<sp/>&amp;rs)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::MatrixXd::NullaryExpr(dim,<sp/>1,<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" kindref="member">distr_01</ref>(rs);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="evaluator_8h_1a0007d50439e7d7122b6dd54d05c7c45b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a0007d50439e7d7122b6dd54d05c7c45b" kindref="member">rand01</ref>(pcg64<sp/>&amp;rs)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" kindref="member">distr_01</ref>(rs);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="evaluator_8h_1a3f89a72cbd8f38570fbb77117bdc7cbb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a3f89a72cbd8f38570fbb77117bdc7cbb" kindref="member">randInt</ref>(pcg64<sp/>&amp;rs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(max<sp/>*<sp/><ref refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" kindref="member">distr_01</ref>(rs));</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="evaluator_8h_1aa3d770d0f4bda035e2cc8c6f5c1b0aee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aa3d770d0f4bda035e2cc8c6f5c1b0aee" kindref="member">normreal</ref>(pcg64<sp/>&amp;rs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sdev)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a74490c9b525b6b9b79b11e2d0f2fc0be" kindref="member">gauss_01</ref>(rs)<sp/>*<sp/>sdev<sp/>+<sp/>mu;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="evaluator_8h_1a26c726f0e49c18836df96a8489dc9147" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="evaluator_8h_1a5b652df2286e1f0c4dae7d4dd841bb8f" kindref="member">normalVec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;mean,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;sdev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>pcg64<sp/>&amp;rs)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>nv<sp/>=<sp/><ref refid="evaluator_8h_1a5b652df2286e1f0c4dae7d4dd841bb8f" kindref="member">normalVec</ref>(dim,<sp/>rs);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nv.array()<sp/>*<sp/>sdev.array()).matrix()<sp/>+<sp/>mean;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="evaluator_8h_1a909812174fa9829bc49f6e00edb00b90" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="evaluator_8h_1a909812174fa9829bc49f6e00edb00b90" kindref="member">zeros</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::MatrixXd::Zero(n,<sp/>1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="evaluator_8h_1ae5c3f13d61f9d2fc9daf17f7c1c56c98" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/><ref refid="evaluator_8h_1a909812174fa9829bc49f6e00edb00b90" kindref="member">zeros</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::MatrixXd::Zero(n,<sp/>m);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="evaluator_8h_1a493b3a74ec3481711548e4b506b009cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="evaluator_8h_1a493b3a74ec3481711548e4b506b009cd" kindref="member">constant</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::MatrixXd::Constant(n,<sp/>1,<sp/>val);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="evaluator_8h_1af16be3da823298a97b79f99d38769f75" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/><ref refid="evaluator_8h_1a493b3a74ec3481711548e4b506b009cd" kindref="member">constant</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::MatrixXd::Constant(n,<sp/>m,<sp/>val);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="struct_index_val" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_index_val" kindref="compound">IndexVal</ref><sp/>{</highlight></codeline>
<codeline lineno="156" refid="struct_index_val_1a22dbaf9b662c668008e740239224f208" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_index_val_1a22dbaf9b662c668008e740239224f208" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="157" refid="struct_index_val_1a912365899c31aab0e77ec045f32a0b42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_index_val_1a912365899c31aab0e77ec045f32a0b42" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="evaluator_8h_1a85426eb5cecc23caa06090d795034e5c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a85426eb5cecc23caa06090d795034e5c" kindref="member">compareIndexVal</ref>(<ref refid="struct_index_val" kindref="compound">IndexVal</ref><sp/>i1,<sp/><ref refid="struct_index_val" kindref="compound">IndexVal</ref><sp/>i2)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(i1.<ref refid="struct_index_val_1a912365899c31aab0e77ec045f32a0b42" kindref="member">val</ref><sp/>&lt;<sp/>i2.<ref refid="struct_index_val_1a912365899c31aab0e77ec045f32a0b42" kindref="member">val</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="evaluator_8h_1a7689f88ea48c85c22d9b34208decd67c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aa45a218a6a9d424e78898121d21f082d" kindref="member">ivec</ref><sp/><ref refid="evaluator_8h_1a7689f88ea48c85c22d9b34208decd67c" kindref="member">sort_index</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_index_val" kindref="compound">IndexVal</ref><sp/>ivals[size];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivals[i].<ref refid="struct_index_val_1a22dbaf9b662c668008e740239224f208" kindref="member">index</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ivals[i].<ref refid="struct_index_val_1a912365899c31aab0e77ec045f32a0b42" kindref="member">val</ref><sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(ivals,<sp/>ivals<sp/>+<sp/>size,<sp/><ref refid="evaluator_8h_1a85426eb5cecc23caa06090d795034e5c" kindref="member">compareIndexVal</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Eigen::MatrixXi::NullaryExpr(size,<sp/>1,<sp/>[&amp;ivals](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ivals[i].<ref refid="struct_index_val_1a22dbaf9b662c668008e740239224f208" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="evaluator_8h_1a5f25c709f7baaf3ad28d4523f16fa93e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1a5f25c709f7baaf3ad28d4523f16fa93e" kindref="member">index_min</ref>(<ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minv<sp/>=<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mi<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>&lt;<sp/>minv)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mi<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minv<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mi;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wrapper<sp/>around<sp/>the<sp/>fitness<sp/>function,<sp/>scales<sp/>according<sp/>to<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="class_fitness" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_fitness_1a810378027f4bbbefc1b6fe1e42c0abb2" kindref="member">Fitness</ref><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="class_fitness_1a810378027f4bbbefc1b6fe1e42c0abb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a810378027f4bbbefc1b6fe1e42c0abb2" kindref="member">Fitness</ref>(<ref refid="evaluator_8h_1af419da391481d5e767cbe038009da309" kindref="member">callback_type</ref><sp/>func,<sp/><ref refid="evaluator_8h_1a1adc681c70e547867358d25d5cf7eedc" kindref="member">callback_parallel</ref><sp/>func_par_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nobj,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;lower,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;upper)<sp/>:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a4a7797a662230b7f29774339a5a32b73" kindref="member">_func</ref>(func),<sp/><ref refid="class_fitness_1aeb85d0ee0818d8c995c2e829dbc44c3a" kindref="member">_func_par</ref>(func_par_),<sp/><ref refid="class_fitness_1a573c650b339da5518a559d444e28eae4" kindref="member">_dim</ref>(dim),<sp/><ref refid="class_fitness_1af000c91778d06c45b09cd36c83d76d9f" kindref="member">_nobj</ref>(nobj),<sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>(</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower),<sp/><ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>(upper)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>&gt;<sp/>0)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bounds<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_scale<sp/>=<sp/><sp/>_upper<sp/>-<sp/>_lower;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_typx<sp/>=<sp/>0.5<sp/>*<sp/>(_upper<sp/>+<sp/>_lower);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_scale<sp/>=<sp/>constant(dim,<sp/>1.0);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_typx<sp/>=<sp/>zeros(dim);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a37d7bfa82125022b6c648f5976fd5275" kindref="member">_evaluationCounter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1ad522e44cbf9016953cd3ecaa5aaf657e" kindref="member">_normalize</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a14b92585c6089d0ee1dc7663c9868d5d" kindref="member">_terminate</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a573c650b339da5518a559d444e28eae4" kindref="member">_dim</ref><sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="class_fitness_1a08a70acdfa7636ae3285e3576c9e3d11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a08a70acdfa7636ae3285e3576c9e3d11" kindref="member">terminate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a14b92585c6089d0ee1dc7663c9868d5d" kindref="member">_terminate</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="class_fitness_1aad187f1bc51d22a4dbca1a2dc8633bc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1aad187f1bc51d22a4dbca1a2dc8633bc2" kindref="member">eval</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;X)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res[<ref refid="class_fitness_1af000c91778d06c45b09cd36c83d76d9f" kindref="member">_nobj</ref>];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a14b92585c6089d0ee1dc7663c9868d5d" kindref="member">_terminate</ref><sp/>=<sp/><ref refid="class_fitness_1a14b92585c6089d0ee1dc7663c9868d5d" kindref="member">_terminate</ref><sp/>||<sp/><ref refid="class_fitness_1a4a7797a662230b7f29774339a5a32b73" kindref="member">_func</ref>(<ref refid="class_fitness_1a573c650b339da5518a559d444e28eae4" kindref="member">_dim</ref>,<sp/>X.data(),<sp/>res);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_fitness_1af000c91778d06c45b09cd36c83d76d9f" kindref="member">_nobj</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isnan(res[i])<sp/>||<sp/>!std::isfinite(res[i]))</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res[i]<sp/>=<sp/>1E99;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a37d7bfa82125022b6c648f5976fd5275" kindref="member">_evaluationCounter</ref>++;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>rvec<sp/>=<sp/>Eigen::Map&lt;vec,<sp/>Eigen::Unaligned&gt;(res,<sp/><ref refid="class_fitness_1af000c91778d06c45b09cd36c83d76d9f" kindref="member">_nobj</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rvec;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="class_fitness_1ad7d85700ac92bf7e332fcc3c4855e55c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1ad7d85700ac92bf7e332fcc3c4855e55c" kindref="member">eval</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res[<ref refid="class_fitness_1af000c91778d06c45b09cd36c83d76d9f" kindref="member">_nobj</ref>];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a14b92585c6089d0ee1dc7663c9868d5d" kindref="member">_terminate</ref><sp/>=<sp/><ref refid="class_fitness_1a14b92585c6089d0ee1dc7663c9868d5d" kindref="member">_terminate</ref><sp/>||<sp/><ref refid="class_fitness_1a4a7797a662230b7f29774339a5a32b73" kindref="member">_func</ref>(<ref refid="class_fitness_1a573c650b339da5518a559d444e28eae4" kindref="member">_dim</ref>,<sp/>p,<sp/>res);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_fitness_1af000c91778d06c45b09cd36c83d76d9f" kindref="member">_nobj</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isnan(res[i])<sp/>||<sp/>!std::isfinite(res[i]))</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res[i]<sp/>=<sp/>1E99;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a37d7bfa82125022b6c648f5976fd5275" kindref="member">_evaluationCounter</ref>++;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>rvec<sp/>=<sp/>Eigen::Map&lt;vec,<sp/>Eigen::Unaligned&gt;(res,<sp/><ref refid="class_fitness_1af000c91778d06c45b09cd36c83d76d9f" kindref="member">_nobj</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rvec;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="class_fitness_1a2085e5ce1a0afa5949366f580d5ec5a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1a2085e5ce1a0afa5949366f580d5ec5a4" kindref="member">getClosestFeasible</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;X)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X.cwiseMin(<ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>).cwiseMax(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="class_fitness_1a1bc40ec5454b560389975e2a9ef8942e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a1bc40ec5454b560389975e2a9ef8942e" kindref="member">getClosestFeasible_i</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_i)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>==<sp/>0<sp/>?<sp/>x_i<sp/>:<sp/>std::min(<ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>[i],<sp/>std::max(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>[i],<sp/>x_i));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="class_fitness_1aba037e55263004819068b5076532b4bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1aba037e55263004819068b5076532b4bf" kindref="member">getClosestFeasibleNormed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;X)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1ad522e44cbf9016953cd3ecaa5aaf657e" kindref="member">_normalize</ref>)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X.cwiseMin(1.0).cwiseMax(-1.0);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X.cwiseMin(<ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>).cwiseMax(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="class_fitness_1a8f1605fc965e423d17c837cfba3dc4c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a8f1605fc965e423d17c837cfba3dc4c6" kindref="member">setClosestFeasible</ref>(<ref refid="evaluator_8h_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/>&amp;X)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>X.cols();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1ad522e44cbf9016953cd3ecaa5aaf657e" kindref="member">_normalize</ref>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X.col(i)<sp/>=<sp/>X.col(i).cwiseMin(1.0).cwiseMax(-1.0);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X.col(i)<sp/>=<sp/>X.col(i).cwiseMin(<ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>).cwiseMax(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="class_fitness_1ac9bd4bd8b140939a1fd9507160bc0b07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1ac9bd4bd8b140939a1fd9507160bc0b07" kindref="member">norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;X)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>bounds<sp/>error&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((X<sp/>-<sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>).array()<sp/>/<sp/><ref refid="class_fitness_1abc2f2bdcf8f5eafe359d6f7492f0a302" kindref="member">_scale</ref>.array()).matrix();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="class_fitness_1a57913ab2b23ab85ae2eab0f0a3a27961" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a57913ab2b23ab85ae2eab0f0a3a27961" kindref="member">norm_i</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>bounds<sp/>error&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::max(0.0,<sp/>std::min(1.0,<sp/>(x<sp/>-<sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>[i])<sp/>/<sp/><ref refid="class_fitness_1abc2f2bdcf8f5eafe359d6f7492f0a302" kindref="member">_scale</ref>[i]));<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>Nan<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="class_fitness_1a5d1edacb197d16faf0d3b2c035ab2308" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a5d1edacb197d16faf0d3b2c035ab2308" kindref="member">feasible</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>==<sp/>0<sp/>||<sp/>(x<sp/>&gt;=<sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>[i]<sp/>&amp;&amp;<sp/>x<sp/>&lt;=<sp/><ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>[i]);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="class_fitness_1a171aed8b88b47ea516a37453cb958948" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a171aed8b88b47ea516a37453cb958948" kindref="member">hasBounds</ref>()<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="class_fitness_1a0bfcc395cf728a4b91e740f4197f927b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1a0bfcc395cf728a4b91e740f4197f927b" kindref="member">sample</ref>(pcg64<sp/>&amp;rs)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>bounds<sp/>error&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>rv<sp/>=<sp/><ref refid="evaluator_8h_1a28d3e754a2edfdf68753c5562acd87d0" kindref="member">uniformVec</ref>(<ref refid="class_fitness_1a573c650b339da5518a559d444e28eae4" kindref="member">_dim</ref>,<sp/>rs);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rv.array()<sp/>*<sp/><ref refid="class_fitness_1abc2f2bdcf8f5eafe359d6f7492f0a302" kindref="member">_scale</ref>.array()).matrix()<sp/>+<sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="class_fitness_1ae05d628784c7ca1954d012f23e82abf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1ae05d628784c7ca1954d012f23e82abf5" kindref="member">sample</ref>(pcg64<sp/>&amp;rs,<sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;up,<sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;lo)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>rv<sp/>=<sp/><ref refid="evaluator_8h_1a28d3e754a2edfdf68753c5562acd87d0" kindref="member">uniformVec</ref>(<ref refid="class_fitness_1a573c650b339da5518a559d444e28eae4" kindref="member">_dim</ref>,<sp/>rs);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rv.array()<sp/>*<sp/>(up<sp/>-<sp/>lo).array()).matrix()<sp/>+<sp/>lo;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="class_fitness_1a517d31dc4378bfb8d94db9ccedaf948b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a517d31dc4378bfb8d94db9ccedaf948b" kindref="member">sample_i</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>pcg64<sp/>&amp;rs)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>bounds<sp/>error&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>[i]<sp/>+<sp/><ref refid="class_fitness_1abc2f2bdcf8f5eafe359d6f7492f0a302" kindref="member">_scale</ref>[i]<sp/>*<sp/><ref refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" kindref="member">distr_01</ref>(rs);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="class_fitness_1a34d84883637889310f026e2aed3d1bf3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a34d84883637889310f026e2aed3d1bf3" kindref="member">sample_i</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>pcg64<sp/>&amp;rs,<sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;up,<sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;lo)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lo[i]<sp/>+<sp/>(up[i]<sp/>-<sp/>lo[i])<sp/>*<sp/><ref refid="evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142" kindref="member">distr_01</ref>(rs);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="class_fitness_1aba60038eac4e0e15d995e57f4ba079e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1aba60038eac4e0e15d995e57f4ba079e1" kindref="member">evaluations</ref>()<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a37d7bfa82125022b6c648f5976fd5275" kindref="member">_evaluationCounter</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="class_fitness_1adc49c4f7f25822a081a412af0acb51c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1adc49c4f7f25822a081a412af0acb51c4" kindref="member">resetEvaluations</ref>()<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a37d7bfa82125022b6c648f5976fd5275" kindref="member">_evaluationCounter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="class_fitness_1a4ebdd48fa1e3dea8040c9c7bcf98aa17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a4ebdd48fa1e3dea8040c9c7bcf98aa17" kindref="member">incrEvaluations</ref>()<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a37d7bfa82125022b6c648f5976fd5275" kindref="member">_evaluationCounter</ref>++;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="class_fitness_1a13571dee4e75e03d9c421a42cae811b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1a13571dee4e75e03d9c421a42cae811b3" kindref="member">scale</ref>()<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1abc2f2bdcf8f5eafe359d6f7492f0a302" kindref="member">_scale</ref>;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="class_fitness_1a28d387d040da4d881537965535892e8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1a28d387d040da4d881537965535892e8a" kindref="member">typx</ref>()<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a576f73240084816d6a42e61d04290a2e" kindref="member">_typx</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="class_fitness_1a31beb7ecb5fa49ac03b43abe444ab9a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a31beb7ecb5fa49ac03b43abe444ab9a6" kindref="member">setNormalize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalize)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1ad522e44cbf9016953cd3ecaa5aaf657e" kindref="member">_normalize</ref><sp/>=<sp/>normalize;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="class_fitness_1ac511c0bb7aaf678184edfca41d4e1a81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1ac511c0bb7aaf678184edfca41d4e1a81" kindref="member">setTerminate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a14b92585c6089d0ee1dc7663c9868d5d" kindref="member">_terminate</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="class_fitness_1ab56956f8f382ffe1b9de9d35d156a65e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1ab56956f8f382ffe1b9de9d35d156a65e" kindref="member">encode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;X)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1ad522e44cbf9016953cd3ecaa5aaf657e" kindref="member">_normalize</ref>)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2<sp/>*<sp/>(X<sp/>-<sp/><ref refid="class_fitness_1a576f73240084816d6a42e61d04290a2e" kindref="member">_typx</ref>).array()<sp/>/<sp/><ref refid="class_fitness_1abc2f2bdcf8f5eafe359d6f7492f0a302" kindref="member">_scale</ref>.array();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="class_fitness_1a7fdca1fda75e3976b91e1e9e0eb12057" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1a7fdca1fda75e3976b91e1e9e0eb12057" kindref="member">decode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;X)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1ad522e44cbf9016953cd3ecaa5aaf657e" kindref="member">_normalize</ref>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.5<sp/>*<sp/>(X.array()<sp/>*<sp/><ref refid="class_fitness_1abc2f2bdcf8f5eafe359d6f7492f0a302" kindref="member">_scale</ref>.array()).matrix()<sp/>+<sp/><ref refid="class_fitness_1a576f73240084816d6a42e61d04290a2e" kindref="member">_typx</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="class_fitness_1a780edd5ddec4867c4d59c4cd3995f6ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a780edd5ddec4867c4d59c4cd3995f6ce" kindref="member">values</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/>&amp;popX,<sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;ys)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>popsize<sp/>=<sp/>popX.cols();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>popX.rows();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pargs[popsize<sp/>*<sp/>n];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res[popsize];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>popsize;<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/><ref refid="class_fitness_1a2085e5ce1a0afa5949366f580d5ec5a4" kindref="member">getClosestFeasible</ref>(<ref refid="class_fitness_1a7fdca1fda75e3976b91e1e9e0eb12057" kindref="member">decode</ref>(popX.col(p)));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pargs[p<sp/>*<sp/>n<sp/>+<sp/>i]<sp/>=<sp/>x(i);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1aeb85d0ee0818d8c995c2e829dbc44c3a" kindref="member">_func_par</ref>(popsize,<sp/>n,<sp/>pargs,<sp/>res);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>popX.cols();<sp/>p++)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys[p]<sp/>=<sp/>res[p];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a37d7bfa82125022b6c648f5976fd5275" kindref="member">_evaluationCounter</ref><sp/>+=<sp/>popsize;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="class_fitness_1a233793c918d3978ec0e52ef8431102b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1a233793c918d3978ec0e52ef8431102b6" kindref="member">violations</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1af0f7533253586ad2aba962e9537d90bc" kindref="member">mat</ref><sp/>&amp;X,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>penalty_coef)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1a233793c918d3978ec0e52ef8431102b6" kindref="member">violations</ref><sp/>=<sp/><ref refid="evaluator_8h_1a909812174fa9829bc49f6e00edb00b90" kindref="member">zeros</ref>(X.cols());</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>X.cols();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/><ref refid="class_fitness_1a7fdca1fda75e3976b91e1e9e0eb12057" kindref="member">decode</ref>(X.col(i));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fitness_1a233793c918d3978ec0e52ef8431102b6" kindref="member">violations</ref>[i]<sp/>=<sp/>penalty_coef</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>((<ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref><sp/>-<sp/>x).cwiseMax(0).sum()</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(x<sp/>-<sp/><ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>).cwiseMax(0).sum());</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a233793c918d3978ec0e52ef8431102b6" kindref="member">violations</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="class_fitness_1a437e35b1a2557879b07e22de801a9855" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a437e35b1a2557879b07e22de801a9855" kindref="member">getMinValues</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>[i];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="class_fitness_1ab25d3d92db939b7e739f97ea73907a71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1ab25d3d92db939b7e739f97ea73907a71" kindref="member">getMaxValues</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/><ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>[i];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="395" refid="class_fitness_1a4a7797a662230b7f29774339a5a32b73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1af419da391481d5e767cbe038009da309" kindref="member">callback_type</ref><sp/><ref refid="class_fitness_1a4a7797a662230b7f29774339a5a32b73" kindref="member">_func</ref>;</highlight></codeline>
<codeline lineno="396" refid="class_fitness_1aeb85d0ee0818d8c995c2e829dbc44c3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1a1adc681c70e547867358d25d5cf7eedc" kindref="member">callback_parallel</ref><sp/><ref refid="class_fitness_1aeb85d0ee0818d8c995c2e829dbc44c3a" kindref="member">_func_par</ref>;</highlight></codeline>
<codeline lineno="397" refid="class_fitness_1a573c650b339da5518a559d444e28eae4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a573c650b339da5518a559d444e28eae4" kindref="member">_dim</ref>;</highlight></codeline>
<codeline lineno="398" refid="class_fitness_1af000c91778d06c45b09cd36c83d76d9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1af000c91778d06c45b09cd36c83d76d9f" kindref="member">_nobj</ref>;</highlight></codeline>
<codeline lineno="399" refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1abd64428a6046b128b3b142a2a030968f" kindref="member">_lower</ref>;</highlight></codeline>
<codeline lineno="400" refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1acc824dbf4b0d84fa1a291bd6b16403ee" kindref="member">_upper</ref>;</highlight></codeline>
<codeline lineno="401" refid="class_fitness_1abc2f2bdcf8f5eafe359d6f7492f0a302" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1abc2f2bdcf8f5eafe359d6f7492f0a302" kindref="member">_scale</ref>;</highlight></codeline>
<codeline lineno="402" refid="class_fitness_1a576f73240084816d6a42e61d04290a2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="class_fitness_1a576f73240084816d6a42e61d04290a2e" kindref="member">_typx</ref>;</highlight></codeline>
<codeline lineno="403" refid="class_fitness_1ad522e44cbf9016953cd3ecaa5aaf657e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1ad522e44cbf9016953cd3ecaa5aaf657e" kindref="member">_normalize</ref>;</highlight></codeline>
<codeline lineno="404" refid="class_fitness_1a14b92585c6089d0ee1dc7663c9868d5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a14b92585c6089d0ee1dc7663c9868d5d" kindref="member">_terminate</ref>;</highlight></codeline>
<codeline lineno="405" refid="class_fitness_1a37d7bfa82125022b6c648f5976fd5275" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="class_fitness_1a37d7bfa82125022b6c648f5976fd5275" kindref="member">_evaluationCounter</ref>;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">};</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="structvec__id" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvec__id_1a8f6fc0f6104128193ec755ab84ad5c69" kindref="member">vec_id</ref><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="structvec__id_1a8f6fc0f6104128193ec755ab84ad5c69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvec__id_1a8f6fc0f6104128193ec755ab84ad5c69" kindref="member">vec_id</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvec__id_1a126c3cb731d047e25c08742f735f0f13" kindref="member">_id</ref>(id),<sp/><ref refid="structvec__id_1af5bf436ff9f915e145a897a73e4cdac9" kindref="member">_v</ref>(v)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="structvec__id_1a126c3cb731d047e25c08742f735f0f13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structvec__id_1a126c3cb731d047e25c08742f735f0f13" kindref="member">_id</ref>;</highlight></codeline>
<codeline lineno="416" refid="structvec__id_1af5bf436ff9f915e145a897a73e4cdac9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/><ref refid="structvec__id_1af5bf436ff9f915e145a897a73e4cdac9" kindref="member">_v</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">};</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="classevaluator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classevaluator_1ad503d1b0d07dc0123f2619f613fe2365" kindref="member">evaluator</ref><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="classevaluator_1ad503d1b0d07dc0123f2619f613fe2365" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classevaluator_1ad503d1b0d07dc0123f2619f613fe2365" kindref="member">evaluator</ref>(<ref refid="class_fitness" kindref="compound">Fitness</ref><sp/>*fit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nobj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>workers)<sp/>:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1a55728e92361122eb506a3f53d7ca7965" kindref="member">_fit</ref>(fit),<sp/><ref refid="classevaluator_1aa9acff16e9a1fff7e8374d02bcb5897b" kindref="member">_nobj</ref>(nobj),<sp/><ref refid="classevaluator_1a01d0a89d9e703daa46c72471b2245727" kindref="member">_workers</ref>(workers),<sp/><ref refid="classevaluator_1a475abe7cc16b726f9257c4c99170903c" kindref="member">_stop</ref>(false)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1a52c19bb405788ea2d4de4915dfcce2e0" kindref="member">_requests</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classblocking__queue" kindref="compound">blocking_queue&lt;vec_id*&gt;</ref>(2<sp/>*<sp/>workers);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1af0459baf3cf0e1917cd7254a041825f3" kindref="member">_evaled</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classblocking__queue" kindref="compound">blocking_queue&lt;vec_id*&gt;</ref>(2<sp/>*<sp/>workers);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1a91dbe1e8f9bc305dbdd890718ce890c8" kindref="member">_t0</ref><sp/>=<sp/>Clock::now();</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classevaluator_1a01d0a89d9e703daa46c72471b2245727" kindref="member">_workers</ref><sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1a01d0a89d9e703daa46c72471b2245727" kindref="member">_workers</ref><sp/>=<sp/>std::thread::hardware_concurrency();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_id<sp/>=<sp/>0;<sp/>thread_id<sp/>&lt;<sp/><ref refid="classevaluator_1a01d0a89d9e703daa46c72471b2245727" kindref="member">_workers</ref>;<sp/>thread_id++)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1aaa142677c82d588bf35f42c80ae932e3" kindref="member">_jobs</ref>.push_back(<ref refid="classevaluator_1_1evaluator__job" kindref="compound">evaluator_job</ref>(thread_id,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="classevaluator_1a68ea26494aa55c644bbab86b39d29d9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classevaluator_1a68ea26494aa55c644bbab86b39d29d9d" kindref="member">~evaluator</ref>()<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1aaedd24a31a5d9e98e59596ba5e86cae2" kindref="member">join</ref>();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1a52c19bb405788ea2d4de4915dfcce2e0" kindref="member">_requests</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1af0459baf3cf0e1917cd7254a041825f3" kindref="member">_evaled</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="classevaluator_1a62e9fb557b5a2ecfabc49a01eb7f59d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1a62e9fb557b5a2ecfabc49a01eb7f59d5" kindref="member">evaluate</ref>(<ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>&amp;x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1a52c19bb405788ea2d4de4915dfcce2e0" kindref="member">_requests</ref>-&gt;put(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structvec__id" kindref="compound">vec_id</ref>(x,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>needs<sp/>to<sp/>be<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="classevaluator_1a71fc6fd970c9d9f19af8202500c51b05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structvec__id" kindref="compound">vec_id</ref>*<sp/><ref refid="classevaluator_1a71fc6fd970c9d9f19af8202500c51b05" kindref="member">result</ref>()<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1af0459baf3cf0e1917cd7254a041825f3" kindref="member">_evaled</ref>-&gt;take();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="classevaluator_1a39a80a3c8535b71a004ef2b395015ade" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1a39a80a3c8535b71a004ef2b395015ade" kindref="member">execute</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_id)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="classevaluator_1a475abe7cc16b726f9257c4c99170903c" kindref="member">_stop</ref>)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvec__id" kindref="compound">vec_id</ref><sp/>*vid<sp/>=<sp/><ref refid="classevaluator_1a52c19bb405788ea2d4de4915dfcce2e0" kindref="member">_requests</ref>-&gt;take();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classevaluator_1a475abe7cc16b726f9257c4c99170903c" kindref="member">_stop</ref>)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x<sp/>=<sp/><ref refid="classevaluator_1a55728e92361122eb506a3f53d7ca7965" kindref="member">_fit</ref>-&gt;getClosestFeasible(<ref refid="classevaluator_1a55728e92361122eb506a3f53d7ca7965" kindref="member">_fit</ref>-&gt;decode(vid-&gt;<ref refid="structvec__id_1af5bf436ff9f915e145a897a73e4cdac9" kindref="member">_v</ref>));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vid-&gt;<ref refid="structvec__id_1af5bf436ff9f915e145a897a73e4cdac9" kindref="member">_v</ref><sp/>=<sp/><ref refid="classevaluator_1a55728e92361122eb506a3f53d7ca7965" kindref="member">_fit</ref>-&gt;eval(x);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vid-&gt;<ref refid="structvec__id_1af5bf436ff9f915e145a897a73e4cdac9" kindref="member">_v</ref><sp/>=<sp/><ref refid="evaluator_8h_1a493b3a74ec3481711548e4b506b009cd" kindref="member">constant</ref>(<ref refid="classevaluator_1aa9acff16e9a1fff7e8374d02bcb5897b" kindref="member">_nobj</ref>,<sp/>DBL_MAX);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1af0459baf3cf0e1917cd7254a041825f3" kindref="member">_evaled</ref>-&gt;put(vid);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>vid;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="classevaluator_1aaedd24a31a5d9e98e59596ba5e86cae2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1aaedd24a31a5d9e98e59596ba5e86cae2" kindref="member">join</ref>()<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1a475abe7cc16b726f9257c4c99170903c" kindref="member">_stop</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="evaluator_8h_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref><sp/>x(0);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>release<sp/>all<sp/>locks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;job<sp/>:<sp/><ref refid="classevaluator_1aaa142677c82d588bf35f42c80ae932e3" kindref="member">_jobs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1a52c19bb405788ea2d4de4915dfcce2e0" kindref="member">_requests</ref>-&gt;put(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structvec__id" kindref="compound">vec_id</ref>(x,<sp/>0));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;job<sp/>:<sp/><ref refid="classevaluator_1aaa142677c82d588bf35f42c80ae932e3" kindref="member">_jobs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>job.join();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="classevaluator_1_1evaluator__job" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classevaluator_1_1evaluator__job_1ac1577bf4f13621bd5549090a62168e64" kindref="member">evaluator_job</ref><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="483" refid="classevaluator_1_1evaluator__job_1ac1577bf4f13621bd5549090a62168e64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1_1evaluator__job_1ac1577bf4f13621bd5549090a62168e64" kindref="member">evaluator_job</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/><ref refid="classevaluator_1ad503d1b0d07dc0123f2619f613fe2365" kindref="member">evaluator</ref><sp/>*exec)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1_1evaluator__job_1a71ac7a8c335ace505cdccd614a872e7b" kindref="member">_thread</ref><sp/>=<sp/>std::thread(&amp;<ref refid="classevaluator_1a39a80a3c8535b71a004ef2b395015ade" kindref="member">evaluator::execute</ref>,<sp/>exec,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="classevaluator_1_1evaluator__job_1a89e3493b53e70cc64148d9d9aabfb138" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1_1evaluator__job_1a89e3493b53e70cc64148d9d9aabfb138" kindref="member">join</ref>()<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classevaluator_1_1evaluator__job_1a71ac7a8c335ace505cdccd614a872e7b" kindref="member">_thread</ref>.joinable())</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevaluator_1_1evaluator__job_1a71ac7a8c335ace505cdccd614a872e7b" kindref="member">_thread</ref>.join();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="493" refid="classevaluator_1_1evaluator__job_1a71ac7a8c335ace505cdccd614a872e7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::thread<sp/><ref refid="classevaluator_1_1evaluator__job_1a71ac7a8c335ace505cdccd614a872e7b" kindref="member">_thread</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="classevaluator_1a55728e92361122eb506a3f53d7ca7965" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_fitness" kindref="compound">Fitness</ref><sp/>*<ref refid="classevaluator_1a55728e92361122eb506a3f53d7ca7965" kindref="member">_fit</ref>;</highlight></codeline>
<codeline lineno="497" refid="classevaluator_1aa9acff16e9a1fff7e8374d02bcb5897b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1aa9acff16e9a1fff7e8374d02bcb5897b" kindref="member">_nobj</ref>;</highlight></codeline>
<codeline lineno="498" refid="classevaluator_1a01d0a89d9e703daa46c72471b2245727" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1a01d0a89d9e703daa46c72471b2245727" kindref="member">_workers</ref>;</highlight></codeline>
<codeline lineno="499" refid="classevaluator_1a475abe7cc16b726f9257c4c99170903c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classevaluator_1a475abe7cc16b726f9257c4c99170903c" kindref="member">_stop</ref>;</highlight></codeline>
<codeline lineno="500" refid="classevaluator_1a52c19bb405788ea2d4de4915dfcce2e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblocking__queue" kindref="compound">blocking_queue&lt;vec_id*&gt;</ref><sp/>*<ref refid="classevaluator_1a52c19bb405788ea2d4de4915dfcce2e0" kindref="member">_requests</ref>;</highlight></codeline>
<codeline lineno="501" refid="classevaluator_1af0459baf3cf0e1917cd7254a041825f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblocking__queue" kindref="compound">blocking_queue&lt;vec_id*&gt;</ref><sp/>*<ref refid="classevaluator_1af0459baf3cf0e1917cd7254a041825f3" kindref="member">_evaled</ref>;</highlight></codeline>
<codeline lineno="502" refid="classevaluator_1aaa142677c82d588bf35f42c80ae932e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;evaluator_job&gt;<sp/><ref refid="classevaluator_1aaa142677c82d588bf35f42c80ae932e3" kindref="member">_jobs</ref>;</highlight></codeline>
<codeline lineno="503" refid="classevaluator_1a91dbe1e8f9bc305dbdd890718ce890c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>time_point&lt;Clock&gt;<sp/><ref refid="classevaluator_1a91dbe1e8f9bc305dbdd890718ce890c8" kindref="member">_t0</ref>;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">};</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>EVALUATOR_HPP_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="_fcmaescpp/include/evaluator.h"/>
  </compounddef>
</doxygen>
