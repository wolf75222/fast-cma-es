<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="interferometry_8py" kind="file" language="Python">
    <compoundname>interferometry.py</compoundname>
    <innernamespace refid="namespaceexamples">examples</innernamespace>
    <innernamespace refid="namespaceexamples_1_1interferometry">examples::interferometry</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry_1ade47542775d2f283a81383e3cbac2785" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry.stdout</definition>
        <argsstring></argsstring>
        <name>stdout</name>
        <qualifiedname>examples.interferometry.stdout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry.py" line="29" column="1" bodyfile="examples/interferometry.py" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry_1a4f82e920edf90012be4468c9b2ca878f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry.format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <qualifiedname>examples.interferometry.format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry.py" line="29" column="1" bodyfile="examples/interferometry.py" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry_1a96b179a04bfc3874cd3a01d26b5a730c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry.level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <qualifiedname>examples.interferometry.level</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry.py" line="29" column="1" bodyfile="examples/interferometry.py" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry_1a58061aa172c8b7502b21a633b5e32e77" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry.udp</definition>
        <argsstring></argsstring>
        <name>udp</name>
        <qualifiedname>examples.interferometry.udp</qualifiedname>
        <initializer>=  Interferometry(11, &apos;./img/orion.jpg&apos;, 512)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry.py" line="32" column="1" bodyfile="examples/interferometry.py" bodystart="32" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceexamples_1_1interferometry_1a4d145c826df624e173c54c792e88ebe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.interferometry.archipelago</definition>
        <argsstring>()</argsstring>
        <name>archipelago</name>
        <qualifiedname>examples.interferometry.archipelago</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry.py" line="35" column="1" bodyfile="examples/interferometry.py" bodystart="35" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1interferometry_1a73aab1174c417c8b5a55b336f223f95d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.interferometry.check_good_solution</definition>
        <argsstring>()</argsstring>
        <name>check_good_solution</name>
        <qualifiedname>examples.interferometry.check_good_solution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry.py" line="54" column="1" bodyfile="examples/interferometry.py" bodystart="54" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1interferometry_1add210e1c8397b3514e0f8db7459e950f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.interferometry.optimize</definition>
        <argsstring>()</argsstring>
        <name>optimize</name>
        <qualifiedname>examples.interferometry.optimize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry.py" line="66" column="1" bodyfile="examples/interferometry.py" bodystart="66" bodyend="95"/>
        <references refid="namespaceexamples_1_1interferometry_1add210e1c8397b3514e0f8db7459e950f" compoundref="interferometry_8py" startline="66" endline="95">examples.interferometry.optimize</references>
        <referencedby refid="namespaceexamples_1_1interferometry_1add210e1c8397b3514e0f8db7459e950f" compoundref="interferometry_8py" startline="66" endline="95">examples.interferometry.optimize</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceexamples_1_1interferometry" refkind="compound"><highlight class="comment">#<sp/>Copyright<sp/>(c)<sp/>Dietmar<sp/>Wolz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>code<sp/>was<sp/>posted<sp/>on<sp/>https://gitter.im/pagmo2/Lobby<sp/>by<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Markus<sp/>MÃ¤rtens<sp/>@CoolRunning<sp/>and<sp/>is<sp/>extended<sp/>here<sp/>by<sp/>a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>fcmaes<sp/>parallel<sp/>differential<sp/>evolution<sp/>solver<sp/>for<sp/>comparison<sp/>with<sp/>the<sp/>pagmo<sp/>island<sp/>concept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Tested<sp/>with<sp/>miniconda<sp/>using<sp/>Python<sp/>3.8/3.10<sp/>on<sp/>Linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Corresponds<sp/>to<sp/>the<sp/>equivalent<sp/>python<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>https://github.com/dietmarwo/fcmaes-java/blob/master/src/main/java/fcmaes/examples/Interferometry.java</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>test<sp/>image<sp/>used<sp/>is<sp/>here:<sp/>https://api.optimize.esa.int/data/interferometry/orion.jpg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Install<sp/>dependencies:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>do<sp/>&quot;pip<sp/>install<sp/>scikit-image&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Tested<sp/>using<sp/>https://docs.conda.io/en/main/miniconda.html<sp/>on<sp/>Linux<sp/>Mint<sp/>21.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pygmo<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pg</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>time<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>interferometry_udp<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Interferometry</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>fcmaes<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>de,<sp/>cmaes,<sp/>retry,<sp/>advretry</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacefcmaes_1_1optimizer" kindref="compound">fcmaes.optimizer</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>single_objective,<sp/>de_cma_py,<sp/>Cma_python,<sp/>De_python,<sp/>Cma_cpp,<sp/>De_cpp,<sp/>de_cma,<sp/>Bite_cpp</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>loguru<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">logger.remove()</highlight></codeline>
<codeline lineno="29" refid="namespaceexamples_1_1interferometry_1a4f82e920edf90012be4468c9b2ca878f" refkind="member"><highlight class="normal">logger.add(sys.stdout,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">logger.add(</highlight><highlight class="stringliteral">&quot;log_{time}.txt&quot;</highlight><highlight class="normal">,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="namespaceexamples_1_1interferometry_1a58061aa172c8b7502b21a633b5e32e77" refkind="member"><highlight class="normal">udp<sp/>=<sp/><ref refid="classexamples_1_1interferometry__udp_1_1_interferometry" kindref="compound">Interferometry</ref>(11,<sp/></highlight><highlight class="stringliteral">&apos;./img/orion.jpg&apos;</highlight><highlight class="normal">,<sp/>512)<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">#udp<sp/>=<sp/>Interferometry(5,<sp/>&apos;./img/orion.jpg&apos;,<sp/>32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="namespaceexamples_1_1interferometry_1a4d145c826df624e173c54c792e88ebe8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1interferometry_1a4d145c826df624e173c54c792e88ebe8" kindref="member">archipelago</ref>():<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;interferometer<sp/>sga<sp/>archipelago&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>uda<sp/>=<sp/>pg.sga(gen<sp/>=<sp/>50000)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>instantiate<sp/>an<sp/>unconnected<sp/>archipelago</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>archi<sp/>=<sp/>pg.archipelago(t<sp/>=<sp/>pg.topologies.unconnected())</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>time()</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(8):</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alg<sp/>=<sp/>pg.algorithm(uda)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#alg.set_verbosity(1)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>pg.problem(udp)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/>=<sp/>pg.population(prob,<sp/>20)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isl<sp/>=<sp/>pg.island(algo=alg,<sp/>pop=pop)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>archi.push_back(isl)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>archi.evolve()</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>archi.wait_check()</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&apos;archi:<sp/>{time()<sp/>-<sp/>t:0.3f}s&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="namespaceexamples_1_1interferometry_1a73aab1174c417c8b5a55b336f223f95d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1interferometry_1a73aab1174c417c8b5a55b336f223f95d" kindref="member">check_good_solution</ref>():</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>fprob<sp/>=<sp/><ref refid="classfcmaes_1_1optimizer_1_1single__objective" kindref="compound">single_objective</ref>(pg.problem(udp))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>fval<sp/>=<sp/>98.086<sp/>can<sp/>you<sp/>find<sp/>a<sp/>better<sp/>solution?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>[<sp/>-0.5016772016823452,<sp/>0.30751689551825745,<sp/>0.4323143278123409,<sp/>0.4588915028506375,<sp/>0.2935318720729294,<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.35501406938728586,<sp/>-0.12561001993113785,<sp/>0.49885034791382843,<sp/>0.624893109559642,<sp/>-0.3038874087002077,<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.03467743910056187,<sp/>0.6006883618631653,<sp/>0.37736802000765257,<sp/>0.37867502641967277,<sp/>0.3714318987537504,<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.3753384727157436,<sp/>0.3994622345786947,<sp/>0.3566850399605477,<sp/>0.36146540697265817,<sp/>0.547468916941172,<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.38332007285093006,<sp/>0.37488058793892387<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>fprob.fun(x)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;fval<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(y))</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66" refid="namespaceexamples_1_1interferometry_1add210e1c8397b3514e0f8db7459e950f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1interferometry_1add210e1c8397b3514e0f8db7459e950f" kindref="member">optimize</ref>():<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>fprob<sp/>=<sp/><ref refid="classfcmaes_1_1optimizer_1_1single__objective" kindref="compound">single_objective</ref>(pg.problem(udp))</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;interferometer<sp/>optimization&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Python<sp/>Differential<sp/>Evolution<sp/>implementation,<sp/>uses<sp/>ask/tell<sp/>for<sp/>parallel<sp/>function<sp/>evaluation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>de.minimize(fprob.fun,<sp/>bounds=fprob.bounds,<sp/>workers=16,<sp/>popsize=32,<sp/>max_evaluations=50000)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Python<sp/>CMAES<sp/>implementation,<sp/>uses<sp/>ask/tell<sp/>for<sp/>parallel<sp/>function<sp/>evaluation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>cmaes.minimize(fprob.fun,<sp/>bounds=fprob.bounds,<sp/>workers=16,<sp/>popsize=32,<sp/>max_evaluations=50000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Parallel<sp/>retry<sp/>using<sp/>DE<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>retry.minimize(fprob.fun,<sp/>bounds=fprob.bounds,<sp/>optimizer=De_cpp(20000,<sp/>popsize=32),<sp/>workers=16,<sp/>num_retries=64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Parallel<sp/>retry<sp/>using<sp/>Bite<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ret<sp/>=<sp/>retry.minimize(fprob.fun,<sp/>bounds=fprob.bounds,<sp/>optimizer=Bite_cpp(20000,<sp/>M=1),<sp/>workers=16,<sp/>num_retries=64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Parallel<sp/>retry<sp/>using<sp/>CMA-ES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>retry.minimize(udp.fitness,<sp/>bounds=bounds,<sp/>optimizer=Cma_cpp(20000,<sp/>popsize=32),<sp/>workers=16,<sp/>num_retries=64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Smart<sp/>retry<sp/>using<sp/>DE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>advretry.minimize(fprob.fun,<sp/>bounds=fprob.bounds,<sp/>optimizer=De_cpp(1500,<sp/>popsize=32),<sp/>workers=16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Smart<sp/>retry<sp/>using<sp/>CMA-ES<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>advretry.minimize(fprob.fun,<sp/>bounds=fprob.bounds,<sp/>optimizer=Cma_cpp(1500,<sp/>popsize=32),<sp/>workers=16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Smart<sp/>retry<sp/>using<sp/>DE-&gt;CMA<sp/>sequence<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>advretry.minimize(fprob.fun,<sp/>bounds=fprob.bounds,<sp/>optimizer=de_cma(1500,<sp/>popsize=32),<sp/>workers=16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;best<sp/>result<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(ret.fun)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>x<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">.join(str(x)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ret.x))</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1interferometry_1add210e1c8397b3514e0f8db7459e950f" kindref="member">optimize</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#archipelago()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>check_good_solution()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="examples/interferometry.py"/>
  </compounddef>
</doxygen>
