<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="tutorial_8py" kind="file" language="Python">
    <compoundname>tutorial.py</compoundname>
    <innernamespace refid="namespaceexamples">examples</innernamespace>
    <innernamespace refid="namespaceexamples_1_1tutorial">examples::tutorial</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceexamples_1_1tutorial_1aff3196d07a2b546ca0a784ffa6edcb0f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::tutorial.stdout</definition>
        <argsstring></argsstring>
        <name>stdout</name>
        <qualifiedname>examples.tutorial.stdout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="22" column="1" bodyfile="examples/tutorial.py" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::tutorial.format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <qualifiedname>examples.tutorial.format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="22" column="1" bodyfile="examples/tutorial.py" bodystart="22" bodyend="-1"/>
        <referencedby refid="namespaceexamples_1_1tutorial_1a9c88d425b049fc145296367957b2ae3c" compoundref="tutorial_8py" startline="25" endline="34">examples.tutorial.test_advretry</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1af03d69ad52b8a379a9397c1310172b92" compoundref="tutorial_8py" startline="35" endline="45">examples.tutorial.test_advretry_cma_python</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1a39d164367ec41f19eb0630be5f15e379" compoundref="tutorial_8py" startline="88" endline="103">examples.tutorial.test_ask_tell</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1a90f9c1bb7d36f83fdca74a3327138806" compoundref="tutorial_8py" startline="78" endline="87">examples.tutorial.test_cma_cpp</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1a45eb0de7a5694eacaa1d6fd23be5bfa6" compoundref="tutorial_8py" startline="104" endline="113">examples.tutorial.test_cma_parallel</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1aafe9c1a1371c8d452cc44618c6b66af3" compoundref="tutorial_8py" startline="68" endline="77">examples.tutorial.test_cma_python</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1adfff9f66cbc8b67315072f2f788a06ce" compoundref="tutorial_8py" startline="114" endline="123">examples.tutorial.test_differential_evolution</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1a72ebe625829f6382a4dab5eb255468f2" compoundref="tutorial_8py" startline="124" endline="135">examples.tutorial.test_dual_annealing</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1a86d9de974dfa0ae3145e459d3c32f066" compoundref="tutorial_8py" startline="46" endline="56">examples.tutorial.test_retry</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1a8253dc379a78438f0d0295b16e19451f" compoundref="tutorial_8py" startline="57" endline="67">examples.tutorial.test_retry_cma_python</referencedby>
        <referencedby refid="namespaceexamples_1_1tutorial_1a3c73252012add36920a4b8801996ad94" compoundref="tutorial_8py" startline="136" endline="146">examples.tutorial.test_scipy_minimize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1tutorial_1a12773781d80c6a95e79425b52f14aa15" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::tutorial.level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <qualifiedname>examples.tutorial.level</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="22" column="1" bodyfile="examples/tutorial.py" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1tutorial_1a1b931a53bcd8caf3de0e12fd39eb6a8d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::tutorial.problem</definition>
        <argsstring></argsstring>
        <name>problem</name>
        <qualifiedname>examples.tutorial.problem</qualifiedname>
        <initializer>=  astro.Gtoc1()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="149" column="1" bodyfile="examples/tutorial.py" bodystart="149" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1a9c88d425b049fc145296367957b2ae3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_advretry</definition>
        <argsstring>(problem, value_limit, num)</argsstring>
        <name>test_advretry</name>
        <qualifiedname>examples.tutorial.test_advretry</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>value_limit</type>
          <defname>value_limit</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="25" column="1" bodyfile="examples/tutorial.py" bodystart="25" bodyend="34"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1af03d69ad52b8a379a9397c1310172b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_advretry_cma_python</definition>
        <argsstring>(problem, value_limit, num)</argsstring>
        <name>test_advretry_cma_python</name>
        <qualifiedname>examples.tutorial.test_advretry_cma_python</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>value_limit</type>
          <defname>value_limit</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="35" column="1" bodyfile="examples/tutorial.py" bodystart="35" bodyend="45"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1a86d9de974dfa0ae3145e459d3c32f066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_retry</definition>
        <argsstring>(problem, num)</argsstring>
        <name>test_retry</name>
        <qualifiedname>examples.tutorial.test_retry</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="46" column="1" bodyfile="examples/tutorial.py" bodystart="46" bodyend="56"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1a8253dc379a78438f0d0295b16e19451f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_retry_cma_python</definition>
        <argsstring>(problem, num)</argsstring>
        <name>test_retry_cma_python</name>
        <qualifiedname>examples.tutorial.test_retry_cma_python</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="57" column="1" bodyfile="examples/tutorial.py" bodystart="57" bodyend="67"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1aafe9c1a1371c8d452cc44618c6b66af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_cma_python</definition>
        <argsstring>(problem, num)</argsstring>
        <name>test_cma_python</name>
        <qualifiedname>examples.tutorial.test_cma_python</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="68" column="1" bodyfile="examples/tutorial.py" bodystart="68" bodyend="77"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1a90f9c1bb7d36f83fdca74a3327138806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_cma_cpp</definition>
        <argsstring>(problem, num)</argsstring>
        <name>test_cma_cpp</name>
        <qualifiedname>examples.tutorial.test_cma_cpp</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="78" column="1" bodyfile="examples/tutorial.py" bodystart="78" bodyend="87"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1a39d164367ec41f19eb0630be5f15e379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_ask_tell</definition>
        <argsstring>(problem, num)</argsstring>
        <name>test_ask_tell</name>
        <qualifiedname>examples.tutorial.test_ask_tell</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="88" column="1" bodyfile="examples/tutorial.py" bodystart="88" bodyend="103"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1a45eb0de7a5694eacaa1d6fd23be5bfa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_cma_parallel</definition>
        <argsstring>(problem, num)</argsstring>
        <name>test_cma_parallel</name>
        <qualifiedname>examples.tutorial.test_cma_parallel</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="104" column="1" bodyfile="examples/tutorial.py" bodystart="104" bodyend="113"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1adfff9f66cbc8b67315072f2f788a06ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_differential_evolution</definition>
        <argsstring>(problem, num)</argsstring>
        <name>test_differential_evolution</name>
        <qualifiedname>examples.tutorial.test_differential_evolution</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="114" column="1" bodyfile="examples/tutorial.py" bodystart="114" bodyend="123"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1a72ebe625829f6382a4dab5eb255468f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_dual_annealing</definition>
        <argsstring>(problem, num)</argsstring>
        <name>test_dual_annealing</name>
        <qualifiedname>examples.tutorial.test_dual_annealing</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="124" column="1" bodyfile="examples/tutorial.py" bodystart="124" bodyend="135"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1tutorial_1a3c73252012add36920a4b8801996ad94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.tutorial.test_scipy_minimize</definition>
        <argsstring>(problem, num)</argsstring>
        <name>test_scipy_minimize</name>
        <qualifiedname>examples.tutorial.test_scipy_minimize</qualifiedname>
        <param>
          <type>problem</type>
          <defname>problem</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/tutorial.py" line="136" column="1" bodyfile="examples/tutorial.py" bodystart="136" bodyend="146"/>
        <references refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" compoundref="tutorial_8py" startline="22">examples.tutorial.format</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceexamples_1_1tutorial" refkind="compound"><highlight class="comment">#<sp/>Copyright<sp/>(c)<sp/>Dietmar<sp/>Wolz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>See<sp/>https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Tutorials.adoc<sp/>for<sp/>a<sp/>detailed<sp/>description.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Tested<sp/>using<sp/>https://docs.conda.io/en/main/miniconda.html<sp/>on<sp/>Linux<sp/>Mint<sp/>21.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>multiprocessing<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>mp</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy.optimize<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>minimize,<sp/>differential_evolution,<sp/>dual_annealing</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>fcmaes<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>astro,<sp/>advretry,<sp/>retry,<sp/>cmaes,<sp/>cmaescpp</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacefcmaes_1_1optimizer" kindref="compound">fcmaes.optimizer</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>dtime,<sp/>random_x,<sp/>Cma_python,<sp/>wrapper</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>loguru<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">logger.remove()</highlight></codeline>
<codeline lineno="22" refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" refkind="member"><highlight class="normal">logger.add(sys.stdout,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">logger.add(</highlight><highlight class="stringliteral">&quot;log_{time}.txt&quot;</highlight><highlight class="normal">,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="namespaceexamples_1_1tutorial_1a9c88d425b049fc145296367957b2ae3c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1a9c88d425b049fc145296367957b2ae3c" kindref="member">test_advretry</ref>(problem,<sp/>value_limit,<sp/>num):</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>advretry.minimize(problem.fun,<sp/>bounds<sp/>=<sp/>problem.bounds,<sp/>num_retries<sp/>=<sp/>4000,<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_limit<sp/>=<sp/>value_limit,<sp/>statistic_num=5000)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="namespaceexamples_1_1tutorial_1af03d69ad52b8a379a9397c1310172b92" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1af03d69ad52b8a379a9397c1310172b92" kindref="member">test_advretry_cma_python</ref>(problem,<sp/>value_limit,<sp/>num):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>advretry.minimize(problem.fun,<sp/>bounds<sp/>=<sp/>problem.bounds,<sp/>num_retries<sp/>=<sp/>4000,<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer<sp/>=<sp/><ref refid="classfcmaes_1_1optimizer_1_1_cma__python" kindref="compound">Cma_python</ref>(2000),<sp/>value_limit<sp/>=<sp/>value_limit,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistic_num=5000)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="namespaceexamples_1_1tutorial_1a86d9de974dfa0ae3145e459d3c32f066" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1a86d9de974dfa0ae3145e459d3c32f066" kindref="member">test_retry</ref>(problem,<sp/>num):</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>retry.minimize(problem.fun,<sp/>bounds<sp/>=<sp/>problem.bounds,<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retries<sp/>=<sp/>2000,<sp/>max_evaluations<sp/>=<sp/>100000,<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistic_num=5000)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="namespaceexamples_1_1tutorial_1a8253dc379a78438f0d0295b16e19451f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1a8253dc379a78438f0d0295b16e19451f" kindref="member">test_retry_cma_python</ref>(problem,<sp/>num):</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>retry.minimize(problem.fun,<sp/>bounds<sp/>=<sp/>problem.bounds,<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retries<sp/>=<sp/>2000,<sp/>optimizer<sp/>=<sp/><ref refid="classfcmaes_1_1optimizer_1_1_cma__python" kindref="compound">Cma_python</ref>(100000),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statistic_num=5000)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="namespaceexamples_1_1tutorial_1aafe9c1a1371c8d452cc44618c6b66af3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1aafe9c1a1371c8d452cc44618c6b66af3" kindref="member">test_cma_python</ref>(problem,<sp/>num):</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>cmaes.minimize(problem.fun,<sp/>max_evaluations<sp/>=<sp/>100000,<sp/>bounds<sp/>=<sp/>problem.bounds)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>best<sp/>&gt;<sp/>ret.fun<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>100<sp/>==<sp/>99:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="namespaceexamples_1_1tutorial_1a90f9c1bb7d36f83fdca74a3327138806" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1a90f9c1bb7d36f83fdca74a3327138806" kindref="member">test_cma_cpp</ref>(problem,<sp/>num):</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>cmaescpp.minimize(problem.fun,<sp/>max_evaluations<sp/>=<sp/>100000,<sp/>bounds<sp/>=<sp/>problem.bounds)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>best<sp/>&gt;<sp/>ret.fun<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>100<sp/>==<sp/>99:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88" refid="namespaceexamples_1_1tutorial_1a39d164367ec41f19eb0630be5f15e379" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1a39d164367ec41f19eb0630be5f15e379" kindref="member">test_ask_tell</ref>(problem,<sp/>num):<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>es<sp/>=<sp/><ref refid="classfcmaes_1_1cmaes_1_1_cmaes" kindref="compound">cmaes.Cmaes</ref>(bounds<sp/>=<sp/>problem.bounds)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iters<sp/>=<sp/>3000</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(iters):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>es.ask()</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>[problem.fun(x)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>xs]</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>es.tell(ys)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>stop<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(es.best_value,<sp/>best)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>es.best_value))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="namespaceexamples_1_1tutorial_1a45eb0de7a5694eacaa1d6fd23be5bfa6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1a45eb0de7a5694eacaa1d6fd23be5bfa6" kindref="member">test_cma_parallel</ref>(problem,<sp/>num):</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>cmaes.minimize(<ref refid="classfcmaes_1_1optimizer_1_1wrapper" kindref="compound">wrapper</ref>(problem.fun),<sp/>bounds<sp/>=<sp/>problem.bounds,<sp/>workers<sp/>=<sp/>mp.cpu_count())</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>best<sp/>&gt;<sp/>ret.fun<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>100<sp/>==<sp/>99:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="namespaceexamples_1_1tutorial_1adfff9f66cbc8b67315072f2f788a06ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1adfff9f66cbc8b67315072f2f788a06ce" kindref="member">test_differential_evolution</ref>(problem,<sp/>num):</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="namespacedifferential__evolution" kindref="compound">differential_evolution</ref>(<ref refid="classfcmaes_1_1optimizer_1_1wrapper" kindref="compound">wrapper</ref>(problem.fun),<sp/>bounds<sp/>=<sp/>problem.bounds)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>best<sp/>&gt;<sp/>ret.fun<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>100<sp/>==<sp/>99:</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="namespaceexamples_1_1tutorial_1a72ebe625829f6382a4dab5eb255468f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1a72ebe625829f6382a4dab5eb255468f2" kindref="member">test_dual_annealing</ref>(problem,<sp/>num):</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>lb<sp/>=<sp/>problem.bounds.lb</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>ub<sp/>=<sp/>problem.bounds.ub</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="namespacedual__annealing" kindref="compound">dual_annealing</ref>(<ref refid="classfcmaes_1_1optimizer_1_1wrapper" kindref="compound">wrapper</ref>(problem.fun),<sp/>bounds<sp/>=<sp/>list(zip(lb,<sp/>ub)))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>best<sp/>&gt;<sp/>ret.fun<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>100<sp/>==<sp/>99:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="namespaceexamples_1_1tutorial_1a3c73252012add36920a4b8801996ad94" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1tutorial_1a3c73252012add36920a4b8801996ad94" kindref="member">test_scipy_minimize</ref>(problem,<sp/>num):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>time.perf_counter();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num):</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guess<sp/>=<sp/>random_x(<ref refid="classfcmaes_1_1optimizer_1_1wrapper" kindref="compound">wrapper</ref>(problem.bounds.lb),<sp/>problem.bounds.ub)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>minimize(problem.fun,<sp/>x0<sp/>=<sp/>guess,<sp/>bounds<sp/>=<sp/>problem.bounds)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>best<sp/>&gt;<sp/>ret.fun<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>i<sp/>%<sp/>20000<sp/>==<sp/>19999:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;{0}:<sp/>time<sp/>=<sp/>{1:.1f}<sp/>best<sp/>=<sp/>{2:.1f}<sp/>f(xmin)<sp/>=<sp/>{3:.1f}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828" kindref="member">format</ref>(i+1,<sp/>dtime(t0),<sp/>best,<sp/>ret.fun))</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>min(ret.fun,<sp/>best)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="namespaceexamples_1_1tutorial_1a1b931a53bcd8caf3de0e12fd39eb6a8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>problem<sp/>=<sp/><ref refid="classfcmaes_1_1astro_1_1_gtoc1" kindref="compound">astro.Gtoc1</ref>()</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>problem<sp/>=<sp/>astro.Cassini1()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>problem<sp/>=<sp/>astro.Cassini2()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>problem<sp/>=<sp/>astro.Rosetta()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>problem<sp/>=<sp/>astro.Messenger()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>problem<sp/>=<sp/>astro.MessFull()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1tutorial_1a9c88d425b049fc145296367957b2ae3c" kindref="member">test_advretry</ref>(problem,<sp/>20.0,<sp/>10)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_advretry_cma_python(problem,<sp/>20.0,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_retry(problem,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_retry_cma_python(problem,<sp/>10)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_cma_python(problem,<sp/>1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_cma_cpp(problem,<sp/>1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_ask_tell(problem,<sp/>10000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_cma_parallel(problem,<sp/>1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_differential_evolution(problem,<sp/>1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_dual_annealing(problem,<sp/>1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_scipy_minimize(problem,<sp/>200000)</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="examples/tutorial.py"/>
  </compounddef>
</doxygen>
