<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classbiteopt_1_1_bite_optimizer" kind="class" language="C++" prot="public">
    <compoundname>biteopt::BiteOptimizer</compoundname>
    <basecompoundref refid="class_c_bite_opt_deep" prot="public" virt="non-virtual">CBiteOptDeep</basecompoundref>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1aaf39fcde875f4ba2aabf9b881a46dab0" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long biteopt::BiteOptimizer::runid</definition>
        <argsstring></argsstring>
        <name>runid</name>
        <qualifiedname>biteopt::BiteOptimizer::runid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="106" column="10" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="106" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a0ee80e7c3878dae82aef5f9a532281ae" prot="private" static="no" mutable="no">
        <type><ref refid="class_fitness" kindref="compound">Fitness</ref> *</type>
        <definition>Fitness* biteopt::BiteOptimizer::fitfun</definition>
        <argsstring></argsstring>
        <name>fitfun</name>
        <qualifiedname>biteopt::BiteOptimizer::fitfun</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="107" column="13" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="107" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" compoundref="biteoptimizer_8cpp" startline="88" endline="103">doOptimize</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a8d1716460571a9aef6f8206715a5a71c" compoundref="biteoptimizer_8cpp" startline="60" endline="62">getMaxValues</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a11148136b4a3eebd78d235eda7e3dff4" compoundref="biteoptimizer_8cpp" startline="56" endline="58">getMinValues</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a0244d5e664ac99fd264ebe908023ce0c" compoundref="biteoptimizer_8cpp" startline="64" endline="66">optcost</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a388a1a6fb08111aa79aba41ac358ef96" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int biteopt::BiteOptimizer::M</definition>
        <argsstring></argsstring>
        <name>M</name>
        <qualifiedname>biteopt::BiteOptimizer::M</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="108" column="9" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="108" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a710877c371d6154d8718ffadc82c220e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int biteopt::BiteOptimizer::stallCriterion</definition>
        <argsstring></argsstring>
        <name>stallCriterion</name>
        <qualifiedname>biteopt::BiteOptimizer::stallCriterion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="109" column="9" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="109" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" compoundref="biteoptimizer_8cpp" startline="88" endline="103">doOptimize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a8e4b9fbc66dcb68d7afbfbdc9897c180" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int biteopt::BiteOptimizer::dim</definition>
        <argsstring></argsstring>
        <name>dim</name>
        <qualifiedname>biteopt::BiteOptimizer::dim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="110" column="9" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="110" bodyend="-1"/>
        <referencedby refid="classexamples_1_1damp_1_1fitness_1a182cdb7a5c25015336faa57a9afebef6" compoundref="damp_8py" startline="67" endline="76">examples.damp.fitness.__call__</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" compoundref="biteoptimizer_8cpp" startline="88" endline="103">doOptimize</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a311b608ce3c0eea69d66615f22448279" compoundref="biteoptimizer_8cpp" startline="68" endline="74">getBestX</referencedby>
        <referencedby refid="classanpcp_1_1_a_n_p_c_p_1a168520639bb6a296a24f7f11226a233a" compoundref="anpcp_8py" startline="78" endline="98">anpcp.ANPCP.init_tsp</referencedby>
        <referencedby refid="classexamples_1_1siemens_1_1_plant_1a1e32e624120cf855722e347ed941b77f" compoundref="siemens_8py" startline="108" endline="118">examples.siemens.Plant.next_product</referencedby>
        <referencedby refid="classexamples_1_1employee_1_1problem_1a96c79aee6dab29a25fd28b0b383f1916" compoundref="employee_8py" startline="241" endline="250">examples.employee.problem.optimize</referencedby>
        <referencedby refid="classexamples_1_1employee_1_1problem_1a451356183bd266ec5feb44a1b9cf92ef" compoundref="employee_8py" startline="251" endline="268">examples.employee.problem.optimize_mo</referencedby>
        <referencedby refid="classexamples_1_1damp_1_1fitness_1af629821589f78858c6422998bcb02fe5" compoundref="damp_8py" startline="77" endline="90">examples.damp.fitness.qd_fit</referencedby>
        <referencedby refid="classanpcp_1_1_a_n_p_c_p_1a27cdaec6181e9866758aaf02adcd2943" compoundref="anpcp_8py" startline="99" endline="102">anpcp.ANPCP.random_x</referencedby>
        <referencedby refid="classanpcpc_1_1_a_n_p_c_p_c_1ac4f58722e70806a92094828b839f084e" compoundref="anpcpc_8py" startline="86" endline="89">anpcpc.ANPCPC.random_x</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a202fcfa155957a158f3a3916753448a4" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int biteopt::BiteOptimizer::maxEvaluations</definition>
        <argsstring></argsstring>
        <name>maxEvaluations</name>
        <qualifiedname>biteopt::BiteOptimizer::maxEvaluations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="111" column="9" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="111" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" compoundref="biteoptimizer_8cpp" startline="88" endline="103">doOptimize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a8e2a405cc4f23f9f34e15236ac072721" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double biteopt::BiteOptimizer::stopfitness</definition>
        <argsstring></argsstring>
        <name>stopfitness</name>
        <qualifiedname>biteopt::BiteOptimizer::stopfitness</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="112" column="12" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="112" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" compoundref="biteoptimizer_8cpp" startline="88" endline="103">doOptimize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a96feed5acebf4945e27d50cbcd8ef36f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int biteopt::BiteOptimizer::iterations</definition>
        <argsstring></argsstring>
        <name>iterations</name>
        <qualifiedname>biteopt::BiteOptimizer::iterations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="113" column="9" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="113" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" compoundref="biteoptimizer_8cpp" startline="88" endline="103">doOptimize</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a5ebdeb53261b8a3d0366f7dee30995e1" compoundref="biteoptimizer_8cpp" startline="80" endline="82">getIterations</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1ae9c0069b5b67d537814be3f7f83c0293" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double biteopt::BiteOptimizer::bestY</definition>
        <argsstring></argsstring>
        <name>bestY</name>
        <qualifiedname>biteopt::BiteOptimizer::bestY</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="114" column="12" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="114" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classexamples_1_1noisy__tsp_1_1_t_s_p_1aa298d4659787619babc9c7c0bbb98b74" compoundref="noisy__tsp_8py" startline="93" endline="99">examples.noisy_tsp.TSP.optimize_mo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a9fdbe319b90b1f86175cd924c9700302" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int biteopt::BiteOptimizer::stop</definition>
        <argsstring></argsstring>
        <name>stop</name>
        <qualifiedname>biteopt::BiteOptimizer::stop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="115" column="9" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="115" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" compoundref="biteoptimizer_8cpp" startline="88" endline="103">doOptimize</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1aa080b647a6dc4297f6be40f55e443dfb" compoundref="biteoptimizer_8cpp" startline="84" endline="86">getStop</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a2eb7f354f8bc1aa1e4f5a001d3ecdc38" prot="private" static="no" mutable="no">
        <type><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref></type>
        <definition>vec biteopt::BiteOptimizer::bestX</definition>
        <argsstring></argsstring>
        <name>bestX</name>
        <qualifiedname>biteopt::BiteOptimizer::bestX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="116" column="9" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="116" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a311b608ce3c0eea69d66615f22448279" compoundref="biteoptimizer_8cpp" startline="68" endline="74">getBestX</referencedby>
        <referencedby refid="classexamples_1_1noisy__tsp_1_1_t_s_p_1aa298d4659787619babc9c7c0bbb98b74" compoundref="noisy__tsp_8py" startline="93" endline="99">examples.noisy_tsp.TSP.optimize_mo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a6635331036d8d48e550a1a6716bacf33" prot="private" static="no" mutable="no">
        <type>pcg64 *</type>
        <definition>pcg64* biteopt::BiteOptimizer::rs</definition>
        <argsstring></argsstring>
        <name>rs</name>
        <qualifiedname>biteopt::BiteOptimizer::rs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="117" column="11" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="117" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a5774713fad3253b58a5b79f52586e072" compoundref="biteoptimizer_8cpp" startline="52" endline="54">~BiteOptimizer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classbiteopt_1_1_bite_optimizer_1a4b393b354bee73e0c41973074118a1e5" prot="private" static="no" mutable="no">
        <type><ref refid="class_c_bite_rnd" kindref="compound">CBiteRnd</ref></type>
        <definition>CBiteRnd biteopt::BiteOptimizer::rnd</definition>
        <argsstring></argsstring>
        <name>rnd</name>
        <qualifiedname>biteopt::BiteOptimizer::rnd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="118" column="14" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="118" bodyend="-1"/>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" compoundref="biteoptimizer_8cpp" startline="22" endline="50">BiteOptimizer</referencedby>
        <referencedby refid="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" compoundref="biteoptimizer_8cpp" startline="88" endline="103">doOptimize</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>biteopt::BiteOptimizer::BiteOptimizer</definition>
        <argsstring>(long runid_, Fitness *fitfun_, int dim_, double *init_, int seed_, int M_, int popsize, int stallCriterion_, int maxEvaluations_, double stopfitness_)</argsstring>
        <name>BiteOptimizer</name>
        <qualifiedname>biteopt::BiteOptimizer::BiteOptimizer</qualifiedname>
        <param>
          <type>long</type>
          <declname>runid_</declname>
        </param>
        <param>
          <type><ref refid="class_fitness" kindref="compound">Fitness</ref> *</type>
          <declname>fitfun_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim_</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>init_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>seed_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>M_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>popsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stallCriterion_</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxEvaluations_</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stopfitness_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="22" column="5" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="22" bodyend="50"/>
        <references refid="classbiteopt_1_1_bite_optimizer_1ae9c0069b5b67d537814be3f7f83c0293" compoundref="biteoptimizer_8cpp" startline="114">bestY</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a8e4b9fbc66dcb68d7afbfbdc9897c180" compoundref="biteoptimizer_8cpp" startline="110">dim</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a0ee80e7c3878dae82aef5f9a532281ae" compoundref="biteoptimizer_8cpp" startline="107">fitfun</references>
        <references refid="class_c_bite_opt_deep_1abeb2e2aa0929e9fb6741ac7b0892a31b" compoundref="biteopt_8h" startline="1539" endline="1552">CBiteOptDeep::init</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a96feed5acebf4945e27d50cbcd8ef36f" compoundref="biteoptimizer_8cpp" startline="113">iterations</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a388a1a6fb08111aa79aba41ac358ef96" compoundref="biteoptimizer_8cpp" startline="108">M</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a202fcfa155957a158f3a3916753448a4" compoundref="biteoptimizer_8cpp" startline="111">maxEvaluations</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a4b393b354bee73e0c41973074118a1e5" compoundref="biteoptimizer_8cpp" startline="118">rnd</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a6635331036d8d48e550a1a6716bacf33" compoundref="biteoptimizer_8cpp" startline="117">rs</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1aaf39fcde875f4ba2aabf9b881a46dab0" compoundref="biteoptimizer_8cpp" startline="106">runid</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a710877c371d6154d8718ffadc82c220e" compoundref="biteoptimizer_8cpp" startline="109">stallCriterion</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a9fdbe319b90b1f86175cd924c9700302" compoundref="biteoptimizer_8cpp" startline="115">stop</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a8e2a405cc4f23f9f34e15236ac072721" compoundref="biteoptimizer_8cpp" startline="112">stopfitness</references>
        <references refid="class_c_bite_opt_deep_1a48ae954f715acc3433125af9b0abaa61" compoundref="biteopt_8h" startline="1507" endline="1528">CBiteOptDeep::updateDims</references>
      </memberdef>
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1a5774713fad3253b58a5b79f52586e072" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>biteopt::BiteOptimizer::~BiteOptimizer</definition>
        <argsstring>()</argsstring>
        <name>~BiteOptimizer</name>
        <qualifiedname>biteopt::BiteOptimizer::~BiteOptimizer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="52" column="5" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="52" bodyend="54"/>
        <references refid="classbiteopt_1_1_bite_optimizer_1a6635331036d8d48e550a1a6716bacf33" compoundref="biteoptimizer_8cpp" startline="117">rs</references>
      </memberdef>
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1a11148136b4a3eebd78d235eda7e3dff4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void biteopt::BiteOptimizer::getMinValues</definition>
        <argsstring>(double *const p) const</argsstring>
        <name>getMinValues</name>
        <qualifiedname>biteopt::BiteOptimizer::getMinValues</qualifiedname>
        <reimplements refid="class_c_bite_opt_interface_1ae7f8adaf2fd8acb10ccf057592a6229d">getMinValues</reimplements>
        <param>
          <type>double *const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual function that should fill minimal parameter value vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">p</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimal value vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="56" column="18" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="56" bodyend="58"/>
        <references refid="classbiteopt_1_1_bite_optimizer_1a0ee80e7c3878dae82aef5f9a532281ae" compoundref="biteoptimizer_8cpp" startline="107">fitfun</references>
      </memberdef>
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1a8d1716460571a9aef6f8206715a5a71c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void biteopt::BiteOptimizer::getMaxValues</definition>
        <argsstring>(double *const p) const</argsstring>
        <name>getMaxValues</name>
        <qualifiedname>biteopt::BiteOptimizer::getMaxValues</qualifiedname>
        <reimplements refid="class_c_bite_opt_interface_1a9debe40625c2bc248a4ffd12a9197a4d">getMaxValues</reimplements>
        <param>
          <type>double *const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual function that should fill maximal parameter value vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">p</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximal value vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="60" column="18" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="60" bodyend="62"/>
        <references refid="classbiteopt_1_1_bite_optimizer_1a0ee80e7c3878dae82aef5f9a532281ae" compoundref="biteoptimizer_8cpp" startline="107">fitfun</references>
      </memberdef>
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1a0244d5e664ac99fd264ebe908023ce0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double biteopt::BiteOptimizer::optcost</definition>
        <argsstring>(const double *const p)</argsstring>
        <name>optcost</name>
        <qualifiedname>biteopt::BiteOptimizer::optcost</qualifiedname>
        <reimplements refid="class_c_bite_opt_interface_1a45d7e2c9ea31b6f8bb23758a6879df9d">optcost</reimplements>
        <param>
          <type>const double *const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual function (objective function) that should calculate parameter vector&apos;s optimization cost.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter vector to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Optimized cost. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="64" column="20" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="64" bodyend="66"/>
        <references refid="classbiteopt_1_1_bite_optimizer_1a0ee80e7c3878dae82aef5f9a532281ae" compoundref="biteoptimizer_8cpp" startline="107">fitfun</references>
      </memberdef>
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1a311b608ce3c0eea69d66615f22448279" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f" kindref="member">vec</ref></type>
        <definition>vec biteopt::BiteOptimizer::getBestX</definition>
        <argsstring>()</argsstring>
        <name>getBestX</name>
        <qualifiedname>biteopt::BiteOptimizer::getBestX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="68" column="9" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="68" bodyend="74"/>
        <references refid="classbiteopt_1_1_bite_optimizer_1a2eb7f354f8bc1aa1e4f5a001d3ecdc38" compoundref="biteoptimizer_8cpp" startline="116">bestX</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a8e4b9fbc66dcb68d7afbfbdc9897c180" compoundref="biteoptimizer_8cpp" startline="110">dim</references>
        <references refid="class_c_bite_opt_deep_1a17c7c044ef259f3c68e2e47c53c043a3" compoundref="biteopt_8h" startline="1453" endline="1456">CBiteOptDeep::getBestParams</references>
      </memberdef>
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1aa117da98db6b95c17836e1c0acb37d88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double biteopt::BiteOptimizer::getBestValue</definition>
        <argsstring>()</argsstring>
        <name>getBestValue</name>
        <qualifiedname>biteopt::BiteOptimizer::getBestValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="76" column="12" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="76" bodyend="78"/>
        <references refid="class_c_bite_opt_deep_1a961516dc7772d327e64965fc3e07ce31" compoundref="biteopt_8h" startline="1458" endline="1461">CBiteOptDeep::getBestCost</references>
      </memberdef>
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1a5ebdeb53261b8a3d0366f7dee30995e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double biteopt::BiteOptimizer::getIterations</definition>
        <argsstring>()</argsstring>
        <name>getIterations</name>
        <qualifiedname>biteopt::BiteOptimizer::getIterations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="80" column="12" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="80" bodyend="82"/>
        <references refid="classbiteopt_1_1_bite_optimizer_1a96feed5acebf4945e27d50cbcd8ef36f" compoundref="biteoptimizer_8cpp" startline="113">iterations</references>
      </memberdef>
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1aa080b647a6dc4297f6be40f55e443dfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double biteopt::BiteOptimizer::getStop</definition>
        <argsstring>()</argsstring>
        <name>getStop</name>
        <qualifiedname>biteopt::BiteOptimizer::getStop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="84" column="12" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="84" bodyend="86"/>
        <references refid="classbiteopt_1_1_bite_optimizer_1a9fdbe319b90b1f86175cd924c9700302" compoundref="biteoptimizer_8cpp" startline="115">stop</references>
      </memberdef>
      <memberdef kind="function" id="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void biteopt::BiteOptimizer::doOptimize</definition>
        <argsstring>()</argsstring>
        <name>doOptimize</name>
        <qualifiedname>biteopt::BiteOptimizer::doOptimize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/biteoptimizer.cpp" line="88" column="10" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="88" bodyend="103"/>
        <references refid="classbiteopt_1_1_bite_optimizer_1a8e4b9fbc66dcb68d7afbfbdc9897c180" compoundref="biteoptimizer_8cpp" startline="110">dim</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a0ee80e7c3878dae82aef5f9a532281ae" compoundref="biteoptimizer_8cpp" startline="107">fitfun</references>
        <references refid="class_c_bite_opt_deep_1a961516dc7772d327e64965fc3e07ce31" compoundref="biteopt_8h" startline="1458" endline="1461">CBiteOptDeep::getBestCost</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a96feed5acebf4945e27d50cbcd8ef36f" compoundref="biteoptimizer_8cpp" startline="113">iterations</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a202fcfa155957a158f3a3916753448a4" compoundref="biteoptimizer_8cpp" startline="111">maxEvaluations</references>
        <references refid="class_c_bite_opt_deep_1a5f9dce3d0bcb37dd0d63fec707204786" compoundref="biteopt_8h" startline="1563" endline="1609">CBiteOptDeep::optimize</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a4b393b354bee73e0c41973074118a1e5" compoundref="biteoptimizer_8cpp" startline="118">rnd</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a710877c371d6154d8718ffadc82c220e" compoundref="biteoptimizer_8cpp" startline="109">stallCriterion</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a9fdbe319b90b1f86175cd924c9700302" compoundref="biteoptimizer_8cpp" startline="115">stop</references>
        <references refid="classbiteopt_1_1_bite_optimizer_1a8e2a405cc4f23f9f34e15236ac072721" compoundref="biteoptimizer_8cpp" startline="112">stopfitness</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CBiteOptDeep</label>
        <link refid="class_c_bite_opt_deep"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>CBiteOptInterface</label>
        <link refid="class_c_bite_opt_interface"/>
      </node>
      <node id="1">
        <label>biteopt::BiteOptimizer</label>
        <link refid="classbiteopt_1_1_bite_optimizer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>CBiteOpt</label>
        <link refid="class_c_bite_opt"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>#Gen1MoveSpanSel</edgelabel>
          <edgelabel>#Gen3ModeSel</edgelabel>
          <edgelabel>#Gen4MixFacSel</edgelabel>
          <edgelabel>#Gen7PowFacSel</edgelabel>
          <edgelabel>#Gen8NumSel</edgelabel>
          <edgelabel>#Gen8SpanSel</edgelabel>
          <edgelabel>#M1Sel</edgelabel>
          <edgelabel>#M2BSel</edgelabel>
          <edgelabel>#MethodSel</edgelabel>
          <edgelabel>#MinSolMulSel</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>#M1ASel</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>#AltPopPSel</edgelabel>
          <edgelabel>#AltPopSel</edgelabel>
          <edgelabel>#Gen1AllpSel</edgelabel>
          <edgelabel>#Gen1MoveAsyncSel</edgelabel>
          <edgelabel>#Gen2ModeSel</edgelabel>
          <edgelabel>#Gen2bModeSel</edgelabel>
          <edgelabel>#Gen2cModeSel</edgelabel>
          <edgelabel>#Gen2dModeSel</edgelabel>
          <edgelabel>#Gen5bModeSel</edgelabel>
          <edgelabel>#Gen8ModeSel</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>#OldPop</edgelabel>
          <edgelabel>#ParOpt2Pop</edgelabel>
          <edgelabel>#ParOptPop</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>#ParOpt</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>#ParOpt2</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>CBiteOpt::CParOpt&lt; T &gt;</label>
        <link refid="class_c_bite_opt_1_1_c_par_opt"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>+Owner</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>CBiteOpt::CParOpt&lt; CNMSeqOpt &gt;</label>
        <link refid="class_c_bite_opt_1_1_c_par_opt"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>+Owner</edgelabel>
        </childnode>
        <childnode refid="24" relation="template-instance">
          <edgelabel>&lt; CNMSeqOpt &gt;</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>CBiteOpt::CParOpt&lt; CSpherOpt &gt;</label>
        <link refid="class_c_bite_opt_1_1_c_par_opt"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>+Owner</edgelabel>
        </childnode>
        <childnode refid="24" relation="template-instance">
          <edgelabel>&lt; CSpherOpt &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>CBiteOptBase&lt; ptype &gt;</label>
        <link refid="class_c_bite_opt_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="protected-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>#ApplySels</edgelabel>
          <edgelabel>#Sels</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>CBiteOptBase&lt; double &gt;</label>
        <link refid="class_c_bite_opt_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="22" relation="protected-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>#ApplySels</edgelabel>
          <edgelabel>#Sels</edgelabel>
        </childnode>
        <childnode refid="13" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>CBiteOptBase&lt; int64_t &gt;</label>
        <link refid="class_c_bite_opt_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="protected-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>#ApplySels</edgelabel>
          <edgelabel>#Sels</edgelabel>
        </childnode>
        <childnode refid="13" relation="template-instance">
          <edgelabel>&lt; int64_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>CBiteOptDeep</label>
        <link refid="class_c_bite_opt_deep"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>#BestOpt</edgelabel>
          <edgelabel>#CurOpt</edgelabel>
          <edgelabel>#Opts</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>CBiteOptDeep::CBiteOptWrap</label>
        <link refid="class_c_bite_opt_deep_1_1_c_bite_opt_wrap"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>+Owner</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>CBiteOptInterface</label>
        <link refid="class_c_bite_opt_interface"/>
      </node>
      <node id="10">
        <label>CBiteParPops&lt; ptype &gt;</label>
        <link refid="class_c_bite_par_pops"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>CBiteParPops&lt; double &gt;</label>
        <link refid="class_c_bite_par_pops"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>#ParPops</edgelabel>
        </childnode>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>CBiteParPops&lt; int64_t &gt;</label>
        <link refid="class_c_bite_par_pops"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>#ParPops</edgelabel>
        </childnode>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; int64_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>CBiteParPops&lt; ptype &gt;</label>
        <link refid="class_c_bite_par_pops"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>CBitePop&lt; ptype &gt;</label>
        <link refid="class_c_bite_pop"/>
      </node>
      <node id="23">
        <label>CBitePop&lt; double &gt;</label>
        <link refid="class_c_bite_pop"/>
        <childnode refid="9" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>CBitePop&lt; int64_t &gt;</label>
        <link refid="class_c_bite_pop"/>
        <childnode refid="9" relation="template-instance">
          <edgelabel>&lt; int64_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>CBitePop&lt; ptype &gt;</label>
        <link refid="class_c_bite_pop"/>
      </node>
      <node id="29">
        <label>CBiteRnd</label>
        <link refid="class_c_bite_rnd"/>
      </node>
      <node id="16">
        <label>CBiteSel&lt; tCount &gt;</label>
        <link refid="class_c_bite_sel"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>CBiteSel&lt; 2 &gt;</label>
        <link refid="class_c_bite_sel"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; 2 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>CBiteSel&lt; 3 &gt;</label>
        <link refid="class_c_bite_sel"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; 3 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>CBiteSel&lt; 4 &gt;</label>
        <link refid="class_c_bite_sel"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; 4 &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>CBiteSelBase</label>
        <link refid="class_c_bite_sel_base"/>
      </node>
      <node id="27">
        <label>CNMSeqOpt</label>
        <link refid="class_c_n_m_seq_opt"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>CSpherOpt</label>
        <link refid="class_c_spher_opt"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>#CentPowSel</edgelabel>
          <edgelabel>#RadPowSel</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>#EvalFacSel</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>Fitness</label>
        <link refid="class_fitness"/>
      </node>
      <node id="25">
        <label>T</label>
      </node>
      <node id="1">
        <label>biteopt::BiteOptimizer</label>
        <link refid="classbiteopt_1_1_bite_optimizer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>-fitfun</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>-rnd</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="_fcmaescpp/biteoptimizer.cpp" line="18" column="1" bodyfile="_fcmaescpp/biteoptimizer.cpp" bodystart="18" bodyend="119"/>
    <listofallmembers>
      <member refid="class_c_bite_opt_deep_1afd1350f64112950d0887700984547b96" prot="protected" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>BestOpt</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a2eb7f354f8bc1aa1e4f5a001d3ecdc38" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>bestX</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1ae9c0069b5b67d537814be3f7f83c0293" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>bestY</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1ac0abad8d3fbb5e91bba5c49b59a60e8b" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>BiteOptimizer</name></member>
      <member refid="class_c_bite_opt_deep_1a65d5f650fd7eae9ae1d1cb76387a3179" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>CBiteOptDeep</name></member>
      <member refid="class_c_bite_opt_interface_1a0155b3fcab9eeb2d7505c0326e12e809" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>CBiteOptInterface</name></member>
      <member refid="class_c_bite_opt_deep_1a0407325111b05d021ce58bdc770f2c18" prot="protected" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>CurOpt</name></member>
      <member refid="class_c_bite_opt_deep_1a5aeb781988a714cc50107efa2521cc52" prot="protected" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>deleteBuffers</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a8e4b9fbc66dcb68d7afbfbdc9897c180" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>dim</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a7f48d5b15bac207bebbc9492708fb3fd" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>doOptimize</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a0ee80e7c3878dae82aef5f9a532281ae" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>fitfun</name></member>
      <member refid="class_c_bite_opt_deep_1a961516dc7772d327e64965fc3e07ce31" prot="public" virt="virtual"><scope>biteopt::BiteOptimizer</scope><name>getBestCost</name></member>
      <member refid="class_c_bite_opt_deep_1a17c7c044ef259f3c68e2e47c53c043a3" prot="public" virt="virtual"><scope>biteopt::BiteOptimizer</scope><name>getBestParams</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1aa117da98db6b95c17836e1c0acb37d88" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>getBestValue</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a311b608ce3c0eea69d66615f22448279" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>getBestX</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a5ebdeb53261b8a3d0366f7dee30995e1" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>getIterations</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a8d1716460571a9aef6f8206715a5a71c" prot="public" virt="virtual"><scope>biteopt::BiteOptimizer</scope><name>getMaxValues</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a11148136b4a3eebd78d235eda7e3dff4" prot="public" virt="virtual"><scope>biteopt::BiteOptimizer</scope><name>getMinValues</name></member>
      <member refid="class_c_bite_opt_deep_1aa30c464f1425ad1219e7f512e75527a5" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>getSelCount</name></member>
      <member refid="class_c_bite_opt_deep_1a4ddcbc966999f0b3f4b59c8f8e909864" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>getSelNames</name></member>
      <member refid="class_c_bite_opt_deep_1a7b759e5dbc58b29e36f7d3c6a10e16a7" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>getSels</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1aa080b647a6dc4297f6be40f55e443dfb" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>getStop</name></member>
      <member refid="class_c_bite_opt_deep_1abeb2e2aa0929e9fb6741ac7b0892a31b" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>init</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a96feed5acebf4945e27d50cbcd8ef36f" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>iterations</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a388a1a6fb08111aa79aba41ac358ef96" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>M</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a202fcfa155957a158f3a3916753448a4" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>maxEvaluations</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a0244d5e664ac99fd264ebe908023ce0c" prot="public" virt="virtual"><scope>biteopt::BiteOptimizer</scope><name>optcost</name></member>
      <member refid="class_c_bite_opt_deep_1a20f687043f3b744c0a77cb095cca4a9b" prot="protected" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>OptCount</name></member>
      <member refid="class_c_bite_opt_deep_1a5f9dce3d0bcb37dd0d63fec707204786" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>optimize</name></member>
      <member refid="class_c_bite_opt_deep_1ac3ed0017d87104f26f320ad878fddcc6" prot="protected" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>Opts</name></member>
      <member refid="class_c_bite_opt_deep_1ac7cfdf4754e5ad3fef6b3cd98ba22520" prot="protected" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>ParamCount</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a4b393b354bee73e0c41973074118a1e5" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>rnd</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a6635331036d8d48e550a1a6716bacf33" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>rs</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1aaf39fcde875f4ba2aabf9b881a46dab0" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>runid</name></member>
      <member refid="class_c_bite_opt_deep_1ad7c9509c6e4525db8faab200f4f2edf6" prot="protected" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>StallCount</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a710877c371d6154d8718ffadc82c220e" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>stallCriterion</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a9fdbe319b90b1f86175cd924c9700302" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>stop</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a8e2a405cc4f23f9f34e15236ac072721" prot="private" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>stopfitness</name></member>
      <member refid="class_c_bite_opt_deep_1a48ae954f715acc3433125af9b0abaa61" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>updateDims</name></member>
      <member refid="classbiteopt_1_1_bite_optimizer_1a5774713fad3253b58a5b79f52586e072" prot="public" virt="non-virtual"><scope>biteopt::BiteOptimizer</scope><name>~BiteOptimizer</name></member>
      <member refid="class_c_bite_opt_deep_1a8442d47ab16f76d4783a4f8227ab78a7" prot="public" virt="virtual"><scope>biteopt::BiteOptimizer</scope><name>~CBiteOptDeep</name></member>
      <member refid="class_c_bite_opt_interface_1a070d1317053ec55bbe7d8ddde32076ce" prot="public" virt="virtual"><scope>biteopt::BiteOptimizer</scope><name>~CBiteOptInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
