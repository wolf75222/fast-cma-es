<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacefcmaes_1_1mode" kind="namespace" language="Python">
    <compoundname>fcmaes::mode</compoundname>
    <innerclass refid="classfcmaes_1_1mode_1_1_m_o_d_e" prot="public">fcmaes::mode::MODE</innerclass>
    <innerclass refid="classfcmaes_1_1mode_1_1store" prot="public">fcmaes::mode::store</innerclass>
    <innerclass refid="classfcmaes_1_1mode_1_1wrapper" prot="public">fcmaes::mode::wrapper</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1a7e76a634ae4563d738ad007097e3c2b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, np.ndarray]</type>
        <definition> Tuple[np.ndarray, np.ndarray] fcmaes.mode.minimize</definition>
        <argsstring>(Callable[[ArrayLike], ArrayLike] mofun, int nobj, int ncon, Bounds bounds, Optional[np.ndarray] guess=None, Optional[int] popsize=64, Optional[int] max_evaluations=100000, Optional[int] workers=1, Optional[float] f=0.5, Optional[float] cr=0.9, Optional[float] pro_c=0.5, Optional[float] dis_c=15.0, Optional[float] pro_m=0.9, Optional[float] dis_m=20.0, Optional[bool] nsga_update=True, Optional[int] pareto_update=0, Optional[ArrayLike] ints=None, Callable modifier=None, Optional[float] min_mutate=0.1, Optional[float] max_mutate=0.5, Optional[Generator] rg=Generator(PCG64DXSM()), Optional[store] store=None)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.mode.minimize</qualifiedname>
        <param>
          <type>Callable</type>
          <defname>mofun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>ArrayLike]</type>
          <declname>mofun</declname>
          <defname>nobj</defname>
        </param>
        <param>
          <type>int</type>
          <declname>nobj</declname>
          <defname>ncon</defname>
        </param>
        <param>
          <type>int</type>
          <declname>ncon</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Bounds</type>
          <declname>bounds</declname>
          <defname>guess</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>guess</declname>
          <defname>popsize</defname>
          <array>[np.ndarray]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <defname>max_evaluations</defname>
          <array>[int]</array>
          <defval>64</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <defname>workers</defname>
          <array>[int]</array>
          <defval>100000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <defname>f</defname>
          <array>[int]</array>
          <defval>1</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>f</declname>
          <defname>cr</defname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>cr</declname>
          <defname>pro_c</defname>
          <array>[float]</array>
          <defval>0.9</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pro_c</declname>
          <defname>dis_c</defname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>dis_c</declname>
          <defname>pro_m</defname>
          <array>[float]</array>
          <defval>15.0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pro_m</declname>
          <defname>dis_m</defname>
          <array>[float]</array>
          <defval>0.9</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>dis_m</declname>
          <defname>nsga_update</defname>
          <array>[float]</array>
          <defval>20.0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>nsga_update</declname>
          <defname>pareto_update</defname>
          <array>[bool]</array>
          <defval>True</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pareto_update</declname>
          <defname>ints</defname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>ints</declname>
          <defname>modifier</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Callable</type>
          <declname>modifier</declname>
          <defname>min_mutate</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>min_mutate</declname>
          <defname>max_mutate</defname>
          <array>[float]</array>
          <defval>0.1</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_mutate</declname>
          <defname>rg</defname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>rg</declname>
          <defname>store</defname>
          <array>[Generator]</array>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>store</declname>
          <array>[store]</array>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Minimizes a multi-objective function subject to constraints and bounds using evolutionary algorithms. </para>
        </briefdescription>
        <detaileddescription>
<para>The function supports parallel computation and allows various configurations to modify the optimization process.</para>
<para><verbatim>   mofun (Callable[[ArrayLike], ArrayLike]): A callable representing the multi-objective
       function to minimize. It must take an array-like input and return an array-like
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objective functions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncon</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of constraints. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounds for the decision variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess for the population. If not provided, a random guess will be generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the population for the evolutionary algorithm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of allowable function evaluations during the optimization process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of workers to use for parallel computation. A value of 1 indicates serial computation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Differential evolution scale factor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cr</parametername>
</parameternamelist>
<parameterdescription>
<para>Differential evolution crossover probability. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pro_c</parametername>
</parameternamelist>
<parameterdescription>
<para>Crossover probability for simulated binary crossover (SBX). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis_c</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution index for simulated binary crossover (SBX). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pro_m</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutation probability for polynomial mutation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis_m</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution index for polynomial mutation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsga_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to enable or disable NSGA-II style updates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pareto_update</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency of Pareto front updates. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ints</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific indices of decision variables that are treated as integers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modifier</parametername>
</parameternamelist>
<parameterdescription>
<para>A callable that modifies the process of variable updates. This can be used to apply additional constraints or actions during the optimization </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>process.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_mutate</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum mutation factor for decision variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_mutate</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum mutation factor for decision variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of random number generator to ensure repeatability. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional storage object to store results at the end of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optimization.</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, np.ndarray]: A tuple containing the optimal decision variables (x) and the corresponding objective function values (y). If optimization fails, returns (None, None). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="134" column="1" bodyfile="fcmaes/mode.py" bodystart="155" bodyend="173"/>
        <referencedby refid="namespacefcmaes_1_1mode_1a0bc11f1e1783869a0b99b01ba75c80eb" compoundref="mode_8py" startline="1449" endline="1458">fcmaes.mode.minimize_plot</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1a7437cac94470387e12001d7f424393af" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode._check_bounds</definition>
        <argsstring>(bounds, dim)</argsstring>
        <name>_check_bounds</name>
        <qualifiedname>fcmaes.mode._check_bounds</qualifiedname>
        <param>
          <type>bounds</type>
          <defname>bounds</defname>
        </param>
        <param>
          <type>dim</type>
          <defname>dim</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="890" column="1" bodyfile="fcmaes/mode.py" bodystart="890" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1a4421a58b8727b0b72ab4aaff9f3494b3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode._filter</definition>
        <argsstring>(x, y)</argsstring>
        <name>_filter</name>
        <qualifiedname>fcmaes.mode._filter</qualifiedname>
        <param>
          <type>x</type>
          <defname>x</defname>
        </param>
        <param>
          <type>y</type>
          <defname>y</defname>
        </param>
        <briefdescription>
<para>Filters and sorts input arrays based on specific conditions. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes two input arrays <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput>. It first determines the maximum value along the first axis of <computeroutput>y</computeroutput>, sorts both arrays based on this criterion, and then applies additional filtering conditions on <computeroutput>y</computeroutput> to exclude specific rows.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array to be processed and filtered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D array whose maximum values along the first axis determine the sorting order, and which is filtered according to additional </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conditions.</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple containing:<itemizedlist>
<listitem><para>The filtered and sorted version of the input array <computeroutput>x</computeroutput>.</para>
</listitem><listitem><para>The filtered and sorted version of the array <computeroutput>y</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="919" column="1" bodyfile="fcmaes/mode.py" bodystart="919" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1a64da91b9fe11c4db2c528851fe65f4e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.objranks</definition>
        <argsstring>(objs)</argsstring>
        <name>objranks</name>
        <qualifiedname>fcmaes.mode.objranks</qualifiedname>
        <param>
          <type>objs</type>
          <defname>objs</defname>
        </param>
        <briefdescription>
<para>Computes the rank of objects based on their sum of ranks across all columns. </para>
        </briefdescription>
        <detaileddescription>
<para>The function calculates the rank of each object in each column, then sums these ranks across the columns to produce a single rank value for each object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>objs</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2-dimensional numpy array where each row represents an object, and each column represents a category or feature.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>numpy A 1-dimensional numpy array containing the computed rank for each object based on the sum of its ranks across all columns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="942" column="1" bodyfile="fcmaes/mode.py" bodystart="942" bodyend="950"/>
        <referencedby refid="namespacefcmaes_1_1mode_1aee5b0cd4fba6d7edff0afe48a8bc636a" compoundref="mode_8py" startline="1064" endline="1100">fcmaes.mode.pareto_domination</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1af072da864e0f91afc47942de9a8901a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.ranks</definition>
        <argsstring>(cons, feasible, eps)</argsstring>
        <name>ranks</name>
        <qualifiedname>fcmaes.mode.ranks</qualifiedname>
        <param>
          <type>cons</type>
          <defname>cons</defname>
        </param>
        <param>
          <type><ref refid="namespacefcmaes_1_1mode_1ad8018519575a155be2d2f4659ce52b0b" kindref="member">feasible</ref></type>
          <defname>feasible</defname>
        </param>
        <param>
          <type>eps</type>
          <defname>eps</defname>
        </param>
        <briefdescription>
<para>Computes the ranks of constraint values, adjusted by their feasibility and scaled by the fraction of violations for each constraint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cons</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D array of constraint values where rows represent different samples and columns represent different constraints. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feasible</parametername>
</parameternamelist>
<parameterdescription>
<para>A 1D boolean array indicating whether each row (sample) in <computeroutput>cons</computeroutput> is feasible (True) or not (False). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar threshold value used to determine the violation of constraints.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>numpy A 1D array that contains the computed rank for each sample in <computeroutput>cons</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="965" column="1" bodyfile="fcmaes/mode.py" bodystart="965" bodyend="977"/>
        <referencedby refid="namespacefcmaes_1_1mode_1aee5b0cd4fba6d7edff0afe48a8bc636a" compoundref="mode_8py" startline="1064" endline="1100">fcmaes.mode.pareto_domination</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1aa9045b5ff7e2451881af650c926cc04c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.get_valid</definition>
        <argsstring>(xs, ys, nobj)</argsstring>
        <name>get_valid</name>
        <qualifiedname>fcmaes.mode.get_valid</qualifiedname>
        <param>
          <type>xs</type>
          <defname>xs</defname>
        </param>
        <param>
          <type>ys</type>
          <defname>ys</defname>
        </param>
        <param>
          <type>nobj</type>
          <defname>nobj</defname>
        </param>
        <briefdescription>
<para>Filters the input data based on a validity condition and returns the valid elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array-like structure containing input data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>Array-like structure, typically associated with <computeroutput>xs</computeroutput>, used for the validity check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer specifying the number of columns to skip in <computeroutput>ys</computeroutput> for the validity check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple containing:<itemizedlist>
<listitem><para>The filtered elements of <computeroutput>xs</computeroutput> that satisfy the validity condition.</para>
</listitem><listitem><para>The filtered elements of <computeroutput>ys</computeroutput> that align with the valid <computeroutput>xs</computeroutput>. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="992" column="1" bodyfile="fcmaes/mode.py" bodystart="992" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1a4648393e4988cb88b634bc6969891383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.pareto_sort</definition>
        <argsstring>(x0, y0, nobj, ncon)</argsstring>
        <name>pareto_sort</name>
        <qualifiedname>fcmaes.mode.pareto_sort</qualifiedname>
        <param>
          <type>x0</type>
          <defname>x0</defname>
        </param>
        <param>
          <type>y0</type>
          <defname>y0</defname>
        </param>
        <param>
          <type>nobj</type>
          <defname>nobj</defname>
        </param>
        <param>
          <type>ncon</type>
          <defname>ncon</defname>
        </param>
        <briefdescription>
<para>Sorts solutions based on Pareto dominance and crowding distance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sorts a given set of solutions into levels based on Pareto dominance. Within each level, solutions are further sorted by crowding distance to ensure diversity. The input arrays <computeroutput>x0</computeroutput> and <computeroutput>y0</computeroutput> are reordered accordingly, and the resulting sorted arrays are returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>Array-like structure representing the original decision variables of the solutions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>Array-like structure representing the objectives of the solutions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer specifying the number of objectives for each solution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncon</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer specifying the number of constraints for each solution.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple of two NumPy arrays:<itemizedlist>
<listitem><para>The reordered <computeroutput>x0</computeroutput> array based on Pareto dominance and crowding </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>distance.<itemizedlist>
<listitem><para>The reordered <computeroutput>y0</computeroutput> array based on Pareto dominance and crowding </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>distance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="1018" column="1" bodyfile="fcmaes/mode.py" bodystart="1018" bodyend="1037"/>
        <references refid="namespacefcmaes_1_1mode_1a0f27ab476c153a96dba3568003ab075a" compoundref="mode_8py" startline="1147" endline="1164">fcmaes.mode.crowd_dist</references>
        <references refid="namespacefcmaes_1_1mode_1aee5b0cd4fba6d7edff0afe48a8bc636a" compoundref="mode_8py" startline="1064" endline="1100">fcmaes.mode.pareto_domination</references>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1aee5b0cd4fba6d7edff0afe48a8bc636a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.pareto_domination</definition>
        <argsstring>(ys, nobj, ncon, last_ycon=None, last_eps=0)</argsstring>
        <name>pareto_domination</name>
        <qualifiedname>fcmaes.mode.pareto_domination</qualifiedname>
        <param>
          <type>ys</type>
          <defname>ys</defname>
        </param>
        <param>
          <type>nobj</type>
          <defname>nobj</defname>
        </param>
        <param>
          <type>ncon</type>
          <defname>ncon</defname>
        </param>
        <param>
          <type>last_ycon</type>
          <defname>last_ycon</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>last_eps</type>
          <defname>last_eps</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Determines Pareto domination levels for a set of solutions considering objectives and constraint violations. </para>
        </briefdescription>
        <detaileddescription>
<para>Divides solutions into feasible and infeasible sets, calculates their dominance levels based on objectives and constraints, and returns the relevant rankings.</para>
<para><verbatim>   ys (list or np.ndarray): A list or array of solutions where each solution
       contains concatenated values of objectives and constraints.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of objectives in each solution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncon</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of constraints in each solution. last_ycon (np.ndarray, optional): Array representing constraint violations used in the previous iteration for adjusting tolerance to small violations. Defaults to None. last_eps (float, optional): Tolerance level for constraint violations in the last iteration. Defaults to 0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>tuple A tuple containing:<itemizedlist>
<listitem><para>np.ndarray: Array of Pareto domination levels for all solutions.</para>
</listitem><listitem><para>np.ndarray: Array of adjusted constraint violations for each solution.</para>
</listitem><listitem><para>float: Adjusted tolerance for constraint violations.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="1064" column="1" bodyfile="fcmaes/mode.py" bodystart="1064" bodyend="1100"/>
        <references refid="namespacefcmaes_1_1mode_1a64da91b9fe11c4db2c528851fe65f4e4" compoundref="mode_8py" startline="942" endline="950">fcmaes.mode.objranks</references>
        <references refid="namespacefcmaes_1_1mode_1a2570992dd7d42219e4b1381adff7a710" compoundref="mode_8py" startline="1118" endline="1131">fcmaes.mode.pareto_levels</references>
        <references refid="namespacefcmaes_1_1mode_1af072da864e0f91afc47942de9a8901a5" compoundref="mode_8py" startline="965" endline="977">fcmaes.mode.ranks</references>
        <referencedby refid="namespacefcmaes_1_1mode_1a4648393e4988cb88b634bc6969891383" compoundref="mode_8py" startline="1018" endline="1037">fcmaes.mode.pareto_sort</referencedby>
        <referencedby refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a29791dbcb2e070361529475630de2052" compoundref="mode_8py" startline="694" endline="731">fcmaes.mode.MODE.pop_update</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1a2570992dd7d42219e4b1381adff7a710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.pareto_levels</definition>
        <argsstring>(ys)</argsstring>
        <name>pareto_levels</name>
        <qualifiedname>fcmaes.mode.pareto_levels</qualifiedname>
        <param>
          <type>ys</type>
          <defname>ys</defname>
        </param>
        <briefdescription>
<para>Determines the Pareto levels of a given set of points. </para>
        </briefdescription>
        <detaileddescription>
<para>This function identifies the domination levels of a set of points, where the domination level of a point represents the number of other points dominating it. Domination is determined based on whether one point strictly dominates another in all dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D array where each row represents a point in a multi-dimensional space, and domination is evaluated across </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimensions.</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>numpy A 1D array where each index corresponds to the domination level of the respective point in the input array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="1118" column="1" bodyfile="fcmaes/mode.py" bodystart="1118" bodyend="1131"/>
        <referencedby refid="namespacefcmaes_1_1mode_1aee5b0cd4fba6d7edff0afe48a8bc636a" compoundref="mode_8py" startline="1064" endline="1100">fcmaes.mode.pareto_domination</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1a0f27ab476c153a96dba3568003ab075a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.crowd_dist</definition>
        <argsstring>(y)</argsstring>
        <name>crowd_dist</name>
        <qualifiedname>fcmaes.mode.crowd_dist</qualifiedname>
        <param>
          <type>y</type>
          <defname>y</defname>
        </param>
        <briefdescription>
<para>Calculates the crowding distance for the first objective in a multi-objective optimization problem. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines for each solution how dense the neighborhood is based on the distances to its nearest neighbors in the sorted objective space. It assigns a numerical value to each solution reflecting this crowding distance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of solutions, where each solution is represented as a list of objective values. This function specifically uses the first objective value for the crowding distance calculation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>numpy An array of crowding distances for each solution in the input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="1147" column="1" bodyfile="fcmaes/mode.py" bodystart="1147" bodyend="1164"/>
        <referencedby refid="namespacefcmaes_1_1mode_1a4648393e4988cb88b634bc6969891383" compoundref="mode_8py" startline="1018" endline="1037">fcmaes.mode.pareto_sort</referencedby>
        <referencedby refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a29791dbcb2e070361529475630de2052" compoundref="mode_8py" startline="694" endline="731">fcmaes.mode.MODE.pop_update</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1afba15234474d356adb0ed83aa94f73a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.variation</definition>
        <argsstring>(pop, lower, upper, rg, pro_c=1, dis_c=20, pro_m=1, dis_m=20)</argsstring>
        <name>variation</name>
        <qualifiedname>fcmaes.mode.variation</qualifiedname>
        <param>
          <type>pop</type>
          <defname>pop</defname>
        </param>
        <param>
          <type>lower</type>
          <defname>lower</defname>
        </param>
        <param>
          <type>upper</type>
          <defname>upper</defname>
        </param>
        <param>
          <type>rg</type>
          <defname>rg</defname>
        </param>
        <param>
          <type>pro_c</type>
          <defname>pro_c</defname>
          <defval>1</defval>
        </param>
        <param>
          <type>dis_c</type>
          <defname>dis_c</defname>
          <defval>20</defval>
        </param>
        <param>
          <type>pro_m</type>
          <defname>pro_m</defname>
          <defval>1</defval>
        </param>
        <param>
          <type>dis_m</type>
          <defname>dis_m</defname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Applies genetic variation operations, including simulated binary crossover (SBX) and polynomial mutation, on a population to produce offspring. </para>
        </briefdescription>
        <detaileddescription>
<para>The method modifies the population based on crossover and mutation probabilities, as well as distribution control parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pop</parametername>
</parameternamelist>
<parameterdescription>
<para>numpy.ndarray Input population array, where each row represents an individual and each column represents a design variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lower</parametername>
</parameternamelist>
<parameterdescription>
<para>numpy.ndarray Lower bounds for each design variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper</parametername>
</parameternamelist>
<parameterdescription>
<para>numpy.ndarray Upper bounds for each design variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>numpy.random.Generator Random number generator instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pro_c</parametername>
</parameternamelist>
<parameterdescription>
<para>float, optional Probability of performing crossover, default is 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis_c</parametername>
</parameternamelist>
<parameterdescription>
<para>float, optional Distribution index for crossover, default is 20. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pro_m</parametername>
</parameternamelist>
<parameterdescription>
<para>float, optional Probability of performing mutation, default is 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis_m</parametername>
</parameternamelist>
<parameterdescription>
<para>float, optional Distribution index for mutation, default is 20.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>numpy.ndarray Modified population (offspring) after applying crossover and mutation operations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="1193" column="1" bodyfile="fcmaes/mode.py" bodystart="1193" bodyend="1227"/>
        <referencedby refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a29791dbcb2e070361529475630de2052" compoundref="mode_8py" startline="694" endline="731">fcmaes.mode.MODE.pop_update</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1ad8018519575a155be2d2f4659ce52b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.feasible</definition>
        <argsstring>(xs, ys, ncon, eps=1E-2)</argsstring>
        <name>feasible</name>
        <qualifiedname>fcmaes.mode.feasible</qualifiedname>
        <param>
          <type>xs</type>
          <defname>xs</defname>
        </param>
        <param>
          <type>ys</type>
          <defname>ys</defname>
        </param>
        <param>
          <type>ncon</type>
          <defname>ncon</defname>
        </param>
        <param>
          <type>eps</type>
          <defname>eps</defname>
          <defval>1E-2</defval>
        </param>
        <briefdescription>
<para>Determines feasible solutions based on constraints and filters the input arrays <computeroutput>xs</computeroutput> and <computeroutput>ys</computeroutput> accordingly. </para>
        </briefdescription>
        <detaileddescription>
<para>It evaluates constraint violations and ensures that violations are below the threshold (<computeroutput>eps</computeroutput>) for feasibility.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array of solutions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of objective and constraint values corresponding to the solutions in <computeroutput>xs</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncon</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of constraints. Constraints are assumed to be the last <computeroutput>ncon</computeroutput> columns of the <computeroutput>ys</computeroutput> array. eps (float, optional): Feasibility threshold. Defaults to 1E-2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, np.ndarray]: Filtered solutions (<computeroutput>xs</computeroutput>) and their corresponding objective values (<computeroutput>ys</computeroutput>), with infeasible solutions removed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="1245" column="1" bodyfile="fcmaes/mode.py" bodystart="1245" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1afc694697801d4ac2a3e8956987220939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.mode.is_feasible</definition>
        <argsstring>(y, nobj, eps=1E-2)</argsstring>
        <name>is_feasible</name>
        <qualifiedname>fcmaes.mode.is_feasible</qualifiedname>
        <param>
          <type>y</type>
          <defname>y</defname>
        </param>
        <param>
          <type>nobj</type>
          <defname>nobj</defname>
        </param>
        <param>
          <type>eps</type>
          <defname>eps</defname>
          <defval>1E-2</defval>
        </param>
        <briefdescription>
<para>Determines if a given solution is feasible based on constraints and tolerance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function evaluates feasibility by checking whether the sum of violated constraints (if any) is less than the provided tolerance value. If there are no constraints, the solution is automatically considered feasible.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>List or array-like containing values of both objectives and constraints. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer specifying the number of objectives in the array &apos;y&apos;. The rest are treated as constraints. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps</parametername>
</parameternamelist>
<parameterdescription>
<para>Float representing the tolerance level for determining feasibility. Defaults to 1E-2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>bool True if the solution is feasible (i.e., sum of violated constraints is below the specified tolerance), otherwise False. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="1275" column="1" bodyfile="fcmaes/mode.py" bodystart="1275" bodyend="1282"/>
        <referencedby refid="classfcmaes_1_1mode_1_1wrapper_1a3da595496f0fa1e7a64955db25dec429" compoundref="mode_8py" startline="1370" endline="1403">fcmaes.mode.wrapper.__call__</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1mode_1a0bc11f1e1783869a0b99b01ba75c80eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, np.ndarray]</type>
        <definition> Tuple[np.ndarray, np.ndarray] fcmaes.mode.minimize_plot</definition>
        <argsstring>(str name, Callable[[ArrayLike], ArrayLike] fun, int nobj, int ncon, Bounds bounds, Optional[int] popsize=64, Optional[int] max_evaluations=100000, Optional[bool] nsga_update=True, Optional[int] pareto_update=0, Optional[ArrayLike] ints=None, Optional[int] workers=mp.cpu_count())</argsstring>
        <name>minimize_plot</name>
        <qualifiedname>fcmaes.mode.minimize_plot</qualifiedname>
        <param>
          <type>str</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>ArrayLike]</type>
          <declname>fun</declname>
          <defname>nobj</defname>
        </param>
        <param>
          <type>int</type>
          <declname>nobj</declname>
          <defname>ncon</defname>
        </param>
        <param>
          <type>int</type>
          <declname>ncon</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Bounds</type>
          <declname>bounds</declname>
          <defname>popsize</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <defname>max_evaluations</defname>
          <array>[int]</array>
          <defval>64</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <defname>nsga_update</defname>
          <array>[int]</array>
          <defval>100000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>nsga_update</declname>
          <defname>pareto_update</defname>
          <array>[bool]</array>
          <defval>True</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pareto_update</declname>
          <defname>ints</defname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>ints</declname>
          <defname>workers</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <array>[int]</array>
          <defval>mp.cpu_count()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/mode.py" line="1439" column="1" bodyfile="fcmaes/mode.py" bodystart="1449" bodyend="1458"/>
        <references refid="namespacefcmaes_1_1mode_1a7e76a634ae4563d738ad007097e3c2b4" compoundref="mode_8py" startline="155" endline="173">fcmaes.mode.minimize</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="fcmaes/mode.py" line="1" column="1"/>
  </compounddef>
</doxygen>
