<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="interferometry__udp_8py" kind="file" language="Python">
    <compoundname>interferometry_udp.py</compoundname>
    <innerclass refid="classexamples_1_1interferometry__udp_1_1_interferometry" prot="public">examples::interferometry_udp::Interferometry</innerclass>
    <innernamespace refid="namespaceexamples">examples</innernamespace>
    <innernamespace refid="namespaceexamples_1_1interferometry__udp">examples::interferometry_udp</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry__udp_1a0f511dae1cda4fc86f448811ea76a52b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry_udp.stdout</definition>
        <argsstring></argsstring>
        <name>stdout</name>
        <qualifiedname>examples.interferometry_udp.stdout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry_udp.py" line="32" column="1" bodyfile="examples/interferometry_udp.py" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry__udp_1af7003fd9174f0ca0c0fcb7a766387191" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry_udp.format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <qualifiedname>examples.interferometry_udp.format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry_udp.py" line="32" column="1" bodyfile="examples/interferometry_udp.py" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry__udp_1a93288b8b4ae12b4cd66fe598a24ca610" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry_udp.level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <qualifiedname>examples.interferometry_udp.level</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry_udp.py" line="32" column="1" bodyfile="examples/interferometry_udp.py" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry__udp_1a1fa9fbcc27bb7a7e4a2a1304d29496b1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry_udp.best</definition>
        <argsstring></argsstring>
        <name>best</name>
        <qualifiedname>examples.interferometry_udp.best</qualifiedname>
        <initializer>=  mp.RawValue(ct.c_double, np.inf)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry_udp.py" line="60" column="1" bodyfile="examples/interferometry_udp.py" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry__udp_1a8fe727e854115e399d2a0f00c17bdfbc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry_udp.count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <qualifiedname>examples.interferometry_udp.count</qualifiedname>
        <initializer>=  mp.RawValue(ct.c_int, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry_udp.py" line="61" column="1" bodyfile="examples/interferometry_udp.py" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry__udp_1a92a0fa419a0d32fac263c9e25af3da4f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry_udp.t0</definition>
        <argsstring></argsstring>
        <name>t0</name>
        <qualifiedname>examples.interferometry_udp.t0</qualifiedname>
        <initializer>=  time()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry_udp.py" line="62" column="1" bodyfile="examples/interferometry_udp.py" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1interferometry__udp_1a742b65934a702e09a3e3ab28673ed758" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::interferometry_udp.monitor</definition>
        <argsstring></argsstring>
        <name>monitor</name>
        <qualifiedname>examples.interferometry_udp.monitor</qualifiedname>
        <initializer>=  mp.Lock()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry_udp.py" line="63" column="1" bodyfile="examples/interferometry_udp.py" bodystart="63" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceexamples_1_1interferometry__udp_1aeab16d7e29734973fa9765c86dc90bc0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.interferometry_udp._get_observed</definition>
        <argsstring>(n_points, im_ft, chromosome)</argsstring>
        <name>_get_observed</name>
        <qualifiedname>examples.interferometry_udp._get_observed</qualifiedname>
        <param>
          <type>n_points</type>
          <defname>n_points</defname>
        </param>
        <param>
          <type>im_ft</type>
          <defname>im_ft</defname>
        </param>
        <param>
          <type>chromosome</type>
          <defname>chromosome</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/interferometry_udp.py" line="36" column="1" bodyfile="examples/interferometry_udp.py" bodystart="36" bodyend="59"/>
        <referencedby refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a35547ca7bad49ebeec4beaf458f53856" compoundref="interferometry__udp_8py" startline="84" endline="96">examples.interferometry_udp.Interferometry.fitness</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceexamples_1_1interferometry__udp" refkind="compound"><highlight class="comment">#<sp/>Copyright<sp/>(c)<sp/>Dietmar<sp/>Wolz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>code<sp/>was<sp/>posted<sp/>on<sp/>https://gitter.im/pagmo2/Lobby<sp/>by<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Markus<sp/>MÃ¤rtens<sp/>@CoolRunning<sp/>and<sp/>extended<sp/>by<sp/>a<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>fcmaes<sp/>parallel<sp/>differential<sp/>evolution<sp/>solver<sp/>for<sp/>comparison<sp/>with<sp/>the<sp/>pagmo<sp/>island<sp/>concept.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/>requires<sp/>oagmo<sp/>(pip<sp/>install<sp/>pagmo)<sp/>for<sp/>the<sp/>comparison.<sp/>Tested<sp/>with<sp/>Anaconda<sp/>2020.11<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>https://repo.anaconda.com/archive/<sp/>using<sp/>Python<sp/>3.8<sp/>on<sp/>Linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>test<sp/>image<sp/>used<sp/>is<sp/>here:<sp/>https://api.optimize.esa.int/data/interferometry/orion.jpg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Tested<sp/>using<sp/>https://docs.conda.io/en/main/miniconda.html<sp/>on<sp/>Linux<sp/>Mint<sp/>21.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>time<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>matplotlib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pyplot</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>numba<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>njit</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>fft</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>skimage.metrics<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>mean_squared_error</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>skimage.transform<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>resize</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ctypes<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>ct</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>multiprocessing<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>mp</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>loguru<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">logger.remove()</highlight></codeline>
<codeline lineno="32" refid="namespaceexamples_1_1interferometry__udp_1af7003fd9174f0ca0c0fcb7a766387191" refkind="member"><highlight class="normal">logger.add(sys.stdout,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">logger.add(</highlight><highlight class="stringliteral">&quot;log_{time}.txt&quot;</highlight><highlight class="normal">,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">@njit(fastmath=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespaceexamples_1_1interferometry__udp_1aeab16d7e29734973fa9765c86dc90bc0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1interferometry__udp_1aeab16d7e29734973fa9765c86dc90bc0" kindref="member">_get_observed</ref>(n_points,<sp/>im_ft,<sp/>chromosome):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>r,<sp/>c<sp/>=<sp/>im_ft.shape</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>0.01</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>x,<sp/>y<sp/>=<sp/>chromosome[:n_points],<sp/>chromosome[n_points:]</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>lx<sp/>=<sp/>(np.expand_dims(x,<sp/>-1)<sp/>-<sp/>x).ravel()</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>ly<sp/>=<sp/>(np.expand_dims(y,<sp/>-1)<sp/>-<sp/>y).ravel()</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>np.linspace(0,<sp/>2*np.pi,<sp/>10000)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>cos_theta<sp/>=<sp/>np.cos(theta)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>sin_theta<sp/>=<sp/>np.sin(theta)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>obs_uv_matrix<sp/>=<sp/>np.zeros((r,<sp/>c),<sp/>dtype=np.int32)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(10000):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(lx)):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_re_u<sp/>=<sp/>math.floor((lx[j]<sp/>*<sp/><sp/>cos_theta[i]<sp/>+<sp/>ly[j]<sp/>*<sp/>sin_theta[i]<sp/>)<sp/>/<sp/>l)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_re_v<sp/>=<sp/>math.floor((lx[j]<sp/>*<sp/>-sin_theta[i]<sp/>+<sp/>ly[j]<sp/>*<sp/>cos_theta[i]<sp/>)<sp/>/<sp/>l)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>math.floor(full_re_u<sp/>*<sp/>r<sp/>/<sp/>2**2.5<sp/>*<sp/>l)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>math.floor(full_re_v<sp/>*<sp/>r<sp/>/<sp/>2**2.5<sp/>*<sp/>l)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obs_uv_matrix[x][y]<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>im_ft<sp/>*<sp/>obs_uv_matrix</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="namespaceexamples_1_1interferometry__udp_1a1fa9fbcc27bb7a7e4a2a1304d29496b1" refkind="member"><highlight class="normal">best<sp/>=<sp/>mp.RawValue(ct.c_double,<sp/>np.inf)<sp/></highlight></codeline>
<codeline lineno="61" refid="namespaceexamples_1_1interferometry__udp_1a8fe727e854115e399d2a0f00c17bdfbc" refkind="member"><highlight class="normal">count<sp/>=<sp/>mp.RawValue(ct.c_int,<sp/>0)<sp/></highlight></codeline>
<codeline lineno="62" refid="namespaceexamples_1_1interferometry__udp_1a92a0fa419a0d32fac263c9e25af3da4f" refkind="member"><highlight class="normal">t0<sp/>=<sp/>time()</highlight></codeline>
<codeline lineno="63" refid="namespaceexamples_1_1interferometry__udp_1a742b65934a702e09a3e3ab28673ed758" refkind="member"><highlight class="normal">monitor<sp/>=<sp/>mp.Lock()</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classexamples_1_1interferometry__udp_1_1_interferometry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1interferometry__udp_1_1_interferometry" kindref="compound">Interferometry</ref>():</highlight></codeline>
<codeline lineno="66" refid="classexamples_1_1interferometry__udp_1_1_interferometry_1ac3456e586ad91c7a24ca7b89e321133f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1ac3456e586ad91c7a24ca7b89e321133f" kindref="member">__init__</ref>(self,<sp/>number_points,<sp/>image,<sp/>image_size):</highlight></codeline>
<codeline lineno="67" refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e" kindref="member">number_points</ref><sp/>=<sp/>number_points</highlight></codeline>
<codeline lineno="68" refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a468ad50f14f7acacbc604489b7348269" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a468ad50f14f7acacbc604489b7348269" kindref="member">image</ref><sp/>=<sp/>image</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#We<sp/>make<sp/>sure<sp/>that<sp/>it<sp/>is<sp/>a<sp/>power<sp/>of<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((image_size<sp/>&amp;<sp/>(image_size-1)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>image_size<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="72" refid="classexamples_1_1interferometry__udp_1_1_interferometry_1ada31a2daf6f03c43db3a69a6a085a24a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1ada31a2daf6f03c43db3a69a6a085a24a" kindref="member">image_size_log2</ref><sp/>=<sp/>np.log2(image_size)</highlight></codeline>
<codeline lineno="73" refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a1eb1ca6f3df61ce5e288b5431d41b4b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a1eb1ca6f3df61ce5e288b5431d41b4b3" kindref="member">image_size</ref><sp/>=<sp/>image_size</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img<sp/>=<sp/>pyplot.imread(self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a468ad50f14f7acacbc604489b7348269" kindref="member">image</ref>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img<sp/>=<sp/>resize(img,<sp/>(self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a1eb1ca6f3df61ce5e288b5431d41b4b3" kindref="member">image_size</ref>,self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a1eb1ca6f3df61ce5e288b5431d41b4b3" kindref="member">image_size</ref>),<sp/>preserve_range=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>anti_aliasing=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a033ed091186328f2783d7d6a7548de03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a033ed091186328f2783d7d6a7548de03" kindref="member">im_numpy</ref><sp/>=<sp/>np.asarray(img)</highlight></codeline>
<codeline lineno="79" refid="classexamples_1_1interferometry__udp_1_1_interferometry_1ad907cb45808a3f0dcda1a08e46a372ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1ad907cb45808a3f0dcda1a08e46a372ce" kindref="member">im_fft</ref><sp/>=<sp/>fft.fft2(self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a033ed091186328f2783d7d6a7548de03" kindref="member">im_numpy</ref>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a2d43e438cc90a1c292c90925583652b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a2d43e438cc90a1c292c90925583652b7" kindref="member">get_bounds</ref>(self):</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>([-1.0]*self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e" kindref="member">number_points</ref>*2,<sp/>[1.0]*self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e" kindref="member">number_points</ref>*2)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a35547ca7bad49ebeec4beaf458f53856" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a35547ca7bad49ebeec4beaf458f53856" kindref="member">fitness</ref>(self,<sp/>x):</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>observed<sp/>=<sp/><ref refid="namespaceexamples_1_1interferometry__udp_1aeab16d7e29734973fa9765c86dc90bc0" kindref="member">_get_observed</ref>(self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e" kindref="member">number_points</ref>,<sp/>self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1ad907cb45808a3f0dcda1a08e46a372ce" kindref="member">im_fft</ref>,<sp/>x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>im_reconstruct<sp/>=<sp/>fft.ifft2(observed).real</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>(mean_squared_error(self.<ref refid="classexamples_1_1interferometry__udp_1_1_interferometry_1a033ed091186328f2783d7d6a7548de03" kindref="member">im_numpy</ref>,<sp/>im_reconstruct),)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>monitor:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count.value<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>val[0]<sp/>&lt;<sp/>best.value:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best.value<sp/>=<sp/>val[0]</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(str(count.value)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>fval<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(val[0])<sp/>+<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>t<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(round(1000*(time()<sp/>-<sp/>t0)))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ms&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>x<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">.join(str(xi)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>xi<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>x))</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
    </programlisting>
    <location file="examples/interferometry_udp.py"/>
  </compounddef>
</doxygen>
