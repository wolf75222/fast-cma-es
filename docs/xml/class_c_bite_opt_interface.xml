<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_c_bite_opt_interface" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>CBiteOptInterface</compoundname>
    <derivedcompoundref refid="class_c_bite_opt_base" prot="public" virt="non-virtual">CBiteOptBase&lt; int64_t &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_c_bite_opt_base" prot="public" virt="non-virtual">CBiteOptBase&lt; double &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_c_bite_opt_base" prot="public" virt="non-virtual">CBiteOptBase&lt; ptype &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_c_bite_opt_deep" prot="public" virt="non-virtual">CBiteOptDeep</derivedcompoundref>
    <includes refid="biteaux_8h" local="no">biteaux.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_c_bite_opt_interface_1a0155b3fcab9eeb2d7505c0326e12e809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CBiteOptInterface::CBiteOptInterface</definition>
        <argsstring>()</argsstring>
        <name>CBiteOptInterface</name>
        <qualifiedname>CBiteOptInterface::CBiteOptInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/biteaux.h" line="1523" column="1" bodyfile="_fcmaescpp/include/biteaux.h" bodystart="1523" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="class_c_bite_opt_interface_1a070d1317053ec55bbe7d8ddde32076ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual CBiteOptInterface::~CBiteOptInterface</definition>
        <argsstring>()</argsstring>
        <name>~CBiteOptInterface</name>
        <qualifiedname>CBiteOptInterface::~CBiteOptInterface</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/biteaux.h" line="1527" column="9" bodyfile="_fcmaescpp/include/biteaux.h" bodystart="1527" bodyend="1529"/>
      </memberdef>
      <memberdef kind="function" id="class_c_bite_opt_interface_1a2da6e8d4cfb2ecc8380b0cd220d1aeac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const double *</type>
        <definition>virtual const double * CBiteOptInterface::getBestParams</definition>
        <argsstring>() const =0</argsstring>
        <name>getBestParams</name>
        <qualifiedname>CBiteOptInterface::getBestParams</qualifiedname>
        <reimplementedby refid="class_c_bite_opt_base_1abbed35653d8765915efc675204c19bb2">getBestParams</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_base_1abbed35653d8765915efc675204c19bb2">getBestParams</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_base_1abbed35653d8765915efc675204c19bb2">getBestParams</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_deep_1a17c7c044ef259f3c68e2e47c53c043a3">getBestParams</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Best parameter vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/biteaux.h" line="1535" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_c_bite_opt_interface_1a79e5a8cdcdf2c9a12f16e4aeba49c75f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double CBiteOptInterface::getBestCost</definition>
        <argsstring>() const =0</argsstring>
        <name>getBestCost</name>
        <qualifiedname>CBiteOptInterface::getBestCost</qualifiedname>
        <reimplementedby refid="class_c_bite_opt_base_1a4b2d3669723dbe251cf391cc10dd4f5c">getBestCost</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_base_1a4b2d3669723dbe251cf391cc10dd4f5c">getBestCost</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_base_1a4b2d3669723dbe251cf391cc10dd4f5c">getBestCost</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_deep_1a961516dc7772d327e64965fc3e07ce31">getBestCost</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Cost of the best parameter vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/biteaux.h" line="1541" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_c_bite_opt_interface_1ae7f8adaf2fd8acb10ccf057592a6229d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void CBiteOptInterface::getMinValues</definition>
        <argsstring>(double *const p) const =0</argsstring>
        <name>getMinValues</name>
        <qualifiedname>CBiteOptInterface::getMinValues</qualifiedname>
        <reimplementedby refid="classbiteopt_1_1_bite_optimizer_1a11148136b4a3eebd78d235eda7e3dff4">getMinValues</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_1_1_c_par_opt_1a661fa30fe699ca82972c1999507fcc10">getMinValues</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_1_1_c_par_opt_1a661fa30fe699ca82972c1999507fcc10">getMinValues</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a2b9e245cc0cdb32268e01c0ec406fe63">getMinValues</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_minimize_1a6a6d606aa0f4dc874acb855b66571124">getMinValues</reimplementedby>
        <param>
          <type>double *const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual function that should fill minimal parameter value vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">p</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimal value vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/biteaux.h" line="1549" column="14"/>
        <referencedby refid="class_c_bite_opt_base_1a768362da5c773eea5a8649d44676eeed" compoundref="biteaux_8h" startline="1717" endline="1737">CBiteOptBase&lt; ptype &gt;::initCommonVars</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_bite_opt_interface_1a9debe40625c2bc248a4ffd12a9197a4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void CBiteOptInterface::getMaxValues</definition>
        <argsstring>(double *const p) const =0</argsstring>
        <name>getMaxValues</name>
        <qualifiedname>CBiteOptInterface::getMaxValues</qualifiedname>
        <reimplementedby refid="classbiteopt_1_1_bite_optimizer_1a8d1716460571a9aef6f8206715a5a71c">getMaxValues</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_1_1_c_par_opt_1a0eb7bdd22fa894f836fbea2141ec3f39">getMaxValues</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_1_1_c_par_opt_1a0eb7bdd22fa894f836fbea2141ec3f39">getMaxValues</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a2f9fc126b59988b4a0812d87b3d6fdfd">getMaxValues</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_minimize_1ad68d81fd1dad55c40ccd01a9d6567ccf">getMaxValues</reimplementedby>
        <param>
          <type>double *const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual function that should fill maximal parameter value vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">p</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximal value vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/biteaux.h" line="1557" column="14"/>
        <referencedby refid="class_c_bite_opt_base_1a768362da5c773eea5a8649d44676eeed" compoundref="biteaux_8h" startline="1717" endline="1737">CBiteOptBase&lt; ptype &gt;::initCommonVars</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_bite_opt_interface_1a45d7e2c9ea31b6f8bb23758a6879df9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double CBiteOptInterface::optcost</definition>
        <argsstring>(const double *const p)=0</argsstring>
        <name>optcost</name>
        <qualifiedname>CBiteOptInterface::optcost</qualifiedname>
        <reimplementedby refid="classbiteopt_1_1_bite_optimizer_1a0244d5e664ac99fd264ebe908023ce0c">optcost</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_1_1_c_par_opt_1a4ca168bf20b06cb767d052e8610c9258">optcost</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_1_1_c_par_opt_1a4ca168bf20b06cb767d052e8610c9258">optcost</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a881038400bff3e6d813fcb4304a9bac0">optcost</reimplementedby>
        <reimplementedby refid="class_c_bite_opt_minimize_1ae80abdaf663fbb5c83e719eea4d49d48">optcost</reimplementedby>
        <param>
          <type>const double *const</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Virtual function (objective function) that should calculate parameter vector&apos;s optimization cost.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter vector to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Optimized cost. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="_fcmaescpp/include/biteaux.h" line="1567" column="16"/>
        <referencedby refid="class_c_n_m_seq_opt_1a1ef451e7a70db607e096c343dac37bb1" compoundref="nmsopt_8h" startline="496" endline="521">CNMSeqOpt::eval</referencedby>
        <referencedby refid="class_c_bite_opt_1a2f56a9d5d682c92e2da1234ed68d54ed" compoundref="biteopt_8h" startline="221" endline="420">CBiteOpt::optimize</referencedby>
        <referencedby refid="class_c_d_e_opt_1a819e3692005dd630f7bc83d4444e23ee" compoundref="deopt_8h" startline="140" endline="304">CDEOpt::optimize</referencedby>
        <referencedby refid="class_c_s_m_a_e_s_opt_1ae6322c2f8523f5a70a5d5bac5b9baa43" compoundref="smaesopt_8h" startline="167" endline="214">CSMAESOpt::optimize</referencedby>
        <referencedby refid="class_c_spher_opt_1a1515c953ba95c15ca8722ad8fb46523d" compoundref="spheropt_8h" startline="142" endline="240">CSpherOpt::optimize</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base virtual abstract class that defines common optimizer interfacing functions. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>CBiteOpt</label>
        <link refid="class_c_bite_opt"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>CBiteOpt::CParOpt&lt; CNMSeqOpt &gt;</label>
        <link refid="class_c_bite_opt_1_1_c_par_opt"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>CBiteOpt::CParOpt&lt; CSpherOpt &gt;</label>
        <link refid="class_c_bite_opt_1_1_c_par_opt"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>CBiteOptBase&lt; ptype &gt;</label>
        <link refid="class_c_bite_opt_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>CBiteOptBase&lt; double &gt;</label>
        <link refid="class_c_bite_opt_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>CBiteOptBase&lt; int64_t &gt;</label>
        <link refid="class_c_bite_opt_base"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="template-instance">
          <edgelabel>&lt; int64_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>CBiteOptDeep</label>
        <link refid="class_c_bite_opt_deep"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>CBiteOptDeep::CBiteOptWrap</label>
        <link refid="class_c_bite_opt_deep_1_1_c_bite_opt_wrap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>CBiteOptInterface</label>
        <link refid="class_c_bite_opt_interface"/>
      </node>
      <node id="14">
        <label>CBiteOptMinimize</label>
        <link refid="class_c_bite_opt_minimize"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>CDEOpt</label>
        <link refid="class_c_d_e_opt"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>CNMSeqOpt</label>
        <link refid="class_c_n_m_seq_opt"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>CSMAESOpt</label>
        <link refid="class_c_s_m_a_e_s_opt"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>CSpherOpt</label>
        <link refid="class_c_spher_opt"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>biteopt::BiteOptimizer</label>
        <link refid="classbiteopt_1_1_bite_optimizer"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>CBiteOptInterface</label>
        <link refid="class_c_bite_opt_interface"/>
      </node>
    </collaborationgraph>
    <location file="_fcmaescpp/include/biteaux.h" line="1520" column="1" bodyfile="_fcmaescpp/include/biteaux.h" bodystart="1521" bodyend="1568"/>
    <listofallmembers>
      <member refid="class_c_bite_opt_interface_1a0155b3fcab9eeb2d7505c0326e12e809" prot="public" virt="non-virtual"><scope>CBiteOptInterface</scope><name>CBiteOptInterface</name></member>
      <member refid="class_c_bite_opt_interface_1a79e5a8cdcdf2c9a12f16e4aeba49c75f" prot="public" virt="pure-virtual"><scope>CBiteOptInterface</scope><name>getBestCost</name></member>
      <member refid="class_c_bite_opt_interface_1a2da6e8d4cfb2ecc8380b0cd220d1aeac" prot="public" virt="pure-virtual"><scope>CBiteOptInterface</scope><name>getBestParams</name></member>
      <member refid="class_c_bite_opt_interface_1a9debe40625c2bc248a4ffd12a9197a4d" prot="public" virt="pure-virtual"><scope>CBiteOptInterface</scope><name>getMaxValues</name></member>
      <member refid="class_c_bite_opt_interface_1ae7f8adaf2fd8acb10ccf057592a6229d" prot="public" virt="pure-virtual"><scope>CBiteOptInterface</scope><name>getMinValues</name></member>
      <member refid="class_c_bite_opt_interface_1a45d7e2c9ea31b6f8bb23758a6879df9d" prot="public" virt="pure-virtual"><scope>CBiteOptInterface</scope><name>optcost</name></member>
      <member refid="class_c_bite_opt_interface_1a070d1317053ec55bbe7d8ddde32076ce" prot="public" virt="virtual"><scope>CBiteOptInterface</scope><name>~CBiteOptInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
