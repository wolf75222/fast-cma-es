<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacefcmaes_1_1cmaescpp" kind="namespace" language="Python">
    <compoundname>fcmaes::cmaescpp</compoundname>
    <innerclass refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c" prot="public">fcmaes::cmaescpp::ACMA_C</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1a869b80a999c8dbaafec9a1e836b441b7" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.optimizeACMA_C</definition>
        <argsstring></argsstring>
        <name>optimizeACMA_C</name>
        <qualifiedname>fcmaes.cmaescpp.optimizeACMA_C</qualifiedname>
        <initializer>=  libcmalib.optimizeACMA_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="407" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="407" bodyend="-1"/>
        <referencedby refid="namespacefcmaes_1_1cmaescpp_1a625d259f091b81159e59b47837722d4e" compoundref="cmaescpp_8py" startline="104" endline="144">fcmaes.cmaescpp.minimize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1a4b4bc53bc7ff4a07bc165c3b3ede4e02" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.argtypes</definition>
        <argsstring></argsstring>
        <name>argtypes</name>
        <qualifiedname>fcmaes.cmaescpp.argtypes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="408" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1a5f13d5d8f530e90f5b93f5bacf82dfef" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.initACMA_C</definition>
        <argsstring></argsstring>
        <name>initACMA_C</name>
        <qualifiedname>fcmaes.cmaescpp.initACMA_C</qualifiedname>
        <initializer>=  libcmalib.initACMA_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="414" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1a02a0f73f01d725c0440ce1cbe96fc018" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.restype</definition>
        <argsstring></argsstring>
        <name>restype</name>
        <qualifiedname>fcmaes.cmaescpp.restype</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="420" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1a19d6ee3b1a025b0c87e16121a77e8afa" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.destroyACMA_C</definition>
        <argsstring></argsstring>
        <name>destroyACMA_C</name>
        <qualifiedname>fcmaes.cmaescpp.destroyACMA_C</qualifiedname>
        <initializer>=  libcmalib.destroyACMA_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="422" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="422" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ae55112db9f934ddf1d3d01a09b812adb" compoundref="cmaescpp_8py" startline="256" endline="258">fcmaes.cmaescpp.ACMA_C.__del__</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1a5d24fbafb1f6010caa637d9318fe88e2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.askACMA_C</definition>
        <argsstring></argsstring>
        <name>askACMA_C</name>
        <qualifiedname>fcmaes.cmaescpp.askACMA_C</qualifiedname>
        <initializer>=  libcmalib.askACMA_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="425" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="425" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ad7ca82faa65b471b66977e2f18676025" compoundref="cmaescpp_8py" startline="277" endline="291">fcmaes.cmaescpp.ACMA_C.ask</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1ae19b39d0288c14daa4d7db903c4285d6" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.tellACMA_C</definition>
        <argsstring></argsstring>
        <name>tellACMA_C</name>
        <qualifiedname>fcmaes.cmaescpp.tellACMA_C</qualifiedname>
        <initializer>=  libcmalib.tellACMA_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="428" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="428" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a4677822852841d0e52baa48fa91cbcb8" compoundref="cmaescpp_8py" startline="310" endline="319">fcmaes.cmaescpp.ACMA_C.tell</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1a72633ee9a21ca3a356464d6c570b0237" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.tellXACMA_C</definition>
        <argsstring></argsstring>
        <name>tellXACMA_C</name>
        <qualifiedname>fcmaes.cmaescpp.tellXACMA_C</qualifiedname>
        <initializer>=  libcmalib.tellXACMA_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="432" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="432" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a344851d94557ce52f99da907ee61590d" compoundref="cmaescpp_8py" startline="336" endline="345">fcmaes.cmaescpp.ACMA_C.tell_x_</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1a7f7e4ef0af633235aa443b759dba5ed9" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.populationACMA_C</definition>
        <argsstring></argsstring>
        <name>populationACMA_C</name>
        <qualifiedname>fcmaes.cmaescpp.populationACMA_C</qualifiedname>
        <initializer>=  libcmalib.populationACMA_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="436" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="436" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a348ca090a0116efc16fce6a4bd180871" compoundref="cmaescpp_8py" startline="361" endline="375">fcmaes.cmaescpp.ACMA_C.population</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacefcmaes_1_1cmaescpp_1aeecf9aa46c0d9cbb7e56087c5d7f0fef" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes::cmaescpp.resultACMA_C</definition>
        <argsstring></argsstring>
        <name>resultACMA_C</name>
        <qualifiedname>fcmaes.cmaescpp.resultACMA_C</qualifiedname>
        <initializer>=  libcmalib.resultACMA_C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="439" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="439" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1aaf2e40c524b9a8b328decb0b798bd695" compoundref="cmaescpp_8py" startline="390" endline="404">fcmaes.cmaescpp.ACMA_C.result</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacefcmaes_1_1cmaescpp_1a625d259f091b81159e59b47837722d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OptimizeResult</type>
        <definition> OptimizeResult fcmaes.cmaescpp.minimize</definition>
        <argsstring>(Callable[[ArrayLike], float] fun, Optional[Bounds] bounds=None, Optional[ArrayLike] x0=None, Optional[Union[float, ArrayLike, Callable]] input_sigma=0.3, Optional[int] popsize=31, Optional[int] max_evaluations=100000, Optional[float] accuracy=1.0, Optional[float] stop_fitness=-np.inf, Optional[float] stop_hist=-1, Optional[Generator] rg=Generator(PCG64DXSM()), Optional[int] runid=0, Optional[int] workers=1, Optional[bool] normalize=True, Optional[bool] delayed_update=True, Optional[int] update_gap=None)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.cmaescpp.minimize</qualifiedname>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>float]</type>
          <declname>fun</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>bounds</declname>
          <defname>x0</defname>
          <array>[Bounds]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>x0</declname>
          <defname>input_sigma</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional]</type>
          <declname>input_sigma</declname>
          <defname>popsize</defname>
          <array>[Union[float, ArrayLike, Callable]</array>
          <defval>0.3</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <defname>max_evaluations</defname>
          <array>[int]</array>
          <defval>31</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <defname>accuracy</defname>
          <array>[int]</array>
          <defval>100000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>accuracy</declname>
          <defname>stop_fitness</defname>
          <array>[float]</array>
          <defval>1.0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <defname>stop_hist</defname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_hist</declname>
          <defname>rg</defname>
          <array>[float]</array>
          <defval>-1</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>rg</declname>
          <defname>runid</defname>
          <array>[Generator]</array>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>runid</declname>
          <defname>workers</defname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <defname>normalize</defname>
          <array>[int]</array>
          <defval>1</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>normalize</declname>
          <defname>delayed_update</defname>
          <array>[bool]</array>
          <defval>True</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>delayed_update</declname>
          <defname>update_gap</defname>
          <array>[bool]</array>
          <defval>True</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>update_gap</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Optimizes a given objective function using an adaptive CMA-ES algorithm under specified constraints and parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This method allows for advanced customization in algorithm behavior, enabling stochastic optimization of complex, possibly non-linear functions.</para>
<para><verbatim>   fun (Callable[[ArrayLike], float]): The objective function to be minimized. It must accept a
       single argument, the candidate solution, and return a scalar fitness value.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounds within which the optimization search is conducted. If None, no boundaries are enforced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess for the solution. If None, an initial guess will be randomly generated. input_sigma (Optional[Union[float, ArrayLike, Callable]]): Initial step size for the search, defining strategy parameter for standard deviations. Can also be an array indicating sigma per dimension or a callable returning sigma. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the population per generation. Affects the sampling process in each iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of function evaluations to perform before termination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired accuracy of the solution or tolerance level for convergence checks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fitness</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold fitness value. If reached, the optimization process halts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_hist</parametername>
</parameternamelist>
<parameterdescription>
<para>Historical improvement-based stopping condition. If None or negative, this criterion is disabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator for stochastic sampling. Provides reproducibility when a specific generator seed is used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runid</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique identifier for the optimization run, allowing for comparisons across runs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of worker threads/processes for parallel evaluation of the objective function. If set to 0, it defaults to non-parallel execution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether solutions are normalized during the optimization process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delayed_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether the algorithm updates the internal state of the covariance matrix immediately or after a delay. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update_gap</parametername>
</parameternamelist>
<parameterdescription>
<para>Gap between covariance matrix updates. If None, a default gap is used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>OptimizeResult An object containing the optimization result, including the best solution <computeroutput>x</computeroutput>, the value of the objective function <computeroutput>fun</computeroutput> at <computeroutput>x</computeroutput>, the number of function evaluations <computeroutput>nfev</computeroutput>, the number of iterations performed <computeroutput>nit</computeroutput>, the optimizer&apos;s termination status <computeroutput>status</computeroutput>, and a boolean <computeroutput>success</computeroutput> indicating whether the optimization was successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaescpp.py" line="89" column="1" bodyfile="fcmaes/cmaescpp.py" bodystart="104" bodyend="144"/>
        <references refid="namespacefcmaes_1_1cmaescpp_1a869b80a999c8dbaafec9a1e836b441b7" compoundref="cmaescpp_8py" startline="407">fcmaes.cmaescpp.optimizeACMA_C</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="fcmaes/cmaescpp.py" line="1" column="1"/>
  </compounddef>
</doxygen>
