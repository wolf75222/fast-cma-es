<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classfcmaes_1_1optimizer_1_1_minimize" kind="class" language="Python" prot="public">
    <compoundname>fcmaes::optimizer::Minimize</compoundname>
    <basecompoundref refid="classfcmaes_1_1optimizer_1_1_optimizer" prot="public" virt="non-virtual">fcmaes.optimizer.Optimizer</basecompoundref>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_minimize_1a1d0c22f3f65fc79861e54f90424f0203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.optimizer.Minimize.__init__</definition>
        <argsstring>(self, max_evaluations=50000, store=None)</argsstring>
        <name>__init__</name>
        <qualifiedname>fcmaes.optimizer.Minimize.__init__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6" kindref="member">max_evaluations</ref></type>
          <defname>max_evaluations</defname>
          <defval>50000</defval>
        </param>
        <param>
          <type>store</type>
          <defname>store</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Initializes an optimizer using the scipy minimize method with a specified maximum number of evaluations and an optional store for collected data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>int, optional The maximum number of evaluations allowed during optimization. Defaults to 50000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Any, optional Optional storage for collected data during optimization. Defaults to None. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="3028" column="1" bodyfile="fcmaes/optimizer.py" bodystart="3028" bodyend="3030"/>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_minimize_1a58bfab5556bb4969d88c7905361515ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, float, int]</type>
        <definition> Tuple[np.ndarray, float, int] fcmaes.optimizer.Minimize.minimize</definition>
        <argsstring>(self, Callable[[ArrayLike], float] fun, Optional[Bounds] bounds, Optional[ArrayLike] guess=None, Optional[float] sdevs=None, rg=Generator(PCG64DXSM()), store=None)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.optimizer.Minimize.minimize</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>float]</type>
          <declname>fun</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>bounds</declname>
          <defname>guess</defname>
          <array>[Bounds]</array>
        </param>
        <param>
          <type>Optional</type>
          <declname>guess</declname>
          <defname>sdevs</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>sdevs</declname>
          <defname>rg</defname>
          <array>[float]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>rg</type>
          <defname>store</defname>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>store</type>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Minimizes a given function within specified bounds and optionally using an initial guess. </para>
        </briefdescription>
        <detaileddescription>
<para>This method uses a specified random generator to generate an initial guess if none is provided. The optimization process is carried out within the provided bounds, and the optimal solution, objective function value at the optimum, and the number of function evaluations are returned.</para>
<para><verbatim>       fun (Callable[[ArrayLike], float]): The objective function to be minimized.
           Accepts an array-like input and returns a floating-point value.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The boundary constraints for the optimization variables in the form of lower and upper bounds. guess (Optional[ArrayLike], optional): The initial guess for the optimization, if provided. If None, a random value within bounds will be generated. Defaults to None. sdevs (Optional[float], optional): Ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>A random generator for creating random numbers, used if no guess is provided. Defaults to Generator(PCG64DXSM()). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Reserved for potential future usage. Defaults to None.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, float, int]: A tuple containing:<itemizedlist>
<listitem><para>The optimal solution as a NumPy array.</para>
</listitem><listitem><para>The objective function value at the optimum.</para>
</listitem><listitem><para>The number of function evaluations during the optimization. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="3059" column="1" bodyfile="fcmaes/optimizer.py" bodystart="3065" bodyend="3070"/>
        <references refid="classfcmaes_1_1optimizer_1_1_minimize_1a58bfab5556bb4969d88c7905361515ab" compoundref="optimizer_8py" startline="3065" endline="3070">fcmaes.optimizer.Minimize.minimize</references>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_minimize_1a58bfab5556bb4969d88c7905361515ab" compoundref="optimizer_8py" startline="3065" endline="3070">fcmaes.optimizer.Minimize.minimize</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Optimization utilizing the scipy minimize function. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is designed to perform optimization tasks using the scipy minimize method. It allows for specifying bounds, initial guesses, and handles optimization with lower-level control. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>fcmaes.optimizer.Minimize</label>
        <link refid="classfcmaes_1_1optimizer_1_1_minimize"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>fcmaes.optimizer.Minimize</label>
        <link refid="classfcmaes_1_1optimizer_1_1_minimize"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </collaborationgraph>
    <location file="fcmaes/optimizer.py" line="3008" column="1" bodyfile="fcmaes/optimizer.py" bodystart="3008" bodyend="3070"/>
    <listofallmembers>
      <member refid="classfcmaes_1_1optimizer_1_1_minimize_1a1d0c22f3f65fc79861e54f90424f0203" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Minimize</scope><name>__init__</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1acf09b9b314cc4faf25c9935e76ae1821" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Minimize</scope><name>get_count_runs</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Minimize</scope><name>max_eval_num</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Minimize</scope><name>max_evaluations</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_minimize_1a58bfab5556bb4969d88c7905361515ab" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Minimize</scope><name>minimize</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1ae0423ec54db7b25862e01d7863ab4708" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Minimize</scope><name>name</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
