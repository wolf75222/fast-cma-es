<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacefcmaes_1_1optimizer" kind="namespace" language="Python">
    <compoundname>fcmaes::optimizer</compoundname>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_basin__hopping" prot="public">fcmaes::optimizer::Basin_hopping</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_bite__cpp" prot="public">fcmaes::optimizer::Bite_cpp</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_check_bounds" prot="public">fcmaes::optimizer::CheckBounds</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_choice" prot="public">fcmaes::optimizer::Choice</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_cma__ask__tell" prot="public">fcmaes::optimizer::Cma_ask_tell</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_cma__awm" prot="public">fcmaes::optimizer::Cma_awm</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_cma__cpp" prot="public">fcmaes::optimizer::Cma_cpp</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_cma__lw" prot="public">fcmaes::optimizer::Cma_lw</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_cma__orig" prot="public">fcmaes::optimizer::Cma_orig</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_cma__python" prot="public">fcmaes::optimizer::Cma_python</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_cma__sep" prot="public">fcmaes::optimizer::Cma_sep</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_crfmnes" prot="public">fcmaes::optimizer::Crfmnes</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_crfmnes__cpp" prot="public">fcmaes::optimizer::Crfmnes_cpp</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_da__cpp" prot="public">fcmaes::optimizer::Da_cpp</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_de__ask__tell" prot="public">fcmaes::optimizer::De_ask_tell</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_de__cpp" prot="public">fcmaes::optimizer::De_cpp</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_de__python" prot="public">fcmaes::optimizer::De_python</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_differential__evolution" prot="public">fcmaes::optimizer::Differential_evolution</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_dual__annealing" prot="public">fcmaes::optimizer::Dual_annealing</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_minimize" prot="public">fcmaes::optimizer::Minimize</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_n_lopt" prot="public">fcmaes::optimizer::NLopt</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_optimizer" prot="public">fcmaes::optimizer::Optimizer</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_pgpe__cpp" prot="public">fcmaes::optimizer::Pgpe_cpp</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1random__search" prot="public">fcmaes::optimizer::random_search</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_sequence" prot="public">fcmaes::optimizer::Sequence</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1_shgo" prot="public">fcmaes::optimizer::Shgo</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1single__objective" prot="public">fcmaes::optimizer::single_objective</innerclass>
    <innerclass refid="classfcmaes_1_1optimizer_1_1wrapper" prot="public">fcmaes::optimizer::wrapper</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1ae1056ace6b9d6293933260f0ffd8b139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.optimizer.eprint</definition>
        <argsstring>(*args, **kwargs)</argsstring>
        <name>eprint</name>
        <qualifiedname>fcmaes.optimizer.eprint</qualifiedname>
        <param>
          <type>*</type>
          <declname>args</declname>
        </param>
        <param>
          <type>**</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
<para>Prints the provided arguments to the standard error stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This function behaves similarly to the built-in print function but redirects the output to the standard error stream (sys.stderr) instead of the standard output stream. This function is useful for logging errors or debugging information without interfering with normal program output.</para>
<para><verbatim>   *args: Variable-length positional arguments to be printed. The arguments
       are converted to strings using str() before being printed.
   **kwargs: Variable-length keyword arguments that are passed to the
       built-in print function. Common options include `sep`, `end`, and
       `flush`.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="70" column="1" bodyfile="fcmaes/optimizer.py" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1a4bd18244815f50df9c133ce56be95865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>np.ndarray</type>
        <definition> np.ndarray fcmaes.optimizer.scale</definition>
        <argsstring>(ArrayLike lower, ArrayLike upper)</argsstring>
        <name>scale</name>
        <qualifiedname>fcmaes.optimizer.scale</qualifiedname>
        <param>
          <type>ArrayLike</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>ArrayLike</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
<para>Scales the difference between the upper and lower bounds by a factor of 0.5. </para>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the scaled difference between two array-like inputs, representing the lower and upper bounds, respectively. The result is computed by taking the difference of the two inputs and multiplying by 0.5.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bounds as an array-like structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bounds as an array-like structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>np A NumPy array representing the scaled difference between the upper and lower bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="88" column="1" bodyfile="fcmaes/optimizer.py" bodystart="89" bodyend="91"/>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_cma__orig_1a4dbf460c986845f8121946c4252c2fa0" compoundref="optimizer_8py" startline="1520" endline="1552">fcmaes.optimizer.Cma_orig.minimize</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1aaae18e4aad3a1d3f8ca3b264c16f10a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>np.ndarray</type>
        <definition> np.ndarray fcmaes.optimizer.typical</definition>
        <argsstring>(ArrayLike lower, ArrayLike upper)</argsstring>
        <name>typical</name>
        <qualifiedname>fcmaes.optimizer.typical</qualifiedname>
        <param>
          <type>ArrayLike</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>ArrayLike</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
<para>Computes the midpoint of the bounds by taking the average of the lower and upper bounds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bounds specified as an array-like structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bounds specified as an array-like structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A NumPy array containing the computed midpoints of the corresponding lower and upper bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="104" column="1" bodyfile="fcmaes/optimizer.py" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1a83e03a72c4ba10e3773f1ec31350bd56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>np.ndarray</type>
        <definition> np.ndarray fcmaes.optimizer.fitting</definition>
        <argsstring>(ArrayLike guess, ArrayLike lower, ArrayLike upper)</argsstring>
        <name>fitting</name>
        <qualifiedname>fcmaes.optimizer.fitting</qualifiedname>
        <param>
          <type>ArrayLike</type>
          <declname>guess</declname>
        </param>
        <param>
          <type>ArrayLike</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>ArrayLike</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
<para>Clip an input array-like to ensure it remains within specified bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>This function ensures that the values in the input array-like <computeroutput>guess</computeroutput> are restricted to a range defined by <computeroutput>lower</computeroutput> (minimum bound) and <computeroutput>upper</computeroutput> (maximum bound). The input arrays are converted into NumPy arrays before applying the clipping operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array-like containing the values to be clipped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lower</parametername>
</parameternamelist>
<parameterdescription>
<para>Array-like specifying the lower bounds for clipping. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper</parametername>
</parameternamelist>
<parameterdescription>
<para>Array-like specifying the upper bounds for clipping.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>np A NumPy array with values clipped to lie within the boundaries defined by <computeroutput>lower</computeroutput> and <computeroutput>upper</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="125" column="1" bodyfile="fcmaes/optimizer.py" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1a28ae2bbd57e22b7bf12623dcc7cb75c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition> bool fcmaes.optimizer.is_terminate</definition>
        <argsstring>(int runid, int iterations, float val)</argsstring>
        <name>is_terminate</name>
        <qualifiedname>fcmaes.optimizer.is_terminate</qualifiedname>
        <param>
          <type>int</type>
          <declname>runid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Determines whether a process should terminate based on the given parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>The function evaluates specific conditions using the provided parameters to determine if the process should terminate. Returns a boolean value indicating the termination status.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>runid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique identifier representing the current run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of iterations executed so far in a process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>A numeric value used to evaluate termination conditions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>bool True if the process meets the termination condition, False otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="145" column="1" bodyfile="fcmaes/optimizer.py" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1a86bf62954992be8d3ff9a4fbeed47c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>np.ndarray</type>
        <definition> np.ndarray fcmaes.optimizer.random_x</definition>
        <argsstring>(ArrayLike lower, ArrayLike upper)</argsstring>
        <name>random_x</name>
        <qualifiedname>fcmaes.optimizer.random_x</qualifiedname>
        <param>
          <type>ArrayLike</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>ArrayLike</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
<para>Generates a random numpy array of values within the specified bounds. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes lower and upper bounds as input arrays and returns a numpy array with randomized values scaled and translated to lie within the specified bounds. The size and shape of the output array are determined by the size of the <computeroutput>lower</computeroutput> input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bounds for the random values. Should be array-like and convertible to a numpy array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bounds for the random values. Should be array-like and convertible to a numpy array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>np A numpy array containing random values within the specified lower and upper bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="168" column="1" bodyfile="fcmaes/optimizer.py" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1ac563cd1fadd680f0e114a92adb740159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition> float fcmaes.optimizer.dtime</definition>
        <argsstring>(float t0)</argsstring>
        <name>dtime</name>
        <qualifiedname>fcmaes.optimizer.dtime</qualifiedname>
        <param>
          <type>float</type>
          <declname>t0</declname>
        </param>
        <briefdescription>
<para>Calculates the elapsed time in seconds since the provided starting time <computeroutput>t0</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the difference between the current time (as measured by <computeroutput>time.perf_counter</computeroutput>) and the given starting time <computeroutput>t0</computeroutput>. The result is rounded to two decimal places for precision.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t0</parametername>
</parameternamelist>
<parameterdescription>
<para>A float representing the starting time, typically obtained from <computeroutput>time.perf_counter</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A float representing the elapsed time in seconds, rounded to two decimal </para>
</simplesect>
<simplesect kind="return"><para>places. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="188" column="1" bodyfile="fcmaes/optimizer.py" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1a7619d6ba38c7ec9033f6dbd0580f094b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref></type>
        <definition> Sequence fcmaes.optimizer.de_cma</definition>
        <argsstring>(Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[float] stop_fitness=-np.inf, Optional[int] de_max_evals=None, Optional[int] cma_max_evals=None, Optional[ArrayLike] ints=None, Optional[int] workers=None)</argsstring>
        <name>de_cma</name>
        <qualifiedname>fcmaes.optimizer.de_cma</qualifiedname>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>50000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <array>[int]</array>
          <defval>31</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>de_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>cma_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>ints</declname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Creates a sequence of optimization algorithms combining Differential Evolution (DE) and Covariance Matrix Adaptation (CMA). </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows the user to specify the maximum number of evaluations, population size, and stopping fitness, and it distributes the evaluations proportionally between DE and CMA. The parameters for DE and CMA can also be individually customized. It returns a sequence of optimization instances for further use in optimization tasks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of evaluations to be distributed between DE and CMA optimization algorithms. Defaults to 50000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Population size for the optimizers. Defaults to 31. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fitness</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_fitness" kindref="compound">Fitness</ref> threshold to stop the optimization process. Defaults to -infinity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>de_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific maximum number of evaluations for the DE optimizer. If None, it is calculated as a proportion of max_evaluations. Defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cma_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Specific maximum number of evaluations for the CMA optimizer. If None, it is calculated as a proportion of max_evaluations. Defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ints</parametername>
</parameternamelist>
<parameterdescription>
<para>Array-like parameter to indicate integer constraints for optimization. Defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of workers to use for optimization. Defaults to None.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref> A sequence containing instances of DE and CMA optimizers with specified configurations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="529" column="1" bodyfile="fcmaes/optimizer.py" bodystart="535" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1a47d1c3b0025fdbfe74a53b4c09e50b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref></type>
        <definition> Sequence fcmaes.optimizer.de_cma_py</definition>
        <argsstring>(Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[float] stop_fitness=-np.inf, Optional[int] de_max_evals=None, Optional[int] cma_max_evals=None, Optional[ArrayLike] ints=None, Optional[int] workers=None)</argsstring>
        <name>de_cma_py</name>
        <qualifiedname>fcmaes.optimizer.de_cma_py</qualifiedname>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>50000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <array>[int]</array>
          <defval>31</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>de_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>cma_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>ints</declname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Creates and returns a sequence of optimizers configured with DE (Differential Evolution) and CMA (Covariance Matrix Adaptation) algorithms. </para>
        </briefdescription>
        <detaileddescription>
<para>The function allows customization of population size, maximum evaluations, stopping fitness, and the balance between DE and CMA evaluation limits.</para>
<para>It is useful for processes requiring hybrid optimization and provides a flexible interface for setting up the optimization procedure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of evaluations allowed for the optimization procedure. Default is 50000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The population size for both DE and CMA optimization methods. <programlisting><codeline><highlight class="normal">Default<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>31.</highlight></codeline>
</programlisting> stop_fitness: The stopping criteria based on fitness value. Default is -inf (no stopping fitness). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>de_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of evaluations allowed for the DE algorithm. If None, it is calculated dynamically based on <computeroutput>max_evaluations</computeroutput>. Default is None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cma_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of evaluations allowed for the CMA algorithm. If None, it is calculated dynamically based on <computeroutput>max_evaluations</computeroutput>. Default is None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ints</parametername>
</parameternamelist>
<parameterdescription>
<para>Array-like input of integer constraints (if any). Used specifically in the DE algorithm. Default is None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of parallel processes or threads allowed for computations. Default is None.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sequence containing two elements:<orderedlist>
<listitem><para>A DE optimizer configured with given or calculated parameters.</para>
</listitem><listitem><para>A CMA optimizer configured with given or calculated parameters. </para>
</listitem></orderedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="582" column="1" bodyfile="fcmaes/optimizer.py" bodystart="588" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1a08e08a743a3d7654472d545ac33dd2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref></type>
        <definition> Sequence fcmaes.optimizer.da_cma</definition>
        <argsstring>(Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[int] da_max_evals=None, Optional[int] cma_max_evals=None, Optional[float] stop_fitness=-np.inf)</argsstring>
        <name>da_cma</name>
        <qualifiedname>fcmaes.optimizer.da_cma</qualifiedname>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>50000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <array>[int]</array>
          <defval>31</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>da_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>cma_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <briefdescription>
<para>Combines Differential Algorithm (DA) and Covariance Matrix Adaptation (CMA) optimization techniques into a sequential process, dividing the computational budget between the two algorithms and returning the resulting sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for parameterized customization of each algorithm&apos;s maximum evaluations, population size, and stopping fitness to suit specific optimization problems.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of evaluations to allocate between the DA and CMA algorithms. Default is 50000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Population size for the CMA algorithm. Default is 31. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>da_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum evaluations for the DA algorithm. If None, it is calculated as a fraction of <computeroutput>max_evaluations</computeroutput>. Default is None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cma_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum evaluations for the CMA algorithm. If None, it is calculated as the remaining budget from <computeroutput>max_evaluations</computeroutput>. Default is None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fitness</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum fitness value at which to terminate optimization. Default is -np.inf.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref> A sequence of DA and CMA optimization processes configured with the provided or default parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="628" column="1" bodyfile="fcmaes/optimizer.py" bodystart="632" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1acf749397f0f3e9790e9d162554304df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref></type>
        <definition> Sequence fcmaes.optimizer.de_crfmnes</definition>
        <argsstring>(Optional[int] max_evaluations=50000, Optional[int] popsize=32, Optional[float] stop_fitness=-np.inf, Optional[int] de_max_evals=None, Optional[int] crfm_max_evals=None, Optional[ArrayLike] ints=None, Optional[int] workers=None)</argsstring>
        <name>de_crfmnes</name>
        <qualifiedname>fcmaes.optimizer.de_crfmnes</qualifiedname>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>50000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <array>[int]</array>
          <defval>32</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>de_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>crfm_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>ints</declname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Combines Differential Evolution (DE) and Covariance Matrix Adaptation Evolution Strategies (CR-FM-NES) optimization algorithms in sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes and configures two optimization algorithms, DE and CR-FM-NES, with specified parameters and returns a sequence of the two optimizers. The maximum evaluations for each optimizer are proportionally allocated based on a random variable unless explicitly specified.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of evaluations available for both optimization algorithms (default: 50000). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The population size for both optimization algorithms (default: 32). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fitness</parametername>
</parameternamelist>
<parameterdescription>
<para>The fitness threshold to stop optimization when achieved (default: -infinity). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>de_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum evaluations explicitly allocated for DE. If None, the evaluations are derived from a random proportion of max_evaluations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crfm_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum evaluations explicitly allocated for CR-FM-NES. If None, the evaluations are derived as the remainder of max_evaluations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ints</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional array-like structure indicating integer constraints in the optimization process (default: None). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of workers for parallel processing in optimization </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithms</parametername>
</parameternamelist>
<parameterdescription>
<para>None).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref> A sequence containing two optimizers, the first implementing DE and the second implementing CR-FM-NES. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="672" column="1" bodyfile="fcmaes/optimizer.py" bodystart="678" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1acdb72c2fc9851551f88b19ccb5f58874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref></type>
        <definition> Sequence fcmaes.optimizer.crfmnes_bite</definition>
        <argsstring>(Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[float] stop_fitness=-np.inf, Optional[int] crfm_max_evals=None, Optional[int] bite_max_evals=None, Optional[int] M=1)</argsstring>
        <name>crfmnes_bite</name>
        <qualifiedname>fcmaes.optimizer.crfmnes_bite</qualifiedname>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>50000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <array>[int]</array>
          <defval>31</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>crfm_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>bite_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>M</declname>
          <array>[int]</array>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Creates a sequence of two optimization methods, <ref refid="classfcmaes_1_1optimizer_1_1_crfmnes__cpp" kindref="compound">Crfmnes_cpp</ref> and <ref refid="classfcmaes_1_1optimizer_1_1_bite__cpp" kindref="compound">Bite_cpp</ref>, with configurable parameters for evaluations, population size, stopping fitness criteria, and others. </para>
        </briefdescription>
        <detaileddescription>
<para>The evaluation budgets for each optimizer are adjusted proportionally based on the given parameters or their defaults.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of allowed evaluations for the overall optimization process. Default is 50000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Population size for the optimization process. Default is 31. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fitness</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_fitness" kindref="compound">Fitness</ref> value at which the optimization stops if reached. Default is negative infinity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crfm_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum evaluations assigned to the <ref refid="classfcmaes_1_1optimizer_1_1_crfmnes__cpp" kindref="compound">Crfmnes_cpp</ref> optimization method. If not provided, it is calculated based on a proportion of <computeroutput>max_evaluations</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bite_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum evaluations assigned to the <ref refid="classfcmaes_1_1optimizer_1_1_bite__cpp" kindref="compound">Bite_cpp</ref> optimization method. If not provided, it is calculated as the remaining proportion of <computeroutput>max_evaluations</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter specific to the <ref refid="classfcmaes_1_1optimizer_1_1_bite__cpp" kindref="compound">Bite_cpp</ref> optimization method which may influence its behavior. Default is 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref> A sequence containing two initialized optimizers, <ref refid="classfcmaes_1_1optimizer_1_1_crfmnes__cpp" kindref="compound">Crfmnes_cpp</ref> and <ref refid="classfcmaes_1_1optimizer_1_1_bite__cpp" kindref="compound">Bite_cpp</ref>, configured with the provided or default parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="717" column="1" bodyfile="fcmaes/optimizer.py" bodystart="722" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1aa81db687f4de5f26a620f2275ad5667a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref></type>
        <definition> Sequence fcmaes.optimizer.bite_cma</definition>
        <argsstring>(Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[float] stop_fitness=-np.inf, Optional[int] bite_max_evals=None, Optional[int] cma_max_evals=None, Optional[int] M=1)</argsstring>
        <name>bite_cma</name>
        <qualifiedname>fcmaes.optimizer.bite_cma</qualifiedname>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>50000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <array>[int]</array>
          <defval>31</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>bite_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>cma_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>M</declname>
          <array>[int]</array>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Generates a sequence of optimization strategies using the Biogeography-based optimization technique (Bite) and the Covariance Matrix Adaptation (CMA) algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>The function allows customization of evaluations, population size, and stopping criteria to balance between the two strategies.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of evaluations allowed for the combined Bite and CMA optimization. Defaults to 50000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Population size for the optimization strategies. Defaults to 31. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fitness</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimal fitness threshold to stop the optimization early. Defaults to negative infinity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bite_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of evaluations allocated for the Bite component. If None, it is computed as a proportion of max_evaluations based on a random factor. Defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cma_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of evaluations allocated for the CMA component. If None, it is derived as the remainder of max_evaluations after the Bite component evaluations. Defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of parallel optimization runs for the Bite strategy. Defaults to 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref> A sequence containing two optimization strategies, where the first element uses the Bite algorithm and the second element uses the CMA algorithm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="762" column="1" bodyfile="fcmaes/optimizer.py" bodystart="767" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1optimizer_1a62ac4124b543bccd313f445c06b7354a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref></type>
        <definition> Sequence fcmaes.optimizer.cma_bite</definition>
        <argsstring>(Optional[int] max_evaluations=50000, Optional[int] popsize=32, Optional[float] stop_fitness=-np.inf, Optional[int] cma_max_evals=None, Optional[int] bite_max_evals=None, Optional[int] M=1)</argsstring>
        <name>cma_bite</name>
        <qualifiedname>fcmaes.optimizer.cma_bite</qualifiedname>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>50000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <array>[int]</array>
          <defval>32</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>cma_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>bite_max_evals</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>M</declname>
          <array>[int]</array>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Combines CMA-ES and BITE optimization algorithms into a single sequence of operations, utilizing their respective strengths for optimization. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes instances of CMA-ES (Covariance Matrix Adaptation Evolution Strategy) and BITE (Binary Teaching–Learning-Based Optimization) algorithms with specified parameters, calculates their respective evaluation budgets, and returns a sequence of these algorithms for further processing.</para>
<para>The CMA-ES algorithm is used for global optimization tasks, and the BITE algorithm focuses on discrete or binary optimization. The combination allows for more versatile optimization.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter specifying the total number of evaluations available for both algorithms. Default is 50000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter specifying the population size for the optimization algorithms. Default is 32. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fitness</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter indicating the fitness value at which optimization should stop. The default is -np.inf. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cma_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter specifying the evaluation budget for the CMA-ES algorithm. If not provided, it is calculated as a fraction of max_evaluations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bite_max_evals</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter specifying the evaluation budget for the BITE algorithm. If not provided, it is calculated as the remainder of the total evaluation budget after allocating to CMA-ES. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter specifying the additional configuration for the BITE algorithm. Default is 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para><ref refid="classfcmaes_1_1optimizer_1_1_sequence" kindref="compound">Sequence</ref> A sequence containing two optimization objects, the first configured for CMA-ES and the second for BITE. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="813" column="1" bodyfile="fcmaes/optimizer.py" bodystart="818" bodyend="830"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="fcmaes/optimizer.py" line="1" column="1"/>
  </compounddef>
</doxygen>
