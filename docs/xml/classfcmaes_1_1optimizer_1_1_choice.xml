<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classfcmaes_1_1optimizer_1_1_choice" kind="class" language="Python" prot="public">
    <compoundname>fcmaes::optimizer::Choice</compoundname>
    <basecompoundref refid="classfcmaes_1_1optimizer_1_1_optimizer" prot="public" virt="non-virtual">fcmaes.optimizer.Optimizer</basecompoundref>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classfcmaes_1_1optimizer_1_1_choice_1a63c504ba4d8b574728b84223f1c01158" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.optimizer.Choice::optimizers</definition>
        <argsstring></argsstring>
        <name>optimizers</name>
        <qualifiedname>fcmaes.optimizer.Choice.optimizers</qualifiedname>
        <initializer>=  optimizers</initializer>
        <briefdescription>
<para>A list of optimizers to be used by the choice. </para>
        </briefdescription>
        <detaileddescription>
<para>Combines multiple optimizers to operate as a single optimizer.</para>
<para>This class allows multiple optimization algorithms to be combined and treated as a unified optimizer. Each individual optimizer contributes to the effectiveness of the overall optimization process.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>optimizers</parametername>
</parameternamelist>
<parameterdescription>
<para>A collection of optimizer instances that will be combined into a unified optimizer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Collection of optimizer instances. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="457" column="1" bodyfile="fcmaes/optimizer.py" bodystart="457" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_choice_1acc04c696958e97fdd9c4f8ad51354530" compoundref="optimizer_8py" startline="502" endline="506">fcmaes.optimizer.Choice.minimize</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_choice_1a5d640dae06a047492e728d0fc2bac409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.optimizer.Choice.__init__</definition>
        <argsstring>(self, ArrayLike optimizers)</argsstring>
        <name>__init__</name>
        <qualifiedname>fcmaes.optimizer.Choice.__init__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>ArrayLike</type>
          <declname>optimizers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="455" column="1" bodyfile="fcmaes/optimizer.py" bodystart="455" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_choice_1acc04c696958e97fdd9c4f8ad51354530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, float, int]</type>
        <definition> Tuple[np.ndarray, float, int] fcmaes.optimizer.Choice.minimize</definition>
        <argsstring>(self, Callable[[ArrayLike], float] fun, Bounds bounds, Optional[ArrayLike] guess=None, Optional[Union[float, ArrayLike, Callable]] sdevs=None, Optional[Generator] rg=Generator(PCG64DXSM()), store=None)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.optimizer.Choice.minimize</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>float]</type>
          <declname>fun</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Bounds</type>
          <declname>bounds</declname>
          <defname>guess</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>guess</declname>
          <defname>sdevs</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional]</type>
          <declname>sdevs</declname>
          <defname>rg</defname>
          <array>[Union[float, ArrayLike, Callable]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>rg</declname>
          <defname>store</defname>
          <array>[Generator]</array>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>store</type>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Minimizes a given function using one of the available optimizers chosen at random. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This method selects an optimizer from the available pool of optimizers randomnly,
   then uses the selected optimizer to minimize the given function. The function to
   be minimized, along with other parameters required for the optimization, are passed
   to the chosen optimizer. The result of the optimization, including the solution,
   minimum value, and number of iterations, is returned.


       fun (Callable[[ArrayLike], float]): The function to minimize. This should take
           a single argument, which is a set of parameter values, and return a scalar
           value representing the objective to minimize.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounds for the optimization, specifying the feasible range for each parameter in the input space. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess for the optimization. Provides a starting point for the optimization process. If not provided, defaults to None. sdevs (Optional[Union[float, ArrayLike, Callable]]): Standard deviations or a function to generate them, influencing the exploration during the optimization process. If not provided, defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator instance for selecting a random optimizer and potentially generating random values for the optimization. Defaults to a <computeroutput>Generator</computeroutput> using <computeroutput>PCG64DXSM</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional storage object for logging or saving optimization history. The structure and usage are dependent on the specific optimizers used.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, float, int]: A tuple containing the optimization results:<itemizedlist>
<listitem><para>A NumPy array with the parameters corresponding to the solution.</para>
</listitem><listitem><para>A float denoting the minimum value of the objective function found.</para>
</listitem><listitem><para>An integer indicating the number of iterations used in the optimization. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="496" column="1" bodyfile="fcmaes/optimizer.py" bodystart="502" bodyend="506"/>
        <references refid="classfcmaes_1_1optimizer_1_1_choice_1a63c504ba4d8b574728b84223f1c01158" compoundref="optimizer_8py" startline="457">fcmaes.optimizer.Choice.optimizers</references>
        <references refid="classfcmaes_1_1optimizer_1_1_sequence_1a4115470350e4b99353bd0ad57f11e1c7" compoundref="optimizer_8py" startline="365">fcmaes.optimizer.Sequence.optimizers</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class representing a choice-based optimizer. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classfcmaes_1_1optimizer_1_1_choice" kindref="compound">Choice</ref> class allows selecting a random optimizer from a list of provided optimizers. It facilitates optimization by delegating the minimize function to one of the contained optimizers. The purpose of this class is to provide flexibility in switching between different optimization strategies dynamically.</para>
<para><verbatim>       determined from the first optimizer in the list.
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>fcmaes.optimizer.Choice</label>
        <link refid="classfcmaes_1_1optimizer_1_1_choice"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>fcmaes.optimizer.Choice</label>
        <link refid="classfcmaes_1_1optimizer_1_1_choice"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </collaborationgraph>
    <location file="fcmaes/optimizer.py" line="426" column="1" bodyfile="fcmaes/optimizer.py" bodystart="426" bodyend="506"/>
    <listofallmembers>
      <member refid="classfcmaes_1_1optimizer_1_1_choice_1a5d640dae06a047492e728d0fc2bac409" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Choice</scope><name>__init__</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1acf09b9b314cc4faf25c9935e76ae1821" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Choice</scope><name>get_count_runs</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Choice</scope><name>max_eval_num</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Choice</scope><name>max_evaluations</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_choice_1acc04c696958e97fdd9c4f8ad51354530" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Choice</scope><name>minimize</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1ae0423ec54db7b25862e01d7863ab4708" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Choice</scope><name>name</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_choice_1a63c504ba4d8b574728b84223f1c01158" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Choice</scope><name>optimizers</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
