<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="edgecover_8py" kind="file" language="Python">
    <compoundname>edgecover.py</compoundname>
    <innerclass refid="classedgecover_1_1graph" prot="public">edgecover::graph</innerclass>
    <innerclass refid="classedgecover_1_1problem" prot="public">edgecover::problem</innerclass>
    <innernamespace refid="namespaceedgecover">edgecover</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceedgecover_1a59bd3f0d59b0b35fb7ebbbe615e55fb0" prot="public" static="no" mutable="no">
        <type></type>
        <definition>edgecover.stdout</definition>
        <argsstring></argsstring>
        <name>stdout</name>
        <qualifiedname>edgecover.stdout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="26" column="1" bodyfile="examples/fb/edgecover.py" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceedgecover_1a71246da8be12458f566ebd391e820de8" prot="public" static="no" mutable="no">
        <type></type>
        <definition>edgecover.format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <qualifiedname>edgecover.format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="26" column="1" bodyfile="examples/fb/edgecover.py" bodystart="26" bodyend="-1"/>
        <referencedby refid="namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f" compoundref="edgecover_8py" startline="119" endline="138">edgecover.solve_greedy</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceedgecover_1a89157c3a85c389dd41e0bba728a24ef7" prot="public" static="no" mutable="no">
        <type></type>
        <definition>edgecover.level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <qualifiedname>edgecover.level</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="26" column="1" bodyfile="examples/fb/edgecover.py" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceedgecover_1a1258e4ccc07f1c0a31fe912e53cf08ca" prot="public" static="no" mutable="no">
        <type></type>
        <definition>edgecover.g</definition>
        <argsstring></argsstring>
        <name>g</name>
        <qualifiedname>edgecover.g</qualifiedname>
        <initializer>=  nx_graph(&quot;1912.edges&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="230" column="1" bodyfile="examples/fb/edgecover.py" bodystart="230" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceedgecover_1a744dda64b530055628154923fb165b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.plot_graph</definition>
        <argsstring>(g)</argsstring>
        <name>plot_graph</name>
        <qualifiedname>edgecover.plot_graph</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="29" column="1" bodyfile="examples/fb/edgecover.py" bodystart="29" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1adacf3d39b139b421f2b14f266963dcc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.nx_to_jgraph</definition>
        <argsstring>(g)</argsstring>
        <name>nx_to_jgraph</name>
        <qualifiedname>edgecover.nx_to_jgraph</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="42" column="1" bodyfile="examples/fb/edgecover.py" bodystart="42" bodyend="49"/>
        <referencedby refid="namespaceedgecover_1a2727ccaa79bc6d32ce044e9677314496" compoundref="edgecover_8py" startline="50" endline="66">edgecover.solve_jg</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a2727ccaa79bc6d32ce044e9677314496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.solve_jg</definition>
        <argsstring>(g)</argsstring>
        <name>solve_jg</name>
        <qualifiedname>edgecover.solve_jg</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="50" column="1" bodyfile="examples/fb/edgecover.py" bodystart="50" bodyend="66"/>
        <references refid="namespaceedgecover_1adacf3d39b139b421f2b14f266963dcc9" compoundref="edgecover_8py" startline="42" endline="49">edgecover.nx_to_jgraph</references>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a010150d32280d804796dadb5edda4711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.initial_solution</definition>
        <argsstring>(g)</argsstring>
        <name>initial_solution</name>
        <qualifiedname>edgecover.initial_solution</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="67" column="1" bodyfile="examples/fb/edgecover.py" bodystart="67" bodyend="79"/>
        <referencedby refid="namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f" compoundref="edgecover_8py" startline="119" endline="138">edgecover.solve_greedy</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a73da3a94d91f82f192729ac189e39276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.remove_node</definition>
        <argsstring>(g, solution, mean, start_time, max_time)</argsstring>
        <name>remove_node</name>
        <qualifiedname>edgecover.remove_node</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <param>
          <type>solution</type>
          <defname>solution</defname>
        </param>
        <param>
          <type>mean</type>
          <defname>mean</defname>
        </param>
        <param>
          <type>start_time</type>
          <defname>start_time</defname>
        </param>
        <param>
          <type>max_time</type>
          <defname>max_time</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="80" column="1" bodyfile="examples/fb/edgecover.py" bodystart="80" bodyend="118"/>
        <referencedby refid="namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f" compoundref="edgecover_8py" startline="119" endline="138">edgecover.solve_greedy</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.solve_greedy</definition>
        <argsstring>(g, seed, max_time)</argsstring>
        <name>solve_greedy</name>
        <qualifiedname>edgecover.solve_greedy</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <param>
          <type>seed</type>
          <defname>seed</defname>
        </param>
        <param>
          <type>max_time</type>
          <defname>max_time</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="119" column="1" bodyfile="examples/fb/edgecover.py" bodystart="119" bodyend="138"/>
        <references refid="namespaceedgecover_1a71246da8be12458f566ebd391e820de8" compoundref="edgecover_8py" startline="26">edgecover.format</references>
        <references refid="namespaceedgecover_1a010150d32280d804796dadb5edda4711" compoundref="edgecover_8py" startline="67" endline="79">edgecover.initial_solution</references>
        <references refid="namespaceedgecover_1a73da3a94d91f82f192729ac189e39276" compoundref="edgecover_8py" startline="80" endline="118">edgecover.remove_node</references>
        <referencedby refid="namespaceedgecover_1a2db8017a9662aa750e8fd49a9d7c1d68" compoundref="edgecover_8py" startline="139" endline="141">edgecover.run_solve</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a2db8017a9662aa750e8fd49a9d7c1d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.run_solve</definition>
        <argsstring>(g, max_time)</argsstring>
        <name>run_solve</name>
        <qualifiedname>edgecover.run_solve</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <param>
          <type>max_time</type>
          <defname>max_time</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="139" column="1" bodyfile="examples/fb/edgecover.py" bodystart="139" bodyend="141"/>
        <references refid="namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f" compoundref="edgecover_8py" startline="119" endline="138">edgecover.solve_greedy</references>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a2f9e9af0dbf9169e251c131f7402f6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.solve_multiprocessing</definition>
        <argsstring>(g, num, max_time)</argsstring>
        <name>solve_multiprocessing</name>
        <qualifiedname>edgecover.solve_multiprocessing</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <param>
          <type>max_time</type>
          <defname>max_time</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="142" column="1" bodyfile="examples/fb/edgecover.py" bodystart="142" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a669278e054d76bef7dce46109d141905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.add_vertice</definition>
        <argsstring>(v, vmap)</argsstring>
        <name>add_vertice</name>
        <qualifiedname>edgecover.add_vertice</qualifiedname>
        <param>
          <type>v</type>
          <defname>v</defname>
        </param>
        <param>
          <type>vmap</type>
          <defname>vmap</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="147" column="1" bodyfile="examples/fb/edgecover.py" bodystart="147" bodyend="154"/>
        <referencedby refid="namespaceedgecover_1a9860d907cb65923b50ef1dd1b9761143" compoundref="edgecover_8py" startline="155" endline="168">edgecover.nx_graph</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a9860d907cb65923b50ef1dd1b9761143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.nx_graph</definition>
        <argsstring>(filename)</argsstring>
        <name>nx_graph</name>
        <qualifiedname>edgecover.nx_graph</qualifiedname>
        <param>
          <type>filename</type>
          <defname>filename</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="155" column="1" bodyfile="examples/fb/edgecover.py" bodystart="155" bodyend="168"/>
        <references refid="namespaceedgecover_1a669278e054d76bef7dce46109d141905" compoundref="edgecover_8py" startline="147" endline="154">edgecover.add_vertice</references>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.num_true</definition>
        <argsstring>(nodes)</argsstring>
        <name>num_true</name>
        <qualifiedname>edgecover.num_true</qualifiedname>
        <param>
          <type>nodes</type>
          <defname>nodes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="169" column="1" bodyfile="examples/fb/edgecover.py" bodystart="169" bodyend="176"/>
        <referencedby refid="classedgecover_1_1problem_1a8ad14faff9c46c2d1da7ddf258b015b2" compoundref="edgecover_8py" startline="210" endline="215">edgecover.problem.fitness</referencedby>
        <referencedby refid="namespaceedgecover_1a182ff9dbc428e26929d7fa0413315027" compoundref="edgecover_8py" startline="216" endline="227">edgecover.solve_opt</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a9247b4fa16dbb502c6e5e1bd0c30ca12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.numba_covered</definition>
        <argsstring>(source, target, nodes)</argsstring>
        <name>numba_covered</name>
        <qualifiedname>edgecover.numba_covered</qualifiedname>
        <param>
          <type>source</type>
          <defname>source</defname>
        </param>
        <param>
          <type>target</type>
          <defname>target</defname>
        </param>
        <param>
          <type>nodes</type>
          <defname>nodes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="177" column="1" bodyfile="examples/fb/edgecover.py" bodystart="177" bodyend="184"/>
        <referencedby refid="namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333" compoundref="edgecover_8py" startline="185" endline="188">edgecover.not_covered</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.not_covered</definition>
        <argsstring>(g, nodes)</argsstring>
        <name>not_covered</name>
        <qualifiedname>edgecover.not_covered</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <param>
          <type>nodes</type>
          <defname>nodes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="185" column="1" bodyfile="examples/fb/edgecover.py" bodystart="185" bodyend="188"/>
        <references refid="namespaceedgecover_1a9247b4fa16dbb502c6e5e1bd0c30ca12" compoundref="edgecover_8py" startline="177" endline="184">edgecover.numba_covered</references>
        <referencedby refid="classedgecover_1_1problem_1a8ad14faff9c46c2d1da7ddf258b015b2" compoundref="edgecover_8py" startline="210" endline="215">edgecover.problem.fitness</referencedby>
        <referencedby refid="namespaceedgecover_1a182ff9dbc428e26929d7fa0413315027" compoundref="edgecover_8py" startline="216" endline="227">edgecover.solve_opt</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.nodes</definition>
        <argsstring>(x)</argsstring>
        <name>nodes</name>
        <qualifiedname>edgecover.nodes</qualifiedname>
        <param>
          <type>x</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="189" column="1" bodyfile="examples/fb/edgecover.py" bodystart="189" bodyend="194"/>
        <referencedby refid="classedgecover_1_1problem_1a8ad14faff9c46c2d1da7ddf258b015b2" compoundref="edgecover_8py" startline="210" endline="215">edgecover.problem.fitness</referencedby>
        <referencedby refid="namespaceedgecover_1a182ff9dbc428e26929d7fa0413315027" compoundref="edgecover_8py" startline="216" endline="227">edgecover.solve_opt</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceedgecover_1a182ff9dbc428e26929d7fa0413315027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>edgecover.solve_opt</definition>
        <argsstring>(g)</argsstring>
        <name>solve_opt</name>
        <qualifiedname>edgecover.solve_opt</qualifiedname>
        <param>
          <type>g</type>
          <defname>g</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/fb/edgecover.py" line="216" column="1" bodyfile="examples/fb/edgecover.py" bodystart="216" bodyend="227"/>
        <references refid="namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e" compoundref="edgecover_8py" startline="189" endline="194">edgecover.nodes</references>
        <references refid="namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333" compoundref="edgecover_8py" startline="185" endline="188">edgecover.not_covered</references>
        <references refid="namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2" compoundref="edgecover_8py" startline="169" endline="176">edgecover.num_true</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceedgecover" refkind="compound"><highlight class="comment">#<sp/>Copyright<sp/>(c)<sp/>Dietmar<sp/>Wolz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>See<sp/>https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Media.adoc<sp/>for<sp/>a<sp/>detailed<sp/>description.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Tested<sp/>using<sp/>https://docs.conda.io/en/main/miniconda.html<sp/>on<sp/>Linux<sp/>Mint<sp/>21.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>networkx<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>nx</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>numba<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>njit</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numba</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacefcmaes_1_1optimizer" kindref="compound">fcmaes.optimizer</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>De_cpp,<sp/>wrapper</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy.optimize<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Bounds<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>random</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time,<sp/>math</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>multiprocessing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Pool</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>multiprocessing<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>mp</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ctypes<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>ct</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>loguru<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">logger.remove()</highlight></codeline>
<codeline lineno="26" refid="namespaceedgecover_1a71246da8be12458f566ebd391e820de8" refkind="member"><highlight class="normal">logger.add(sys.stdout,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">logger.add(</highlight><highlight class="stringliteral">&quot;log_{time}.txt&quot;</highlight><highlight class="normal">,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="namespaceedgecover_1a744dda64b530055628154923fb165b02" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a744dda64b530055628154923fb165b02" kindref="member">plot_graph</ref>(g):</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>matplotlib.pyplot<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>plt</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>nx.circular_layout(g)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>nx.draw(g,<sp/>pos,<sp/>with_labels=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>labels<sp/>=<sp/>nx.get_edge_attributes(g,<sp/></highlight><highlight class="stringliteral">&apos;weight&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>nx.draw_networkx_edge_labels(g,<sp/>pos,<sp/>edge_labels=labels)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>plt.show()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="stringliteral">&apos;&apos;&apos;apply<sp/>jgrapht</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>inspired<sp/>by<sp/>https://github.com/danielslz/minimum-vertex-cover/blob/main/utils.py</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="namespaceedgecover_1adacf3d39b139b421f2b14f266963dcc9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1adacf3d39b139b421f2b14f266963dcc9" kindref="member">nx_to_jgraph</ref>(g):</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>jgrapht</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>jg<sp/>=<sp/>jgrapht.create_graph(directed=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>weighted=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allowing_self_loops=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>allowing_multiple_edges=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>jg.add_vertices_from(list(g.nodes))</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>jg.add_edges_from(list(g.edges))</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jg</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="namespaceedgecover_1a2727ccaa79bc6d32ce044e9677314496" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a2727ccaa79bc6d32ce044e9677314496" kindref="member">solve_jg</ref>(g):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>jgrapht</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>jg<sp/>=<sp/><ref refid="namespaceedgecover_1adacf3d39b139b421f2b14f266963dcc9" kindref="member">nx_to_jgraph</ref>(g)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>mvc<sp/>=<sp/>jgrapht.algorithms.vertexcover.greedy(jg)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mvc<sp/>=<sp/>jgrapht.algorithms.vertexcover.edgebased(jg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mvc<sp/>=<sp/>jgrapht.algorithms.vertexcover.clarkson(jg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mvc<sp/>=<sp/>jgrapht.algorithms.vertexcover.baryehuda_even(jg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>mvc_size<sp/>=<sp/>int(mvc[0])</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;jgraph<sp/>mvc<sp/>size&quot;</highlight><highlight class="normal">,<sp/>mvc_size<sp/>,<sp/></highlight><highlight class="stringliteral">&apos;<sp/>of<sp/>nodes:<sp/>&apos;</highlight><highlight class="normal">,<sp/>len(list(g.nodes())),<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;<sp/>time<sp/>=<sp/>&apos;</highlight><highlight class="normal">,<sp/>round(time.time()-start_time,<sp/>3),<sp/></highlight><highlight class="stringliteral">&apos;<sp/>sec&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="stringliteral">&apos;&apos;&apos;greedy<sp/>algorithm</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>inspired<sp/>by<sp/>https://github.com/sliao7/CSE6140-Final-Project-Minimum-Vertex-Cover/blob/main/code/SA.py</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67" refid="namespaceedgecover_1a010150d32280d804796dadb5edda4711" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a010150d32280d804796dadb5edda4711" kindref="member">initial_solution</ref>(g):</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>solution<sp/>=<sp/>list(g.nodes())</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>sort<sp/>nodes<sp/>for<sp/>degree,<sp/>low<sp/>degree<sp/>has<sp/>better<sp/>chance<sp/>not<sp/>to<sp/>uncover<sp/>an<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_,<sp/>node<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted(list(zip(list(dict(g.degree(solution)).values()),<sp/>solution))):</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>neigbor<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>g.neighbors(node):<sp/></highlight><highlight class="comment">#<sp/>all<sp/>neighbors<sp/>covered?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>neigbor<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>solution:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#<sp/>bad<sp/>luck,<sp/>would<sp/>uncover<sp/>an<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove:<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution.remove(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solution</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="namespaceedgecover_1a73da3a94d91f82f192729ac189e39276" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a73da3a94d91f82f192729ac189e39276" kindref="member">remove_node</ref>(g,<sp/>solution,<sp/>mean,<sp/>start_time,<sp/>max_time):</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>solution<sp/>=<sp/>solution.copy()</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>uncovered<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>len(uncovered)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_delete<sp/>=<sp/>random.choice(solution)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>neighbor<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>g.neighbors(to_delete):</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>neighbor<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>solution:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncovered.append(neighbor)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncovered.append(to_delete)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution.remove(to_delete)<sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>max_i<sp/>=<sp/>mean<sp/>*<sp/>10</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>len(uncovered)<sp/>&gt;<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>i<sp/>&lt;<sp/>max_i<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.time()<sp/>-<sp/>start_time<sp/>&lt;<sp/>max_time:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>delete<sp/>node<sp/>from<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_solution<sp/>=<sp/>solution.copy()</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_uncovered<sp/>=<sp/>uncovered.copy()</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_delete<sp/>=<sp/>random.choice(solution)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution.remove(to_delete)<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>neighbor<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>g.neighbors(to_delete):</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>neighbor<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>solution:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncovered.append(neighbor)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncovered.append(to_delete)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>add<sp/>node<sp/>to<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_add<sp/>=<sp/>random.choice(uncovered)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution.append(to_add)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>neighbor<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>g.neighbors(to_add):</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>neighbor<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>solution:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncovered.remove(neighbor)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncovered.remove(to_add)<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>solution<sp/>if<sp/>uncovered<sp/>shrink<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(next_uncovered)<sp/>&lt;<sp/>len(uncovered)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(len(next_uncovered)<sp/>==<sp/>len(uncovered)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&gt;<sp/>mean<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>random.random()<sp/>&lt;<sp/>1.0/mean):<sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>=<sp/>next_solution.copy()</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncovered<sp/>=<sp/>next_uncovered.copy()</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solution,<sp/>uncovered,<sp/>i</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f" kindref="member">solve_greedy</ref>(g,<sp/>seed,<sp/>max_time):</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;seed&quot;</highlight><highlight class="normal">,<sp/>seed)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>random.seed(seed)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>solution<sp/>=<sp/><ref refid="namespaceedgecover_1a010150d32280d804796dadb5edda4711" kindref="member">initial_solution</ref>(g)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>iters<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>mean<sp/>=<sp/>10000</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>time.time()<sp/>-<sp/>start_time<sp/>&lt;<sp/>max_time:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_solution,<sp/>uncovered,<sp/>i<sp/>=<sp/><ref refid="namespaceedgecover_1a73da3a94d91f82f192729ac189e39276" kindref="member">remove_node</ref>(g,<sp/>solution,<sp/>mean,<sp/>start_time,<sp/>max_time)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iters.append(i)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean<sp/>=<sp/>np.mean(iters)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(uncovered)<sp/>==<sp/>0:<sp/><sp/></highlight><highlight class="comment">#<sp/>all<sp/>covered<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>=<sp/>next_solution</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(round(time.time()-start_time,3),<sp/>len(solution),<sp/>i,<sp/>int(mean))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>print(round(time.time()-start_time,3),<sp/>len(solution))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Solution:<sp/>({})<sp/>{}&apos;</highlight><highlight class="normal">.<ref refid="namespaceedgecover_1a71246da8be12458f566ebd391e820de8" kindref="member">format</ref>(</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len(solution),<sp/>solution))</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solution</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="namespaceedgecover_1a2db8017a9662aa750e8fd49a9d7c1d68" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a2db8017a9662aa750e8fd49a9d7c1d68" kindref="member">run_solve</ref>(g,<sp/>max_time):</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f" kindref="member">solve_greedy</ref>(g,<sp/>random.randint(0,<sp/>100000000),<sp/>max_time)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142" refid="namespaceedgecover_1a2f9e9af0dbf9169e251c131f7402f6fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a2f9e9af0dbf9169e251c131f7402f6fa" kindref="member">solve_multiprocessing</ref>(g,<sp/>num,<sp/>max_time):<sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>Pool(processes=num)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pool:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solutions<sp/>=<sp/>pool.starmap(run_solve,<sp/>[[g,<sp/>max_time]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(num)])</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>solutions</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="namespaceedgecover_1a669278e054d76bef7dce46109d141905" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a669278e054d76bef7dce46109d141905" kindref="member">add_vertice</ref>(v,<sp/>vmap):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>vmap:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vmap[v]</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>len(vmap)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vmap[v]<sp/>=<sp/>i</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155" refid="namespaceedgecover_1a9860d907cb65923b50ef1dd1b9761143" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a9860d907cb65923b50ef1dd1b9761143" kindref="member">nx_graph</ref>(filename):</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/>nx.Graph()</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>vmap<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>open(filename,<sp/></highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">).readlines()</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lines:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vs<sp/>=<sp/>line.split()</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>=<sp/><ref refid="namespaceedgecover_1a669278e054d76bef7dce46109d141905" kindref="member">add_vertice</ref>(vs[0],<sp/>vmap)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/><ref refid="namespaceedgecover_1a669278e054d76bef7dce46109d141905" kindref="member">add_vertice</ref>(vs[1],<sp/>vmap)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.add_edge(source,<sp/>target)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="stringliteral">&apos;&apos;&apos;<sp/>optimization<sp/>approach<sp/>using<sp/>numba&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">@njit(fastmath=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2" kindref="member">num_true</ref>(nodes):</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>b<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>nodes:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>b:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">@njit(fastmath=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="namespaceedgecover_1a9247b4fa16dbb502c6e5e1bd0c30ca12" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a9247b4fa16dbb502c6e5e1bd0c30ca12" kindref="member">numba_covered</ref>(source,<sp/>target,<sp/>nodes):</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>nedges<sp/>=<sp/>len(source)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(nedges):</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nodes[source[i]]<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>nodes[target[i]]:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nedges<sp/>-<sp/>num<sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333" kindref="member">not_covered</ref>(g,<sp/>nodes):</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceedgecover_1a9247b4fa16dbb502c6e5e1bd0c30ca12" kindref="member">numba_covered</ref>(g.source,<sp/>g.target,<sp/>nodes)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">@njit(fastmath=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e" kindref="member">nodes</ref>(x):<sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>nds<sp/>=<sp/>np.empty(len(x),<sp/>dtype=numba.boolean)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(x)):</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nds[i]<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>x[i]<sp/>&gt;<sp/>0.5<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nds</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="classedgecover_1_1graph" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classedgecover_1_1graph" kindref="compound">graph</ref>():</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197" refid="classedgecover_1_1graph_1ab949ce0b99bb4cd1ef8257c1360fb528" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classedgecover_1_1graph_1ab949ce0b99bb4cd1ef8257c1360fb528" kindref="member">__init__</ref>(self,<sp/>g):</highlight></codeline>
<codeline lineno="198" refid="classedgecover_1_1graph_1ab1c2291dc3aca604a76b86f29abe3dc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classedgecover_1_1graph_1ab1c2291dc3aca604a76b86f29abe3dc4" kindref="member">nodes</ref><sp/>=<sp/>np.array(g.nodes(),<sp/>dtype=int)</highlight></codeline>
<codeline lineno="199" refid="classedgecover_1_1graph_1ad44bc611ea2c7acc18d393800c6f3c54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classedgecover_1_1graph_1ad44bc611ea2c7acc18d393800c6f3c54" kindref="member">source</ref><sp/>=<sp/>np.array([n<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>n,<sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>g.edges()],<sp/>dtype=int)</highlight></codeline>
<codeline lineno="200" refid="classedgecover_1_1graph_1aa4d72257e78cc1597ae73f6cb0e104ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classedgecover_1_1graph_1aa4d72257e78cc1597ae73f6cb0e104ad" kindref="member">target</ref><sp/>=<sp/>np.array([n<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_,<sp/>n<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>g.edges()],<sp/>dtype=int)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="classedgecover_1_1problem" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classedgecover_1_1problem" kindref="compound">problem</ref>():</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204" refid="classedgecover_1_1problem_1a7e56f4392b466592b5be52005fb1bd4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classedgecover_1_1problem_1a7e56f4392b466592b5be52005fb1bd4a" kindref="member">__init__</ref>(self,<sp/>g):</highlight></codeline>
<codeline lineno="205" refid="classedgecover_1_1problem_1a076d2450c80fd6459cb257188c1afc83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classedgecover_1_1problem_1a076d2450c80fd6459cb257188c1afc83" kindref="member">dim</ref><sp/>=<sp/>len(g.nodes())</highlight></codeline>
<codeline lineno="206" refid="classedgecover_1_1problem_1ace89b603f11f12ce781bb6e2b1a27d5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classedgecover_1_1problem_1ace89b603f11f12ce781bb6e2b1a27d5f" kindref="member">bounds</ref><sp/>=<sp/>Bounds([0]*self.<ref refid="classedgecover_1_1problem_1a076d2450c80fd6459cb257188c1afc83" kindref="member">dim</ref>,<sp/>[1.999999999999]*self.<ref refid="classedgecover_1_1problem_1a076d2450c80fd6459cb257188c1afc83" kindref="member">dim</ref>)<sp/><sp/></highlight></codeline>
<codeline lineno="207" refid="classedgecover_1_1problem_1acaf0cb6b366623d1b0bea27a3bcbb743" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classedgecover_1_1problem_1acaf0cb6b366623d1b0bea27a3bcbb743" kindref="member">g</ref><sp/>=<sp/><ref refid="classedgecover_1_1graph" kindref="compound">graph</ref>(g)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208" refid="classedgecover_1_1problem_1af5df7f082a9a6052bab659374db8b08c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classedgecover_1_1problem_1af5df7f082a9a6052bab659374db8b08c" kindref="member">best_n</ref><sp/>=<sp/>mp.RawValue(ct.c_double,<sp/>np.inf)<sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210" refid="classedgecover_1_1problem_1a8ad14faff9c46c2d1da7ddf258b015b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classedgecover_1_1problem_1a8ad14faff9c46c2d1da7ddf258b015b2" kindref="member">fitness</ref>(self,<sp/>x):</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nds<sp/>=<sp/><ref refid="namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e" kindref="member">nodes</ref>(x.astype(int))</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncov<sp/>=<sp/><ref refid="namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333" kindref="member">not_covered</ref>(self.<ref refid="classedgecover_1_1problem_1acaf0cb6b366623d1b0bea27a3bcbb743" kindref="member">g</ref>,<sp/>nds)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2" kindref="member">num_true</ref>(nds)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>+<sp/>2*ncov</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216" refid="namespaceedgecover_1a182ff9dbc428e26929d7fa0413315027" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceedgecover_1a182ff9dbc428e26929d7fa0413315027" kindref="member">solve_opt</ref>(g):<sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>prob<sp/>=<sp/><ref refid="classedgecover_1_1problem" kindref="compound">problem</ref>(g)<sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>retry.minimize(<ref refid="classfcmaes_1_1optimizer_1_1wrapper" kindref="compound">wrapper</ref>(prob.fitness),<sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob.bounds,<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer=<ref refid="classfcmaes_1_1optimizer_1_1_de__cpp" kindref="compound">De_cpp</ref>(500000,<sp/>ints<sp/>=<sp/>[</highlight><highlight class="keyword">True</highlight><highlight class="normal">]*prob.dim),<sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retries=32)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>nds<sp/>=<sp/><ref refid="namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e" kindref="member">nodes</ref>(res.x.astype(int))</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>ncov<sp/>=<sp/><ref refid="namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333" kindref="member">not_covered</ref>(prob.g,<sp/>nds)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2" kindref="member">num_true</ref>(nds)<sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;nodes<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>n,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>population<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>len(nds),</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>%<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>int(100*n/len(nds)),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>edges<sp/>not<sp/>covered<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>ncov)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="namespaceedgecover_1a1258e4ccc07f1c0a31fe912e53cf08ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="namespaceedgecover_1a9860d907cb65923b50ef1dd1b9761143" kindref="member">nx_graph</ref>(</highlight><highlight class="stringliteral">&quot;1912.edges&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#solve_jg(g)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#solve_greedy(g,<sp/>47,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceedgecover_1a2f9e9af0dbf9169e251c131f7402f6fa" kindref="member">solve_multiprocessing</ref>(g,<sp/>16,<sp/>10)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#solve_opt(g)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#plot_graph(g)</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="examples/fb/edgecover.py"/>
  </compounddef>
</doxygen>
