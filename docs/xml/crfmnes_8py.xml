<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="crfmnes_8py" kind="file" language="Python">
    <compoundname>crfmnes.py</compoundname>
    <innernamespace refid="namespacefcmaes">fcmaes</innernamespace>
    <innernamespace refid="namespacefcmaes_1_1crfmnes">fcmaes::crfmnes</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacefcmaes_1_1crfmnes" refkind="compound"><highlight class="comment">#<sp/>-*-<sp/>coding:<sp/>utf-8<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">=============================================================================</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"><sp/>Fast<sp/>CMA-ES<sp/>-<sp/>version<sp/>1.6.11</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"><sp/>(c)<sp/>2025<sp/>–<sp/>Dietmar<sp/>Wolz</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/>(c)<sp/>2025<sp/>–<sp/>Latitude</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/>License:<sp/>MIT</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/>File:</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/>-<sp/>crfmnes.py</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/>Description:</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/>-<sp/>Numpy<sp/>based<sp/>implementation<sp/>of<sp/>Fast<sp/>Moving<sp/>Natural<sp/>Evolution<sp/>Strategy</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/>for<sp/>High-Dimensional<sp/>Problems<sp/>(CR-FM-NES),<sp/>see<sp/>[2].</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/>-<sp/>Derived<sp/>from<sp/>[1]<sp/>and<sp/>[3].</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/>Authors:</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/>-<sp/>Dietmar<sp/>Wolz</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/>-<sp/>romain.despoullains@latitude.eu</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/>-<sp/>corentin.generet@latitude.eu</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/>References:</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/>-<sp/>[1]<sp/>https://github.com/dietmarwo/fast-cma-es</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/>-<sp/>[2]<sp/>https://arxiv.org/abs/2201.11422</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/>-<sp/>[3]<sp/>https://github.com/nomuramasahir0/crfmnes</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/>Documentation:</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/>-</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">=============================================================================</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy.optimize<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>OptimizeResult,<sp/>Bounds</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>numpy.random<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>PCG64DXSM,<sp/>Generator</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacefcmaes_1_1evaluator" kindref="compound">fcmaes.evaluator</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>_get_bounds,<sp/>_fitness,<sp/>serial,<sp/>parallel</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>typing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Optional,<sp/>Callable,<sp/>Union,<sp/>Dict</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>numpy.typing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ArrayLike</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">#<sp/>evaluation<sp/>value<sp/>of<sp/>the<sp/>infeasible<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">INFEASIBLE<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">os.environ[</highlight><highlight class="stringliteral">&apos;MKL_DEBUG_CPU_TYPE&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;5&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">minimize(fun:<sp/>Callable[[ArrayLike],<sp/>float],</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds:<sp/>Optional[Bounds]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0:<sp/>Optional[ArrayLike]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_sigma:<sp/>Optional[float]<sp/>=<sp/>0.3,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize:<sp/>Optional[int]<sp/>=<sp/>32,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_evaluations:<sp/>Optional[int]<sp/>=<sp/>100000,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers:<sp/>Optional[int]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_fitness:<sp/>Optional[float]<sp/>=<sp/>-np.inf,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_terminate:<sp/>Optional[Callable[[ArrayLike,<sp/>float],<sp/>bool]]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rg:<sp/>Optional[Generator]<sp/>=<sp/>Generator(PCG64DXSM()),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runid:<sp/>Optional[int]<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize:<sp/>Optional[bool]<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options:<sp/>Optional[Dict]<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>-&gt;<sp/>OptimizeResult:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Minimizes<sp/>an<sp/>objective<sp/>function<sp/>using<sp/>the<sp/>CR-FM-NES<sp/>algorithm.<sp/>This<sp/>method<sp/>is<sp/>suitable<sp/>for</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>optimization<sp/>problems<sp/>in<sp/>continuous<sp/>domains<sp/>where<sp/>solutions<sp/>are<sp/>represented<sp/>by<sp/>real-valued<sp/>vectors.</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>It<sp/>supports<sp/>various<sp/>features<sp/>like<sp/>boundary<sp/>constraints,<sp/>parallel<sp/>evaluations,<sp/>fitness<sp/>normalization,</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>custom<sp/>termination<sp/>conditions.</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun<sp/>(Callable[[ArrayLike],<sp/>float]):<sp/>The<sp/>objective<sp/>function<sp/>to<sp/>be<sp/>minimized.<sp/>It<sp/>should<sp/>accept</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>single<sp/>input<sp/>representing<sp/>a<sp/>candidate<sp/>solution<sp/>and<sp/>return<sp/>a<sp/>scalar<sp/>fitness<sp/>value.</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds<sp/>(Optional[Bounds]):<sp/>The<sp/>boundary<sp/>constraints<sp/>for<sp/>the<sp/>optimization<sp/>problem.<sp/>It<sp/>defines</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>feasible<sp/>region<sp/>for<sp/>the<sp/>search.</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>(Optional[ArrayLike]):<sp/>An<sp/>optional<sp/>initial<sp/>guess<sp/>for<sp/>the<sp/>optimization.<sp/>If<sp/>not<sp/>provided,</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>algorithm<sp/>will<sp/>randomly<sp/>initialize<sp/>a<sp/>starting<sp/>point.</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_sigma<sp/>(Optional[float]):<sp/>The<sp/>initial<sp/>standard<sp/>deviation<sp/>for<sp/>the<sp/>search<sp/>distribution.</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Defaults<sp/>to<sp/>0.3.</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize<sp/>(Optional[int]):<sp/>The<sp/>population<sp/>size<sp/>for<sp/>the<sp/>evolutionary<sp/>algorithm.<sp/>Defaults<sp/>to<sp/>32.</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_evaluations<sp/>(Optional[int]):<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>allowable<sp/>function<sp/>evaluations</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>termination.<sp/>Defaults<sp/>to<sp/>100000.</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers<sp/>(Optional[int]):<sp/>The<sp/>number<sp/>of<sp/>parallel<sp/>workers<sp/>to<sp/>use<sp/>for<sp/>fitness<sp/>evaluation.<sp/>If<sp/>not</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specified,<sp/>defaults<sp/>to<sp/>sequential<sp/>execution.</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_fitness<sp/>(Optional[float]):<sp/>The<sp/>target<sp/>fitness<sp/>value<sp/>that<sp/>will<sp/>terminate<sp/>the<sp/>algorithm</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>reached.<sp/>Defaults<sp/>to<sp/>negative<sp/>infinity.</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_terminate<sp/>(Optional[Callable[[ArrayLike,<sp/>float],<sp/>bool]]):<sp/>A<sp/>custom<sp/>termination<sp/>function.</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>provided,<sp/>it<sp/>should<sp/>return<sp/>a<sp/>boolean<sp/>indicating<sp/>whether<sp/>optimization<sp/>should<sp/>stop.</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rg<sp/>(Optional[Generator]):<sp/>A<sp/>random<sp/>number<sp/>generator<sp/>for<sp/>reproducibility.<sp/>Defaults<sp/>to</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`Generator(PCG64DXSM())`.</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runid<sp/>(Optional[int]):<sp/>An<sp/>identifier<sp/>for<sp/>the<sp/>optimization<sp/>run,<sp/>for<sp/>tracking<sp/>purposes.<sp/>Default</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>0.</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize<sp/>(Optional[bool]):<sp/>Flag<sp/>indicating<sp/>whether<sp/>to<sp/>perform<sp/>fitness<sp/>normalization.<sp/>Defaults</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>False.</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options<sp/>(Optional[Dict]):<sp/>A<sp/>dictionary<sp/>containing<sp/>additional<sp/>configuration<sp/>parameters<sp/>for</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>optimizer.</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OptimizeResult:<sp/>A<sp/>data<sp/>structure<sp/>containing<sp/>the<sp/>results<sp/>of<sp/>the<sp/>optimization.<sp/>Attributes<sp/>include</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>optimal<sp/>solution<sp/>found,<sp/>its<sp/>fitness<sp/>value,<sp/>the<sp/>number<sp/>of<sp/>function<sp/>evaluations<sp/>and<sp/>iterations,</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>well<sp/>as<sp/>termination<sp/>status<sp/>and<sp/>success<sp/>flag.</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>cr<sp/>=<sp/>CRFMNES(</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>bounds,<sp/>x0,<sp/>input_sigma,<sp/>popsize,<sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_evaluations,<sp/>stop_fitness,<sp/>is_terminate,<sp/>runid,<sp/>normalize,<sp/>options,<sp/>rg,<sp/>workers,<sp/>fun)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>cr.optimize()</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OptimizeResult(x=cr.f.decode(cr.x_best),<sp/>fun=cr.f_best,<sp/>nfev=cr.no_of_evals,<sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nit=cr.g,<sp/>status=cr.stop,<sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CRFMNES:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>CRFMNES<sp/>is<sp/>an<sp/>implementation<sp/>of<sp/>the<sp/>Covariance<sp/>Rank-based<sp/>Fast<sp/>Mutation<sp/>Evolution<sp/>Strategy</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(CR-FM-NES),<sp/>an<sp/>optimization<sp/>algorithm<sp/>for<sp/>solving<sp/>problems<sp/>with<sp/>or<sp/>without<sp/>constraints.</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>is<sp/>designed<sp/>for<sp/>evolutionary<sp/>optimization<sp/>processes,<sp/>providing<sp/>features<sp/>for<sp/>handling</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>constraints,<sp/>managing<sp/>population<sp/>rankings,<sp/>and<sp/>utilizing<sp/>various<sp/>evolutionary<sp/>strategies<sp/>for</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>adaptive<sp/>parameter<sp/>tuning.<sp/>It<sp/>internally<sp/>manages<sp/>individual<sp/>solution<sp/>vectors,<sp/>constraints,</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>population<sp/>size,<sp/>and<sp/>custom<sp/>fitness<sp/>evaluation<sp/>functions.</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Attributes:</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>(int):<sp/>Number<sp/>of<sp/>dimensions<sp/>in<sp/>the<sp/>optimization<sp/>problem.</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma<sp/>(float):<sp/>Mutation<sp/>strength<sp/>for<sp/>adaptive<sp/>parameter<sp/>control.</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize<sp/>(int):<sp/>Number<sp/>of<sp/>individuals<sp/>in<sp/>the<sp/>population.</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_evaluations<sp/>(int):<sp/>Maximum<sp/>number<sp/>of<sp/>function<sp/>evaluations<sp/>allowed<sp/>before<sp/>termination.</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_fitness<sp/>(float):<sp/>Target<sp/>value<sp/>for<sp/>the<sp/>optimization.<sp/>Process<sp/>terminates<sp/>if<sp/>reached.</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_terminate<sp/>(bool<sp/>or<sp/>None):<sp/>Flags<sp/>whether<sp/>the<sp/>optimization<sp/>should<sp/>terminate<sp/>prematurely.</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rg<sp/>(Generator):<sp/>Random<sp/>number<sp/>generator<sp/>instance<sp/>for<sp/>reproducibility<sp/>and<sp/>randomness.</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runid<sp/>(int):<sp/>Unique<sp/>identifier<sp/>for<sp/>distinguishing<sp/>optimization<sp/>runs.</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraint<sp/>(List[List[float]]):<sp/>Bounds<sp/>for<sp/>variables.<sp/>Used<sp/>for<sp/>constraint<sp/>handling.</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>(np.ndarray):<sp/>Evolution<sp/>vector<sp/>for<sp/>controlling<sp/>the<sp/>search<sp/>directions.</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D<sp/>(np.ndarray):<sp/>Scaling<sp/>factor<sp/>for<sp/>mutation<sp/>parameters.</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>penalty_coef<sp/>(float):<sp/>Coefficient<sp/>for<sp/>penalizing<sp/>constraint<sp/>violation.</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_constraint_violation<sp/>(bool):<sp/>Indicates<sp/>if<sp/>constraint<sp/>violations<sp/>should<sp/>influence<sp/>optimization.</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_rank_hat<sp/>(np.ndarray):<sp/>Rank-based<sp/>weights<sp/>before<sp/>normalization.</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_rank<sp/>(np.ndarray):<sp/>Normalized<sp/>rank<sp/>weights<sp/>used<sp/>for<sp/>recombination.</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mueff<sp/>(float):<sp/>Variance<sp/>effective<sp/>selection<sp/>mass<sp/>for<sp/>mutation<sp/>and<sp/>update<sp/>dynamics.</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>(float):<sp/>Cumulation<sp/>step-size<sp/>adaptation<sp/>parameter.</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/>(float):<sp/>Cumulation<sp/>rank-one<sp/>strategy<sp/>parameter.</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1_cma<sp/>(float):<sp/>Rank-one<sp/>covariance<sp/>matrix<sp/>update<sp/>learning<sp/>rate.</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chiN<sp/>(float):<sp/>Expected<sp/>length<sp/>for<sp/>normal<sp/>distribution<sp/>under<sp/>CMA-ES<sp/>geometry.</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc<sp/>(np.ndarray):<sp/>Evolution<sp/>path<sp/>for<sp/>cumulative<sp/>rank-one<sp/>strategy<sp/>updates.</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ps<sp/>(np.ndarray):<sp/>Evolution<sp/>path<sp/>for<sp/>cumulative<sp/>step-size<sp/>adaptation.</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_inv<sp/>(float):<sp/>Inverse<sp/>of<sp/>an<sp/>internal<sp/>constant,<sp/>utilized<sp/>for<sp/>certain<sp/>computations.</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta_m<sp/>(float):<sp/>Learning<sp/>rate<sp/>for<sp/>model<sp/>vector<sp/>updates.</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta_move_sigma<sp/>(float):<sp/>Learning<sp/>rate<sp/>for<sp/>standard<sp/>mutation<sp/>updates.</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>(int):<sp/>Current<sp/>generation<sp/>or<sp/>iteration<sp/>count<sp/>of<sp/>the<sp/>optimization<sp/>process.</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no_of_evals<sp/>(int):<sp/>Total<sp/>number<sp/>of<sp/>function<sp/>evaluations<sp/>performed<sp/>so<sp/>far.</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iteration<sp/>(int):<sp/>Internal<sp/>tracking<sp/>of<sp/>algorithm<sp/>iterations.</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>(int):<sp/>Indicates<sp/>the<sp/>status<sp/>of<sp/>termination<sp/>(-1:<sp/>error,<sp/>0:<sp/>not<sp/>stopped,<sp/>&gt;0:<sp/>stopped).</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idxp<sp/>(np.ndarray):<sp/>Indices<sp/>for<sp/>positive<sp/>directions<sp/>during<sp/>symmetry<sp/>computation.</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idxm<sp/>(np.ndarray):<sp/>Indices<sp/>for<sp/>negative<sp/>directions<sp/>during<sp/>symmetry<sp/>computation.</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>(np.ndarray):<sp/>Mutant<sp/>vectors<sp/>prior<sp/>to<sp/>rescaling,<sp/>used<sp/>in<sp/>evolution<sp/>processes.</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_best<sp/>(float):<sp/>Best<sp/>fitness<sp/>value<sp/>observed<sp/>in<sp/>the<sp/>optimization<sp/>process.</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_best<sp/>(np.ndarray):<sp/>Solution<sp/>vector<sp/>corresponding<sp/>to<sp/>the<sp/>best<sp/>observed<sp/>fitness.</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>=<sp/>None,<sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds:<sp/>Optional[Bounds]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0:<sp/>Optional[ArrayLike]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_sigma:<sp/>Optional[Union[float,<sp/>ArrayLike,<sp/>Callable]]<sp/>=<sp/>0.3,<sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize:<sp/>Optional[int]<sp/>=<sp/>32,<sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_evaluations:<sp/>Optional[int]<sp/>=<sp/>100000,<sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_fitness:<sp/>Optional[float]<sp/>=<sp/>-np.inf,<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_terminate:<sp/>Optional[bool]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runid:<sp/>Optional[int]<sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize:<sp/>Optional[bool]<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options:<sp/>Optional[Dict]<sp/>=<sp/>{},<sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rg:<sp/>Optional[Generator]<sp/>=<sp/>Generator(PCG64DXSM()),<sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers:<sp/>Optional[int]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun:<sp/>Optional[Callable[[ArrayLike],<sp/>float]]<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>0):</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>class<sp/>with<sp/>parameters<sp/>for<sp/>optimization.<sp/>This<sp/>method<sp/>allows<sp/>for<sp/>the<sp/>configuration<sp/>of<sp/>various</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimization<sp/>parameters,<sp/>including<sp/>the<sp/>dimensional<sp/>bounds,<sp/>population<sp/>size,<sp/>sigma<sp/>value,<sp/>stopping<sp/>criteria,</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>many<sp/>others.<sp/>It<sp/>ensures<sp/>consistency<sp/>across<sp/>parameters,<sp/>initializes<sp/>the<sp/>fitness<sp/>function,<sp/>sets<sp/>up<sp/>constraints,</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>prepares<sp/>internal<sp/>attributes<sp/>for<sp/>optimization.<sp/>The<sp/>class<sp/>is<sp/>tailored<sp/>for<sp/>scenarios<sp/>where<sp/>optimization<sp/>must</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>conducted<sp/>within<sp/>specified<sp/>bounds<sp/>using<sp/>a<sp/>population-based<sp/>approach.</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>(Optional[int]):<sp/>Dimensionality<sp/>of<sp/>the<sp/>problem.<sp/>If<sp/>not<sp/>specified,<sp/>it<sp/>is<sp/>inferred<sp/>from<sp/>bounds<sp/>or<sp/>x0.</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds<sp/>(Optional[Bounds]):<sp/>Bounds<sp/>for<sp/>the<sp/>optimization<sp/>problem.<sp/>Each<sp/>dimension<sp/>can<sp/>have<sp/>distinct<sp/>bounds.</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>(Optional[ArrayLike]):<sp/>Initial<sp/>guess<sp/>for<sp/>optimization.<sp/>If<sp/>not<sp/>provided,<sp/>derived<sp/>using<sp/>bounds<sp/>and<sp/>dimensions.</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_sigma<sp/>(Optional[Union[float,<sp/>ArrayLike,<sp/>Callable]]):<sp/>Sigma<sp/>parameter<sp/>that<sp/>controls<sp/>the<sp/>search<sp/>spread.</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default<sp/>is<sp/>0.3.</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize<sp/>(Optional[int]):<sp/>Population<sp/>size.<sp/>Should<sp/>be<sp/>an<sp/>even<sp/>number.<sp/>If<sp/>odd,<sp/>it<sp/>will<sp/>be<sp/>automatically<sp/>adjusted.</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_evaluations<sp/>(Optional[int]):<sp/>Maximum<sp/>evaluations<sp/>allowed<sp/>for<sp/>the<sp/>optimization.<sp/>Default<sp/>is<sp/>100,000.</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_fitness<sp/>(Optional[float]):<sp/>Target<sp/>fitness<sp/>threshold<sp/>for<sp/>stopping<sp/>optimization.<sp/>Default<sp/>is<sp/>-infinity.</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_terminate<sp/>(Optional[bool]):<sp/>Whether<sp/>termination<sp/>is<sp/>allowed<sp/>based<sp/>on<sp/>certain<sp/>conditions.<sp/>Default<sp/>is<sp/>None.</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runid<sp/>(Optional[int]):<sp/>Run<sp/>ID<sp/>to<sp/>differentiate<sp/>optimization<sp/>runs.<sp/>Default<sp/>is<sp/>0.</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize<sp/>(Optional[bool]):<sp/>Whether<sp/>to<sp/>normalize<sp/>inputs.<sp/>Default<sp/>is<sp/>False.</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options<sp/>(Optional[Dict]):<sp/>Additional<sp/>options<sp/>for<sp/>customization,<sp/>such<sp/>as<sp/>constraints<sp/>or<sp/>penalties.</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rg<sp/>(Optional[Generator]):<sp/>Random<sp/>number<sp/>generator<sp/>for<sp/>initializing<sp/>population.<sp/>Default<sp/>uses<sp/>PCG64DXSM.</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers<sp/>(Optional[int]):<sp/>Number<sp/>of<sp/>workers<sp/>for<sp/>parallel<sp/>evaluations.<sp/>Default<sp/>is<sp/>None,<sp/>meaning<sp/>serial<sp/>execution.</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun<sp/>(Optional[Callable[[ArrayLike],<sp/>float]]):<sp/>Optimization<sp/>function<sp/>to<sp/>be<sp/>evaluated.<sp/>Default<sp/>is<sp/>a<sp/>zero<sp/>function.</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>popsize<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize<sp/>=<sp/>32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>popsize<sp/>%<sp/>2<sp/>==<sp/>1:<sp/></highlight><highlight class="comment">#<sp/>requires<sp/>even<sp/>popsize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>dim<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>x0<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:<sp/>dim<sp/>=<sp/>len(x0)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>bounds<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:<sp/>dim<sp/>=<sp/>len(bounds.lb)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower,<sp/>upper,<sp/>guess<sp/>=<sp/>_get_bounds(dim,<sp/>bounds,<sp/>x0,<sp/>rg)<sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.fun<sp/>=<sp/>serial(fun)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(workers<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>workers<sp/>&lt;=<sp/>1)<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>parallel(fun,<sp/>workers)<sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.f<sp/>=<sp/>_fitness(self.fun,<sp/>lower,<sp/>upper,<sp/>normalize)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>options<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>lower<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options[</highlight><highlight class="stringliteral">&apos;constraint&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[<sp/>[lower[i],<sp/>upper[i]]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(dim)]<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.constraint<sp/>=<sp/>options.get(</highlight><highlight class="stringliteral">&apos;constraint&apos;</highlight><highlight class="normal">,<sp/>[[-np.inf,<sp/>np.inf]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(dim)])</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;seed&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>options.keys():</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.random.seed(options[</highlight><highlight class="stringliteral">&apos;seed&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma<sp/>=<sp/>input_sigma</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>np.isscalar(sigma):</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma<sp/>=<sp/>np.mean(sigma)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.m<sp/>=<sp/>np.array([self.f.encode(guess)]).T</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dim<sp/>=<sp/>dim</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.sigma<sp/>=<sp/>sigma</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.popsize<sp/>=<sp/>popsize</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.max_evaluations<sp/>=<sp/>max_evaluations</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stop_fitness<sp/>=<sp/>stop_fitness</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.is_terminate<sp/>=<sp/>is_terminate</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.rg<sp/>=<sp/>rg</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.runid<sp/>=<sp/>runid</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.v<sp/>=<sp/>options.get(</highlight><highlight class="stringliteral">&apos;v&apos;</highlight><highlight class="normal">,<sp/>self.rg.<ref refid="evaluator_8h_1a231544ac51b3f9312c104a3b7a3c49a6" kindref="member">normal</ref>(0,1,(dim,<sp/>1))<sp/>/<sp/>np.sqrt(dim))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.D<sp/>=<sp/>np.ones([dim,<sp/>1])</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.penalty_coef<sp/>=<sp/>options.get(</highlight><highlight class="stringliteral">&apos;penalty_coef&apos;</highlight><highlight class="normal">,<sp/>1e5)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.use_constraint_violation<sp/>=<sp/>options.get(</highlight><highlight class="stringliteral">&apos;use_constraint_violation&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.w_rank_hat<sp/>=<sp/>(np.log(self.popsize<sp/>/<sp/>2<sp/>+<sp/>1)<sp/>-<sp/>np.log(np.arange(1,<sp/>self.popsize<sp/>+<sp/>1))).reshape(self.popsize,<sp/>1)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.w_rank_hat[np.where(self.w_rank_hat<sp/>&lt;<sp/>0)]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.w_rank<sp/>=<sp/>self.w_rank_hat<sp/>/<sp/>sum(self.w_rank_hat)<sp/>-<sp/>(1.<sp/>/<sp/>self.popsize)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mueff<sp/>=<sp/>1<sp/>/<sp/>((self.w_rank<sp/>+<sp/>(1<sp/>/<sp/>self.popsize)).T<sp/>@<sp/>(self.w_rank<sp/>+<sp/>(1<sp/>/<sp/>self.popsize)))[0][0]</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.cs<sp/>=<sp/>(self.mueff<sp/>+<sp/>2.)<sp/>/<sp/>(self.dim<sp/>+<sp/>self.mueff<sp/>+<sp/>5.)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.cc<sp/>=<sp/>(4.<sp/>+<sp/>self.mueff<sp/>/<sp/>self.dim)<sp/>/<sp/>(self.dim<sp/>+<sp/>4.<sp/>+<sp/>2.<sp/>*<sp/>self.mueff<sp/>/<sp/>self.dim)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.c1_cma<sp/>=<sp/>2.<sp/>/<sp/>(math.pow(self.dim<sp/>+<sp/>1.3,<sp/>2)<sp/>+<sp/>self.mueff)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.chiN<sp/>=<sp/>np.sqrt(self.dim)<sp/>*<sp/>(1.<sp/>-<sp/>1.<sp/>/<sp/>(4.<sp/>*<sp/>self.dim)<sp/>+<sp/>1.<sp/>/<sp/>(21.<sp/>*<sp/>self.dim<sp/>*<sp/>self.dim))</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.pc<sp/>=<sp/>np.zeros([self.dim,<sp/>1])</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ps<sp/>=<sp/>np.zeros([self.dim,<sp/>1])</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>distance<sp/>weight<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.h_inv<sp/>=<sp/>get_h_inv(self.dim)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.alpha_dist<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>lambF:<sp/>self.h_inv<sp/>*<sp/>min(1.,<sp/>math.sqrt(self.popsize<sp/>/<sp/>self.dim))<sp/>*<sp/>math.sqrt(</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambF<sp/>/<sp/>self.popsize)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.w_dist_hat<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>z,<sp/>lambF:<sp/>exp(self.alpha_dist(lambF)<sp/>*<sp/>np.linalg.norm(z))</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>learning<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.eta_m<sp/>=<sp/>1.0</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.eta_move_sigma<sp/>=<sp/>1.</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.eta_stag_sigma<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>lambF:<sp/>math.tanh((0.024<sp/>*<sp/>lambF<sp/>+<sp/>0.7<sp/>*<sp/>self.dim<sp/>+<sp/>20.)<sp/>/<sp/>(self.dim<sp/>+<sp/>12.))</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.eta_conv_sigma<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>lambF:<sp/>2.<sp/>*<sp/>math.tanh((0.025<sp/>*<sp/>lambF<sp/>+<sp/>0.75<sp/>*<sp/>self.dim<sp/>+<sp/>10.)<sp/>/<sp/>(self.dim<sp/>+<sp/>4.))</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.c1<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>lambF:<sp/>self.c1_cma<sp/>*<sp/>(self.dim<sp/>-<sp/>5)<sp/>/<sp/>6<sp/>*<sp/>(lambF<sp/>/<sp/>self.popsize)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.eta_B<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>lambF:<sp/>np.tanh((min(0.02<sp/>*<sp/>lambF,<sp/>3<sp/>*<sp/>np.log(self.dim))<sp/>+<sp/>5)<sp/>/<sp/>(0.23<sp/>*<sp/>self.dim<sp/>+<sp/>25))</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.g<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.no_of_evals<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.iteration<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stop<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.idxp<sp/>=<sp/>np.arange(self.popsize<sp/>/<sp/>2,<sp/>dtype=int)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.idxm<sp/>=<sp/>np.arange(self.popsize<sp/>/<sp/>2,<sp/>self.popsize,<sp/>dtype=int)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.z<sp/>=<sp/>np.zeros([self.dim,<sp/>self.popsize])</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.f_best<sp/>=<sp/>float(</highlight><highlight class="stringliteral">&apos;inf&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.x_best<sp/>=<sp/>np.empty(self.dim)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__del__(self):</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handles<sp/>the<sp/>cleanup<sp/>process<sp/>upon<sp/>object<sp/>deletion.</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/>ensures<sp/>proper<sp/>resource<sp/>management<sp/>by<sp/>stopping<sp/>the<sp/>execution</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>`parallel`<sp/>object,<sp/>if<sp/>applicable,<sp/>when<sp/>the<sp/>instance<sp/>is<sp/>about<sp/>to</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>destroyed.</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raises:</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AttributeError:<sp/>If<sp/>`self.fun`<sp/>does<sp/>not<sp/>have<sp/>a<sp/>`stop`<sp/>method<sp/>and<sp/>is<sp/>an<sp/>instance<sp/>of<sp/>`parallel`.</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(self.fun,<sp/>parallel):</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.fun.stop()</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">calc_violations(self,<sp/>x):</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Calculates<sp/>the<sp/>constraint<sp/>violations<sp/>for<sp/>a<sp/>population.</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>evaluates<sp/>how<sp/>much<sp/>each<sp/>solution<sp/>in<sp/>the<sp/>population<sp/>violates<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints.<sp/>Violations<sp/>are<sp/>penalized<sp/>by<sp/>a<sp/>predefined<sp/>penalty<sp/>coefficient.</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x:<sp/>numpy.ndarray.<sp/>A<sp/>2D<sp/>array<sp/>representing<sp/>the<sp/>population.<sp/>Each<sp/>column<sp/>represents</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>single<sp/>solution,<sp/>and<sp/>each<sp/>row<sp/>represents<sp/>a<sp/>variable<sp/>in<sp/>the<sp/>solution.</highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numpy.ndarray:<sp/>A<sp/>1D<sp/>array<sp/>containing<sp/>the<sp/>total<sp/>calculated<sp/>violations<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>in<sp/>the<sp/>population.</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>violations<sp/>=<sp/>np.zeros(self.popsize)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.popsize):</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.dim):</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>violations[i]<sp/>+=<sp/>(-<sp/>min(0,<sp/>x[j][i]<sp/>-<sp/>self.constraint[j][0])<sp/>+<sp/>max(0,<sp/>x[j][i]<sp/>-<sp/>self.constraint[j][1]))<sp/>*<sp/>self.penalty_coef</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>violations</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">optimize(self)<sp/>-&gt;<sp/>int:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Executes<sp/>an<sp/>optimization<sp/>process<sp/>by<sp/>iteratively<sp/>evaluating,<sp/>decoding,<sp/>and<sp/>improving</highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solutions<sp/>until<sp/>termination<sp/>criteria<sp/>are<sp/>met.</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/>utilizes<sp/>a<sp/>generation<sp/>loop<sp/>to<sp/>perform<sp/>the<sp/>optimization.<sp/>It<sp/>stops<sp/>either</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>a<sp/>defined<sp/>evaluation<sp/>limit<sp/>is<sp/>reached,<sp/>or<sp/>due<sp/>to<sp/>an<sp/>external<sp/>stop<sp/>signal,</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>when<sp/>execution<sp/>encounters<sp/>an<sp/>unrecoverable<sp/>exception.</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Raises:</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exception:<sp/>If<sp/>an<sp/>error<sp/>occurs<sp/>during<sp/>the<sp/>execution<sp/>of<sp/>the<sp/>optimization<sp/>process.</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int:<sp/>The<sp/>status<sp/>of<sp/>the<sp/>optimization<sp/>process<sp/>upon<sp/>termination.<sp/>A<sp/>value<sp/>of<sp/>-1</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicates<sp/>an<sp/>error<sp/>during<sp/>execution;<sp/>other<sp/>stop<sp/>conditions<sp/>may<sp/>yield<sp/>different</highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>--------------------<sp/>Generation<sp/>Loop<sp/>--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.no_of_evals<sp/>&gt;<sp/>self.max_evaluations:</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.stop<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>self.ask()</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>self.f.values(self.f.decode(self.f.closestFeasible(x)))</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.tell(y)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.stop<sp/>!=<sp/>0:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>ex:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stop<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ask(self)<sp/>-&gt;<sp/>np.ndarray:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Generate<sp/>and<sp/>return<sp/>the<sp/>next<sp/>set<sp/>of<sp/>candidate<sp/>solution<sp/>vectors<sp/>for<sp/>optimization.</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/>computes<sp/>a<sp/>population<sp/>of<sp/>new<sp/>solution<sp/>vectors<sp/>and<sp/>applies<sp/>certain</highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transformations<sp/>based<sp/>on<sp/>the<sp/>algorithm&apos;s<sp/>state<sp/>variables.</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.ndarray:<sp/>A<sp/>2D<sp/>array<sp/>where<sp/>each<sp/>row<sp/>represents<sp/>a<sp/>candidate<sp/>solution<sp/>vector.</highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>self.dim</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize<sp/>=<sp/>self.popsize</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zhalf<sp/>=<sp/>self.rg.<ref refid="evaluator_8h_1a231544ac51b3f9312c104a3b7a3c49a6" kindref="member">normal</ref>(0,1,(d,<sp/>int(popsize<sp/>/<sp/>2)))<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>popsize/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.z[:,<sp/>self.idxp]<sp/>=<sp/>zhalf</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.z[:,<sp/>self.idxm]<sp/>=<sp/>-zhalf</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.normv<sp/>=<sp/>np.linalg.norm(self.v)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.normv2<sp/>=<sp/>self.normv<sp/>**<sp/>2</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.vbar<sp/>=<sp/>self.v<sp/>/<sp/>self.normv</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.y<sp/>=<sp/>self.z<sp/>+<sp/>((np.sqrt(1<sp/>+<sp/>self.normv2)<sp/>-<sp/>1)<sp/>*<sp/>(self.vbar<sp/>@<sp/>(self.vbar.T<sp/>@<sp/>self.z)))</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.x<sp/>=<sp/>self.m<sp/>+<sp/>(self.sigma<sp/>*<sp/>self.y)<sp/>*<sp/>self.D</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.x.T</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">tell(self,<sp/>evals_no_sort:<sp/>np.ndarray)<sp/>-&gt;<sp/>int:</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Provides<sp/>the<sp/>functionality<sp/>to<sp/>update<sp/>and<sp/>optimize<sp/>based<sp/>on<sp/>the<sp/>given<sp/>evaluations</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>sorting,<sp/>constraints<sp/>handling,<sp/>and<sp/>adaptive<sp/>parameters<sp/>for<sp/>step<sp/>size<sp/>and</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evolution<sp/>paths.</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evals_no_sort<sp/>(np.ndarray):<sp/>The<sp/>evaluation<sp/>scores<sp/>for<sp/>the<sp/>current<sp/>population</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>sorting.</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int:<sp/>The<sp/>stop<sp/>condition<sp/>value,<sp/>indicating<sp/>the<sp/>termination<sp/>status<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimization<sp/>process.</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>violations<sp/>=<sp/>np.zeros(self.popsize)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.use_constraint_violation:</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>violations<sp/>=<sp/>self.calc_violations(self.x)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_indices<sp/>=<sp/>sort_indices_by(evals_no_sort<sp/>+<sp/>violations,<sp/>self.z)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_indices<sp/>=<sp/>sort_indices_by(evals_no_sort,<sp/>self.z)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_eval_id<sp/>=<sp/>sorted_indices[0]</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_best<sp/>=<sp/>evals_no_sort[best_eval_id]</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_best<sp/>=<sp/>self.x[:,<sp/>best_eval_id]</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.z<sp/>=<sp/>self.z[:,<sp/>sorted_indices]</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>self.y[:,<sp/>sorted_indices]</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>self.x[:,<sp/>sorted_indices]</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.no_of_evals<sp/>+=<sp/>self.popsize</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.g<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>f_best<sp/>&lt;<sp/>self.f_best:</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.f_best<sp/>=<sp/>f_best</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.x_best<sp/>=<sp/>x_best<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>print(self.no_of_evals,<sp/>self.g,<sp/>self.f_best)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>operation<sp/>assumes<sp/>that<sp/>if<sp/>the<sp/>solution<sp/>is<sp/>infeasible,<sp/>infinity<sp/>comes<sp/>in<sp/>as<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambF<sp/>=<sp/>np.sum(evals_no_sort<sp/>&lt;<sp/>np.finfo(float).max)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>evolution<sp/>path<sp/>p_sigma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ps<sp/>=<sp/>(1<sp/>-<sp/>self.cs)<sp/>*<sp/>self.ps<sp/>+<sp/>np.sqrt(self.cs<sp/>*<sp/>(2.<sp/>-<sp/>self.cs)<sp/>*<sp/>self.mueff)<sp/>*<sp/>(self.z<sp/>@<sp/>self.w_rank)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ps_norm<sp/>=<sp/>np.linalg.norm(self.ps)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>distance<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1<sp/>=<sp/><sp/>self.h_inv<sp/>*<sp/>min(1.,<sp/>math.sqrt(self.popsize<sp/>/<sp/>self.dim))<sp/>*<sp/>math.sqrt(lambF<sp/>/<sp/>self.popsize)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_tmp<sp/>=<sp/>self.w_rank_hat<sp/>*<sp/>np.exp(np.linalg.norm(self.z,<sp/>axis<sp/>=<sp/>0)<sp/>*<sp/>f1).reshape((self.popsize,1))</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights_dist<sp/>=<sp/>w_tmp<sp/>/<sp/>sum(w_tmp)<sp/>-<sp/>1.<sp/>/<sp/>self.popsize</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>switching<sp/>weights<sp/>and<sp/>learning<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights<sp/>=<sp/>weights_dist<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ps_norm<sp/>&gt;=<sp/>self.chiN<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.w_rank</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta_sigma<sp/>=<sp/>self.eta_move_sigma<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ps_norm<sp/>&gt;=<sp/>self.chiN<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.eta_stag_sigma(</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambF)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ps_norm<sp/>&gt;=<sp/>0.1<sp/>*<sp/>self.chiN<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>self.eta_conv_sigma(lambF)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>pc,<sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxm<sp/>=<sp/>(x<sp/>-<sp/>self.m)<sp/>@<sp/>weights</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.pc<sp/>=<sp/>(1.<sp/>-<sp/>self.cc)<sp/>*<sp/>self.pc<sp/>+<sp/>np.sqrt(self.cc<sp/>*<sp/>(2.<sp/>-<sp/>self.cc)<sp/>*<sp/>self.mueff)<sp/>*<sp/>wxm<sp/>/<sp/>self.sigma</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.m<sp/>+=<sp/>self.eta_m<sp/>*<sp/>wxm</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>calculate<sp/>s,<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>step1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normv4<sp/>=<sp/>self.normv2<sp/>**<sp/>2</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exY<sp/>=<sp/>np.append(y,<sp/>self.pc<sp/>/<sp/>self.D,<sp/>axis=1)<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>exY<sp/>*<sp/>exY<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip_yvbar<sp/>=<sp/>self.vbar.T<sp/>@<sp/>exY</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yvbar<sp/>=<sp/>exY<sp/>*<sp/>self.vbar<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>popsize+1.<sp/>exYのそれぞれの列にvbarがかかる</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gammav<sp/>=<sp/>1.<sp/>+<sp/>self.normv2</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vbarbar<sp/>=<sp/>self.vbar<sp/>*<sp/>self.vbar</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alphavd<sp/>=<sp/>min(1,<sp/>np.sqrt(normv4<sp/>+<sp/>(2<sp/>*<sp/>gammav<sp/>-<sp/>np.sqrt(gammav))<sp/>/<sp/>np.max(vbarbar))<sp/>/<sp/>(2<sp/>+<sp/>self.normv2))<sp/><sp/></highlight><highlight class="comment">#<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>exY<sp/>*<sp/>ip_yvbar<sp/>-<sp/>self.vbar<sp/>*<sp/>(ip_yvbar<sp/>**<sp/>2<sp/>+<sp/>gammav)<sp/>/<sp/>2<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>-(1<sp/>-<sp/>alphavd<sp/>**<sp/>2)<sp/>*<sp/>normv4<sp/>/<sp/>gammav<sp/>+<sp/>2<sp/>*<sp/>alphavd<sp/>**<sp/>2</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H<sp/>=<sp/>np.ones([self.dim,<sp/>1])<sp/>*<sp/>2<sp/>-<sp/>(b<sp/>+<sp/>2<sp/>*<sp/>alphavd<sp/>**<sp/>2)<sp/>*<sp/>vbarbar<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invH<sp/>=<sp/>H<sp/>**<sp/>(-1)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_step1<sp/>=<sp/>yy<sp/>-<sp/>self.normv2<sp/>/<sp/>gammav<sp/>*<sp/>(yvbar<sp/>*<sp/>ip_yvbar)<sp/>-<sp/>np.ones([self.dim,<sp/>self.popsize<sp/>+<sp/>1])<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip_vbart<sp/>=<sp/>self.vbar.T<sp/>@<sp/>t<sp/><sp/></highlight><highlight class="comment">#<sp/>1<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_step2<sp/>=<sp/>s_step1<sp/>-<sp/>alphavd<sp/>/<sp/>gammav<sp/>*<sp/>((2<sp/>+<sp/>self.normv2)<sp/>*<sp/>(t<sp/>*<sp/>self.vbar)<sp/>-<sp/>self.normv2<sp/>*<sp/>vbarbar<sp/>@<sp/>ip_vbart)<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invHvbarbar<sp/>=<sp/>invH<sp/>*<sp/>vbarbar</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip_s_step2invHvbarbar<sp/>=<sp/>invHvbarbar.T<sp/>@<sp/>s_step2<sp/><sp/></highlight><highlight class="comment">#<sp/>1<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>1<sp/>+<sp/>b<sp/>*<sp/>vbarbar.T<sp/>@<sp/>invHvbarbar</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>np.amin(abs(div))<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(s_step2<sp/>*<sp/>invH)<sp/>-<sp/>b<sp/>/<sp/>div<sp/>*<sp/>invHvbarbar<sp/>@<sp/>ip_s_step2invHvbarbar<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip_svbarbar<sp/>=<sp/>vbarbar.T<sp/>@<sp/>s<sp/><sp/></highlight><highlight class="comment">#<sp/>1<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t<sp/>-<sp/>alphavd<sp/>*<sp/>((2<sp/>+<sp/>self.normv2)<sp/>*<sp/>(s<sp/>*<sp/>self.vbar)<sp/>-<sp/>self.vbar<sp/>@<sp/>ip_svbarbar)<sp/><sp/></highlight><highlight class="comment">#<sp/>dim<sp/>x<sp/>popsize+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>v,<sp/>D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exw<sp/>=<sp/>np.append(self.eta_B(lambF)<sp/>*<sp/>weights,<sp/>np.array([self.c1(lambF)]).reshape(1,<sp/>1),</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>axis=0)<sp/><sp/></highlight><highlight class="comment">#<sp/>popsize+1<sp/>x<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.v<sp/>=<sp/>self.v<sp/>+<sp/>(t<sp/>@<sp/>exw)<sp/>/<sp/>self.normv</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.D<sp/>=<sp/>self.D<sp/>+<sp/>(s<sp/>@<sp/>exw)<sp/>*<sp/>self.D</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>calculate<sp/>detA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>np.amin(self.D)<sp/>&lt;<sp/>0:</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nthrootdetA<sp/>=<sp/>exp(np.sum(np.log(self.D))<sp/>/<sp/>self.dim<sp/>+<sp/>np.log(1<sp/>+<sp/>(self.v.T<sp/>@<sp/>self.v)[0][0])<sp/>/<sp/>(2<sp/>*<sp/>self.dim))</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.D<sp/>=<sp/>self.D<sp/>/<sp/>nthrootdetA</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>sigma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_s<sp/>=<sp/>np.sum((self.z<sp/>*<sp/>self.z<sp/>-<sp/>np.ones([self.dim,<sp/>self.popsize]))<sp/>@<sp/>weights)<sp/>/<sp/>self.dim</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.sigma<sp/>=<sp/>self.sigma<sp/>*<sp/>exp(eta_sigma<sp/>/<sp/>2<sp/>*<sp/>G_s)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.stop</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">population(self)<sp/>-&gt;<sp/>np.ndarray:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Retrieves<sp/>the<sp/>current<sp/>population.</highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>population<sp/>as<sp/>a<sp/>NumPy<sp/>array.</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.ndarray:<sp/>The<sp/>current<sp/>population<sp/>as<sp/>a<sp/>NumPy<sp/>array.</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.x</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">result(self)<sp/>-&gt;<sp/>OptimizeResult:</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>optimization<sp/>result<sp/>as<sp/>an<sp/>instance<sp/>of<sp/>`OptimizeResult`.</highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>function<sp/>compiles<sp/>the<sp/>results<sp/>of<sp/>the<sp/>optimization<sp/>process<sp/>into<sp/>an</highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`OptimizeResult`<sp/>object,<sp/>providing<sp/>the<sp/>best<sp/>solution<sp/>found,<sp/>its<sp/>associated</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>value,<sp/>the<sp/>number<sp/>of<sp/>function<sp/>evaluations<sp/>performed,<sp/>the<sp/>number<sp/>of<sp/>iterations,</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>stopping<sp/>status,<sp/>and<sp/>the<sp/>success<sp/>flag.</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OptimizeResult:<sp/>The<sp/>result<sp/>of<sp/>the<sp/>optimization<sp/>containing<sp/>the<sp/>following<sp/>fields:</highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>x:<sp/>The<sp/>best<sp/>solution<sp/>found<sp/>(self.x_best).</highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>fun:<sp/>The<sp/>value<sp/>of<sp/>the<sp/>function<sp/>at<sp/>the<sp/>best<sp/>solution<sp/>(self.f_best).</highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>nfev:<sp/>The<sp/>total<sp/>number<sp/>of<sp/>function<sp/>evaluations<sp/>(self.no_of_evals).</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>nit:<sp/>The<sp/>number<sp/>of<sp/>iterations<sp/>performed<sp/>(self.g).</highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>status:<sp/>The<sp/>stopping<sp/>status<sp/>of<sp/>the<sp/>optimization<sp/>(self.stop).</highlight></codeline>
<codeline lineno="492"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>success:<sp/>A<sp/>boolean<sp/>indicating<sp/>whether<sp/>the<sp/>optimization<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="493"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OptimizeResult(x=self.x_best,<sp/>fun=self.f_best,<sp/>nfev=self.no_of_evals,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nit=self.g,<sp/>status=self.stop,<sp/>success=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">exp(a):</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="499"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Calculates<sp/>the<sp/>exponential<sp/>of<sp/>a<sp/>given<sp/>number,<sp/>with<sp/>a<sp/>cap<sp/>to<sp/>avoid<sp/>overflow.</highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="501"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>function<sp/>computes<sp/>the<sp/>exponential<sp/>value<sp/>using<sp/>the<sp/>`math.exp`<sp/>function.<sp/>It<sp/>ensures</highlight></codeline>
<codeline lineno="502"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>that<sp/>the<sp/>input<sp/>does<sp/>not<sp/>exceed<sp/>100<sp/>to<sp/>prevent<sp/>overflow.</highlight></codeline>
<codeline lineno="503"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="504"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="505"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a:<sp/>A<sp/>float<sp/>or<sp/>integer<sp/>representing<sp/>the<sp/>input<sp/>value<sp/>for<sp/>which<sp/>to<sp/>calculate<sp/>the<sp/>exponential.</highlight></codeline>
<codeline lineno="506"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="507"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="508"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>exponential<sp/>value<sp/>of<sp/>the<sp/>input<sp/>`a`,<sp/>respecting<sp/>a<sp/>maximum<sp/>cap<sp/>of<sp/>100<sp/>for<sp/>the<sp/>input.</highlight></codeline>
<codeline lineno="509"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math.exp(min(100,<sp/>a))<sp/></highlight><highlight class="comment">#<sp/>avoid<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_h_inv(dim):</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="514"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Computes<sp/>the<sp/>inverse<sp/>of<sp/>a<sp/>specific<sp/>mathematical<sp/>function<sp/>using<sp/>the<sp/>Newton-Raphson</highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>method.</highlight></codeline>
<codeline lineno="516"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="517"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>function<sp/>uses<sp/>an<sp/>iterative<sp/>method<sp/>to<sp/>compute<sp/>the<sp/>value<sp/>of<sp/>h_inv<sp/>such<sp/>that</highlight></codeline>
<codeline lineno="518"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>a<sp/>given<sp/>mathematical<sp/>equation<sp/>is<sp/>satisfied.<sp/>The<sp/>iteration<sp/>stops<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="519"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>function&apos;s<sp/>value<sp/>is<sp/>sufficiently<sp/>close<sp/>to<sp/>zero,<sp/>adhering<sp/>to<sp/>a<sp/>tolerance<sp/>of<sp/>`1e-10`.</highlight></codeline>
<codeline lineno="520"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="521"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="522"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>(float):<sp/>A<sp/>dimension<sp/>parameter<sp/>that<sp/>affects<sp/>the<sp/>behavior<sp/>of<sp/>the<sp/>function.</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>The<sp/>calculated<sp/>value<sp/>of<sp/>h_inv<sp/>that<sp/>satisfies<sp/>the<sp/>given<sp/>equation.</highlight></codeline>
<codeline lineno="526"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>a,<sp/>b:<sp/>((1.<sp/>+<sp/>a<sp/>*<sp/>a)<sp/>*<sp/>exp(a<sp/>*<sp/>a<sp/>/<sp/>2.)<sp/>/<sp/>0.24)<sp/>-<sp/>10.<sp/>-<sp/>dim</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>f_prime<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>a:<sp/>(1.<sp/>/<sp/>0.24)<sp/>*<sp/>a<sp/>*<sp/>exp(a<sp/>*<sp/>a<sp/>/<sp/>2.)<sp/>*<sp/>(3.<sp/>+<sp/>a<sp/>*<sp/>a)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>h_inv<sp/>=<sp/>1.0</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>abs(f(h_inv,<sp/>dim))<sp/>&gt;<sp/>1e-10:</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_inv<sp/>=<sp/>h_inv<sp/>-<sp/>0.5<sp/>*<sp/>(f(h_inv,<sp/>dim)<sp/>/<sp/>f_prime(h_inv))</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h_inv</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">sort_indices_by(evals,<sp/>z):</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="536"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Sorts<sp/>indices<sp/>based<sp/>on<sp/>evaluated<sp/>values,<sp/>`evals`,<sp/>while<sp/>prioritizing<sp/>feasible</highlight></codeline>
<codeline lineno="537"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>over<sp/>infeasible<sp/>solutions.<sp/>Infeasible<sp/>solutions<sp/>are<sp/>further<sp/>sorted<sp/>by<sp/>their</highlight></codeline>
<codeline lineno="538"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Euclidean<sp/>distance.</highlight></codeline>
<codeline lineno="539"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="540"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="541"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evals:<sp/>List<sp/>or<sp/>array<sp/>of<sp/>values<sp/>(e.g.,<sp/>objective<sp/>function<sp/>evaluations)</highlight></codeline>
<codeline lineno="542"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>INFEASIBLE<sp/>denoting<sp/>infeasibility.</highlight></codeline>
<codeline lineno="543"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z:<sp/>2D<sp/>array-like<sp/>object,<sp/>typically<sp/>representing<sp/>decision<sp/>variables<sp/>or</highlight></codeline>
<codeline lineno="544"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>characteristics<sp/>of<sp/>solutions.</highlight></codeline>
<codeline lineno="545"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="547"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numpy.ndarray:<sp/>Array<sp/>of<sp/>indices<sp/>sorted<sp/>based<sp/>on<sp/>feasibility<sp/>and</highlight></codeline>
<codeline lineno="548"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additional<sp/>criteria<sp/>for<sp/>infeasible<sp/>solutions.</highlight></codeline>
<codeline lineno="549"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>lam<sp/>=<sp/>len(evals)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>evals<sp/>=<sp/>np.array(evals)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>sorted_indices<sp/>=<sp/>np.argsort(evals)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>sorted_evals<sp/>=<sp/>evals[sorted_indices]</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>no_of_feasible_solutions<sp/>=<sp/>np.where(sorted_evals<sp/>!=<sp/>INFEASIBLE)[0].size</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>no_of_feasible_solutions<sp/>!=<sp/>lam:</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infeasible_z<sp/>=<sp/>z[:,<sp/>np.where(evals<sp/>==<sp/>INFEASIBLE)[0]]</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distances<sp/>=<sp/>np.sum(infeasible_z<sp/>**<sp/>2,<sp/>axis=0)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infeasible_indices<sp/>=<sp/>sorted_indices[no_of_feasible_solutions:]</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_sorted_by_distance<sp/>=<sp/>np.argsort(distances)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_indices[no_of_feasible_solutions:]<sp/>=<sp/>infeasible_indices[indices_sorted_by_distance]</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sorted_indices</highlight></codeline>
    </programlisting>
    <location file="fcmaes/crfmnes.py"/>
  </compounddef>
</doxygen>
