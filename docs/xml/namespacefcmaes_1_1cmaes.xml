<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacefcmaes_1_1cmaes" kind="namespace" language="Python">
    <compoundname>fcmaes::cmaes</compoundname>
    <innerclass refid="classfcmaes_1_1cmaes_1_1_cmaes" prot="public">fcmaes::cmaes::Cmaes</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacefcmaes_1_1cmaes_1ab8082e1fc4bdc2b20f0c1628e2923abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OptimizeResult</type>
        <definition> OptimizeResult fcmaes.cmaes.minimize</definition>
        <argsstring>(Callable[[ArrayLike], float] fun, Optional[Bounds] bounds=None, Optional[ArrayLike] x0=None, Optional[Union[float, ArrayLike, Callable]] input_sigma=0.3, Optional[int] popsize=31, Optional[int] max_evaluations=100000, Optional[int] max_iterations=100000, Optional[int] workers=1, Optional[float] accuracy=1.0, Optional[float] stop_fitness=-np.inf, Optional[Callable[[ArrayLike, float], bool]] is_terminate=None, Optional[Generator] rg=Generator(PCG64DXSM()), Optional[int] runid=0, Optional[bool] normalize=True, Optional[int] update_gap=None)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.cmaes.minimize</qualifiedname>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>float]</type>
          <declname>fun</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>bounds</declname>
          <defname>x0</defname>
          <array>[Bounds]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>x0</declname>
          <defname>input_sigma</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional]</type>
          <declname>input_sigma</declname>
          <defname>popsize</defname>
          <array>[Union[float, ArrayLike, Callable]</array>
          <defval>0.3</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <defname>max_evaluations</defname>
          <array>[int]</array>
          <defval>31</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <defname>max_iterations</defname>
          <array>[int]</array>
          <defval>100000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_iterations</declname>
          <defname>workers</defname>
          <array>[int]</array>
          <defval>100000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <defname>accuracy</defname>
          <array>[int]</array>
          <defval>1</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>accuracy</declname>
          <defname>stop_fitness</defname>
          <array>[float]</array>
          <defval>1.0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <defname>is_terminate</defname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <param>
          <type>Optional</type>
          <defname>rg</defname>
          <array>[Callable[[ArrayLike, float]</array>
        </param>
        <param>
          <type>bool]]</type>
          <declname>is_terminate</declname>
          <defname>runid</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>rg</declname>
          <defname>normalize</defname>
          <array>[Generator]</array>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>runid</declname>
          <defname>update_gap</defname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>normalize</declname>
          <array>[bool]</array>
          <defval>True</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>update_gap</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Minimizes a scalar function using the Covariance Matrix Adaptation Evolution Strategy (CMA-ES) algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is designed to handle optimization tasks for non-linear, non-convex, and possibly noisy objective functions. It supports parallel execution via workers, normalization of the input search space, and adaptive stopping criteria based on given conditions.</para>
<para><verbatim>   fun (Callable[[ArrayLike], float]): The objective function to be minimized.
       It should take an input array and return a scalar value.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower and upper bounds for the search space. If None, the search space is considered unbounded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial solution guess. If None, an initial guess will be generated randomly. input_sigma (Optional[Union[float, ArrayLike, Callable]]): The initial standard deviation for the sampling. Can be float, array, or callable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The population size for the CMA-ES algorithm. Defaults to 31. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of function evaluations allowed. Defaults to 100,000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations allowed for the algorithm. Defaults to 100,000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of parallel processes to be used. If set to 1 or less, the algorithm will run in serial mode. Defaults to 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>The accuracy tolerance used to adjust the optimization stopping criteria. Defaults to 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fitness</parametername>
</parameternamelist>
<parameterdescription>
<para>Objective function value at which the optimization process is terminated if reached. Defaults to -infinity. is_terminate (Optional[Callable[[ArrayLike, float], bool]]): Custom termination condition provided as a callable. Defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>The random number generator to be used. Defaults to <computeroutput>Generator(PCG64DXSM())</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runid</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for the optimization run. Defaults to 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalize</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates if the search space should be normalized. Defaults to True. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update_gap</parametername>
</parameternamelist>
<parameterdescription>
<para>Interval for delayed updates in the algorithm. If None, updates are not delayed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>OptimizeResult Object containing the results of the optimization. Includes the optimized solution (<computeroutput>x</computeroutput>), the minimized function value (<computeroutput>fun</computeroutput>), number of function evaluations (<computeroutput>nfev</computeroutput>), number of iterations (<computeroutput>nit</computeroutput>), algorithm exit status (<computeroutput>status</computeroutput>), and success flag (<computeroutput>success</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/cmaes.py" line="108" column="1" bodyfile="fcmaes/cmaes.py" bodystart="122" bodyend="138"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="fcmaes/cmaes.py" line="1" column="1"/>
  </compounddef>
</doxygen>
