<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_l_b_f_g_s_b_8h" kind="file" language="C++">
    <compoundname>LBFGSB.h</compoundname>
    <includes local="no">stdexcept</includes>
    <includes local="no">vector</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="yes">LBFGSpp/Param.h</includes>
    <includes local="yes">LBFGSpp/BFGSMat.h</includes>
    <includes local="yes">LBFGSpp/Cauchy.h</includes>
    <includes local="yes">LBFGSpp/SubspaceMin.h</includes>
    <includes local="yes">LBFGSpp/LineSearchMoreThuente.h</includes>
    <includedby refid="daoptimizer_8cpp" local="no">_fcmaescpp/daoptimizer.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>_fcmaescpp/include/LBFGSB.h</label>
        <link refid="_l_b_f_g_s_b_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Eigen/Core</label>
      </node>
      <node id="6">
        <label>LBFGSpp/BFGSMat.h</label>
      </node>
      <node id="7">
        <label>LBFGSpp/Cauchy.h</label>
      </node>
      <node id="9">
        <label>LBFGSpp/LineSearchMoreThuente.h</label>
      </node>
      <node id="5">
        <label>LBFGSpp/Param.h</label>
      </node>
      <node id="8">
        <label>LBFGSpp/SubspaceMin.h</label>
      </node>
      <node id="2">
        <label>stdexcept</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>_fcmaescpp/daoptimizer.cpp</label>
        <link refid="daoptimizer_8cpp"/>
      </node>
      <node id="1">
        <label>_fcmaescpp/include/LBFGSB.h</label>
        <link refid="_l_b_f_g_s_b_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver" prot="public">LBFGSpp::LBFGSBSolver</innerclass>
    <innernamespace refid="namespace_l_b_f_g_spp">LBFGSpp</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Yixuan<sp/>Qiu<sp/>&lt;yixuan.qiu@cos.name&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Under<sp/>MIT<sp/>license</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LBFGSB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LBFGSB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::invalid_argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LBFGSpp/Param.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LBFGSpp/BFGSMat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LBFGSpp/Cauchy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LBFGSpp/SubspaceMin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LBFGSpp/LineSearchMoreThuente.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_l_b_f_g_spp" kindref="compound">LBFGSpp</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Scalar,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LineSearch<sp/>=<sp/>LineSearchMoreThuente<sp/>&gt;</highlight></codeline>
<codeline lineno="25" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1af6f13d5faffe94686e9ba8710da1bb5a" kindref="member">LBFGSBSolver</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>1&gt;<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>;</highlight></codeline>
<codeline lineno="29" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1ab506657a5181cb3fd5b56ff975916f4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Eigen::Matrix&lt;Scalar,<sp/>Eigen::Dynamic,<sp/>Eigen::Dynamic&gt;<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1ab506657a5181cb3fd5b56ff975916f4e" kindref="member">Matrix</ref>;</highlight></codeline>
<codeline lineno="30" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1afc50f513af96f02c39cf1c608b011cec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Eigen::Map&lt;Vector&gt;<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1afc50f513af96f02c39cf1c608b011cec" kindref="member">MapVec</ref>;</highlight></codeline>
<codeline lineno="31" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a243e993b1c8009144cea153e7ac2d588" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a243e993b1c8009144cea153e7ac2d588" kindref="member">IndexSet</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LBFGSBParam&lt;Scalar&gt;&amp;<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Parameters<sp/>to<sp/>control<sp/>the<sp/>LBFGS<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1afe28f7248239eac6eac4e586da1b1447" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BFGSMat&lt;Scalar,<sp/>true&gt;<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1afe28f7248239eac6eac4e586da1b1447" kindref="member">m_bfgs</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Approximation<sp/>to<sp/>the<sp/>Hessian<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a979a0d5a7dfc557ae62196681e15bc4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a979a0d5a7dfc557ae62196681e15bc4a" kindref="member">m_fx</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>History<sp/>of<sp/>the<sp/>objective<sp/>function<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1af5b2357022d48bf126b9e6a975940ab2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1af5b2357022d48bf126b9e6a975940ab2" kindref="member">m_xp</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Old<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a120b8ed88219c8464616fe433c1cb492" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a120b8ed88219c8464616fe433c1cb492" kindref="member">m_gradp</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Old<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a7070c707f445259e2df484ec540d5c75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a7070c707f445259e2df484ec540d5c75" kindref="member">m_drt</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Moving<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>internal<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>n:<sp/>dimension<sp/>of<sp/>the<sp/>vector<sp/>to<sp/>be<sp/>optimized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a2b265895288516adbacc3e25fabe2829" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a2b265895288516adbacc3e25fabe2829" kindref="member">reset</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.m;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1afe28f7248239eac6eac4e586da1b1447" kindref="member">m_bfgs</ref>.reset(n,<sp/>m);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1af5b2357022d48bf126b9e6a975940ab2" kindref="member">m_xp</ref>.resize(n);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>.resize(n);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a120b8ed88219c8464616fe433c1cb492" kindref="member">m_gradp</ref>.resize(n);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a7070c707f445259e2df484ec540d5c75" kindref="member">m_drt</ref>.resize(n);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.past<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a979a0d5a7dfc557ae62196681e15bc4a" kindref="member">m_fx</ref>.resize(<ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.past);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Project<sp/>the<sp/>vector<sp/>x<sp/>to<sp/>the<sp/>bound<sp/>constraint<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a88780c13f50eaaf437bcbbb54d7a7f3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a88780c13f50eaaf437bcbbb54d7a7f3c" kindref="member">force_bounds</ref>(<ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>lb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>ub)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.noalias()<sp/>=<sp/>x.cwiseMax(lb).cwiseMin(ub);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Norm<sp/>of<sp/>the<sp/>projected<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>||P(x-g,<sp/>l,<sp/>u)<sp/>-<sp/>x||_inf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a57692ffc3df2f5152f8ef27dfb4f9cac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a57692ffc3df2f5152f8ef27dfb4f9cac" kindref="member">proj_grad_norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>g,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>lb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>ub)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((x<sp/>-<sp/>g).cwiseMax(lb).cwiseMin(ub)<sp/>-<sp/>x).cwiseAbs().maxCoeff();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>step<sp/>size<sp/>alpha<sp/>such<sp/>that<sp/>x0<sp/>+<sp/>alpha<sp/>*<sp/>d<sp/>stays<sp/>within<sp/>the<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a788f97964a14b4b6db287f9e2646f2f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Scalar<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a788f97964a14b4b6db287f9e2646f2f6" kindref="member">max_step_size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>x0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>drt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>lb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>ub)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>x0.size();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>step<sp/>=<sp/>std::numeric_limits&lt;Scalar&gt;::infinity();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(drt[i]<sp/>&gt;<sp/>Scalar(0))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>=<sp/>std::min(step,<sp/>(ub[i]<sp/>-<sp/>x0[i])<sp/>/<sp/>drt[i]);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(drt[i]<sp/>&lt;<sp/>Scalar(0))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>=<sp/>std::min(step,<sp/>(lb[i]<sp/>-<sp/>x0[i])<sp/>/<sp/>drt[i]);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>step;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="94" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1af6f13d5faffe94686e9ba8710da1bb5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1af6f13d5faffe94686e9ba8710da1bb5a" kindref="member">LBFGSBSolver</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LBFGSBParam&lt;Scalar&gt;&amp;<sp/>param)<sp/>:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>(param)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.check_param();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Foo&gt;</highlight></codeline>
<codeline lineno="116" refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a420f4521286e2ac37a37f41b9f5767a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a420f4521286e2ac37a37f41b9f5767a9" kindref="member">minimize</ref>(Foo&amp;<sp/>f,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>x,<sp/>Scalar&amp;<sp/>fx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>lb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref>&amp;<sp/>ub)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::abs;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dimension<sp/>of<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lb.size()<sp/>!=<sp/>n<sp/>||<sp/>ub.size()<sp/>!=<sp/>n)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;&apos;lb&apos;<sp/>and<sp/>&apos;ub&apos;<sp/>must<sp/>have<sp/>the<sp/>same<sp/>size<sp/>as<sp/>&apos;x&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>initial<sp/>vector<sp/>is<sp/>within<sp/>the<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not,<sp/>project<sp/>to<sp/>the<sp/>feasible<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a88780c13f50eaaf437bcbbb54d7a7f3c" kindref="member">force_bounds</ref>(x,<sp/>lb,<sp/>ub);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a2b265895288516adbacc3e25fabe2829" kindref="member">reset</ref>(n);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>length<sp/>of<sp/>lag<sp/>for<sp/>objective<sp/>function<sp/>value<sp/>to<sp/>test<sp/>convergence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fpast<sp/>=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.past;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Evaluate<sp/>function<sp/>and<sp/>compute<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fx<sp/>=<sp/>f(x,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>projgnorm<sp/>=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a57692ffc3df2f5152f8ef27dfb4f9cac" kindref="member">proj_grad_norm</ref>(x,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>,<sp/>lb,<sp/>ub);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fpast<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a979a0d5a7dfc557ae62196681e15bc4a" kindref="member">m_fx</ref>[0]<sp/>=<sp/>fx;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;x0<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>x.transpose()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;f(x0)<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>fx<sp/>&lt;&lt;<sp/>&quot;,<sp/>||proj_grad||<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>projgnorm<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Early<sp/>exit<sp/>if<sp/>the<sp/>initial<sp/>x<sp/>is<sp/>already<sp/>a<sp/>minimizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(projgnorm<sp/>&lt;=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.epsilon<sp/>||<sp/>projgnorm<sp/>&lt;=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.epsilon_rel<sp/>*<sp/>x.norm())</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>generalized<sp/>Cauchy<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref><sp/>xcp(n),<sp/>vecc;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a243e993b1c8009144cea153e7ac2d588" kindref="member">IndexSet</ref><sp/>newact_set,<sp/>fv_set;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cauchy&lt;Scalar&gt;::get_cauchy_point(<ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1afe28f7248239eac6eac4e586da1b1447" kindref="member">m_bfgs</ref>,<sp/>x,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>,<sp/>lb,<sp/>ub,<sp/>xcp,<sp/>vecc,<sp/>newact_set,<sp/>fv_set);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Vector<sp/>gcp(n);</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>fcp<sp/>=<sp/>f(xcp,<sp/>gcp);</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>projgcpnorm<sp/>=<sp/>proj_grad_norm(xcp,<sp/>gcp,<sp/>lb,<sp/>ub);</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;xcp<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>xcp.transpose()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;f(xcp)<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>fcp<sp/>&lt;&lt;<sp/>&quot;,<sp/>||proj_grad||<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>projgcpnorm<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a7070c707f445259e2df484ec540d5c75" kindref="member">m_drt</ref>.noalias()<sp/>=<sp/>xcp<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a7070c707f445259e2df484ec540d5c75" kindref="member">m_drt</ref>.normalize();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tolerance<sp/>for<sp/>s&apos;y<sp/>&gt;=<sp/>eps<sp/>*<sp/>(y&apos;y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar<sp/>eps<sp/>=<sp/>std::numeric_limits&lt;Scalar&gt;::epsilon();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s<sp/>and<sp/>y<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a68ac128001b807b5ae6a48d7fd15ba3d" kindref="member">Vector</ref><sp/>vecs(n),<sp/>vecy(n);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>iterations<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>;<sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>curent<sp/>x<sp/>and<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1af5b2357022d48bf126b9e6a975940ab2" kindref="member">m_xp</ref>.noalias()<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a120b8ed88219c8464616fe433c1cb492" kindref="member">m_gradp</ref>.noalias()<sp/>=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Line<sp/>search<sp/>to<sp/>update<sp/>x,<sp/>fx<sp/>and<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>step_max<sp/>=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a788f97964a14b4b6db287f9e2646f2f6" kindref="member">max_step_size</ref>(x,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a7070c707f445259e2df484ec540d5c75" kindref="member">m_drt</ref>,<sp/>lb,<sp/>ub);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step_max<sp/>=<sp/>std::min(<ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.max_step,<sp/>step_max);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>step<sp/>=<sp/>Scalar(1);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>=<sp/>std::min(step,<sp/>step_max);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LineSearch&lt;Scalar&gt;::LineSearch(f,<sp/>fx,<sp/>x,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>,<sp/>step,<sp/>step_max,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a7070c707f445259e2df484ec540d5c75" kindref="member">m_drt</ref>,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1af5b2357022d48bf126b9e6a975940ab2" kindref="member">m_xp</ref>,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>projected<sp/>gradient<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projgnorm<sp/>=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a57692ffc3df2f5152f8ef27dfb4f9cac" kindref="member">proj_grad_norm</ref>(x,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>,<sp/>lb,<sp/>ub);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;**<sp/>Iteration<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/><sp/>x<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>x.transpose()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/><sp/>f(x)<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>fx<sp/>&lt;&lt;<sp/>&quot;,<sp/>||proj_grad||<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>projgnorm<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convergence<sp/>test<sp/>--<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(projgnorm<sp/>&lt;=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.epsilon<sp/>||<sp/>projgnorm<sp/>&lt;=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.epsilon_rel<sp/>*<sp/>x.norm())</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convergence<sp/>test<sp/>--<sp/>objective<sp/>function<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fpast<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar<sp/>fxd<sp/>=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a979a0d5a7dfc557ae62196681e15bc4a" kindref="member">m_fx</ref>[k<sp/>%<sp/>fpast];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(k<sp/>&gt;=<sp/>fpast<sp/>&amp;&amp;<sp/>abs(fxd<sp/>-<sp/>fx)<sp/>&lt;=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.delta<sp/>*<sp/>std::max(std::max(abs(fx),<sp/>abs(fxd)),<sp/>Scalar(1)))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a979a0d5a7dfc557ae62196681e15bc4a" kindref="member">m_fx</ref>[k<sp/>%<sp/>fpast]<sp/>=<sp/>fx;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.max_iterations<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>k<sp/>&gt;=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.max_iterations)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>s<sp/>and<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s_{k+1}<sp/>=<sp/>x_{k+1}<sp/>-<sp/>x_k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y_{k+1}<sp/>=<sp/>g_{k+1}<sp/>-<sp/>g_k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vecs.noalias()<sp/>=<sp/>x<sp/>-<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1af5b2357022d48bf126b9e6a975940ab2" kindref="member">m_xp</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vecy.noalias()<sp/>=<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref><sp/>-<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a120b8ed88219c8464616fe433c1cb492" kindref="member">m_gradp</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vecs.dot(vecy)<sp/>&gt;<sp/>eps<sp/>*<sp/>vecy.squaredNorm())</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1afe28f7248239eac6eac4e586da1b1447" kindref="member">m_bfgs</ref>.add_correction(vecs,<sp/>vecy);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a88780c13f50eaaf437bcbbb54d7a7f3c" kindref="member">force_bounds</ref>(x,<sp/>lb,<sp/>ub);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cauchy&lt;Scalar&gt;::get_cauchy_point(<ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1afe28f7248239eac6eac4e586da1b1447" kindref="member">m_bfgs</ref>,<sp/>x,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>,<sp/>lb,<sp/>ub,<sp/>xcp,<sp/>vecc,<sp/>newact_set,<sp/>fv_set);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Vector<sp/>gcp(n);</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>fcp<sp/>=<sp/>f(xcp,<sp/>gcp);</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>projgcpnorm<sp/>=<sp/>proj_grad_norm(xcp,<sp/>gcp,<sp/>lb,<sp/>ub);</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;xcp<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>xcp.transpose()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;f(xcp)<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>fcp<sp/>&lt;&lt;<sp/>&quot;,<sp/>||proj_grad||<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>projgcpnorm<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubspaceMin&lt;Scalar&gt;::subspace_minimize(<ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1afe28f7248239eac6eac4e586da1b1447" kindref="member">m_bfgs</ref>,<sp/>x,<sp/>xcp,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a478cfc0f18b184d805274234cceed32c" kindref="member">m_grad</ref>,<sp/>lb,<sp/>ub,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vecc,<sp/>newact_set,<sp/>fv_set,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1aa70044da7add6566b5cfd75e868ad85a" kindref="member">m_param</ref>.max_submin,<sp/><ref refid="class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver_1a7070c707f445259e2df484ec540d5c75" kindref="member">m_drt</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Vector<sp/>gsm(n);</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>fsm<sp/>=<sp/>f(x<sp/>+<sp/>m_drt,<sp/>gsm);</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>projgsmnorm<sp/>=<sp/>proj_grad_norm(x<sp/>+<sp/>m_drt,<sp/>gsm,<sp/>lb,<sp/>ub);</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;xsm<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>(x<sp/>+<sp/>m_drt).transpose()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;f(xsm)<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>fsm<sp/>&lt;&lt;<sp/>&quot;,<sp/>||proj_grad||<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>projgsmnorm<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>LBFGSpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>LBFGSB_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="_fcmaescpp/include/LBFGSB.h"/>
  </compounddef>
</doxygen>
