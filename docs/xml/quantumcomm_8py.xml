<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="quantumcomm_8py" kind="file" language="Python">
    <compoundname>quantumcomm.py</compoundname>
    <innerclass refid="classquantumcomm_1_1constellation__udp" prot="public">quantumcomm::constellation_udp</innerclass>
    <innernamespace refid="namespacequantumcomm">quantumcomm</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacequantumcomm_1a2c2d5e5c609de5aa6cd1d78008e5cf2a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.stdout</definition>
        <argsstring></argsstring>
        <name>stdout</name>
        <qualifiedname>quantumcomm.stdout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="42" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1aa02045840efca4723c7830b9d2478fea" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <qualifiedname>quantumcomm.format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="42" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="42" bodyend="-1"/>
        <referencedby refid="classquantumcomm_1_1constellation__udp_1a13abd2e63f36cb79a4c08d96557d3d87" compoundref="quantumcomm_8py" startline="485" endline="548">quantumcomm.constellation_udp.fitness</referencedby>
        <referencedby refid="classquantumcomm_1_1constellation__udp_1ae7806f788f8f22a8be936a007a8a3deb" compoundref="quantumcomm_8py" startline="670" endline="752">quantumcomm.constellation_udp.plot</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1aef9f62aff427fde17bcbda6c3139420e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <qualifiedname>quantumcomm.level</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="42" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1aea96ab455c15aa9c4d6284bb868ac44c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.udp</definition>
        <argsstring></argsstring>
        <name>udp</name>
        <qualifiedname>quantumcomm.udp</qualifiedname>
        <initializer>=  constellation_udp()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="783" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1ae6a7b0e3b3363799da193a937082152c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int quantumcomm.nobj</definition>
        <argsstring></argsstring>
        <name>nobj</name>
        <qualifiedname>quantumcomm.nobj</qualifiedname>
        <initializer>=  2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="784" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a57cb5c03dd7f2016c85077510ec50fd4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int quantumcomm.ncon</definition>
        <argsstring></argsstring>
        <name>ncon</name>
        <qualifiedname>quantumcomm.ncon</qualifiedname>
        <initializer>=  2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="785" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a38c14b3f964ffa67c7911f4e175f4784" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int quantumcomm.dim</definition>
        <argsstring></argsstring>
        <name>dim</name>
        <qualifiedname>quantumcomm.dim</qualifiedname>
        <initializer>=  20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="786" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1ab5b2a2b68abc9d15c1406cad0842982f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.ref_point</definition>
        <argsstring></argsstring>
        <name>ref_point</name>
        <qualifiedname>quantumcomm.ref_point</qualifiedname>
        <initializer>=  np.array([1.2, 1.4])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="787" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a7bea33c966401d0a25705d8371e83147" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.ubs</definition>
        <argsstring></argsstring>
        <name>ubs</name>
        <qualifiedname>quantumcomm.ubs</qualifiedname>
        <initializer>=  udp.get_bounds()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="788" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1adaca5954b72a118a0abc3f3b1d9d56ac" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.bounds</definition>
        <argsstring></argsstring>
        <name>bounds</name>
        <qualifiedname>quantumcomm.bounds</qualifiedname>
        <initializer>=  Bounds(ubs[0], ubs[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="789" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a4ae96be5bf50bd2b7bdbf8077fcbf992" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.max_evals</definition>
        <argsstring></argsstring>
        <name>max_evals</name>
        <qualifiedname>quantumcomm.max_evals</qualifiedname>
        <initializer>=  max_evals</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="918" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a10d52de9364caed740ad48fe34ecc151" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.manager</definition>
        <argsstring></argsstring>
        <name>manager</name>
        <qualifiedname>quantumcomm.manager</qualifiedname>
        <initializer>=  Manager()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="919" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1afa433f406099fb18e0906c1ca5fc7918" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>quantumcomm.ys</definition>
        <argsstring></argsstring>
        <name>ys</name>
        <qualifiedname>quantumcomm.ys</qualifiedname>
        <initializer>=  self.manager.list(ys)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="920" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a3e2a162310a02aff9e3e2129cfceaa2c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.ys0</definition>
        <argsstring></argsstring>
        <name>ys0</name>
        <qualifiedname>quantumcomm.ys0</qualifiedname>
        <initializer>=  list(ys)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="921" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="921" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a009bae3131bf4f32ab41813e095bd545" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>quantumcomm.xs</definition>
        <argsstring></argsstring>
        <name>xs</name>
        <qualifiedname>quantumcomm.xs</qualifiedname>
        <initializer>=  self.manager.list(xs)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="922" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a4df7798fa72740ab9b5adcadca862f58" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.min_ys</definition>
        <argsstring></argsstring>
        <name>min_ys</name>
        <qualifiedname>quantumcomm.min_ys</qualifiedname>
        <initializer>=  np.amin(ys, axis=0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="923" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a5b2fa9d0041f90fcf0b912c6de25020a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int quantumcomm.count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <qualifiedname>quantumcomm.count</qualifiedname>
        <initializer>=  mp.RawValue(ct.c_int, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="924" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="924" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a3a28fa8296e887be274b151c8429b985" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <qualifiedname>quantumcomm.mutex</qualifiedname>
        <initializer>=  mp.Lock()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="925" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="925" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1ae18efb9ddb56b08da17e0a6c224e48fa" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.n</definition>
        <argsstring></argsstring>
        <name>n</name>
        <qualifiedname>quantumcomm.n</qualifiedname>
        <initializer>=  len(ys)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="926" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1aad80073dce041cbb8ad4b99c5d39fc74" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int quantumcomm.max_hv</definition>
        <argsstring></argsstring>
        <name>max_hv</name>
        <qualifiedname>quantumcomm.max_hv</qualifiedname>
        <initializer>=  0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="1021" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="1021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1ae07ba0a2eed2514d1829c083ea9828b4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int quantumcomm.evals</definition>
        <argsstring></argsstring>
        <name>evals</name>
        <qualifiedname>quantumcomm.evals</qualifiedname>
        <initializer>=  0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="1025" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="1025" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1a894d47aede87908d7383da852279e601" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.pid</definition>
        <argsstring></argsstring>
        <name>pid</name>
        <qualifiedname>quantumcomm.pid</qualifiedname>
        <initializer>=  pid</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="1026" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="1026" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1acf793ce9680502af168bcaa54d2b161b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.xs_out</definition>
        <argsstring></argsstring>
        <name>xs_out</name>
        <qualifiedname>quantumcomm.xs_out</qualifiedname>
        <initializer>=  xs_out</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="1027" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacequantumcomm_1acb604547ddffa821c69c8ccbec065d4e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quantumcomm.ys_out</definition>
        <argsstring></argsstring>
        <name>ys_out</name>
        <qualifiedname>quantumcomm.ys_out</qualifiedname>
        <initializer>=  ys_out</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="1028" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="1028" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacequantumcomm_1a7c43375b014085ada1580778d0deb20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.get_mothership_satellites</definition>
        <argsstring>()</argsstring>
        <name>get_mothership_satellites</name>
        <qualifiedname>quantumcomm.get_mothership_satellites</qualifiedname>
        <briefdescription>
<para>Construct array of mothership orbital elements (the TLEs of actual Earth-orbiting satellites below are used as a proxy for plausible orbital dynamics around a habitable planet) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="60" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="60" bodyend="97"/>
        <referencedby refid="classquantumcomm_1_1constellation__udp_1a538e6e0a73831c10938e12e9ec73513c" compoundref="quantumcomm_8py" startline="634" endline="654">quantumcomm.constellation_udp.compute_orbit_motherships</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1adeb3d6f34e9ce9bde81d145e0cb4b1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.line_of_sight</definition>
        <argsstring>(r1, r2)</argsstring>
        <name>line_of_sight</name>
        <qualifiedname>quantumcomm.line_of_sight</qualifiedname>
        <param>
          <type>r1</type>
          <defname>r1</defname>
        </param>
        <param>
          <type>r2</type>
          <defname>r2</defname>
        </param>
        <briefdescription>
<para>Given two position vectors returns the distance of the line of sight to the origin. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   r1 (numpy array): first point
   r2 (numpy array): second point
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="107" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="107" bodyend="119"/>
        <referencedby refid="namespacequantumcomm_1a0b9a5d09cf8b8062250d0631d392b9e4" compoundref="quantumcomm_8py" startline="170" endline="188">quantumcomm.get_adjmatrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a32214ea35bfdc5ac32988510e98f5643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.zenith_angle</definition>
        <argsstring>(src, dst)</argsstring>
        <name>zenith_angle</name>
        <qualifiedname>quantumcomm.zenith_angle</qualifiedname>
        <param>
          <type>src</type>
          <defname>src</defname>
        </param>
        <param>
          <type>dst</type>
          <defname>dst</defname>
        </param>
        <briefdescription>
<para>Computes the cosine of the zenith angle (theta_z) of the LOS between source and destination node. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   src (numpy array, N_r x 3): rover x, y, z positions
   dst (numpy array, N_s x 3): mothership x, y, z positions
</verbatim></para>
<para><simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>float cosine of the zenith angle </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="129" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="129" bodyend="137"/>
        <referencedby refid="namespacequantumcomm_1a0b9a5d09cf8b8062250d0631d392b9e4" compoundref="quantumcomm_8py" startline="170" endline="188">quantumcomm.get_adjmatrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1af0f5b86687bc9356f53b8e0fcd826c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.qkd_metric</definition>
        <argsstring>(idx, src, dst, cos_theta_z, eta, eps_z, n_rovers)</argsstring>
        <name>qkd_metric</name>
        <qualifiedname>quantumcomm.qkd_metric</qualifiedname>
        <param>
          <type>idx</type>
          <defname>idx</defname>
        </param>
        <param>
          <type>src</type>
          <defname>src</defname>
        </param>
        <param>
          <type>dst</type>
          <defname>dst</defname>
        </param>
        <param>
          <type>cos_theta_z</type>
          <defname>cos_theta_z</defname>
        </param>
        <param>
          <type>eta</type>
          <defname>eta</defname>
        </param>
        <param>
          <type>eps_z</type>
          <defname>eps_z</defname>
        </param>
        <param>
          <type>n_rovers</type>
          <defname>n_rovers</defname>
        </param>
        <briefdescription>
<para>Computes the edge weight according to QKD probabilities. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of node in the graph src (numpy array, 1x3): position of source node dst (numpy array, 1x3): position of destination node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cos_theta_z</parametername>
</parameternamelist>
<parameterdescription>
<para>cosine of the zenith angle of qkd link </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eta</parametername>
</parameternamelist>
<parameterdescription>
<para>satellite quality indicator for corresponding constellation</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>float edge weight </para>
</simplesect>
<simplesect kind="return"><para>float communications link distance between src and dst </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="151" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="151" bodyend="169"/>
        <referencedby refid="namespacequantumcomm_1a0b9a5d09cf8b8062250d0631d392b9e4" compoundref="quantumcomm_8py" startline="170" endline="188">quantumcomm.get_adjmatrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a0b9a5d09cf8b8062250d0631d392b9e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.get_adjmatrix</definition>
        <argsstring>(pos, ep_idx, eta, num_w1_sats, LOS, N, eps_z, n_rovers)</argsstring>
        <name>get_adjmatrix</name>
        <qualifiedname>quantumcomm.get_adjmatrix</qualifiedname>
        <param>
          <type>pos</type>
          <defname>pos</defname>
        </param>
        <param>
          <type>ep_idx</type>
          <defname>ep_idx</defname>
        </param>
        <param>
          <type>eta</type>
          <defname>eta</defname>
        </param>
        <param>
          <type>num_w1_sats</type>
          <defname>num_w1_sats</defname>
        </param>
        <param>
          <type>LOS</type>
          <defname>LOS</defname>
        </param>
        <param>
          <type>N</type>
          <defname>N</defname>
        </param>
        <param>
          <type>eps_z</type>
          <defname>eps_z</defname>
        </param>
        <param>
          <type>n_rovers</type>
          <defname>n_rovers</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="170" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="170" bodyend="188"/>
        <references refid="namespacequantumcomm_1adeb3d6f34e9ce9bde81d145e0cb4b1c6" compoundref="quantumcomm_8py" startline="107" endline="119">quantumcomm.line_of_sight</references>
        <references refid="namespacequantumcomm_1af0f5b86687bc9356f53b8e0fcd826c2d" compoundref="quantumcomm_8py" startline="151" endline="169">quantumcomm.qkd_metric</references>
        <references refid="namespacequantumcomm_1a32214ea35bfdc5ac32988510e98f5643" compoundref="quantumcomm_8py" startline="129" endline="137">quantumcomm.zenith_angle</references>
        <referencedby refid="classquantumcomm_1_1constellation__udp_1a06e2f7fe5888de4c38d08d4b1f290511" compoundref="quantumcomm_8py" startline="392" endline="398">quantumcomm.constellation_udp.build_graph</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1ab6b2e04e125b00253e56eea291fb11a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.construct_rover_pos</definition>
        <argsstring>(lambda0, phi0, n_rovers, jds, R_p, w_p)</argsstring>
        <name>construct_rover_pos</name>
        <qualifiedname>quantumcomm.construct_rover_pos</qualifiedname>
        <param>
          <type>lambda0</type>
          <defname>lambda0</defname>
        </param>
        <param>
          <type>phi0</type>
          <defname>phi0</defname>
        </param>
        <param>
          <type>n_rovers</type>
          <defname>n_rovers</defname>
        </param>
        <param>
          <type>jds</type>
          <defname>jds</defname>
        </param>
        <param>
          <type>R_p</type>
          <defname>R_p</defname>
        </param>
        <param>
          <type>w_p</type>
          <defname>w_p</defname>
        </param>
        <briefdescription>
<para>Computes the position of the rovers at time t based on the initial latitude and longitude. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   lambda0 (float, N_r x 1): initial latitudes of the rovers
   phi0 (float, N_r x 1): initial longitudes of the rovers
</verbatim></para>
<para><simplesect kind="return"><para>float, n_rovers x n_epochs x 3: rover x, y, z positions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="198" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="198" bodyend="206"/>
        <referencedby refid="classquantumcomm_1_1constellation__udp_1a13abd2e63f36cb79a4c08d96557d3d87" compoundref="quantumcomm_8py" startline="485" endline="548">quantumcomm.constellation_udp.fitness</referencedby>
        <referencedby refid="classquantumcomm_1_1constellation__udp_1ae7806f788f8f22a8be936a007a8a3deb" compoundref="quantumcomm_8py" startline="670" endline="752">quantumcomm.constellation_udp.plot</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1abfabcba615cdf83e8edf913c888034e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.combine_scores</definition>
        <argsstring>(points)</argsstring>
        <name>combine_scores</name>
        <qualifiedname>quantumcomm.combine_scores</qualifiedname>
        <param>
          <type>points</type>
          <defname>points</defname>
        </param>
        <briefdescription>
<para>Function for aggregating single solutions into one score using hypervolume indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="754" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="754" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1af16dec207874c04d4e67e42e8832d851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.fitness</definition>
        <argsstring>(x)</argsstring>
        <name>fitness</name>
        <qualifiedname>quantumcomm.fitness</qualifiedname>
        <param>
          <type>x</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="791" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="791" bodyend="794"/>
        <referencedby refid="namespacequantumcomm_1a6b7a2382d55e8c0db17e1220d4cd7be3" compoundref="quantumcomm_8py" startline="861" endline="863">quantumcomm.qd_fun</referencedby>
        <referencedby refid="namespacequantumcomm_1aeb3856600fe5caa9eff67e2ebb6f269a" compoundref="quantumcomm_8py" startline="894" endline="993">quantumcomm.so_par</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1ac0164d14577f24455b1c4cfd24a7a9fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.select_valid</definition>
        <argsstring>(xs, ys)</argsstring>
        <name>select_valid</name>
        <qualifiedname>quantumcomm.select_valid</qualifiedname>
        <param>
          <type>xs</type>
          <defname>xs</defname>
        </param>
        <param>
          <type>ys</type>
          <defname>ys</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="795" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="795" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a8419b7d865cb04abb4a75ee8457a301c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.read_solution</definition>
        <argsstring>(fname)</argsstring>
        <name>read_solution</name>
        <qualifiedname>quantumcomm.read_solution</qualifiedname>
        <param>
          <type>fname</type>
          <defname>fname</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="804" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="804" bodyend="809"/>
        <referencedby refid="namespacequantumcomm_1a9179fbf0ec29e945c2af91b0202b0e99" compoundref="quantumcomm_8py" startline="864" endline="869">quantumcomm.get_arch</referencedby>
        <referencedby refid="namespacequantumcomm_1a1b51de779f54455f301b965bca17467c" compoundref="quantumcomm_8py" startline="994" endline="1109">quantumcomm.pymoo_par</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a84c6558e0b765a6d0b545850d3821a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.mo_par</definition>
        <argsstring>()</argsstring>
        <name>mo_par</name>
        <qualifiedname>quantumcomm.mo_par</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="819" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="819" bodyend="854"/>
        <referencedby refid="namespacequantumcomm_1a29b16ceed23f94c44a426cf51cb2670d" compoundref="quantumcomm_8py" startline="1110" endline="1128">quantumcomm.reduce</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a685f20cc5ab4536617a667be7981d7e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.mo_to_qd</definition>
        <argsstring>(y)</argsstring>
        <name>mo_to_qd</name>
        <qualifiedname>quantumcomm.mo_to_qd</qualifiedname>
        <param>
          <type>y</type>
          <defname>y</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="855" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="855" bodyend="860"/>
        <referencedby refid="namespacequantumcomm_1a6b7a2382d55e8c0db17e1220d4cd7be3" compoundref="quantumcomm_8py" startline="861" endline="863">quantumcomm.qd_fun</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a6b7a2382d55e8c0db17e1220d4cd7be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.qd_fun</definition>
        <argsstring>(x)</argsstring>
        <name>qd_fun</name>
        <qualifiedname>quantumcomm.qd_fun</qualifiedname>
        <param>
          <type>x</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="861" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="861" bodyend="863"/>
        <references refid="namespacequantumcomm_1af16dec207874c04d4e67e42e8832d851" compoundref="quantumcomm_8py" startline="791" endline="794">quantumcomm.fitness</references>
        <references refid="namespacequantumcomm_1a685f20cc5ab4536617a667be7981d7e3" compoundref="quantumcomm_8py" startline="855" endline="860">quantumcomm.mo_to_qd</references>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a9179fbf0ec29e945c2af91b0202b0e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.get_arch</definition>
        <argsstring>(qd_bounds, niche_num, samples_per_niche)</argsstring>
        <name>get_arch</name>
        <qualifiedname>quantumcomm.get_arch</qualifiedname>
        <param>
          <type>qd_bounds</type>
          <defname>qd_bounds</defname>
        </param>
        <param>
          <type>niche_num</type>
          <defname>niche_num</defname>
        </param>
        <param>
          <type>samples_per_niche</type>
          <defname>samples_per_niche</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="864" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="864" bodyend="869"/>
        <references refid="namespacequantumcomm_1a8419b7d865cb04abb4a75ee8457a301c" compoundref="quantumcomm_8py" startline="804" endline="809">quantumcomm.read_solution</references>
        <referencedby refid="namespacequantumcomm_1a7b02c8bc9af9b7e849783b5a8cbfc014" compoundref="quantumcomm_8py" startline="870" endline="893">quantumcomm.nd_par</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a7b02c8bc9af9b7e849783b5a8cbfc014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.nd_par</definition>
        <argsstring>(niche_num=10000)</argsstring>
        <name>nd_par</name>
        <qualifiedname>quantumcomm.nd_par</qualifiedname>
        <param>
          <type>niche_num</type>
          <defname>niche_num</defname>
          <defval>10000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="870" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="870" bodyend="893"/>
        <references refid="namespacequantumcomm_1a9179fbf0ec29e945c2af91b0202b0e99" compoundref="quantumcomm_8py" startline="864" endline="869">quantumcomm.get_arch</references>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1aeb3856600fe5caa9eff67e2ebb6f269a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.so_par</definition>
        <argsstring>()</argsstring>
        <name>so_par</name>
        <qualifiedname>quantumcomm.so_par</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="894" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="894" bodyend="993"/>
        <references refid="namespacequantumcomm_1af16dec207874c04d4e67e42e8832d851" compoundref="quantumcomm_8py" startline="791" endline="794">quantumcomm.fitness</references>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a1b51de779f54455f301b965bca17467c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.pymoo_par</definition>
        <argsstring>()</argsstring>
        <name>pymoo_par</name>
        <qualifiedname>quantumcomm.pymoo_par</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="994" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="994" bodyend="1109"/>
        <references refid="namespacequantumcomm_1a8419b7d865cb04abb4a75ee8457a301c" compoundref="quantumcomm_8py" startline="804" endline="809">quantumcomm.read_solution</references>
        <references refid="namespacequantumcomm_1a29b16ceed23f94c44a426cf51cb2670d" compoundref="quantumcomm_8py" startline="1110" endline="1128">quantumcomm.reduce</references>
      </memberdef>
      <memberdef kind="function" id="namespacequantumcomm_1a29b16ceed23f94c44a426cf51cb2670d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantumcomm.reduce</definition>
        <argsstring>(xs, ys, num, evals=50000, retries=mp.cpu_count())</argsstring>
        <name>reduce</name>
        <qualifiedname>quantumcomm.reduce</qualifiedname>
        <param>
          <type>xs</type>
          <defname>xs</defname>
        </param>
        <param>
          <type>ys</type>
          <defname>ys</defname>
        </param>
        <param>
          <type>num</type>
          <defname>num</defname>
        </param>
        <param>
          <type>evals</type>
          <defname>evals</defname>
          <defval>50000</defval>
        </param>
        <param>
          <type>retries</type>
          <defname>retries</defname>
          <defval>mp.cpu_count()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/esa2/quantumcomm.py" line="1110" column="1" bodyfile="examples/esa2/quantumcomm.py" bodystart="1110" bodyend="1128"/>
        <references refid="namespacefcmaes_1_1retry_1ae5cef7db4d25eedc630e6e7b3fd077a7" compoundref="retry_8py" startline="117" endline="123">fcmaes.retry.minimize</references>
        <references refid="namespacequantumcomm_1a84c6558e0b765a6d0b545850d3821a76" compoundref="quantumcomm_8py" startline="819" endline="854">quantumcomm.mo_par</references>
        <referencedby refid="namespacequantumcomm_1a1b51de779f54455f301b965bca17467c" compoundref="quantumcomm_8py" startline="994" endline="1109">quantumcomm.pymoo_par</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacequantumcomm" refkind="compound"><highlight class="comment">#<sp/>See<sp/>original<sp/>code<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>https://optimize.esa.int/challenge/spoc-2-quantum-communications-constellations/About</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>https://optimize.esa.int/challenge/spoc-2-quantum-communications-constellations/p/quantum-communications-constellations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Changes:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>-<sp/>Factor<sp/>30<sp/>speedup<sp/>using<sp/>numba<sp/>and<sp/>igraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>-<sp/>Added<sp/>competitive<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>-<sp/>See<sp/>corresponding<sp/>tutorial<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/ESAChallenge.adoc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Requires<sp/>pykep<sp/>which<sp/>needs<sp/>python<sp/>3.8,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Create<sp/>an<sp/>python<sp/>3.8<sp/>environment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>mamba<sp/>create<sp/>-n<sp/>env38<sp/>python=3.8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>conda<sp/>activate<sp/>env38</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Install<sp/>dependencies:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/>mamba<sp/>install<sp/>pykep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>mamba<sp/>install<sp/>pygmo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>pip<sp/>install<sp/>networkx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>pip<sp/>install<sp/>sgp4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">#<sp/>pip<sp/>install<sp/>seaborn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">#<sp/>pip<sp/>install<sp/>matplotlib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">#<sp/>pip<sp/>install<sp/>igraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">#<sp/>pip<sp/>install<sp/>pymoo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Tested<sp/>using<sp/>https://docs.conda.io/en/main/miniconda.html<sp/>on<sp/>Linux<sp/>Mint<sp/>21.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Basic<sp/>imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pykep<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pk</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pygmo<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pg</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>scipy</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os,<sp/>time</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>matplotlib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pyplot<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>plt</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>loguru<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">logger.remove()</highlight></codeline>
<codeline lineno="42" refid="namespacequantumcomm_1aa02045840efca4723c7830b9d2478fea" refkind="member"><highlight class="normal">logger.add(sys.stdout,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">logger.add(</highlight><highlight class="stringliteral">&quot;log_{time}.txt&quot;</highlight><highlight class="normal">,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>seaborn<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>sns</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SGP4<sp/>-<sp/>we<sp/>use<sp/>SPG4<sp/>to<sp/>propagate<sp/>orbits<sp/>around<sp/>New<sp/>Mars<sp/>as<sp/>a<sp/>proxy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">#<sp/>for<sp/>a<sp/>plausible<sp/>orbital<sp/>positions<sp/>propagator<sp/>around<sp/>a<sp/>habitable<sp/>planet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sgp4.api<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Satrec,<sp/>SatrecArray</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sgp4.api<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>WGS72</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Networkx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>igraph<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>ig<sp/></highlight><highlight class="comment">#<sp/>for<sp/>speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>networkx<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>nx</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Static<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacequantumcomm_1a7c43375b014085ada1580778d0deb20c" kindref="member">get_mothership_satellites</ref>():</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Construct<sp/>array<sp/>of<sp/>mothership<sp/>orbital<sp/>elements</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(the<sp/>TLEs<sp/>of<sp/>actual<sp/>Earth-orbiting<sp/>satellites<sp/>below<sp/>are<sp/>used<sp/>as<sp/>a<sp/>proxy<sp/>for</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>plausible<sp/>orbital<sp/>dynamics<sp/>around<sp/>a<sp/>habitable<sp/>planet)</highlight></codeline>
<codeline lineno="60" refid="namespacequantumcomm_1a7c43375b014085ada1580778d0deb20c" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>mothership_tles<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>39634U<sp/>14016A<sp/><sp/><sp/>22349.82483685<sp/><sp/>.00000056<sp/><sp/>00000-0<sp/><sp/>21508-4<sp/>0<sp/><sp/>9992&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2<sp/>39634<sp/><sp/>98.1813<sp/>354.7934<sp/>0001199<sp/><sp/>83.3324<sp/>276.7993<sp/>14.59201191463475&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>26400U<sp/>00037A<sp/><sp/><sp/>00208.84261022<sp/>+.00077745<sp/>+00000-0<sp/>+00000-0<sp/>0<sp/><sp/>9995&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2<sp/>26400<sp/>051.5790<sp/>297.6001<sp/>0012791<sp/>171.3037<sp/>188.7763<sp/>15.69818870002328&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>36508U<sp/>10013A<sp/><sp/><sp/>22349.92638064<sp/><sp/>.00000262<sp/><sp/>00000-0<sp/><sp/>64328-4<sp/>0<sp/><sp/>9992&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2<sp/>36508<sp/><sp/>92.0240<sp/>328.0627<sp/>0004726<sp/><sp/>21.3451<sp/>338.7953<sp/>14.51905975672463&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>40128U<sp/>14050A<sp/><sp/><sp/>22349.31276420<sp/>-.00000077<sp/><sp/>00000-0<sp/><sp/>00000-0<sp/>0<sp/><sp/>9995&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2<sp/>40128<sp/><sp/>50.1564<sp/>325.0733<sp/>1614819<sp/>130.5958<sp/>244.6527<sp/><sp/>1.85519534<sp/>54574&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>49810U<sp/>21116B<sp/><sp/><sp/>23065.71091236<sp/>-.00000083<sp/><sp/>00000+0<sp/><sp/>00000+0<sp/>0<sp/><sp/>9998&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2<sp/>49810<sp/><sp/>57.2480<sp/><sp/>13.9949<sp/>0001242<sp/>301.4399<sp/>239.8890<sp/><sp/>1.70475839<sp/><sp/>7777&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>44878U<sp/>19092F<sp/><sp/><sp/>22349.75758852<sp/><sp/>.00015493<sp/><sp/>00000-0<sp/><sp/>00000-0<sp/>0<sp/><sp/>9998&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2<sp/>44878<sp/><sp/>97.4767<sp/>172.6133<sp/>0012815<sp/><sp/>68.6990<sp/>291.5614<sp/>15.23910904165768&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1<sp/>04382U<sp/>70034A<sp/><sp/><sp/>22349.88472104<sp/><sp/>.00001138<sp/><sp/>00000-0<sp/><sp/>18306-3<sp/>0<sp/><sp/>9999&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;2<sp/>04382<sp/><sp/>68.4200<sp/>140.9159<sp/>1043234<sp/><sp/>48.2283<sp/>320.3286<sp/>13.08911192477908&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Assembling<sp/>the<sp/>list<sp/>of<sp/>Satrec<sp/>motherships</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>motherships<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>tle<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>mothership_tles:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motherships.append(Satrec.twoline2rv(tle[0],<sp/>tle[1]))</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>motherships</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>numba<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>njit</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">@njit(fastmath=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacequantumcomm_1adeb3d6f34e9ce9bde81d145e0cb4b1c6" kindref="member">line_of_sight</ref>(r1,r2):</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Given<sp/>two<sp/>position<sp/>vectors<sp/>returns<sp/>the<sp/>distance<sp/>of<sp/>the<sp/>line<sp/>of<sp/>sight<sp/>to<sp/>the<sp/>origin</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/>(numpy<sp/>array):<sp/>first<sp/>point</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r2<sp/>(numpy<sp/>array):<sp/>second<sp/>point</highlight></codeline>
<codeline lineno="107" refid="namespacequantumcomm_1adeb3d6f34e9ce9bde81d145e0cb4b1c6" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>denom<sp/>=<sp/>np.linalg.norm(r2-r1)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>denom<sp/>&lt;<sp/>1e-6:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>r1<sp/>~=<sp/>r2,<sp/>it<sp/>will<sp/>return<sp/>the<sp/>norm<sp/>of<sp/>r1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>np.linalg.norm(r1)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r21<sp/>=<sp/>(r2-r1)<sp/>/<sp/>denom</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h1<sp/>=<sp/>np.dot(r1,r21)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/>=<sp/>np.linalg.norm(r1)**2<sp/>-<sp/>h1**2</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>check<sp/>for<sp/>a<sp/>positive<sp/>arg<sp/>in<sp/>case<sp/>r1<sp/>and<sp/>r2<sp/>are<sp/>near<sp/>collinearity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>np.sqrt(arg)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>arg<sp/>&gt;<sp/>1e-6<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>0.0</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">@njit(fastmath=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacequantumcomm_1a32214ea35bfdc5ac32988510e98f5643" kindref="member">zenith_angle</ref>(src,<sp/>dst):</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Computes<sp/>the<sp/>cosine<sp/>of<sp/>the<sp/>zenith<sp/>angle<sp/>(theta_z)<sp/>of<sp/>the<sp/>LOS<sp/>between<sp/>source<sp/>and<sp/>destination<sp/>node</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>(numpy<sp/>array,<sp/>N_r<sp/>x<sp/>3):<sp/>rover<sp/>x,<sp/>y,<sp/>z<sp/>positions</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>(numpy<sp/>array,<sp/>N_s<sp/>x<sp/>3):<sp/>mothership<sp/>x,<sp/>y,<sp/>z<sp/>positions</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>cosine<sp/>of<sp/>the<sp/>zenith<sp/>angle</highlight></codeline>
<codeline lineno="129" refid="namespacequantumcomm_1a32214ea35bfdc5ac32988510e98f5643" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>dpos<sp/>=<sp/>dst<sp/>-<sp/>src</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>np.linalg.norm(dpos)<sp/>&lt;<sp/>1e-6:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cos_theta_z<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cos_theta_z<sp/>=<sp/>np.dot(dpos,<sp/>src)<sp/>/<sp/>(np.linalg.norm(dpos)<sp/>*<sp/>np.linalg.norm(src))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cos_theta_z</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">@njit(fastmath=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacequantumcomm_1af0f5b86687bc9356f53b8e0fcd826c2d" kindref="member">qkd_metric</ref>(idx,<sp/>src,<sp/>dst,<sp/>cos_theta_z,<sp/>eta,<sp/>eps_z,<sp/>n_rovers):</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Computes<sp/>the<sp/>edge<sp/>weight<sp/>according<sp/>to<sp/>QKD<sp/>probabilities</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>(int):<sp/>index<sp/>of<sp/>node<sp/>in<sp/>the<sp/>graph</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>(numpy<sp/>array,<sp/>1x3):<sp/>position<sp/>of<sp/>source<sp/>node</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>(numpy<sp/>array,<sp/>1x3):<sp/>position<sp/>of<sp/>destination<sp/>node</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cos_theta_z<sp/>(float):<sp/>cosine<sp/>of<sp/>the<sp/>zenith<sp/>angle<sp/>of<sp/>qkd<sp/>link</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta<sp/>(int):<sp/>satellite<sp/>quality<sp/>indicator<sp/>for<sp/>corresponding<sp/>constellation</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>edge<sp/>weight</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>communications<sp/>link<sp/>distance<sp/>between<sp/>src<sp/>and<sp/>dst</highlight></codeline>
<codeline lineno="151" refid="namespacequantumcomm_1af0f5b86687bc9356f53b8e0fcd826c2d" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_weight<sp/>=<sp/>-np.log(eta)<sp/></highlight><highlight class="comment">#<sp/>constellation<sp/>quality<sp/>score</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>d_link<sp/>=<sp/>np.linalg.norm(src<sp/>-<sp/>dst)<sp/></highlight><highlight class="comment">#<sp/>distance<sp/>of<sp/>communications<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_weight<sp/>+=<sp/>2<sp/>*<sp/>np.log(d_link)<sp/></highlight><highlight class="comment">#<sp/>final<sp/>edge<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>edge_weight<sp/>&lt;<sp/>0:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Safeguard:<sp/>whenever<sp/>this<sp/>happens,<sp/>the<sp/>collision-avoidance<sp/>constraint<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>also<sp/>not<sp/>satisfied.<sp/>Nevertheless,<sp/>we<sp/>must<sp/>return<sp/>a<sp/>value<sp/>for<sp/>the<sp/>edge<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>fitness<sp/>does<sp/>not<sp/>throw<sp/>(a<sp/>negative<sp/>valued<sp/>edge<sp/>would<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>imply<sp/>the<sp/>non-existence<sp/>of<sp/>a<sp/>shortest<sp/>path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_weight<sp/>=<sp/>1e3</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>idx<sp/>&lt;=<sp/>n_rovers:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>cos_theta_z<sp/>&gt;=<sp/>eps_z:<sp/></highlight><highlight class="comment">#<sp/>Apply<sp/>max<sp/>zenith<sp/>angle<sp/>constraint<sp/>to<sp/>mothership-rover<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_weight<sp/>+=<sp/>1.0<sp/>/<sp/>np.sin(np.pi<sp/>/<sp/>2<sp/>-<sp/>np.arccos(cos_theta_z))</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_weight<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge_weight,<sp/>d_link</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">@njit(fastmath=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="namespacequantumcomm_1a0b9a5d09cf8b8062250d0631d392b9e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacequantumcomm_1a0b9a5d09cf8b8062250d0631d392b9e4" kindref="member">get_adjmatrix</ref>(pos,<sp/>ep_idx,<sp/>eta,<sp/>num_w1_sats,<sp/>LOS,<sp/>N,<sp/>eps_z,<sp/>n_rovers):</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>adjmatrix<sp/>=<sp/>np.zeros((N,<sp/>N))</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>d_min<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(N):</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(i):</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ensure<sp/>there<sp/>is<sp/>LOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>los<sp/>=<sp/><ref refid="namespacequantumcomm_1adeb3d6f34e9ce9bde81d145e0cb4b1c6" kindref="member">line_of_sight</ref>(pos[i,<sp/>ep_idx,<sp/>:],<sp/>pos[j,<sp/>ep_idx,<sp/>:])</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cos_theta_z<sp/>=<sp/><ref refid="namespacequantumcomm_1a32214ea35bfdc5ac32988510e98f5643" kindref="member">zenith_angle</ref>(pos[i,<sp/>ep_idx,<sp/>:],<sp/>pos[j,<sp/>ep_idx,<sp/>:])</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>los<sp/>&gt;=<sp/>LOS<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>cos_theta_z<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Eta<sp/>based<sp/>on<sp/>j<sp/>because<sp/>it<sp/>is<sp/>the<sp/>destination<sp/>satellite<sp/>in<sp/>the<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta_j<sp/>=<sp/>eta[0]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>j<sp/>&lt;<sp/>num_w1_sats<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>eta[1]</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjmatrix[i,j],<sp/>d_link<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacequantumcomm_1af0f5b86687bc9356f53b8e0fcd826c2d" kindref="member">qkd_metric</ref>(N-i,<sp/>pos[i,<sp/>ep_idx,<sp/>:],<sp/>pos[j,<sp/>ep_idx,<sp/>:],<sp/>cos_theta_z,<sp/>eta_j,<sp/>eps_z,<sp/>n_rovers)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>d_link<sp/>&lt;<sp/>d_min:</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_min<sp/>=<sp/>d_link</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjmatrix[j,i]<sp/>=<sp/>adjmatrix[i,j]</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adjmatrix,<sp/>d_min</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">@njit(fastmath=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacequantumcomm_1ab6b2e04e125b00253e56eea291fb11a5" kindref="member">construct_rover_pos</ref>(lambda0,<sp/>phi0,<sp/>n_rovers,<sp/>jds,<sp/>R_p,<sp/>w_p):</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Computes<sp/>the<sp/>position<sp/>of<sp/>the<sp/>rovers<sp/>at<sp/>time<sp/>t<sp/>based<sp/>on<sp/>the<sp/>initial<sp/>latitude<sp/>and<sp/>longitude</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda0<sp/>(float,<sp/>N_r<sp/>x<sp/>1):<sp/>initial<sp/>latitudes<sp/>of<sp/>the<sp/>rovers</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi0<sp/>(float,<sp/>N_r<sp/>x<sp/>1):<sp/>initial<sp/>longitudes<sp/>of<sp/>the<sp/>rovers</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/>n_rovers<sp/>x<sp/>n_epochs<sp/>x<sp/>3:<sp/>rover<sp/>x,<sp/>y,<sp/>z<sp/>positions</highlight></codeline>
<codeline lineno="198" refid="namespacequantumcomm_1ab6b2e04e125b00253e56eea291fb11a5" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_r<sp/>=<sp/>np.zeros((n_rovers,<sp/>jds.shape[0],<sp/>3))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>time_range<sp/>=<sp/>(jds<sp/>-<sp/>jds[0])<sp/>*<sp/>24<sp/>*<sp/>3600<sp/></highlight><highlight class="comment">#<sp/>in<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(time_range):</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_r[:,<sp/>i,<sp/>0]<sp/>=<sp/>R_p<sp/>*<sp/>np.cos(lambda0)<sp/>*<sp/>np.cos(phi0<sp/>+<sp/>w_p<sp/>*<sp/>t)<sp/></highlight><highlight class="comment">#<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_r[:,<sp/>i,<sp/>1]<sp/>=<sp/>R_p<sp/>*<sp/>np.cos(lambda0)<sp/>*<sp/>np.sin(phi0<sp/>+<sp/>w_p<sp/>*<sp/>t)<sp/></highlight><highlight class="comment">#<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_r[:,<sp/>i,<sp/>2]<sp/>=<sp/>R_p<sp/>*<sp/>np.sin(lambda0)<sp/></highlight><highlight class="comment">#<sp/>z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos_r</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantumcomm_1_1constellation__udp" kindref="compound">constellation_udp</ref>:</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;A<sp/>Pygmo<sp/>compatible<sp/>UDP<sp/>(User<sp/>Defined<sp/>Problem)<sp/>representing<sp/>the<sp/>constellation<sp/>design<sp/>problem<sp/>for<sp/>SpOC<sp/>2023.</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Two<sp/>Walker<sp/>constellations<sp/>are<sp/>defined<sp/>in<sp/>a<sp/>mixint<sp/>chromosome:</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>[a1,ei,i1,w1,eta1]<sp/>+<sp/>[a2,e2,i2,w2,eta2]<sp/>+<sp/>[S1,P1,F1]<sp/>+<sp/>[S2,P2,F2]<sp/>+<sp/>[r1,r2,r3,r4]</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>constellations<sp/>must<sp/>relay<sp/>information<sp/>between<sp/>7<sp/>motherships<sp/>in<sp/>orbit<sp/>and<sp/>4<sp/>rovers<sp/>on<sp/>the<sp/>surface<sp/>of<sp/>New<sp/>Mars</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="216" refid="classquantumcomm_1_1constellation__udp" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Constructor&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="218" refid="classquantumcomm_1_1constellation__udp_1a8804eea0d2eaffcea2926f6780aafdf8" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Define<sp/>the<sp/>time<sp/>grid<sp/>over<sp/>which<sp/>to<sp/>optimize<sp/>the<sp/>communications<sp/>network</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._t0<sp/>=<sp/>10000<sp/>#<sp/>starting<sp/>epoch<sp/>in<sp/>mjd2000</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.n_epochs<sp/>=<sp/>11<sp/>#<sp/>number<sp/>of<sp/>epochs<sp/>in<sp/>time<sp/>grid<sp/>to<sp/>consider</highlight></codeline>
<codeline lineno="221" refid="classquantumcomm_1_1constellation__udp_1ad924507a2abeb0b7bb5e89d5f925b559" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._duration<sp/>=<sp/>10<sp/>#<sp/>difference<sp/>between<sp/>the<sp/>first<sp/>and<sp/>last<sp/>epoch<sp/>considered<sp/>in<sp/>years</highlight></codeline>
<codeline lineno="222" refid="classquantumcomm_1_1constellation__udp_1a9d785ce76d7893987af5b9439f8dbf16" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jd0,<sp/>fr<sp/>=<sp/>pk.epoch(self._t0,<sp/>&apos;mjd2000&apos;).jd,<sp/>0.0<sp/>#<sp/>reference<sp/>Julian<sp/>date</highlight></codeline>
<codeline lineno="223" refid="classquantumcomm_1_1constellation__udp_1af578ab2b4d0d76d74336fd7756fa33bd" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.jds<sp/>=<sp/>np.linspace(jd0,<sp/>jd0<sp/>+<sp/>self._duration<sp/>*<sp/>365.25,<sp/>self.n_epochs)<sp/>#<sp/>time<sp/>grid<sp/>in<sp/>JD</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.frs<sp/>=<sp/>self.jds<sp/>*<sp/>fr<sp/>#<sp/>date<sp/>fractions<sp/>(defaults<sp/>to<sp/>0)</highlight></codeline>
<codeline lineno="225" refid="classquantumcomm_1_1constellation__udp_1a6c229d5e6f94a3e1d7847a5cc85a3629" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="226" refid="classquantumcomm_1_1constellation__udp_1a9e02bb6ac8e8e0aed1249640e1ea4a5d" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Reference<sp/>epoch<sp/>for<sp/>SGP4<sp/>is<sp/>1949<sp/>December<sp/>31<sp/>00:00<sp/>UT</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ep_ref<sp/>=<sp/>pk.epoch_from_iso_string(&quot;19491231T000000&quot;)</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="229" refid="classquantumcomm_1_1constellation__udp_1aea71bfcc1860bfebd45edf3f50061450" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>SGP4-ready<sp/>mothership<sp/>satellites</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mothership_satellites<sp/>=<sp/>get_mothership_satellites()</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.pos_m<sp/>=<sp/>self.construct_mothership_pos(SatrecArray(mothership_satellites))</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.n_motherships<sp/>=<sp/>len(mothership_satellites)</highlight></codeline>
<codeline lineno="233" refid="classquantumcomm_1_1constellation__udp_1a94f4701662430239b3a0df294b8e5121" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="234" refid="classquantumcomm_1_1constellation__udp_1aed45357b9732be28c9301a0da997fbe1" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Latitudes<sp/>and<sp/>longitudes<sp/>of<sp/>rovers</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rovers_db_path<sp/>=<sp/>os.path.join(&quot;.&quot;,<sp/>&quot;data&quot;,<sp/>&quot;spoc2&quot;,<sp/>&quot;constellations&quot;,<sp/>&quot;rovers.txt&quot;)</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.rovers_db<sp/>=<sp/>np.loadtxt(rovers_db_path)</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.lambdas<sp/>=<sp/>self.rovers_db[:,<sp/>0]<sp/>#<sp/>latitudes</highlight></codeline>
<codeline lineno="238" refid="classquantumcomm_1_1constellation__udp_1aaf595a09122ffe6d5db7ab8bc8fb8888" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.phis<sp/>=<sp/>self.rovers_db[:,<sp/>1]<sp/>#<sp/>longitudes</highlight></codeline>
<codeline lineno="239" refid="classquantumcomm_1_1constellation__udp_1a92b6079745dcc7e51160f9a6f6e40dd7" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._min_rover_dist<sp/>=<sp/>3000<sp/>#<sp/>minimum<sp/>inter-rover<sp/>distance<sp/>(km)</highlight></codeline>
<codeline lineno="240" refid="classquantumcomm_1_1constellation__udp_1a9a86bb566548f702ddc82c688de151c5" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.n_rovers<sp/>=<sp/>4</highlight></codeline>
<codeline lineno="241" refid="classquantumcomm_1_1constellation__udp_1a8dde60f0189c428a6b1c9b47677b9284" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="242" refid="classquantumcomm_1_1constellation__udp_1a1b50811adb76ab085077e2b1e275d851" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Minimum<sp/>line-of-sight<sp/>parameter<sp/>(km)</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Radius<sp/>amplification<sp/>factor:<sp/>1.05</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.LOS<sp/>=<sp/>1.05<sp/>*<sp/>pk.EARTH_RADIUS<sp/>/<sp/>1000.0</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Radius<sp/>of<sp/>the<sp/>New-Mars<sp/>planet<sp/>(km)</highlight></codeline>
<codeline lineno="246" refid="classquantumcomm_1_1constellation__udp_1adeb6632a7a453441664f79cfcb9a9c2a" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.R_p<sp/>=<sp/>pk.EARTH_RADIUS<sp/>/<sp/>1000.0</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Angular<sp/>velocity<sp/>of<sp/>New<sp/>Mars<sp/>(rad/s)</highlight></codeline>
<codeline lineno="248" refid="classquantumcomm_1_1constellation__udp_1a9e52ccef528d06e738e4c8479347b334" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.w_p<sp/>=<sp/>7.29e-5<sp/>#<sp/>2<sp/>*<sp/>pi<sp/>/<sp/>(23<sp/>hours<sp/>56<sp/>minutes<sp/>4<sp/>seconds)</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Threshold<sp/>zenith<sp/>angle<sp/>constraint<sp/>for<sp/>rover-sat<sp/>link<sp/>(rad)</highlight></codeline>
<codeline lineno="250" refid="classquantumcomm_1_1constellation__udp_1a9f5d75bc8ab2658b521fbef7c6ef4475" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._zenith_angle<sp/>=<sp/>np.pi<sp/>/<sp/>3</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.eps_z<sp/>=<sp/>np.cos(self._zenith_angle)</highlight></codeline>
<codeline lineno="252" refid="classquantumcomm_1_1constellation__udp_1af928486a95f4c02e8139a82a5856e74d" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Minimum<sp/>inter-satellite<sp/>distance<sp/>(km)</highlight></codeline>
<codeline lineno="253" refid="classquantumcomm_1_1constellation__udp_1ab9b87fefd4eca71a6ec905ebc2354244" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._min_sat_dist<sp/>=<sp/>50</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="255" refid="classquantumcomm_1_1constellation__udp_1a02e82edc599f86967503c01d2d7219f0" refkind="member"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>def<sp/>get_bounds(self):</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal">Get<sp/>bounds<sp/>for<sp/>the<sp/>decision<sp/>variables.</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuple<sp/>of<sp/>lists:<sp/>bounds<sp/>for<sp/>the<sp/>decision<sp/>variables.</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lb<sp/>=<sp/>[1.06,<sp/>0.,<sp/>0.,<sp/>0.,<sp/>1.0]<sp/>+<sp/>[2.0,<sp/>0.,<sp/>0.,<sp/>0.,<sp/>1.0]<sp/>+<sp/>[4,<sp/>2,<sp/>0]<sp/>+<sp/>[4,<sp/>2,<sp/>0]<sp/>+<sp/>[0,<sp/>0,<sp/>0,<sp/>0]</highlight></codeline>
<codeline lineno="262" refid="classquantumcomm_1_1constellation__udp_1ae0a95b68653b5337476415c5f69fb960" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ub<sp/>=<sp/>[1.8,<sp/>0.02,<sp/>np.pi,<sp/>2*np.pi,<sp/>1000.0]<sp/>+<sp/>[3.5,<sp/>0.1,<sp/>np.pi,<sp/>2*np.pi,<sp/>1000.0]<sp/>+<sp/>[10,<sp/>10,<sp/>9]<sp/>+<sp/>[10,<sp/>10,<sp/>9]<sp/>+<sp/>[99,<sp/>99,<sp/>99,<sp/>99]</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>we<sp/>adapt<sp/>the<sp/>boundaries<sp/>so<sp/>that<sp/>they<sp/>work<sp/>with<sp/>a<sp/>continuous<sp/>optimizer</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ub<sp/>=<sp/>[1.8,<sp/>0.02,<sp/>np.pi,<sp/>2*np.pi,<sp/>1000.0]<sp/>+<sp/>[3.5,<sp/>0.1,<sp/>np.pi,<sp/>2*np.pi,<sp/>1000.0]<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[10.9999,<sp/>10.9999,<sp/>9.9999]<sp/>+<sp/>[10.9999,<sp/>10.9999,<sp/>9.9999]<sp/>+<sp/>[99.9999,<sp/>99.9999,<sp/>99.9999,<sp/>99.9999]</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(lb,<sp/>ub)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>get_ints(self):</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>np.array([False]*10<sp/>+<sp/>[True]*10)</highlight></codeline>
<codeline lineno="270" refid="classquantumcomm_1_1constellation__udp_1aeaefa471acf6233e861c77385d2e9695" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>get_nix(self):</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Get<sp/>number<sp/>of<sp/>integer<sp/>variables.</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int:<sp/>number<sp/>of<sp/>integer<sp/>variables.</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>6<sp/>+<sp/>4</highlight></codeline>
<codeline lineno="278" refid="classquantumcomm_1_1constellation__udp_1a3bb518a054083acd70ee7d5e884d22bb" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>get_nobj(self):</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Get<sp/>number<sp/>of<sp/>objectives.</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int:<sp/>the<sp/>number<sp/>of<sp/>objectives</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>2</highlight></codeline>
<codeline lineno="286" refid="classquantumcomm_1_1constellation__udp_1a37eb35c15c7342a8c31a2f4a0d78c97a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>get_nic(self):</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Get<sp/>number<sp/>of<sp/>inequality<sp/>constraints.</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int:<sp/>the<sp/>number<sp/>of<sp/>constraints</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>2</highlight></codeline>
<codeline lineno="294" refid="classquantumcomm_1_1constellation__udp_1a14b241afc0f8cc6ce5203fe8de9e4f7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>get_rover_constraint(self,<sp/>lambda0,<sp/>phi0):</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Evaluate<sp/>the<sp/>rover<sp/>constraint<sp/>(minimum<sp/>distance<sp/>between<sp/>any<sp/>two<sp/>rovers)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda0<sp/>(float,<sp/>N_r<sp/>x<sp/>1):<sp/>latitudes<sp/>of<sp/>the<sp/>rovers</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi0<sp/>(float,<sp/>N_r<sp/>x<sp/>1):<sp/>longitudes<sp/>of<sp/>the<sp/>rovers</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>the<sp/>difference<sp/>between<sp/>the<sp/>actual<sp/>and<sp/>allowable<sp/>minimum<sp/>distance<sp/>between<sp/>rovers</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Compute<sp/>rover<sp/>positions<sp/>on<sp/>the<sp/>planet</highlight></codeline>
<codeline lineno="306" refid="classquantumcomm_1_1constellation__udp_1a793f1ab728c23da59e9c59f30396cf73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>np.zeros((self.n_rovers,<sp/>3))</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos[:,<sp/>0]<sp/>=<sp/>np.sin(lambda0)<sp/>*<sp/>np.cos(phi0)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos[:,<sp/>1]<sp/>=<sp/>np.cos(lambda0)<sp/>*<sp/>np.cos(phi0)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos[:,<sp/>2]<sp/>=<sp/>np.sin(phi0)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>safe_arccos(u,<sp/>v):</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inner_product<sp/>=<sp/>np.dot(u,<sp/>v)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>inner_product<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>inner_product<sp/>&lt;<sp/>-1:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>np.pi</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>np.arccos(inner_product)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>scipy.spatial.distance.cdist(pos,<sp/>pos,<sp/>lambda<sp/>u,<sp/>v:<sp/>pk.EARTH_RADIUS/1000<sp/>*<sp/>safe_arccos(u,<sp/>v))</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>d<sp/>+<sp/>np.diag([np.inf]*4)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_d<sp/>=<sp/>np.min(d)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Will<sp/>be<sp/>negative<sp/>if<sp/>min(d)<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>min<sp/>allowable<sp/>inter-rover<sp/>distance</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self._min_rover_dist<sp/>-<sp/>min_d,<sp/>min_d</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>get_sat_constraint(self,<sp/>d_min):</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Evaluate<sp/>the<sp/>satellite<sp/>constraint<sp/>(minimum<sp/>distance<sp/>between<sp/>any<sp/>two<sp/>satellites)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_min<sp/>(float):<sp/>the<sp/>minimum<sp/>distance<sp/>between<sp/>any<sp/>two<sp/>satellites<sp/>at<sp/>any<sp/>epoch</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>the<sp/>difference<sp/>between<sp/>the<sp/>actual<sp/>and<sp/>allowable<sp/>minimum<sp/>distance<sp/>between<sp/>satellites</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Will<sp/>be<sp/>negative<sp/>if<sp/>d_min<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>min<sp/>allowable<sp/>inter-satellite<sp/>distance</highlight></codeline>
<codeline lineno="333" refid="classquantumcomm_1_1constellation__udp_1a228c4f828e7c8261bbeedd69d6d19573" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self._min_sat_dist<sp/>-<sp/>d_min</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>generate_walker(self,<sp/>S,P,F,a,e,incl,w,t0):</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Generates<sp/>a<sp/>Walker<sp/>constallation<sp/>as<sp/>a<sp/>SatrecArray</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>(int):<sp/>number<sp/>of<sp/>satellites<sp/>per<sp/>plane</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P<sp/>(int):<sp/>number<sp/>of<sp/>planes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>(int):<sp/>spacing<sp/>parameter<sp/>(i.e.<sp/>if<sp/>2<sp/>phasing<sp/>repeats<sp/>each<sp/>2<sp/>planes)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>(float):<sp/>semi-major<sp/>axis</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>(float):<sp/>eccentricity</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incl<sp/>(float):<sp/>inclination</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>(float):<sp/>argument<sp/>of<sp/>perigee</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>(float):<sp/>epoch</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SatrecArray:<sp/>satellites<sp/>ready<sp/>to<sp/>be<sp/>SGP4<sp/>propagated</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walker_l<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="353" refid="classquantumcomm_1_1constellation__udp_1a7751ec7ef991c732aeffdb2ac59332e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean_motion<sp/>=<sp/>np.sqrt(pk.MU_EARTH/a**3/pk.EARTH_RADIUS**3)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>planes</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(P):</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#satellites</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>j<sp/>in<sp/>range(S):</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>satellite<sp/>=<sp/>Satrec()</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>satellite.sgp4init(</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WGS72,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>gravity<sp/>model</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;i&apos;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&apos;a&apos;<sp/>=<sp/>old<sp/>AFSPC<sp/>mode,<sp/>&apos;i&apos;<sp/>=<sp/>improved<sp/>mode</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+<sp/>i*S,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>satnum:<sp/>Satellite<sp/>number</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0-self.ep_ref.mjd2000,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>epoch:<sp/>days<sp/>since<sp/>1949<sp/>December<sp/>31<sp/>00:00<sp/>UT</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>bstar:<sp/>drag<sp/>coefficient<sp/>(1/earth<sp/>radii)<sp/>-<sp/>3.8792e-05</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>ndot:<sp/>ballistic<sp/>coefficient<sp/>(revs/day)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>nddot:<sp/>mean<sp/>motion<sp/>2nd<sp/>derivative<sp/>(revs/day^3)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>ecco:<sp/>eccentricity</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>argpo:<sp/>argument<sp/>of<sp/>perigee<sp/>(radians)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>inclo:<sp/>inclination<sp/>(radians)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2*np.pi/P/S*F*i+2.*np.pi/S*j,<sp/><sp/><sp/><sp/><sp/>#<sp/>mo:<sp/>mean<sp/>anomaly<sp/>(radians)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean_motion*60,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>no_kozai:<sp/>mean<sp/>motion<sp/>(radians/minute)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.*np.pi/P*i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>nodeo:<sp/>R.A.<sp/>of<sp/>ascending<sp/>node<sp/>(radians)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walker_l.append(satellite)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Creating<sp/>the<sp/>vectorized<sp/>list</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SatrecArray(walker_l)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>build_graph(self,<sp/>ep_idx,<sp/>pos,<sp/>num_w1_sats,<sp/>eta):</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Builds<sp/>a<sp/>networkx<sp/>graph<sp/>from<sp/>the<sp/>satellite<sp/>positions.<sp/>Links<sp/>are<sp/>weighted<sp/>via<sp/>a<sp/>&quot;QKD-inspired<sp/>metric</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>only<sp/>exist<sp/>when<sp/>motherships/constellation<sp/>satellites/rovers<sp/>have<sp/>line-of-sight</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep_idx<sp/>(int):<sp/>idx<sp/>of<sp/>the<sp/>epoch<sp/>in<sp/>the<sp/>time<sp/>grid<sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>(numpy<sp/>array<sp/>3xN):<sp/>position<sp/>vector<sp/>of<sp/>the<sp/>satellites</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_w1_sats<sp/>(int):<sp/>number<sp/>of<sp/>satellites<sp/>in<sp/>the<sp/>first<sp/>Walker<sp/>constellation</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta<sp/>(tuple):<sp/>satellite<sp/>quality<sp/>indicator<sp/>for<sp/>each<sp/>Walker<sp/>constellation</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>igraph<sp/>graph:<sp/>nodes<sp/>are<sp/>motherships/Walker<sp/>satellites/rovers;<sp/>links<sp/>are<sp/>distances<sp/>when<sp/>there<sp/>is<sp/>LOS</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>=<sp/>pos[:,<sp/>ep_idx,<sp/>:].shape[0]<sp/>#<sp/>number<sp/>of<sp/>vertices</highlight></codeline>
<codeline lineno="392" refid="classquantumcomm_1_1constellation__udp_1a06e2f7fe5888de4c38d08d4b1f290511" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjmatrix,<sp/>d_min<sp/>=<sp/>get_adjmatrix(pos,<sp/>ep_idx,<sp/>eta,<sp/>num_w1_sats,<sp/>self.LOS,<sp/>N,<sp/>self.eps_z,<sp/>self.n_rovers)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>ig.Graph.Adjacency((adjmatrix<sp/>&gt;<sp/>0).tolist())</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.es[&apos;weight&apos;]<sp/>=<sp/>adjmatrix[adjmatrix.nonzero()]</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>g,<sp/>adjmatrix,<sp/>d_min</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>average_shortest_path(self,<sp/>G,<sp/>src,<sp/>dst):</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Computes<sp/>the<sp/>average<sp/>shortest<sp/>path<sp/>length<sp/>between<sp/>the<sp/>source<sp/>and<sp/>destination<sp/>*partitions*<sp/>of<sp/>nodes<sp/>in<sp/>the<sp/>graph<sp/>*G*</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(the<sp/>source<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>the<sp/>motherships<sp/>and<sp/>the<sp/>destination<sp/>the<sp/>rovers)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>(networkx<sp/>graph):<sp/>The<sp/>graph</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>(int):<sp/>the<sp/>number<sp/>of<sp/>motherships<sp/>(to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>negative<sp/>index<sp/>in<sp/>G)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>(int):<sp/>the<sp/>number<sp/>of<sp/>rovers<sp/>(to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>negative<sp/>index<sp/>in<sp/>G)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>average<sp/>shortest<sp/>path</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_nodes<sp/>=<sp/>G.vcount()</highlight></codeline>
<codeline lineno="410" refid="classquantumcomm_1_1constellation__udp_1a5827f9a431732de6732e1d7a4d0a5fe5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src0<sp/>=<sp/>n_nodes<sp/>-<sp/>src<sp/>-<sp/>dst</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst0<sp/>=<sp/>n_nodes<sp/>-<sp/>dst</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>np.array(G.distances(list(range(src0,<sp/>src0+src)),<sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list(range(dst0,<sp/>dst0+dst)),<sp/>weights=G.es[&quot;weight&quot;]))</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>np.mean(sp)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>construct_walkers(self,<sp/>x):</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Generates<sp/>two<sp/>Walker<sp/>constellations<sp/>according<sp/>to<sp/>specifications</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>(list):<sp/>chromosome<sp/>describing<sp/>the<sp/>New<sp/>Mars<sp/>communications<sp/>infrastructure</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SatrecArray:<sp/>Walker1<sp/>constellation<sp/>satellites<sp/>ready<sp/>to<sp/>be<sp/>SGP4<sp/>propagated</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SatrecArray:<sp/>Walker2<sp/>constellation<sp/>satellites<sp/>ready<sp/>to<sp/>be<sp/>SGP4<sp/>propagated</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Parse<sp/>the<sp/>chromosome</highlight></codeline>
<codeline lineno="427" refid="classquantumcomm_1_1constellation__udp_1a0488615446771fa666b9fa156ab6627e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a1,e1,i1,w1,_,a2,e2,i2,w2,_,S1,P1,F1,S2,P2,F2,_,_,_,_<sp/>=<sp/>x</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Construct<sp/>the<sp/>1st<sp/>walker<sp/>constellation<sp/>as<sp/>a<sp/>SatrecArray</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walker1<sp/>=<sp/>self.generate_walker(int(S1),int(P1),int(F1),a1,e1,i1,w1,self._t0)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Construct<sp/>the<sp/>2nd<sp/>walker<sp/>constellation<sp/>as<sp/>a<sp/>SatrecArray</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walker2<sp/>=<sp/>self.generate_walker(int(S2),int(P2),int(F2),a2,e2,i2,w2,self._t0)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>walker1,<sp/>walker2</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>construct_mothership_pos(self,<sp/>motherships):</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Computes<sp/>the<sp/>position<sp/>of<sp/>the<sp/>motherships<sp/>over<sp/>a<sp/>predefined<sp/>time<sp/>grid</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motherships<sp/>(SatrecArray):<sp/>mothership<sp/>satellites<sp/>ready<sp/>to<sp/>be<sp/>SGP4<sp/>propagated</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/>n_motherships<sp/>x<sp/>n_epochs<sp/>x<sp/>3:<sp/>mothership<sp/>x,<sp/>y,<sp/>z<sp/>positions</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="classquantumcomm_1_1constellation__udp_1ac050bcb0c45f9e8238563588261417e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err,<sp/>pos,<sp/>_<sp/>=<sp/>motherships.sgp4(self.jds,<sp/>self.frs)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Check<sp/>propagation<sp/>went<sp/>well</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>np.all(err<sp/>==<sp/>0):</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>ValueError(&quot;The<sp/>motherships<sp/>cannot<sp/>be<sp/>propagated<sp/>succesfully<sp/>on<sp/>the<sp/>defined<sp/>time<sp/>grid&quot;)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pos</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>construct_pos(self,<sp/>walker1,<sp/>walker2,<sp/>pos_r):</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Construct<sp/>cumulative<sp/>position<sp/>of<sp/>Walker<sp/>satellites,<sp/>motherships<sp/>and<sp/>rovers</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walker1<sp/>(SatrecArray):<sp/>Walker1<sp/>constellation<sp/>satellites<sp/>ready<sp/>to<sp/>be<sp/>SGP4<sp/>propagated</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walker2<sp/>(SatrecArray):<sp/>Walker2<sp/>constellation<sp/>satellites<sp/>ready<sp/>to<sp/>be<sp/>SGP4<sp/>propagated</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos_r<sp/>(float,<sp/>n_rovers<sp/>x<sp/>n_epochs<sp/>x<sp/>3):<sp/>rover<sp/>x,<sp/>y,<sp/>z<sp/>positions</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/>(S1xP1<sp/>+<sp/>S2xP2<sp/>+<sp/>n_motherships<sp/>+<sp/>n_rovers)<sp/>x<sp/>n_epochs<sp/>x<sp/>3:<sp/>overall<sp/>position<sp/>vector</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Compute<sp/>ephemerides<sp/>for<sp/>Walker1<sp/>satellites<sp/>at<sp/>all<sp/>epochs)</highlight></codeline>
<codeline lineno="462" refid="classquantumcomm_1_1constellation__udp_1a46cbd774de9aefba3ee882c665072446" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_w1,<sp/>pos_w1,<sp/>_<sp/>=<sp/>walker1.sgp4(self.jds,<sp/>self.frs)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Compute<sp/>ephemerides<sp/>for<sp/>Walker2<sp/>satellites<sp/>at<sp/>all<sp/>epochs)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_w2,<sp/>pos_w2,<sp/>_<sp/>=<sp/>walker2.sgp4(self.jds,<sp/>self.frs)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Check<sp/>propagation<sp/>went<sp/>well</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>(np.all(err_w1<sp/>==<sp/>0)<sp/>and<sp/>np.all(err_w2<sp/>==<sp/>0)):</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>ValueError(&quot;The<sp/>walker<sp/>constellations<sp/>cannot<sp/>be<sp/>propagated<sp/>successfully<sp/>on<sp/>the<sp/>defined<sp/>time<sp/>grid&quot;)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Position<sp/>vector<sp/>for<sp/>Walker<sp/>constellation<sp/>satellites,<sp/>motherships<sp/>and<sp/>rovers)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cum_pos<sp/>=<sp/>np.concatenate((pos_w1,pos_w2,<sp/>self.pos_m,<sp/>pos_r))</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>cum_pos</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>fitness(self,<sp/>x,<sp/>verbose=False):</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Evaluate<sp/>the<sp/>fitness<sp/>of<sp/>the<sp/>decision<sp/>variables.</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>(list):<sp/>chromosome<sp/>describing<sp/>the<sp/>New<sp/>Mars<sp/>communications<sp/>infrastructure</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbose<sp/>(bool):<sp/>If<sp/>True,<sp/>print<sp/>some<sp/>info.</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>fitness<sp/>for<sp/>average<sp/>shortest<sp/>path</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>fitness<sp/>for<sp/>total<sp/>number<sp/>of<sp/>satellites</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>constraint<sp/>for<sp/>rover<sp/>positioning</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Construct<sp/>the<sp/>Walker<sp/>constellations<sp/>based<sp/>on<sp/>input<sp/>chromosome<sp/></highlight></codeline>
<codeline lineno="485" refid="classquantumcomm_1_1constellation__udp_1a13abd2e63f36cb79a4c08d96557d3d87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walker1,<sp/>walker2<sp/>=<sp/>self.construct_walkers(x)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Extract<sp/>the<sp/>quality<sp/>factors<sp/>and<sp/>the<sp/>number<sp/>of<sp/>satellites<sp/>in<sp/>the<sp/>Walkers</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_,_,_,_,eta1,_,_,_,_,eta2,S1,P1,_,S2,P2,_,_,_,_,_<sp/>=<sp/>x</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N1<sp/>=<sp/>S1<sp/>*<sp/>P1</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N2<sp/>=<sp/>S2<sp/>*<sp/>P2</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Extract<sp/>the<sp/>rover<sp/>indices<sp/>from<sp/>the<sp/>input<sp/>chromosome</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rovers_idx<sp/>=<sp/>np.array(x[-4:]).astype(int)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Look<sp/>up<sp/>latitude<sp/>and<sp/>longitudes<sp/>corresponding<sp/>to<sp/>rover<sp/>indices</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda0<sp/>=<sp/>self.lambdas[rovers_idx]</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi0<sp/>=<sp/>self.phis[rovers_idx]</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Construct<sp/>the<sp/>rover<sp/>positions</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rovers<sp/>=<sp/>construct_rover_pos(lambda0,<sp/>phi0,<sp/>self.n_rovers,<sp/>self.jds,<sp/>self.R_p,<sp/>self.w_p)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Concatenate<sp/>the<sp/>position<sp/>of<sp/>the<sp/>Walkers,<sp/>motherships<sp/>and<sp/>rover</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cum_pos<sp/>=<sp/>self.construct_pos(walker1,<sp/>walker2,<sp/>rovers)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Evaluating<sp/>the<sp/>fitness<sp/>function</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>verbose:</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;FITNESS<sp/>EVALUATION:&quot;)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>First<sp/>objective<sp/>(minimize):</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Compute<sp/>the<sp/>average<sp/>shortest<sp/>path<sp/>between<sp/>any<sp/>mothership-rover<sp/>pair</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Iterate<sp/>over<sp/>epochs</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nf1<sp/>=<sp/>34<sp/>#<sp/>f1<sp/>normalization<sp/>factor</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_sat_min_ep<sp/>=<sp/>np.inf</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>ep_idx<sp/>in<sp/>range(1,<sp/>self.n_epochs):</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Constructs<sp/>the<sp/>graph:</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Nodes:<sp/>Walker<sp/>sats<sp/>+<sp/>motherships<sp/>+<sp/>rovers</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Edges:<sp/>LOS<sp/>communication</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G,<sp/>_,<sp/>d_sat_min<sp/>=<sp/>self.build_graph(ep_idx,<sp/>cum_pos,<sp/>N1,<sp/>(eta1,<sp/>eta2))</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>d_sat_min<sp/>&lt;<sp/>d_sat_min_ep:</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_sat_min_ep<sp/>=<sp/>d_sat_min</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1<sp/>+=<sp/>self.average_shortest_path(G,<sp/>self.n_motherships,<sp/>self.n_rovers)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Average<sp/>over<sp/>the<sp/>number<sp/>of<sp/>epochs</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1<sp/>/=<sp/>(self.n_epochs<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Second<sp/>objective<sp/>(minimize):</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Compute<sp/>the<sp/>total<sp/>number<sp/>of<sp/>satellites<sp/>(weighted<sp/>by<sp/>the<sp/>quality<sp/>factors)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f2<sp/>=<sp/>eta1<sp/>*<sp/>N1<sp/>+<sp/>eta2<sp/>*<sp/>N2</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nf2<sp/>=<sp/>100000<sp/>#<sp/>f2<sp/>normalization<sp/>factor</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Constraints:</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>The<sp/>minimum<sp/>distance<sp/>between<sp/>any<sp/>two<sp/>rovers<sp/>needs<sp/>to<sp/>be<sp/>at<sp/>least<sp/>3000km</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>to<sp/>ensure<sp/>good<sp/>coverage<sp/>of<sp/>the<sp/>surface<sp/>of<sp/>New<sp/>Mars</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_rover_d,<sp/>d_rover_min<sp/>=<sp/>self.get_rover_constraint(lambda0,<sp/>phi0)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>The<sp/>minimum<sp/>distance<sp/>between<sp/>any<sp/>two<sp/>nodes<sp/>of<sp/>the<sp/>graph<sp/>across<sp/>all<sp/>epochs<sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>needs<sp/>to<sp/>be<sp/>at<sp/>least<sp/>50km<sp/>to<sp/>ensure<sp/>a<sp/>collision-free<sp/>communications<sp/>network</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_sat_d<sp/>=<sp/>self.get_sat_constraint(d_sat_min_ep)<sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Additional<sp/>information<sp/>on<sp/>the<sp/>fitness<sp/>of<sp/>the<sp/>input<sp/>chromosome</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>verbose:</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(100<sp/>*<sp/>&quot;-&quot;)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;RESULTS:&quot;)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;Total<sp/>number<sp/>of<sp/>satellites<sp/>(W1:<sp/>{},<sp/>W2:<sp/>{}):<sp/>{}&quot;.format(N1,<sp/>N2,<sp/>N1+N2))</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;OBJECTIVE<sp/>#1<sp/>-<sp/>Average<sp/>communications<sp/>cost:<sp/>{}&quot;.format(f1/nf1))</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;OBJECTIVE<sp/>#2<sp/>-<sp/>Cost<sp/>of<sp/>infrastructure:<sp/>{}&quot;.format(f2/nf2))</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;CONSTRAINT<sp/>-<sp/>Minimum<sp/>distance<sp/>between<sp/>rovers<sp/>({}):<sp/>{}<sp/>km&quot;.format(&quot;NOK&quot;<sp/>if<sp/>min_rover_d<sp/>&gt;<sp/>0<sp/>else<sp/>&quot;OK&quot;,<sp/>d_rover_min))</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;CONSTRAINT<sp/>-<sp/>Minimum<sp/>distance<sp/>between<sp/>sats<sp/>({}):<sp/>{}<sp/>km&quot;.format(&quot;NOK&quot;<sp/>if<sp/>min_sat_d<sp/>&gt;<sp/>0<sp/>else<sp/>&quot;OK&quot;,<sp/>d_sat_min_ep))</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(100<sp/>*<sp/>&quot;-&quot;)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[f1/nf1,<sp/>f2/nf2,<sp/>min_rover_d,<sp/>min_sat_d]</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>pretty(self,<sp/>x):</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;A<sp/>verbose<sp/>evaluation<sp/>of<sp/>the<sp/>fitness<sp/>functions</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>(list):<sp/>chromosome<sp/>describing<sp/>the<sp/>New<sp/>Mars<sp/>communications<sp/>infrastructure</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>fitness<sp/>for<sp/>average<sp/>shortest<sp/>path</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>fitness<sp/>for<sp/>total<sp/>number<sp/>of<sp/>satellites</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>constraint<sp/>for<sp/>rover<sp/>positioning</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float:<sp/>constraint<sp/>for<sp/>satellite<sp/>positioning</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f1,<sp/>f2,<sp/>c1,<sp/>c2<sp/>=<sp/>self.fitness(x,<sp/>verbose=True)</highlight></codeline>
<codeline lineno="560" refid="classquantumcomm_1_1constellation__udp_1a8c60ffafb21bc14b969a3f3f4079d24d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>f1,<sp/>f2,<sp/>c1,<sp/>c2</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>example(self,<sp/>verbose=False):</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;A<sp/>random<sp/>chromosome<sp/>example<sp/>for<sp/>the<sp/>constellation<sp/>optimization</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list:<sp/>a<sp/>valid<sp/>chromosome<sp/>representing<sp/>a<sp/>possible<sp/>constellation<sp/>design</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>verbose:</highlight></codeline>
<codeline lineno="569" refid="classquantumcomm_1_1constellation__udp_1abd7080d6cfab62437f82a825e53f1e53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;CHROMOSOME:&quot;)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;x<sp/>=<sp/>[a1,<sp/>e1,<sp/>i1,<sp/>w1,<sp/>eta1]<sp/>+<sp/>[a2,<sp/>e2,<sp/>i2,<sp/>w2,<sp/>eta2]<sp/>+<sp/>[S1,<sp/>P1,<sp/>F1]<sp/>+<sp/>[S2,<sp/>P2,<sp/>F2]<sp/>+<sp/>[r1,<sp/>r2,<sp/>r3,<sp/>r4]&quot;)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(100<sp/>*<sp/>&quot;-&quot;)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;a1:<sp/>float<sp/>representing<sp/>the<sp/>normalized<sp/>semi-major<sp/>axis<sp/>of<sp/>Walker1<sp/>satellite<sp/>orbits<sp/>(in<sp/>km)<sp/>[1.05,1.8]&quot;)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;e1:<sp/>float<sp/>representing<sp/>the<sp/>eccentricity<sp/>[0,<sp/>0.1]&quot;)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;i1:<sp/>float<sp/>representing<sp/>the<sp/>inclination<sp/>[0,<sp/>pi]&quot;)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;w1:<sp/>float<sp/>representing<sp/>the<sp/>argument<sp/>of<sp/>the<sp/>perigee<sp/>[0,<sp/>2pi]&quot;)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;eta1:<sp/>float<sp/>defined<sp/>as<sp/>the<sp/>quality<sp/>indicator<sp/>of<sp/>satellites<sp/>in<sp/>the<sp/>first<sp/>walker<sp/>constellation<sp/>[0,<sp/>100]&quot;)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(100<sp/>*<sp/>&quot;-&quot;)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;a2:<sp/>float<sp/>representing<sp/>the<sp/>normalized<sp/>semi-major<sp/>axis<sp/>of<sp/>Walker2<sp/>satellite<sp/>orbits<sp/>(in<sp/>km)<sp/>[2.0,3.5]&quot;)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;e2:<sp/>float<sp/>representing<sp/>the<sp/>eccentricity<sp/>[0,<sp/>0.1]&quot;)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;i2:<sp/>float<sp/>representing<sp/>the<sp/>inclination<sp/>[0,<sp/>pi]&quot;)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;w2:<sp/>float<sp/>representing<sp/>the<sp/>argument<sp/>of<sp/>the<sp/>perigee<sp/>[0,<sp/>2pi]&quot;)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;eta2:<sp/>float<sp/>defined<sp/>as<sp/>the<sp/>quality<sp/>indicator<sp/>of<sp/>satellites<sp/>in<sp/>the<sp/>first<sp/>walker<sp/>constellation<sp/>[0,<sp/>100]&quot;)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(100<sp/>*<sp/>&quot;-&quot;)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;S1:<sp/>integer<sp/>corresponding<sp/>to<sp/>the<sp/>number<sp/>of<sp/>satellites<sp/>per<sp/>plane<sp/>[4,<sp/>10]&quot;)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;P1:<sp/>integer<sp/>corresponding<sp/>to<sp/>the<sp/>number<sp/>of<sp/>planes<sp/>[2,<sp/>10]&quot;)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;F1:<sp/>integer<sp/>defining<sp/>the<sp/>phasing<sp/>of<sp/>the<sp/>constellation<sp/>[0,<sp/>9]&quot;)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(100<sp/>*<sp/>&quot;-&quot;)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;S2:<sp/>integer<sp/>corresponding<sp/>to<sp/>the<sp/>number<sp/>of<sp/>satellites<sp/>per<sp/>plane<sp/>[4,<sp/>10]&quot;)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;P2:<sp/>integer<sp/>corresponding<sp/>to<sp/>the<sp/>number<sp/>of<sp/>planes<sp/>[2,<sp/>10]&quot;)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;F2:<sp/>integer<sp/>defining<sp/>the<sp/>phasing<sp/>of<sp/>the<sp/>constellation<sp/>[0,<sp/>9]&quot;)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(100<sp/>*<sp/>&quot;-&quot;)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;r1:<sp/>index<sp/>of<sp/>rover<sp/>1<sp/>[0,<sp/>99]&quot;)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;r2:<sp/>index<sp/>of<sp/>rover<sp/>2<sp/>[0,<sp/>99]&quot;)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;r3:<sp/>index<sp/>of<sp/>rover<sp/>3<sp/>[0,<sp/>99]&quot;)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;r4:<sp/>index<sp/>of<sp/>rover<sp/>4<sp/>[0,<sp/>99]&quot;)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(100<sp/>*<sp/>&quot;-&quot;)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[1.8,<sp/>0.0,<sp/>1.2,<sp/>0.0,<sp/>55.0]<sp/>+<sp/>[2.3,<sp/>0.0,<sp/>1.2,<sp/>0.0,<sp/>15.0]<sp/>+<sp/>[10,<sp/>2,<sp/>1]<sp/>+<sp/>[10,<sp/>2,<sp/>1]<sp/>+<sp/>[13,<sp/>21,<sp/>34,<sp/>55]</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>compute_orbit_walker(self,<sp/>walker,<sp/>ep0,<sp/>sma):</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Compute<sp/>one<sp/>full-orbit<sp/>of<sp/>the<sp/>Walker<sp/>constellation<sp/>planes<sp/>(for<sp/>plots)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walker<sp/>(sgp4.SatrecArray):<sp/>the<sp/>array<sp/>of<sp/>Walker<sp/>satellites<sp/>to<sp/>plot</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep0<sp/>(float):<sp/>Julian<sp/>date<sp/>denoting<sp/>starting<sp/>epoch</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sma<sp/>(float):<sp/>semi-major<sp/>axis<sp/>of<sp/>orbit</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>(numpy<sp/>array,<sp/>P<sp/>x<sp/>N<sp/>x<sp/>3):<sp/>N<sp/>orbital<sp/>x,<sp/>y,<sp/>z<sp/>positions<sp/>for<sp/>P<sp/>planes</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="612" refid="classquantumcomm_1_1constellation__udp_1a055cad3b277eb52218b1926cf1730044" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Extract<sp/>mean<sp/>motion</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean_motion<sp/>=<sp/>np.sqrt(pk.MU_EARTH<sp/>/<sp/>sma**3<sp/>/<sp/>pk.EARTH_RADIUS**3)<sp/>*<sp/>24<sp/>*<sp/>60<sp/>*<sp/>60<sp/>/<sp/>(2<sp/>*<sp/>np.pi)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Compute<sp/>time<sp/>range<sp/>for<sp/>one<sp/>full<sp/>orbit</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jds<sp/>=<sp/>np.linspace(ep0,<sp/>ep0<sp/>+<sp/>1<sp/>/<sp/>mean_motion,<sp/>100)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frs<sp/>=<sp/>jds<sp/>*<sp/>0.0</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Propagate<sp/>using<sp/>SGP4</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err,<sp/>pos,<sp/>_<sp/>=<sp/>walker.sgp4(jds,<sp/>frs)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>np.all(err<sp/>==<sp/>0):</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>ValueError(&quot;The<sp/>satellite<sp/>cannot<sp/>be<sp/>propagated<sp/>successfully<sp/>on<sp/>the<sp/>defined<sp/>time<sp/>grid&quot;)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pos</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>compute_orbit_motherships(self,<sp/>ep0):</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Compute<sp/>one<sp/>full-orbit<sp/>of<sp/>the<sp/>motherships<sp/>from<sp/>epoch<sp/>ep0<sp/>(for<sp/>plots)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep0<sp/>(float):<sp/>Julian<sp/>date<sp/>denoting<sp/>starting<sp/>epoch</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orbits<sp/>(numpy<sp/>array,<sp/>S<sp/>x<sp/>N<sp/>x<sp/>3):<sp/>N<sp/>orbital<sp/>x,<sp/>y,<sp/>z<sp/>positions<sp/>for<sp/>S<sp/>satellites</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="634" refid="classquantumcomm_1_1constellation__udp_1a538e6e0a73831c10938e12e9ec73513c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Pre-allocate<sp/>return<sp/>array</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>=<sp/>100<sp/>#<sp/>number<sp/>of<sp/>samples<sp/>along<sp/>orbit</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Get<sp/>SGP4-ready<sp/>motherships</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motherships<sp/>=<sp/>get_mothership_satellites()</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orbits<sp/>=<sp/>np.zeros((len(motherships),<sp/>N,<sp/>3))</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i,<sp/>usr<sp/>in<sp/>enumerate(motherships):</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Extract<sp/>mean<sp/>motion</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean_motion<sp/>=<sp/>usr.no_kozai<sp/>*<sp/>24<sp/>*<sp/>60<sp/>/<sp/>(2<sp/>*<sp/>np.pi)<sp/>#<sp/>revolutions<sp/>per<sp/>day</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Compute<sp/>time<sp/>range<sp/>for<sp/>one<sp/>full<sp/>orbit</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jds<sp/>=<sp/>np.linspace(ep0,<sp/>ep0<sp/>+<sp/>1<sp/>/<sp/>mean_motion,<sp/>N)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frs<sp/>=<sp/>jds<sp/>*<sp/>0.0</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Propagate<sp/>using<sp/>SGP4</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err,<sp/>pos,<sp/>_<sp/>=<sp/>usr.sgp4_array(jds,<sp/>frs)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>np.all(err<sp/>==<sp/>0):</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>ValueError(&quot;The<sp/>satellite<sp/>cannot<sp/>be<sp/>propagated<sp/>successfully<sp/>on<sp/>the<sp/>defined<sp/>time<sp/>grid&quot;)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orbits[i]<sp/>=<sp/>pos</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>orbits</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>plot(self,<sp/>x,<sp/>src,<sp/>dst,<sp/>ep=1,<sp/>lims=10000,<sp/>ax=None,<sp/>dark_mode=True):</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;Plot<sp/>the<sp/>full<sp/>constellations<sp/>with<sp/>solution<sp/>path<sp/>and<sp/>optional<sp/>orbits</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>(list):<sp/>chromosome<sp/>describing<sp/>the<sp/>communications<sp/>network</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>(int):<sp/>mothership<sp/>index<sp/>denoting<sp/>path<sp/>source</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>(int):<sp/>rover<sp/>index<sp/>denoting<sp/>path<sp/>destination</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep<sp/>(int):<sp/>index<sp/>of<sp/>the<sp/>epoch<sp/>in<sp/>the<sp/>predefined<sp/>time<sp/>grid</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lims<sp/>(float,<sp/>optional):<sp/>plot<sp/>limits.<sp/>Defaults<sp/>to<sp/>10000.</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax<sp/>(matplotlib<sp/>3D<sp/>axis,<sp/>optional):<sp/>plot<sp/>axis.</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dark_mode<sp/>(bool,<sp/>optional):<sp/>dark<sp/>background<sp/>for<sp/>plot<sp/>(recommended)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matplotlib.axis:<sp/>the<sp/>3D<sp/>plot<sp/>axes</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list:<sp/>indices<sp/>of<sp/>the<sp/>graph<sp/>nodes<sp/>on<sp/>the<sp/>communications<sp/>path<sp/>(if<sp/>one<sp/>is<sp/>found,<sp/>otherwise<sp/>[])</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="670" refid="classquantumcomm_1_1constellation__udp_1ae7806f788f8f22a8be936a007a8a3deb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Create<sp/>the<sp/>plotting<sp/>axis<sp/>if<sp/>needed</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>ax<sp/>is<sp/>None:</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fig<sp/>=<sp/>plt.figure()</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax<sp/>=<sp/>fig.add_subplot(projection=&apos;3d&apos;)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Apply<sp/>a<sp/>dark<sp/>background<sp/>for<sp/>better<sp/>visualization</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>dark_mode:</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sns.set(style=&quot;darkgrid&quot;)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plt.style.use(&quot;dark_background&quot;)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Construct<sp/>the<sp/>two<sp/>Walker<sp/>constellations<sp/>from<sp/>the<sp/>specifications<sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walker1,<sp/>walker2<sp/>=<sp/>self.construct_walkers(x)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Construct<sp/>the<sp/>rover<sp/>positions</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rovers_idx<sp/>=<sp/>np.array(x[-4:]).astype(int)</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda0<sp/>=<sp/>self.lambdas[rovers_idx]</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi0<sp/>=<sp/>self.phis[rovers_idx]</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rovers<sp/>=<sp/>construct_rover_pos(lambda0,<sp/>phi0,<sp/>self.n_rovers,<sp/>self.jds,<sp/>self.R_p,<sp/>self.w_p)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Construct<sp/>the<sp/>Walker<sp/>satellite<sp/>positions</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>self.construct_pos(walker1,<sp/>walker2,<sp/>rovers)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Compute<sp/>and<sp/>plot<sp/>the<sp/>orbits<sp/>of<sp/>the<sp/>Walker<sp/>and<sp/>mothership<sp/>satellites<sp/>at<sp/>the<sp/>epoch<sp/>ep</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Walker<sp/>1</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N1<sp/>=<sp/>x[10]<sp/>*<sp/>x[11]</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1_orb<sp/>=<sp/>self.compute_orbit_walker(walker1,<sp/>self.jds[ep],<sp/>x[0])</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(N1):</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.plot(w1_orb[i,<sp/>:,<sp/>0],<sp/>w1_orb[i,<sp/>:,<sp/>1],<sp/>w1_orb[i,<sp/>:,<sp/>2],<sp/>&apos;r-&apos;,<sp/>linewidth=0.5)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Walker<sp/>2</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N2<sp/>=<sp/>x[13]<sp/>*<sp/>x[14]</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w2_orb<sp/>=<sp/>self.compute_orbit_walker(walker2,<sp/>self.jds[ep],<sp/>x[5])</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(N2):</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.plot(w2_orb[i,<sp/>:,<sp/>0],<sp/>w2_orb[i,<sp/>:,<sp/>1],<sp/>w2_orb[i,<sp/>:,<sp/>2],<sp/>&apos;b-&apos;,<sp/>linewidth=0.5)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Motherships</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mothership_orb<sp/>=<sp/>self.compute_orbit_motherships(self.jds[ep])</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(len(mothership_orb)):</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.plot(mothership_orb[i,<sp/>:,<sp/>0],<sp/>mothership_orb[i,<sp/>:,<sp/>1],<sp/>mothership_orb[i,<sp/>:,<sp/>2],<sp/>&apos;w-&apos;,<sp/>linewidth=0.5)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Overlay<sp/>the<sp/>Walker<sp/>satellite<sp/>and<sp/>mothership<sp/>positions<sp/>at<sp/>epoch<sp/>ep<sp/></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Walker1:<sp/>red,<sp/>Walker2:<sp/>blue,<sp/>motherships:<sp/>white,<sp/>rovers:<sp/>yellow</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.scatter(pos[:len(walker1),ep,0],<sp/>pos[:len(walker1),ep,1],<sp/>pos[:len(walker1),ep,2],<sp/>c=&apos;r&apos;,<sp/>marker=&quot;1&quot;,<sp/>s=200)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.scatter(pos[len(walker1):-self.n_motherships-self.n_rovers,ep,0],<sp/>pos[len(walker1):-self.n_motherships-self.n_rovers,ep,1],<sp/>pos[len(walker1):-self.n_motherships-self.n_rovers,ep,2],<sp/>c=&apos;b&apos;,<sp/>marker=&quot;1&quot;,<sp/>s=200)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.scatter(pos[-self.n_motherships-self.n_rovers:-self.n_rovers,ep,0],<sp/>pos[-self.n_motherships-self.n_rovers:-self.n_rovers,ep,1],<sp/>pos[-self.n_motherships-self.n_rovers:-self.n_rovers,ep,2],<sp/>c=&apos;w&apos;,<sp/>marker=&quot;1&quot;,<sp/>s=300)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Annotate<sp/>source<sp/>nodes<sp/>(motherships)</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(self.n_motherships):</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.text(pos[-self.n_motherships-self.n_rovers+i,ep,0],<sp/>pos[-self.n_motherships-self.n_rovers+i,ep,1],<sp/>pos[-self.n_motherships-self.n_rovers+i,ep,2],<sp/><sp/>&apos;%s&apos;<sp/>%<sp/>(str(i+1)),<sp/>size=20,<sp/>zorder=1,<sp/><sp/>color=&apos;w&apos;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Annotate<sp/>destination<sp/>nodes<sp/>(rovers)</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.scatter(pos[-self.n_rovers:,ep,0],<sp/>pos[-self.n_rovers:,ep,1],<sp/>pos[-self.n_rovers:,ep,2],<sp/>c=&apos;y&apos;,<sp/>marker=&quot;^&quot;,<sp/>s=200)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(self.n_rovers):</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.text(pos[-self.n_rovers+i,ep,0],<sp/>pos[-self.n_rovers+i,ep,1],<sp/>pos[-self.n_rovers+i,ep,2],<sp/><sp/>&apos;%s&apos;<sp/>%<sp/>(str(i+1)),<sp/>size=20,<sp/>zorder=1,<sp/><sp/>color=&apos;y&apos;)<sp/></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Build<sp/>the<sp/>communications<sp/>network</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta1,<sp/>eta2<sp/>=<sp/>x[4],<sp/>x[9]</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G,<sp/>_,<sp/>_<sp/>=<sp/>self.build_graph(ep,<sp/>pos,<sp/>N1,<sp/>(eta1,<sp/>eta2))</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>=<sp/>len(G)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_node<sp/>=<sp/>N1<sp/>+<sp/>N2<sp/>+<sp/>src<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_node<sp/>=<sp/>N1<sp/>+<sp/>N2<sp/>+<sp/>self.n_motherships<sp/>+<sp/>dst<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Find<sp/>the<sp/>shortest<sp/>path<sp/>(if<sp/>one<sp/>exists)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>nx.shortest_path(G,<sp/>src_node,<sp/>dst_node,<sp/>weight=&quot;weight&quot;,<sp/>method=&quot;dijkstra&quot;)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i,j<sp/>in<sp/>zip(path[:-1],<sp/>path[1:]):</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.plot([pos[i,ep,0],<sp/>pos[j,ep,0]],<sp/>[pos[i,ep,1],<sp/>pos[j,ep,1]],<sp/>[pos[i,ep,2],<sp/>pos[j,ep,2]],<sp/>&apos;g-.&apos;,<sp/>linewidth=3)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;Mothership<sp/>{}<sp/>(node<sp/>{})<sp/>communicates<sp/>with<sp/>rover<sp/>{}<sp/>(node<sp/>{})<sp/>at<sp/>epoch<sp/>{}<sp/>via:<sp/>{}&quot;.format(\</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src,<sp/>src_node,<sp/>dst,<sp/><sp/>dst_node,<sp/>ep,<sp/>path))</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>nx.exception.NetworkXNoPath<sp/>as<sp/>e:</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;Mothership<sp/>{}<sp/>(node<sp/>{})<sp/>cannot<sp/>reach<sp/>rover<sp/>{}<sp/>(node<sp/>{})<sp/>at<sp/>epoch<sp/>{}&quot;.format(\</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src,<sp/>src_node,<sp/>dst,<sp/><sp/>dst_node,<sp/>ep))</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Plot<sp/>the<sp/>New<sp/>Mars<sp/>planet</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>pk.EARTH_RADIUS/1000</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u,<sp/>v<sp/>=<sp/>np.mgrid[0:2<sp/>*<sp/>np.pi:30j,<sp/>0:np.pi:20j]</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>r<sp/>*<sp/>np.cos(u)<sp/>*<sp/>np.sin(v)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>r<sp/>*<sp/>np.sin(u)<sp/>*<sp/>np.sin(v)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>r<sp/>*<sp/>np.cos(v)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.plot_surface(x,<sp/>y,<sp/>z,<sp/>alpha=0.3,<sp/>color=&quot;purple&quot;,<sp/>linewidth=0)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.set_axis_off()</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.set_xlim(-lims,lims)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.set_ylim(-lims,lims)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.set_zlim(-lims,lims)</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.set_box_aspect([ub<sp/>-<sp/>lb<sp/>for<sp/>lb,<sp/>ub<sp/>in<sp/>(getattr(ax,<sp/>f&apos;get_{a}lim&apos;)()<sp/>for<sp/>a<sp/>in<sp/>&apos;xyz&apos;)])</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ax,<sp/>path</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal">def<sp/>combine_scores(points):</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;<sp/>Function<sp/>for<sp/>aggregating<sp/>single<sp/>solutions<sp/>into<sp/>one<sp/>score<sp/>using<sp/>hypervolume<sp/>indicator<sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="namespacequantumcomm_1abfabcba615cdf83e8edf913c888034e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ref_point<sp/>=<sp/>np.array([1.2,<sp/>1.4])</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>solutions<sp/>that<sp/>not<sp/>dominate<sp/>the<sp/>reference<sp/>point<sp/>are<sp/>excluded</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>filtered_points<sp/>=<sp/>[s[:2]<sp/>for<sp/>s<sp/>in<sp/>points<sp/>if<sp/>pg.pareto_dominance(s[:2],<sp/>ref_point)]</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>len(filtered_points)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0.0</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hv<sp/>=<sp/>pg.hypervolume(filtered_points)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#return<sp/>-hv.computborderse(ref_point)<sp/>*<sp/>10000</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-hv.compute(ref_point)<sp/>*<sp/>10000</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="767"><highlight class="normal">import<sp/>warnings</highlight></codeline>
<codeline lineno="768"><highlight class="normal">warnings.filterwarnings(&quot;ignore&quot;)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal">from<sp/>fcmaes.optimizer<sp/>import<sp/>wrapper,<sp/>dtime,<sp/>Bite_cpp,<sp/>De_cpp,<sp/>Crfmnes_cpp</highlight></codeline>
<codeline lineno="771"><highlight class="normal">import<sp/>fcmaes</highlight></codeline>
<codeline lineno="772"><highlight class="normal">from<sp/>fcmaes<sp/>import<sp/>retry,<sp/>mode,<sp/>modecpp,<sp/>moretry,<sp/>mapelites,<sp/>diversifier</highlight></codeline>
<codeline lineno="773"><highlight class="normal">from<sp/>scipy.optimize<sp/>import<sp/>Bounds<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="774"><highlight class="normal">from<sp/>os<sp/>import<sp/>walk</highlight></codeline>
<codeline lineno="775"><highlight class="normal">import<sp/>multiprocessing<sp/>as<sp/>mp</highlight></codeline>
<codeline lineno="776"><highlight class="normal">import<sp/>ctypes<sp/>as<sp/>ct</highlight></codeline>
<codeline lineno="777"><highlight class="normal">from<sp/>functools<sp/>import<sp/>partial</highlight></codeline>
<codeline lineno="778"><highlight class="normal">from<sp/>fcmaes<sp/>import<sp/>bitecpp</highlight></codeline>
<codeline lineno="779"><highlight class="normal">from<sp/>multiprocessing<sp/>import<sp/>Manager</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal">udp<sp/>=<sp/>constellation_udp()<sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal">nobj<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="783" refid="namespacequantumcomm_1aea96ab455c15aa9c4d6284bb868ac44c" refkind="member"><highlight class="normal">ncon<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="784" refid="namespacequantumcomm_1ae6a7b0e3b3363799da193a937082152c" refkind="member"><highlight class="normal">dim<sp/>=<sp/>20</highlight></codeline>
<codeline lineno="785" refid="namespacequantumcomm_1a57cb5c03dd7f2016c85077510ec50fd4" refkind="member"><highlight class="normal">ref_point<sp/>=<sp/>np.array([1.2,<sp/>1.4])</highlight></codeline>
<codeline lineno="786" refid="namespacequantumcomm_1a38c14b3f964ffa67c7911f4e175f4784" refkind="member"><highlight class="normal">ubs<sp/>=<sp/>udp.get_bounds()</highlight></codeline>
<codeline lineno="787" refid="namespacequantumcomm_1ab5b2a2b68abc9d15c1406cad0842982f" refkind="member"><highlight class="normal">bounds<sp/>=<sp/>Bounds(ubs[0],<sp/>ubs[1])<sp/></highlight></codeline>
<codeline lineno="788" refid="namespacequantumcomm_1a7bea33c966401d0a25705d8371e83147" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="789" refid="namespacequantumcomm_1adaca5954b72a118a0abc3f3b1d9d56ac" refkind="member"><highlight class="normal">def<sp/>fitness(x):<sp/>#<sp/>fitness<sp/>wrapper<sp/>converting<sp/>the<sp/>last<sp/>ten<sp/>arguments<sp/>into<sp/>integer<sp/>values</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>x[10:]<sp/>=<sp/>x[10:].astype(int)</highlight></codeline>
<codeline lineno="791" refid="namespacequantumcomm_1af16dec207874c04d4e67e42e8832d851" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>np.array(udp.fitness(x))</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">def<sp/>select_valid(xs,<sp/>ys):</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>cv<sp/>=<sp/>np.array([np.amax(y[nobj:],<sp/>0)<sp/>for<sp/>y<sp/>in<sp/>ys])</highlight></codeline>
<codeline lineno="795" refid="namespacequantumcomm_1ac0164d14577f24455b1c4cfd24a7a9fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>(cv<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>ys.T[:nobj].T</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>ys[valid]</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>xs[valid]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>moretry.pareto(xs,<sp/>ys)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>xs,<sp/>ys</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal">def<sp/>read_solution(fname):</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>np.load(fname)<sp/>as<sp/>data:</highlight></codeline>
<codeline lineno="804" refid="namespacequantumcomm_1a8419b7d865cb04abb4a75ee8457a301c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>data[&apos;xs&apos;]</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>data[&apos;ys&apos;]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>xs,<sp/>ys</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">from<sp/>fcmaes.evaluator<sp/>import<sp/>parallel_mo</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">#+++++++<sp/>Apply<sp/>fcmaes<sp/>multi<sp/>objective<sp/>optimization<sp/>using<sp/>NSGA-II<sp/>population<sp/>update<sp/>++++++++++++++++++++++++</highlight></codeline>
<codeline lineno="811"><highlight class="normal">#<sp/>Uses<sp/>fcmaes<sp/>multi<sp/>objective<sp/>optimization<sp/>to<sp/>optimize<sp/>the<sp/>pareto<sp/>front</highlight></codeline>
<codeline lineno="812"><highlight class="normal">#<sp/>Uses<sp/>parallel<sp/>function<sp/>evaluation,<sp/>but<sp/>cannot<sp/>pass<sp/>score<sp/>6400<sp/>even<sp/>when<sp/>executed<sp/>many<sp/>times,<sp/></highlight></codeline>
<codeline lineno="813"><highlight class="normal">#<sp/>using<sp/>a<sp/>large<sp/>number<sp/>of<sp/>iterations<sp/>and<sp/>a<sp/>big<sp/>population.<sp/></highlight></codeline>
<codeline lineno="814"><highlight class="normal">#<sp/>Which<sp/>is<sp/>the<sp/>reason<sp/>only<sp/>one<sp/>team<sp/>-<sp/>&quot;ML<sp/>Actonauts&quot;<sp/>achieved<sp/>this<sp/>goal<sp/>during<sp/>the<sp/>GECCO<sp/>competition<sp/></highlight></codeline>
<codeline lineno="815"><highlight class="normal">#<sp/>https://www.esa.int/gsp/ACT/projects/spoc-2023/<sp/></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal">def<sp/>mo_par():</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="819" refid="namespacequantumcomm_1a84c6558e0b765a6d0b545850d3821a76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>guess<sp/>=<sp/>None</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>#guess,<sp/>_<sp/>=<sp/>read_solution(&quot;res/quantcomm_1_100_6372134.npz&quot;)<sp/>#<sp/>inject<sp/>an<sp/>existing<sp/>pareto<sp/>front<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>popsize<sp/>=<sp/>512</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>es<sp/>=<sp/>mode.MODE(nobj,<sp/>ncon,<sp/>bounds,<sp/>popsize<sp/>=<sp/>popsize,<sp/>nsga_update=True)<sp/>#<sp/>Python<sp/>MOO<sp/>optimizer</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>#es<sp/>=<sp/>modecpp.MODE_C(nobj,<sp/>ncon,<sp/>bounds,<sp/>popsize<sp/>=<sp/>popsize,<sp/>nsga_update=True)<sp/>#<sp/>C++<sp/>MOO<sp/>optimizer</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>fit<sp/>=<sp/>parallel_mo(fitness,<sp/>nobj+ncon,<sp/>workers<sp/>=<sp/>mp.cpu_count())</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>iters<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>max_hv<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>time_0<sp/>=<sp/>time.perf_counter()</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>not<sp/>guess<sp/>is<sp/>None:</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>es.set_guess(guess,<sp/>fitness)</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>stop<sp/>==<sp/>0<sp/>and<sp/>iters<sp/>&lt;<sp/>100000:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>es.ask()</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>fit(xs)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>es.tell(ys)<sp/>#<sp/>tell<sp/>evaluated<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iters<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>[y[:2]<sp/>for<sp/>y<sp/>in<sp/>ys<sp/>if<sp/>np.less_equal(y<sp/>,<sp/>np.array([1.2,<sp/>1.4,<sp/>0,<sp/>0])).all()]</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hv<sp/>=<sp/>pg.hypervolume(valid).compute(ref_point)</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>hv<sp/>&gt;<sp/>max_hv:</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_hv<sp/>=<sp/>hv</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>hv<sp/>&gt;<sp/>0.9999*max_hv:<sp/>#<sp/>show<sp/>stagnation</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f&apos;time:<sp/>{dtime(time_0)}<sp/>iter:<sp/>{iters}<sp/>hv:<sp/>{hv<sp/>*<sp/>10000}&apos;)</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.savez_compressed(&quot;quantcomm_&quot;<sp/>+<sp/>str(int(hv<sp/>*<sp/>1000000)),<sp/>xs=xs,<sp/>ys=ys)</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>fit.stop()</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>xs,<sp/>ys</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal">#+++++++<sp/>Apply<sp/>fcmaes<sp/>diversifier<sp/>quality<sp/>diversity<sp/>algorithm<sp/>++++++++++++++++++++++++</highlight></codeline>
<codeline lineno="850"><highlight class="normal">#<sp/>The<sp/>initial<sp/>archive<sp/>is<sp/>created<sp/>using<sp/>an<sp/>existing<sp/>pareto<sp/>front.<sp/>This<sp/>way<sp/>the<sp/>QD-algorithm</highlight></codeline>
<codeline lineno="851"><highlight class="normal">#<sp/>dosn&apos;t<sp/>need<sp/>to<sp/>find<sp/>this<sp/>&quot;hard<sp/>to<sp/>reach&quot;<sp/>area<sp/>of<sp/>the<sp/>solution<sp/>space<sp/>by<sp/>its<sp/>own.<sp/></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal">def<sp/>mo_to_qd(y):</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>f1,<sp/>f2,<sp/>c1,<sp/>c2<sp/>=<sp/>y</highlight></codeline>
<codeline lineno="855" refid="namespacequantumcomm_1a685f20cc5ab4536617a667be7981d7e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>weight<sp/>the<sp/>objectives<sp/>and<sp/>constraints</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>f1/0.5<sp/>+<sp/>f2/1.4<sp/>+<sp/>c1/3000<sp/>+<sp/>c2/50,<sp/>\</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.minimum(ref_point,<sp/>np.array([f1,<sp/>f2]))<sp/>#<sp/>use<sp/>the<sp/>objectives<sp/>as<sp/>descriptive<sp/>space</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal">def<sp/>qd_fun(x):</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>mo_to_qd(fitness(x))<sp/>#<sp/>convert<sp/>the<sp/>MO<sp/>result<sp/>into<sp/>a<sp/>QD<sp/>result</highlight></codeline>
<codeline lineno="861" refid="namespacequantumcomm_1a6b7a2382d55e8c0db17e1220d4cd7be3" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal">def<sp/>get_arch(qd_bounds,<sp/>niche_num,<sp/>samples_per_niche):</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>xs,<sp/>_<sp/>=<sp/>read_solution(&quot;res/quantcomm_1_100_6372134.npz&quot;)<sp/>#<sp/>inject<sp/>an<sp/>existing<sp/>pareto<sp/>front<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="864" refid="namespacequantumcomm_1a9179fbf0ec29e945c2af91b0202b0e99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>arch<sp/>=<sp/>mapelites.empty_archive(dim,<sp/>qd_bounds,<sp/>niche_num,<sp/>samples_per_niche)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>mapelites.update_archive(arch,<sp/>xs,<sp/>qd_fun)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>arch</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal">def<sp/>nd_par(niche_num<sp/>=<sp/>10000):</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>udp<sp/>=<sp/>constellation_udp()</highlight></codeline>
<codeline lineno="870" refid="namespacequantumcomm_1a7b02c8bc9af9b7e849783b5a8cbfc014" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ubs<sp/>=<sp/>udp.get_bounds()</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>qd_bounds<sp/>=<sp/>Bounds([0.7,<sp/>0.],<sp/>[1.2,<sp/>1.4])</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>samples_per_niche<sp/>=<sp/>20</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>arch<sp/>=<sp/>get_arch(qd_bounds,<sp/>niche_num,<sp/>samples_per_niche)</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>opt_params0<sp/>=<sp/>{&apos;solver&apos;:&apos;elites&apos;,<sp/>&apos;popsize&apos;:100,<sp/>&apos;use&apos;:2}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>opt_params1<sp/>=<sp/>{&apos;solver&apos;:&apos;CRMFNES_CPP&apos;,<sp/>&apos;max_evals&apos;:2000,<sp/>&apos;popsize&apos;:32,<sp/>&apos;stall_criterion&apos;:3}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>archive<sp/>=<sp/>diversifier.minimize(</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapelites.wrapper(qd_fun,<sp/>2,<sp/>interval=10000,<sp/>save_interval=100000),</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds,<sp/>qd_bounds,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers<sp/>=<sp/>32,<sp/>opt_params=[opt_params0,<sp/>opt_params1],<sp/>archive<sp/>=<sp/>arch,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>niche_num<sp/>=<sp/>niche_num,<sp/>samples_per_niche<sp/>=<sp/>samples_per_niche,</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_evals<sp/>=<sp/>1000000)</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>print(&apos;final<sp/>archive:&apos;,<sp/>archive.info())</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>archive.save(&apos;final<sp/>archive&apos;)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="887"><highlight class="normal">#++++++++++++++++++++++<sp/>Apply<sp/>BiteOpt<sp/>Single-Objective<sp/>Optimization<sp/>++++++++++++++++++++++++++++++++++++++++</highlight></codeline>
<codeline lineno="888"><highlight class="normal">#<sp/>Uses<sp/>https://github.com/avaneev/biteopt<sp/>applied<sp/>to<sp/>a<sp/>fitness<sp/>function<sp/>maximizing<sp/>the<sp/>hypervolume</highlight></codeline>
<codeline lineno="889"><highlight class="normal">#<sp/>to<sp/>find<sp/>the<sp/>best<sp/>target_num<sp/>solutions<sp/>maximizing<sp/>the<sp/>pareto<sp/>front</highlight></codeline>
<codeline lineno="890"><highlight class="normal">#<sp/>Easily<sp/>surpasses<sp/>score<sp/>6400<sp/>when<sp/>given<sp/>enough<sp/>time.<sp/>The<sp/>final<sp/>result<sp/>needs<sp/>to<sp/>be<sp/>reduced<sp/>to<sp/>100<sp/>solutions.<sp/></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal">def<sp/>so_par():</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894" refid="namespacequantumcomm_1aeb3856600fe5caa9eff67e2ebb6f269a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>target_num<sp/>=<sp/>512<sp/>#<sp/>desired<sp/>size<sp/>of<sp/>the<sp/>pareto<sp/>front<sp/><sp/></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>hypervolume<sp/>replacing<sp/>one<sp/>solution<sp/>of<sp/>the<sp/>pareto<sp/>front<sp/><sp/></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>fit_hyper(i,<sp/>ys,<sp/>x):</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>fitness(x)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>sum([10000<sp/>+<sp/>c<sp/>for<sp/>c<sp/>in<sp/>y[2:]<sp/>if<sp/>c<sp/>&gt;<sp/>0])</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>c<sp/>&gt;<sp/>0:<sp/>#<sp/>constraint<sp/>violation</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>c</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>pg.pareto_dominance(y[:2],<sp/>ref_point):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys[i]<sp/>=<sp/>y[:2]</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-pg.hypervolume(ys).compute(ref_point)<sp/>*<sp/>10000<sp/><sp/></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>parallel<sp/>optimization<sp/>of<sp/>the<sp/>whole<sp/>pareto<sp/>front<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>OptSo(object):</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_evals,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs,</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):<sp/></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.max_evals<sp/>=<sp/>max_evals<sp/><sp/></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.manager<sp/>=<sp/>Manager()<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="918" refid="namespacequantumcomm_1a4ae96be5bf50bd2b7bdbf8077fcbf992" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ys<sp/>=<sp/>self.manager.list(ys)</highlight></codeline>
<codeline lineno="919" refid="namespacequantumcomm_1a10d52de9364caed740ad48fe34ecc151" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ys0<sp/>=<sp/>list(ys)</highlight></codeline>
<codeline lineno="920" refid="namespacequantumcomm_1afa433f406099fb18e0906c1ca5fc7918" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xs<sp/>=<sp/>self.manager.list(xs)</highlight></codeline>
<codeline lineno="921" refid="namespacequantumcomm_1a3e2a162310a02aff9e3e2129cfceaa2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.min_ys<sp/>=<sp/>np.amin(ys,<sp/>axis=0)</highlight></codeline>
<codeline lineno="922" refid="namespacequantumcomm_1a009bae3131bf4f32ab41813e095bd545" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.count<sp/>=<sp/>mp.RawValue(ct.c_int,<sp/>0)<sp/></highlight></codeline>
<codeline lineno="923" refid="namespacequantumcomm_1a4df7798fa72740ab9b5adcadca862f58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mutex<sp/>=<sp/>mp.Lock()<sp/></highlight></codeline>
<codeline lineno="924" refid="namespacequantumcomm_1a5b2fa9d0041f90fcf0b912c6de25020a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.n<sp/>=<sp/>len(ys)</highlight></codeline>
<codeline lineno="925" refid="namespacequantumcomm_1a3a28fa8296e887be274b151c8429b985" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="926" refid="namespacequantumcomm_1ae18efb9ddb56b08da17e0a6c224e48fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>incr(self):</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>self.mutex:</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>self.count.value</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.count.value<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>next</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>eval(self,<sp/>workers=mp.cpu_count()):</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc=[mp.Process(target=self.eval_loop)<sp/>for<sp/>pid<sp/>in<sp/>range(workers)]</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[p.start()<sp/>for<sp/>p<sp/>in<sp/>proc]</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[p.join()<sp/>for<sp/>p<sp/>in<sp/>proc]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>np.array(self.xs),<sp/>np.array(self.ys)</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>eval_loop(self):</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>True:</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>self.incr()</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>i<sp/>&gt;=<sp/>self.n:</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f&apos;optimizing<sp/>solution<sp/>{i}&apos;)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fit<sp/>=<sp/>wrapper(partial(fit_hyper,<sp/>i,<sp/>list(self.ys)))</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>self.xs[i]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bitecpp.minimize(fit,<sp/>bounds,<sp/>x0,<sp/>max_evaluations<sp/>=<sp/>self.max_evals)</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>ret.fun<sp/>&lt;<sp/>0:<sp/>#<sp/>no<sp/>constraint<sp/>violation?</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>fitness(ret.x)[:2]</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ys[i]<sp/>=<sp/>y</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xs[i]<sp/>=<sp/>ret.x</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>opt_so(max_evals,<sp/>xs,<sp/>ys,<sp/>workers=mp.cpu_count()):</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eval<sp/>=<sp/>OptSo(max_evals,<sp/>xs,<sp/>ys)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>eval.eval(workers)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>max_evals<sp/>=<sp/>2000<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>random<sp/>initialization</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>rg<sp/>=<sp/>Generator(MT19937())<sp/></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>xs<sp/>=<sp/>[rg.uniform(ubs[0],<sp/>ubs[1])<sp/>for<sp/>_<sp/>in<sp/>range(target_num)]</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>ys<sp/>=<sp/>[ref_point-0.000001<sp/>for<sp/>_<sp/>in<sp/>range(target_num)]</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>initialization<sp/>with<sp/>a<sp/>given<sp/>pareto<sp/>front<sp/></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>read_solution(&quot;res/quantcomm_1_100_6372134.npz&quot;)<sp/>#<sp/>inject<sp/>an<sp/>existing<sp/>pareto<sp/>front</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>last_xs<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>last_ys<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(1,<sp/>1000):</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>opt_so(max_evals,<sp/>xs,<sp/>ys)</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>moretry.pareto(np.array(list(xs)<sp/>+<sp/>last_xs),<sp/></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.array(list(ys)<sp/>+<sp/>last_ys))</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(ys)<sp/>&gt;<sp/>target_num:</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>reduce(xs,<sp/>ys,<sp/>target_num)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hv<sp/>=<sp/>int(pg.hypervolume(ys).compute(ref_point)<sp/>*<sp/>10000000)<sp/><sp/></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.savez_compressed(&quot;quantcomm_&quot;<sp/>+<sp/>str(i)<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>str(len(ys))<sp/>+<sp/>&quot;_&quot;<sp/></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>str(max_evals)<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>str(hv),<sp/>xs=xs,<sp/>ys=ys)</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_xs<sp/>=<sp/>list(xs)</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_ys<sp/>=<sp/>list(ys)</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>xs</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal">#++++++++++++++++++++++<sp/>Apply<sp/>PYMOO<sp/>NSGA-II<sp/>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</highlight></codeline>
<codeline lineno="985"><highlight class="normal">#<sp/>Uses<sp/>PYMOO<sp/>and<sp/>https://github.com/avaneev/biteopt<sp/>to<sp/>find<sp/>the<sp/>best<sp/>target_num<sp/>solutions</highlight></codeline>
<codeline lineno="986"><highlight class="normal">#<sp/>maximizing<sp/>the<sp/>pareto<sp/>front.</highlight></codeline>
<codeline lineno="987"><highlight class="normal">#<sp/>Easily<sp/>surpasses<sp/>score<sp/>6400<sp/>when<sp/>given<sp/>enough<sp/>time.<sp/>The<sp/>result<sp/>is<sp/>already<sp/>reduced<sp/>to<sp/>100<sp/>solutions.<sp/></highlight></codeline>
<codeline lineno="988"><highlight class="normal">#<sp/>Note<sp/>that<sp/>instead<sp/>of<sp/>relying<sp/>on<sp/>PYMOOs<sp/>parallelization<sp/>mechanisms<sp/>(partial)<sp/>optimization<sp/>runs</highlight></codeline>
<codeline lineno="989"><highlight class="normal">#<sp/>are<sp/>executed<sp/>in<sp/>parallel<sp/>achieving<sp/>maximal<sp/>scaling<sp/>with<sp/>the<sp/>number<sp/>of<sp/>cores.<sp/></highlight></codeline>
<codeline lineno="990"><highlight class="normal">#<sp/>The<sp/>fitness<sp/>function<sp/>is<sp/>&quot;hijacked&quot;<sp/>collecting<sp/>solutions<sp/>later<sp/>joined<sp/>for<sp/>the<sp/>resulting<sp/>pareto<sp/>front.</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal">def<sp/>pymoo_par():</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994" refid="namespacequantumcomm_1a1b51de779f54455f301b965bca17467c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>pymoo.core.problem<sp/>import<sp/>ElementwiseProblem<sp/></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>pymoo.algorithms.moo.nsga2<sp/>import<sp/>NSGA2<sp/></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>pymoo.termination<sp/>import<sp/>get_termination</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>pymoo.operators.crossover.sbx<sp/>import<sp/>SBX</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>pymoo.operators.mutation.pm<sp/>import<sp/>PM</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>pymoo.operators.sampling.rnd<sp/>import<sp/>FloatRandomSampling</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>pymoo.constraints.eps<sp/>import<sp/>AdaptiveEpsilonConstraintHandling</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>pymoo.optimize<sp/>import<sp/>minimize</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>itertools<sp/>import<sp/>chain</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>target_num<sp/>=<sp/>100<sp/>#<sp/>desired<sp/>size<sp/>of<sp/>the<sp/>pareto<sp/>front<sp/></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>n_eval<sp/>=<sp/>10000</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>popsize<sp/>=<sp/>300</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>time_0<sp/>=<sp/>time.perf_counter()</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>guess<sp/>=<sp/>None</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>guess,<sp/>ys<sp/>=<sp/>read_solution(&quot;res/quantcomm_1_100_6372134.npz&quot;)<sp/>#<sp/>inject<sp/>an<sp/>existing<sp/>pareto<sp/>front</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>guess,<sp/>ys<sp/>=<sp/>reduce(guess,<sp/>ys,<sp/>target_num)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>fitness_wrapper():</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs_out,</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys_out</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):<sp/></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.max_hv<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xs<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1021" refid="namespacequantumcomm_1aad80073dce041cbb8ad4b99c5d39fc74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ys<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.count<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.evals<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.pid<sp/>=<sp/>pid</highlight></codeline>
<codeline lineno="1025" refid="namespacequantumcomm_1ae07ba0a2eed2514d1829c083ea9828b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xs_out<sp/>=<sp/>xs_out</highlight></codeline>
<codeline lineno="1026" refid="namespacequantumcomm_1a894d47aede87908d7383da852279e601" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ys_out<sp/>=<sp/>ys_out</highlight></codeline>
<codeline lineno="1027" refid="namespacequantumcomm_1acf793ce9680502af168bcaa54d2b161b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1028" refid="namespacequantumcomm_1acb604547ddffa821c69c8ccbec065d4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>fitness<sp/>accumulates<sp/>valid<sp/>solutions<sp/>and<sp/>monitors<sp/>their<sp/>hypervolume</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>__call__(self,<sp/>x):</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>fitness(x)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.evals<sp/>+=<sp/>1<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>np.amax(y[2:])<sp/>&lt;=<sp/>0<sp/>and<sp/>np.less_equal(y[:2],<sp/>ref_point).all()<sp/>:<sp/>#<sp/>add<sp/>only<sp/>valid<sp/>solutions</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ys.append(y[:2])<sp/>#<sp/>exclude<sp/>constraint<sp/>values<sp/>because<sp/>solution<sp/>is<sp/>valid</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xs.append(x)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(self.ys)<sp/>&gt;=<sp/>2*popsize:</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.count<sp/>+=<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>moretry.pareto(np.array(self.xs),<sp/>np.array(self.ys))<sp/>#<sp/>reduce<sp/>to<sp/>pareto<sp/>front</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xs,<sp/>self.ys<sp/>=<sp/>list(xs),<sp/>list(ys)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hv<sp/>=<sp/>pg.hypervolume(self.ys).compute(ref_point)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>hv<sp/>&gt;<sp/>self.max_hv<sp/>*<sp/>1.0001:<sp/>#<sp/>significant<sp/>improvement:<sp/>register<sp/>solutions<sp/>at<sp/>managed<sp/>dicts</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.max_hv<sp/>=<sp/>hv</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xs_out[self.pid]<sp/>=<sp/>self.xs</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ys_out[self.pid]<sp/>=<sp/>self.ys</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(f&apos;time:<sp/>{dtime(time_0)}<sp/>ev:<sp/>{self.evals}<sp/>hv:<sp/>{hv<sp/>*<sp/>10000}<sp/>n:<sp/>{len(ys)}&apos;)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>y<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>OptPymoo(object):</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>eval_loop(self,<sp/>workers=mp.cpu_count()):</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>guess</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(1,<sp/>1000):</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>self.eval(i,<sp/>xs,<sp/>workers)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>xs,<sp/>ys</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>eval(self,<sp/>i,<sp/>guess,<sp/>workers):</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>manager<sp/>=<sp/>Manager()</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs_out<sp/>=<sp/>manager.dict()<sp/>#<sp/>for<sp/>inter<sp/>process<sp/>communication</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys_out<sp/>=<sp/>manager.dict()<sp/>#<sp/>collects<sp/>solutions<sp/>generated<sp/>in<sp/>the<sp/>sub<sp/>processes</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fits<sp/>=<sp/>[fitness_wrapper(pid,<sp/>xs_out,<sp/>ys_out)<sp/>for<sp/>pid<sp/>in<sp/>range(workers)]</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc=[mp.Process(target=self.optimize,<sp/>args=(guess,<sp/>fits[pid],<sp/>pid))<sp/>for<sp/>pid<sp/>in<sp/>range(workers)]</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[p.start()<sp/>for<sp/>p<sp/>in<sp/>proc]<sp/>#<sp/>spawn<sp/>NSGAII<sp/>optimization<sp/>workers</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[p.join()<sp/>for<sp/>p<sp/>in<sp/>proc]<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>np.array(list(chain.from_iterable(xs_out.values())))<sp/>#<sp/>join<sp/>collected<sp/>solutions</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>np.array(list(chain.from_iterable(ys_out.values())))<sp/>#<sp/>we<sp/>ignore<sp/>the<sp/>pymoo<sp/>optimization<sp/>result</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>moretry.pareto(xs,<sp/>ys)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(ys)<sp/>&gt;<sp/>target_num:</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>reduce(xs,<sp/>ys,<sp/>target_num)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hv<sp/>=<sp/>int(pg.hypervolume(ys).compute(ref_point)<sp/>*<sp/>10000000)<sp/><sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np.savez_compressed(&quot;quantcomm_&quot;<sp/>+<sp/>str(i)<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>str(len(ys))<sp/>+<sp/></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;_&quot;<sp/>+<sp/>str(hv),<sp/>xs=xs,<sp/>ys=ys)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>xs,<sp/>ys</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>optimize(self,<sp/>guess,<sp/>fit,<sp/>pid):</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class<sp/>MyProblem(ElementwiseProblem):</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/>**kwargs):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super().__init__(n_var=dim,</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_obj=nobj,</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_constr=ncon,</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xl=np.array(bounds.lb),</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xu=np.array(bounds.ub),<sp/>**kwargs)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>_evaluate(self,<sp/>x,<sp/>out,<sp/>*args,<sp/>**kwargs):<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>fit(x)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[&quot;F&quot;]<sp/>=<sp/>y[:nobj]</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[&quot;G&quot;]<sp/>=<sp/>y[nobj:]</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>problem<sp/>=<sp/>MyProblem()</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algorithm<sp/>=<sp/>NSGA2(</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pop_size=popsize,</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_offsprings=10,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampling=FloatRandomSampling()<sp/>if<sp/>guess<sp/>is<sp/>None<sp/>else<sp/>guess,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crossover=SBX(prob=0.9,<sp/>eta=15),<sp/>#<sp/>simulated<sp/>binary<sp/>crossover</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutation=PM(eta=20),<sp/>#<sp/>polynomial<sp/>mutation<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eliminate_duplicates=True,</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algorithm<sp/>=<sp/>AdaptiveEpsilonConstraintHandling(algorithm,<sp/>perc_eps_until=0.5)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minimize(problem,<sp/>algorithm,<sp/>get_termination(&quot;n_eval&quot;,<sp/>n_eval),<sp/>verbose=False,<sp/>seed=pid*677)</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>opt<sp/>=<sp/>OptPymoo()</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>opt.eval_loop()</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal">#++++++++++++++++++++++<sp/>Reduction<sp/>to<sp/>100<sp/>solutions<sp/>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">#<sp/>Uses<sp/>https://github.com/avaneev/biteopt<sp/>/<sp/>parallel<sp/>optimization<sp/>to<sp/>find<sp/>the<sp/>best<sp/>num<sp/>solutions</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">#<sp/>maximizing<sp/>the<sp/>pareto<sp/>front</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1108"><highlight class="normal">def<sp/>reduce(xs,<sp/>ys,<sp/>num,<sp/>evals<sp/>=<sp/>50000,<sp/>retries<sp/>=<sp/>mp.cpu_count()):<sp/></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>len(ys)<sp/>&lt;=<sp/>num:</highlight></codeline>
<codeline lineno="1110" refid="namespacequantumcomm_1a29b16ceed23f94c44a426cf51cb2670d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>xs,<sp/>ys</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>Bounds([0]*num,<sp/>[len(ys)-1E-9]*num)<sp/>#<sp/>select<sp/>best<sp/>num<sp/>from<sp/>xs,<sp/>ys</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>fit(x):<sp/>#<sp/>selects<sp/>100<sp/>solutions<sp/>and<sp/>returns<sp/>the<sp/>negated<sp/>pareto<sp/>front<sp/>of<sp/>this<sp/>selection</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selected<sp/>=<sp/>x.astype(int)<sp/></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys_sel<sp/>=<sp/>ys[selected]<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hv<sp/>=<sp/>pg.hypervolume(ys_sel)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-hv.compute(ref_point)<sp/>*<sp/>10000</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>fcmaes.retry.minimize(wrapper(fit),<sp/>#<sp/>parallel<sp/>optimization<sp/>restart<sp/>/<sp/>retry</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds,<sp/></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer=Bite_cpp(evals),<sp/></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retries=retries)</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>selected<sp/>=<sp/>res.x.astype(int)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>xs[selected],<sp/>ys[selected]</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1127"><highlight class="normal">if<sp/>__name__<sp/>==<sp/>&apos;__main__&apos;:</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>#pymoo_par()</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>#so_par()<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>mo_par()</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>#nd_par()</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="examples/esa2/quantumcomm.py"/>
  </compounddef>
</doxygen>
