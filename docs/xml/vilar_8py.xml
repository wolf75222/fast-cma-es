<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="vilar_8py" kind="file" language="Python">
    <compoundname>vilar.py</compoundname>
    <innerclass refid="classexamples_1_1vilar_1_1_vilar_oscillator" prot="public">examples::vilar::VilarOscillator</innerclass>
    <innernamespace refid="namespaceexamples">examples</innernamespace>
    <innernamespace refid="namespaceexamples_1_1vilar">examples::vilar</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceexamples_1_1vilar_1a305c44f72c09ab8c4241ce1a3e496bd7" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::vilar.stdout</definition>
        <argsstring></argsstring>
        <name>stdout</name>
        <qualifiedname>examples.vilar.stdout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="29" column="1" bodyfile="examples/vilar.py" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1vilar_1aad73b7db1620620898ced5c06b28f735" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::vilar.format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <qualifiedname>examples.vilar.format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="29" column="1" bodyfile="examples/vilar.py" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1vilar_1a0a8bfe6ebbcb0fed7f3ad380231cc7b9" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::vilar.level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <qualifiedname>examples.vilar.level</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="29" column="1" bodyfile="examples/vilar.py" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1vilar_1af83d5ed6a2595273703d4fb8c81639e9" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::vilar.bounds</definition>
        <argsstring></argsstring>
        <name>bounds</name>
        <qualifiedname>examples.vilar.bounds</qualifiedname>
        <initializer>=  get_bounds(VilarOscillator(), 100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="115" column="1" bodyfile="examples/vilar.py" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1vilar_1a457693183463e22e50c189f101ba34b9" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::vilar.dim</definition>
        <argsstring></argsstring>
        <name>dim</name>
        <qualifiedname>examples.vilar.dim</qualifiedname>
        <initializer>=  len(self.bounds.ub)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="116" column="1" bodyfile="examples/vilar.py" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1vilar_1af1105e84bbb60a73eac7d2d069ecc277" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::vilar.qd_bounds</definition>
        <argsstring></argsstring>
        <name>qd_bounds</name>
        <qualifiedname>examples.vilar.qd_bounds</qualifiedname>
        <initializer>=  Bounds([0, 30, .035], [3, 300, .050])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="172" column="1" bodyfile="examples/vilar.py" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1vilar_1a041f65838a6fa4cb34cab04427474409" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int examples::vilar.qd_dim</definition>
        <argsstring></argsstring>
        <name>qd_dim</name>
        <qualifiedname>examples.vilar.qd_dim</qualifiedname>
        <initializer>=  3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="173" column="1" bodyfile="examples/vilar.py" bodystart="173" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.vilar.get_bounds</definition>
        <argsstring>(model, scale)</argsstring>
        <name>get_bounds</name>
        <qualifiedname>examples.vilar.get_bounds</qualifiedname>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>scale</type>
          <defname>scale</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="95" column="1" bodyfile="examples/vilar.py" bodystart="95" bodyend="102"/>
        <referencedby refid="namespaceexamples_1_1vilar_1aa344a3b9ba46bca39ce6fa792ed087fe" compoundref="vilar_8py" startline="166" endline="204">examples.vilar.run_diversifier</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1vilar_1afe27928528b9221976a31a064e46d2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.vilar.set_params</definition>
        <argsstring>(model, x)</argsstring>
        <name>set_params</name>
        <qualifiedname>examples.vilar.set_params</qualifiedname>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>x</type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="103" column="1" bodyfile="examples/vilar.py" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1vilar_1a406bfa725b5b16f4bf940f31d8e95ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.vilar.sweep_params</definition>
        <argsstring>()</argsstring>
        <name>sweep_params</name>
        <qualifiedname>examples.vilar.sweep_params</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="107" column="1" bodyfile="examples/vilar.py" bodystart="107" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1vilar_1aa344a3b9ba46bca39ce6fa792ed087fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.vilar.run_diversifier</definition>
        <argsstring>()</argsstring>
        <name>run_diversifier</name>
        <qualifiedname>examples.vilar.run_diversifier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="166" column="1" bodyfile="examples/vilar.py" bodystart="166" bodyend="204"/>
        <references refid="namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf" compoundref="vilar_8py" startline="95" endline="102">examples.vilar.get_bounds</references>
        <referencedby refid="namespaceexamples_1_1vilar_1a6e6d663720ddae410f7f5f2db391cc23" compoundref="vilar_8py" startline="205" endline="221">examples.vilar.plot_archive</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1vilar_1a6e6d663720ddae410f7f5f2db391cc23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.vilar.plot_archive</definition>
        <argsstring>(archive)</argsstring>
        <name>plot_archive</name>
        <qualifiedname>examples.vilar.plot_archive</qualifiedname>
        <param>
          <type>archive</type>
          <defname>archive</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/vilar.py" line="205" column="1" bodyfile="examples/vilar.py" bodystart="205" bodyend="221"/>
        <references refid="namespaceexamples_1_1vilar_1aa344a3b9ba46bca39ce6fa792ed087fe" compoundref="vilar_8py" startline="166" endline="204">examples.vilar.run_diversifier</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceexamples_1_1vilar" refkind="compound"><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Derived<sp/>from<sp/></highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">https://github.com/StochSS/GillesPy2/blob/main/examples/StartingModels/VilarOscillator/VilarOscillator.py</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">Optimization<sp/>driven<sp/>parameter<sp/>sweeping</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">do<sp/>&apos;python3<sp/>-m<sp/>pip<sp/>install<sp/>gillespy2<sp/>--user<sp/>--upgrade&apos;<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">before<sp/>running<sp/>this<sp/>example</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">See<sp/>https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Sweep.adoc<sp/>for<sp/>a<sp/>detailed<sp/>description.</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral">See<sp/>also<sp/>https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Diversity.adoc</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Tested<sp/>using<sp/>https://docs.conda.io/en/main/miniconda.html<sp/>on<sp/>Linux<sp/>Mint<sp/>21.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>gillespy2</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy.signal<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>argrelextrema</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>fcmaes<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>mode,<sp/><sp/>moretry</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy.optimize<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Bounds</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>matplotlib.pyplot<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>plt<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>multiprocessing<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>mp</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>matplotlib.pyplot<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>plt</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>loguru<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">logger.remove()</highlight></codeline>
<codeline lineno="29" refid="namespaceexamples_1_1vilar_1aad73b7db1620620898ced5c06b28f735" refkind="member"><highlight class="normal">logger.add(sys.stdout,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">logger.add(</highlight><highlight class="stringliteral">&quot;log_{time}.txt&quot;</highlight><highlight class="normal">,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classexamples_1_1vilar_1_1_vilar_oscillator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1vilar_1_1_vilar_oscillator" kindref="compound">VilarOscillator</ref>(gillespy2.Model):</highlight></codeline>
<codeline lineno="33" refid="classexamples_1_1vilar_1_1_vilar_oscillator_1a16955e8171bdf642ba294cbdb889a922" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1vilar_1_1_vilar_oscillator_1a16955e8171bdf642ba294cbdb889a922" kindref="member">__init__</ref>(self,<sp/>parameter_values=None):</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gillespy2.Model.__init__(self,<sp/>name=</highlight><highlight class="stringliteral">&quot;VilarOscillator&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="35" refid="classexamples_1_1vilar_1_1_vilar_oscillator_1af1285c9a655de3f27743c45e764e1cd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classexamples_1_1vilar_1_1_vilar_oscillator_1af1285c9a655de3f27743c45e764e1cd9" kindref="member">volume</ref><sp/>=<sp/>1</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alphaA<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;alphaA&quot;</highlight><highlight class="normal">,<sp/>expression=50)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alphaA_prime<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;alphaA_prime&quot;</highlight><highlight class="normal">,<sp/>expression=500)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alphaR<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;alphaR&quot;</highlight><highlight class="normal">,<sp/>expression=0.01)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alphaR_prime<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;alphaR_prime&quot;</highlight><highlight class="normal">,<sp/>expression=50)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>betaA<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;betaA&quot;</highlight><highlight class="normal">,<sp/>expression=50)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>betaR<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;betaR&quot;</highlight><highlight class="normal">,<sp/>expression=5)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaMA<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;deltaMA&quot;</highlight><highlight class="normal">,<sp/>expression=10)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaMR<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;deltaMR&quot;</highlight><highlight class="normal">,<sp/>expression=0.5)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaA<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;deltaA&quot;</highlight><highlight class="normal">,<sp/>expression=1)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaR<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;deltaR&quot;</highlight><highlight class="normal">,<sp/>expression=0.2)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gammaA<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;gammaA&quot;</highlight><highlight class="normal">,<sp/>expression=1)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gammaR<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;gammaR&quot;</highlight><highlight class="normal">,<sp/>expression=1)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gammaC<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;gammaC&quot;</highlight><highlight class="normal">,<sp/>expression=2)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thetaA<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;thetaA&quot;</highlight><highlight class="normal">,<sp/>expression=50)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thetaR<sp/>=<sp/>gillespy2.Parameter(name=</highlight><highlight class="stringliteral">&quot;thetaR&quot;</highlight><highlight class="normal">,<sp/>expression=100)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add_parameter([alphaA,<sp/>alphaA_prime,<sp/>alphaR,<sp/>alphaR_prime,<sp/>betaA,<sp/>betaR,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaMA,<sp/>deltaMR,<sp/>deltaA,<sp/>deltaR,<sp/>gammaA,<sp/>gammaR,<sp/>gammaC,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thetaA,<sp/>thetaR])</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Species</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Da<sp/>=<sp/>gillespy2.Species(name=</highlight><highlight class="stringliteral">&quot;Da&quot;</highlight><highlight class="normal">,<sp/>initial_value=1,<sp/>mode=</highlight><highlight class="stringliteral">&quot;discrete&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Da_prime<sp/>=<sp/>gillespy2.Species(name=</highlight><highlight class="stringliteral">&quot;Da_prime&quot;</highlight><highlight class="normal">,<sp/>initial_value=0,<sp/>mode=</highlight><highlight class="stringliteral">&quot;discrete&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ma<sp/>=<sp/>gillespy2.Species(name=</highlight><highlight class="stringliteral">&quot;Ma&quot;</highlight><highlight class="normal">,<sp/>initial_value=0,<sp/>mode=</highlight><highlight class="stringliteral">&quot;discrete&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dr<sp/>=<sp/>gillespy2.Species(name=</highlight><highlight class="stringliteral">&quot;Dr&quot;</highlight><highlight class="normal">,<sp/>initial_value=1,<sp/>mode=</highlight><highlight class="stringliteral">&quot;discrete&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dr_prime<sp/>=<sp/>gillespy2.Species(name=</highlight><highlight class="stringliteral">&quot;Dr_prime&quot;</highlight><highlight class="normal">,<sp/>initial_value=0,<sp/>mode=</highlight><highlight class="stringliteral">&quot;discrete&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mr<sp/>=<sp/>gillespy2.Species(name=</highlight><highlight class="stringliteral">&quot;Mr&quot;</highlight><highlight class="normal">,<sp/>initial_value=0,<sp/>mode=</highlight><highlight class="stringliteral">&quot;discrete&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>=<sp/>gillespy2.Species(name=</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">,<sp/>initial_value=0,<sp/>mode=</highlight><highlight class="stringliteral">&quot;discrete&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>gillespy2.Species(name=</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/>initial_value=0,<sp/>mode=</highlight><highlight class="stringliteral">&quot;discrete&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>=<sp/>gillespy2.Species(name=</highlight><highlight class="stringliteral">&quot;R&quot;</highlight><highlight class="normal">,<sp/>initial_value=0,<sp/>mode=</highlight><highlight class="stringliteral">&quot;discrete&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add_species([Da,<sp/>Da_prime,<sp/>Ma,<sp/>Dr,<sp/>Dr_prime,<sp/>Mr,<sp/>C,<sp/>A,<sp/>R])</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r1&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;A&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;R&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;C&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;gammaC&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r2<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r2&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;A&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={},<sp/>rate=</highlight><highlight class="stringliteral">&quot;deltaA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r3<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r3&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;C&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;R&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;deltaA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r4<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r4&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;R&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={},<sp/>rate=</highlight><highlight class="stringliteral">&quot;deltaR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r5<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r5&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;A&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;Da&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;Da_prime&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;gammaA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r6<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r6&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Da_prime&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;A&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;Da&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;thetaA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r7<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r7&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Da&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;Da&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;Ma&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;alphaA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r8<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r8&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Da_prime&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;Da_prime&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;Ma&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;alphaA_prime&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r9<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r9&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Ma&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={},<sp/>rate=</highlight><highlight class="stringliteral">&quot;deltaMA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r10<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r10&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Ma&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;A&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;Ma&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;betaA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r11<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r11&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;A&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;Dr&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;Dr_prime&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;gammaR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r12<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r12&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Dr_prime&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;A&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;Dr&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;thetaR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r13<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r13&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Dr&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;Dr&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;Mr&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;alphaR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r14<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r14&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Dr_prime&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;Dr_prime&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;Mr&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;alphaR_prime&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r15<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r15&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Mr&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={},<sp/>rate=</highlight><highlight class="stringliteral">&quot;deltaMR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r16<sp/>=<sp/>gillespy2.Reaction(name=</highlight><highlight class="stringliteral">&quot;r16&quot;</highlight><highlight class="normal">,<sp/>reactants={</highlight><highlight class="stringliteral">&apos;Mr&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>products={</highlight><highlight class="stringliteral">&apos;Mr&apos;</highlight><highlight class="normal">:<sp/>1,<sp/></highlight><highlight class="stringliteral">&apos;R&apos;</highlight><highlight class="normal">:<sp/>1},<sp/>rate=</highlight><highlight class="stringliteral">&quot;betaR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add_reaction([r1,<sp/>r2,<sp/>r3,<sp/>r4,<sp/>r5,<sp/>r6,<sp/>r7,<sp/>r8,<sp/>r9,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r10,<sp/>r11,<sp/>r12,<sp/>r13,<sp/>r14,<sp/>r15,<sp/>r16])</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Timespan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.timespan(np.linspace(0,400,401))</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf" kindref="member">get_bounds</ref>(model,<sp/>scale):</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>lower<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>_,<sp/>param<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>model.listOfParameters.items():</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower.append(param.value/scale)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upper.append(param.value*scale)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Bounds(lower,<sp/>upper)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="namespaceexamples_1_1vilar_1afe27928528b9221976a31a064e46d2df" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1vilar_1afe27928528b9221976a31a064e46d2df" kindref="member">set_params</ref>(model,<sp/>x):</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>(_,<sp/>param)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(model.listOfParameters.items()):</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.value<sp/>=<sp/>x[i]</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107" refid="namespaceexamples_1_1vilar_1a406bfa725b5b16f4bf940f31d8e95ff0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1vilar_1a406bfa725b5b16f4bf940f31d8e95ff0" kindref="member">sweep_params</ref>():</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>multi<sp/>processing<sp/>result<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>results<sp/>=<sp/>mp.Manager().list()<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">fcmaes_problem():</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="115" refid="namespaceexamples_1_1vilar_1af83d5ed6a2595273703d4fb8c81639e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bounds<sp/>=<sp/><ref refid="namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf" kindref="member">get_bounds</ref>(<ref refid="classexamples_1_1vilar_1_1_vilar_oscillator" kindref="compound">VilarOscillator</ref>(),<sp/>100)</highlight></codeline>
<codeline lineno="116" refid="namespaceexamples_1_1vilar_1a457693183463e22e50c189f101ba34b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dim<sp/>=<sp/>len(self.bounds.ub)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">fitness(self,<sp/>x):</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/><ref refid="classexamples_1_1vilar_1_1_vilar_oscillator" kindref="compound">VilarOscillator</ref>()</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1vilar_1afe27928528b9221976a31a064e46d2df" kindref="member">set_params</ref>(model,<sp/>x)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>model.run(algorithm<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SSA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>store<sp/>params,<sp/>result<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.append((x,<sp/>res))</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>=<sp/>res[</highlight><highlight class="stringliteral">&apos;R&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="comment">#<sp/>time<sp/>series<sp/>for<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_mean<sp/>=<sp/>np.mean(R)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_over<sp/>=<sp/>np.array(np.fromiter((r<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>r<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>R<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>r<sp/>&gt;<sp/>r_mean),<sp/>dtype=float))</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ilocs_max<sp/>=<sp/>argrelextrema(r_over,<sp/>np.greater_equal,<sp/>order=3)[0]</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freq<sp/>=<sp/>len(ilocs_max)<sp/>/<sp/>len(R)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peak_dists<sp/>=<sp/>np.array(np.fromiter((ilocs_max[i]<sp/>-<sp/>ilocs_max[i-1]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/>len(ilocs_max))),<sp/>dtype=float))</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdev_peak_dist<sp/>=<sp/>np.std(peak_dists)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peaks<sp/>=<sp/>(r_over<sp/>-<sp/>r_mean)[ilocs_max]</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdev_amp<sp/>=<sp/>np.std(peaks)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>maximize<sp/>sdev_peak_dist<sp/>and<sp/>sdev_amp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[-sdev_peak_dist,<sp/>-sdev_amp,<sp/>freq]</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>problem<sp/>=<sp/>fcmaes_problem()<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>popsize<sp/>=<sp/>64<sp/></highlight><highlight class="comment">#<sp/>population<sp/>size<sp/>of<sp/>the<sp/>evolutionary<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>max_evaluations<sp/>=<sp/>popsize*16<sp/></highlight><highlight class="comment">#<sp/>maximum<sp/>number<sp/>of<sp/>evaluation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>popsize<sp/>=<sp/>256<sp/>#<sp/>population<sp/>size<sp/>of<sp/>the<sp/>evolutionary<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>max_evaluations<sp/>=<sp/>popsize*96<sp/>#<sp/>maximum<sp/>number<sp/>of<sp/>evaluation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>nobj<sp/>=<sp/>3<sp/></highlight><highlight class="comment">#<sp/>number<sp/>of<sp/>objectives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ncon<sp/>=<sp/>0<sp/></highlight><highlight class="comment">#<sp/>number<sp/>of<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>stores<sp/>all<sp/>values;<sp/>if<sp/>capacity<sp/>is<sp/>reached,<sp/>content<sp/>is<sp/>replaced<sp/>by<sp/>the<sp/>pareto<sp/>front<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>store<sp/>=<sp/><ref refid="classfcmaes_1_1mode_1_1store" kindref="compound">mode.store</ref>(problem.dim,<sp/>nobj,<sp/>capacity=max_evaluations)<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>perform<sp/>the<sp/>parameter<sp/>sweep<sp/>by<sp/>multi<sp/>objective<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>mode.minimize(<ref refid="classfcmaes_1_1mode_1_1wrapper" kindref="compound">mode.wrapper</ref>(problem.fitness,<sp/>3,<sp/>interval=64,<sp/>store=store),<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nobj,<sp/>ncon,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>problem.bounds,<sp/>popsize<sp/>=<sp/>popsize,<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_evaluations<sp/>=<sp/>max_evaluations,<sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsga_update=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>workers=min(popsize,<sp/>mp.cpu_count()))</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>save<sp/>last<sp/>population<sp/>of<sp/>the<sp/>evolutionary<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>np.savez_compressed(</highlight><highlight class="stringliteral">&quot;sweep&quot;</highlight><highlight class="normal">,<sp/>xs=xs,<sp/>ys=ys)<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>save<sp/>all<sp/>evaluations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>xs,<sp/>ys<sp/>=<sp/>store.get_xs(),<sp/>store.get_ys()</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>np.savez_compressed(</highlight><highlight class="stringliteral">&quot;sweep_all&quot;</highlight><highlight class="normal">,<sp/>xs=xs,<sp/>ys=ys)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>show<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x,<sp/>res<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>results[:10]:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(list(x),<sp/>list(res[</highlight><highlight class="stringliteral">&apos;R&apos;</highlight><highlight class="normal">]))</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>moretry.plot(</highlight><highlight class="stringliteral">&quot;sweep_all&quot;</highlight><highlight class="normal">,<sp/>ncon,<sp/>xs,<sp/>ys)<sp/></highlight><highlight class="comment">#<sp/>plot<sp/>2d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>plot3d(xs,<sp/>ys,<sp/></highlight><highlight class="stringliteral">&quot;sweep_3d&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>plot<sp/>3d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>fcmaes<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>diversifier,<sp/>mapelites</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>threadpoolctl</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>elitescass2<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>plot3d</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="namespaceexamples_1_1vilar_1aa344a3b9ba46bca39ce6fa792ed087fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1vilar_1aa344a3b9ba46bca39ce6fa792ed087fe" kindref="member">run_diversifier</ref>():</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">nd_problem():</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bounds<sp/>=<sp/><ref refid="namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf" kindref="member">get_bounds</ref>(<ref refid="classexamples_1_1vilar_1_1_vilar_oscillator" kindref="compound">VilarOscillator</ref>(),<sp/>100)</highlight></codeline>
<codeline lineno="172" refid="namespaceexamples_1_1vilar_1af1105e84bbb60a73eac7d2d069ecc277" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.qd_bounds<sp/>=<sp/>Bounds([0,<sp/>30,<sp/>.035],<sp/>[3,<sp/>300,<sp/>.050])</highlight></codeline>
<codeline lineno="173" refid="namespaceexamples_1_1vilar_1a041f65838a6fa4cb34cab04427474409" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.qd_dim<sp/>=<sp/>3</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dim<sp/>=<sp/>len(self.bounds.ub)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">fitness(self,<sp/>x):</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>threadpoolctl.threadpool_limits(limits=1,<sp/>user_api=</highlight><highlight class="stringliteral">&quot;blas&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/><ref refid="classexamples_1_1vilar_1_1_vilar_oscillator" kindref="compound">VilarOscillator</ref>()</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1vilar_1afe27928528b9221976a31a064e46d2df" kindref="member">set_params</ref>(model,<sp/>x)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>model.run(algorithm<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SSA&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>=<sp/>res[</highlight><highlight class="stringliteral">&apos;R&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="comment">#<sp/>time<sp/>series<sp/>for<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_mean<sp/>=<sp/>np.mean(R)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_over<sp/>=<sp/>np.array(np.fromiter((r<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>r<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>R<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>r<sp/>&gt;<sp/>r_mean),<sp/>dtype=float))</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ilocs_max<sp/>=<sp/>argrelextrema(r_over,<sp/>np.greater_equal,<sp/>order=3)[0]</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freq<sp/>=<sp/>len(ilocs_max)<sp/>/<sp/>len(R)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peak_dists<sp/>=<sp/>np.array(np.fromiter((ilocs_max[i]<sp/>-<sp/>ilocs_max[i-1]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/>len(ilocs_max))),<sp/>dtype=float))</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdev_peak_dist<sp/>=<sp/>np.std(peak_dists)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peaks<sp/>=<sp/>(r_over<sp/>-<sp/>r_mean)[ilocs_max]</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdev_amp<sp/>=<sp/>np.std(peaks)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ws<sp/>=<sp/>sdev_peak_dist/3.0<sp/>+<sp/>sdev_amp/300.0<sp/></highlight><highlight class="comment">#<sp/>weighted<sp/>sum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ws<sp/>=<sp/>2<sp/>-<sp/>(sdev_peak_dist/3.0<sp/>+<sp/>sdev_amp/300.0)<sp/>#<sp/>maximize<sp/>sdev<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ws,<sp/>np.array([sdev_peak_dist,<sp/>sdev_amp,<sp/>freq])</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>problem<sp/>=<sp/>nd_problem()<sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>opt_params0<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;solver&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;elites&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;popsize&apos;</highlight><highlight class="normal">:8}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>opt_params1<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;solver&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;CRMFNES_CPP&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;max_evals&apos;</highlight><highlight class="normal">:200,<sp/></highlight><highlight class="stringliteral">&apos;popsize&apos;</highlight><highlight class="normal">:16,<sp/></highlight><highlight class="stringliteral">&apos;stall_criterion&apos;</highlight><highlight class="normal">:3}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>archive<sp/>=<sp/>diversifier.minimize(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classfcmaes_1_1mapelites_1_1wrapper" kindref="compound">mapelites.wrapper</ref>(problem.fitness,<sp/>problem.qd_dim,<sp/>interval=100,<sp/>save_interval=4000),<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>problem.bounds,<sp/>problem.qd_bounds,<sp/>opt_params=[opt_params0,<sp/>opt_params1],<sp/>max_evals=12800)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;final<sp/>archive:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>archive.info())</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>archive.save(</highlight><highlight class="stringliteral">&quot;vilar_qd&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1vilar_1a6e6d663720ddae410f7f5f2db391cc23" kindref="member">plot_archive</ref>(archive)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205" refid="namespaceexamples_1_1vilar_1a6e6d663720ddae410f7f5f2db391cc23" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1vilar_1a6e6d663720ddae410f7f5f2db391cc23" kindref="member">plot_archive</ref>(archive):</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>archive.get_cs()</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>archive.get_ds()</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>si<sp/>=<sp/>archive.argsort()</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>ysp<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptions<sp/>=<sp/>archive.get_ds()[si]</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>archive.get_ys()[si]</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(si)):</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>=<sp/>descriptions[i]</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ysp.append([desc[0],<sp/>desc[1],<sp/>desc[2]])</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>ysp<sp/>=<sp/>np.array(ysp)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>print(len(ysp))</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>print(ysp)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>plot3d(ysp,<sp/></highlight><highlight class="stringliteral">&quot;vilar_qd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;sdev<sp/>peak<sp/>distance&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;sdev<sp/>amplitude&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;frequency&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#sweep_params()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1vilar_1aa344a3b9ba46bca39ce6fa792ed087fe" kindref="member">run_diversifier</ref>()</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#plot()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
    </programlisting>
    <location file="examples/vilar.py"/>
  </compounddef>
</doxygen>
