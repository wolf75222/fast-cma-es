<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classfcmaes_1_1optimizer_1_1_de__ask__tell" kind="class" language="Python" prot="public">
    <compoundname>fcmaes::optimizer::De_ask_tell</compoundname>
    <basecompoundref refid="classfcmaes_1_1optimizer_1_1_optimizer" prot="public" virt="non-virtual">fcmaes.optimizer.Optimizer</basecompoundref>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classfcmaes_1_1optimizer_1_1_de__ask__tell_1ad7be76f5ffe7fc538f9d630e8ebf4137" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.optimizer.De_ask_tell::popsize</definition>
        <argsstring></argsstring>
        <name>popsize</name>
        <qualifiedname>fcmaes.optimizer.De_ask_tell.popsize</qualifiedname>
        <initializer>=  popsize</initializer>
        <briefdescription>
<para>Number of individuals in the population, which. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2373" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2373" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1ab63d18c231a89de22d03945f00e5fdfe" compoundref="pgpecpp_8py" startline="306" endline="321">fcmaes.pgpecpp.PGPE_C.ask</referencedby>
        <referencedby refid="classexamples_1_1benchmark__gtop__pygmo_1_1_cma__pyg_1ac6519a73a433d9af5f92b533f3e1520a" compoundref="benchmark__gtop__pygmo_8py" startline="103" endline="118">examples.benchmark_gtop_pygmo.Cma_pyg.minimize</referencedby>
        <referencedby refid="classexamples_1_1benchmark__gtop__pygmo_1_1_de__pyg_1ac378a2bf0efbc53ed2ef677fa017b916" compoundref="benchmark__gtop__pygmo_8py" startline="127" endline="137">examples.benchmark_gtop_pygmo.De_pyg.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_bite__cpp_1abbc94878a7c8ceda2ea3b65361a3e972" compoundref="optimizer_8py" startline="2701" endline="2709">fcmaes.optimizer.Bite_cpp.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1add27360c14d87672fd1c81a406d8b388" compoundref="optimizer_8py" startline="2418" endline="2431">fcmaes.optimizer.De_ask_tell.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_differential__evolution_1a8096359879e83b09f09bea6b73d59776" compoundref="optimizer_8py" startline="2858" endline="2864">fcmaes.optimizer.Differential_evolution.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1aeaf7b21b34fd7cb1438ed8bcf23a2f4c" compoundref="pgpecpp_8py" startline="357" endline="371">fcmaes.pgpecpp.PGPE_C.population</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classfcmaes_1_1optimizer_1_1_de__ask__tell_1aa94dd4195cc987dcedf14f4c483c1b51" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.optimizer.De_ask_tell::stop_fitness</definition>
        <argsstring></argsstring>
        <name>stop_fitness</name>
        <qualifiedname>fcmaes.optimizer.De_ask_tell.stop_fitness</qualifiedname>
        <initializer>=  stop_fitness</initializer>
        <briefdescription>
<para><ref refid="class_fitness" kindref="compound">Fitness</ref> threshold for early stopping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2374" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2374" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_bite__cpp_1abbc94878a7c8ceda2ea3b65361a3e972" compoundref="optimizer_8py" startline="2701" endline="2709">fcmaes.optimizer.Bite_cpp.minimize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classfcmaes_1_1optimizer_1_1_de__ask__tell_1aaa99670844fc1389c8c2149247cdff1d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.optimizer.De_ask_tell::keep</definition>
        <argsstring></argsstring>
        <name>keep</name>
        <qualifiedname>fcmaes.optimizer.De_ask_tell.keep</qualifiedname>
        <initializer>=  keep</initializer>
        <briefdescription>
<para>Number of top-performing individuals retained for. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2375" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2375" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1add27360c14d87672fd1c81a406d8b388" compoundref="optimizer_8py" startline="2418" endline="2431">fcmaes.optimizer.De_ask_tell.minimize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classfcmaes_1_1optimizer_1_1_de__ask__tell_1a059ad704d037181b31185585a82c9941" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.optimizer.De_ask_tell::f</definition>
        <argsstring></argsstring>
        <name>f</name>
        <qualifiedname>fcmaes.optimizer.De_ask_tell.f</qualifiedname>
        <initializer>=  f</initializer>
        <briefdescription>
<para>Differential weighting factor for mutation, controlling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2376" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2376" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1add27360c14d87672fd1c81a406d8b388" compoundref="optimizer_8py" startline="2418" endline="2431">fcmaes.optimizer.De_ask_tell.minimize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classfcmaes_1_1optimizer_1_1_de__ask__tell_1a38c525587b6c8ee2d3776273ac3846ac" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.optimizer.De_ask_tell::cr</definition>
        <argsstring></argsstring>
        <name>cr</name>
        <qualifiedname>fcmaes.optimizer.De_ask_tell.cr</qualifiedname>
        <initializer>=  cr</initializer>
        <briefdescription>
<para>Crossover probability that determines the rate at which. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2377" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2377" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1add27360c14d87672fd1c81a406d8b388" compoundref="optimizer_8py" startline="2418" endline="2431">fcmaes.optimizer.De_ask_tell.minimize</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_de__ask__tell_1a438d0e4e3eb02efc66eb6a0e7d2728e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.optimizer.De_ask_tell.__init__</definition>
        <argsstring>(self, Optional[int] max_evaluations=50000, Optional[int] popsize=None, Optional[float] stop_fitness=-np.inf, Optional[int] keep=200, Optional[float] f=0.5, Optional[float] cr=0.9)</argsstring>
        <name>__init__</name>
        <qualifiedname>fcmaes.optimizer.De_ask_tell.__init__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>50000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <array>[int]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>stop_fitness</declname>
          <array>[float]</array>
          <defval>-np.inf</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>keep</declname>
          <array>[int]</array>
          <defval>200</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>f</declname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>cr</declname>
          <array>[float]</array>
          <defval>0.9</defval>
        </param>
        <briefdescription>
<para>Initializes the Differential Evolution (DE) optimizer with specified configuration options. </para>
        </briefdescription>
        <detaileddescription>
<para>The DE optimizer is part of evolutionary algorithms and works by iteratively improving a candidate solution with regard to a measure of quality (fitness). This initialization method allows setting the core parameters of the DE optimizer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of evaluations that the optimizer can perform before stopping. Default is 50000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of individuals in the population. Determines the population size for optimization. Default is None (uses a default or dynamically calculated value). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop_fitness</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_fitness" kindref="compound">Fitness</ref> value at which the optimizer will stop early if reached. Default is -np.inf (no early stopping based on fitness). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of individuals or solutions to keep from one generation to the next within the optimization process. Default is 200. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Differential weighting factor, a scaling constant used to scale the difference between two individuals in the population. Default is 0.5. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cr</parametername>
</parameternamelist>
<parameterdescription>
<para>Crossover probability, the rate at which components are swapped between solutions during the recombination process. Default is 0.9. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2365" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2371" bodyend="2378"/>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_de__ask__tell_1add27360c14d87672fd1c81a406d8b388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, float, int]</type>
        <definition> Tuple[np.ndarray, float, int] fcmaes.optimizer.De_ask_tell.minimize</definition>
        <argsstring>(self, Callable[[ArrayLike], float] fun, Optional[Bounds] bounds, Optional[ArrayLike] guess=None, Optional[float] sdevs=None, Optional[Generator] rg=Generator(PCG64DXSM()), store=None)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.optimizer.De_ask_tell.minimize</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>float]</type>
          <declname>fun</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>bounds</declname>
          <defname>guess</defname>
          <array>[Bounds]</array>
        </param>
        <param>
          <type>Optional</type>
          <declname>guess</declname>
          <defname>sdevs</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>sdevs</declname>
          <defname>rg</defname>
          <array>[float]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>rg</declname>
          <defname>store</defname>
          <array>[Generator]</array>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>store</type>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Minimizes a given objective function using a Differential Evolution (DE) algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   The algorithm works by iteratively evolving a population of potential solutions to
   optimize the given objective function within specified bounds. It supports features
   like random seeds, population size customization, and optional constraint handling.
   The `minimize` method evaluates the convergence of the algorithm based on specified
   maximum evaluations, and returns the best solution, its value, and the number of
   evaluations conducted.


       fun (Callable[[ArrayLike], float]): Objective function to minimize. This is a callable
           that takes an array-like input and returns a scalar output representing the
           function value.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary constraints for the search space. Specifies the lower and upper bounds for each dimension of the input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess for the solution. Optional and can be left as None, in which case the default initialization strategy is used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Placeholder parameter. This argument is ignored in the optimization </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>process.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>Random generator for stochastic operations. By default, it uses a PCG64DXSM generator instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional storage handler for tracking or persisting evaluation metrics during the optimization process. This parameter is passed to internal utility methods for handling storage requirements.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, float, int]: A tuple containing three elements:<itemizedlist>
<listitem><para>np.ndarray: The best solution found by the optimizer (array with dimensions defined by the bounds).</para>
</listitem><listitem><para>float: The value of the objective function at the best solution.</para>
</listitem><listitem><para>int: The total number of function evaluations performed. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2412" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2418" bodyend="2431"/>
        <references refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1a38c525587b6c8ee2d3776273ac3846ac" compoundref="optimizer_8py" startline="2377">fcmaes.optimizer.De_ask_tell.cr</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__cpp_1a9148bc8b53eac219089f0ba26797748a" compoundref="optimizer_8py" startline="2036">fcmaes.optimizer.De_cpp.cr</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__python_1a8b3d07574a419fe034e45103e3fae567" compoundref="optimizer_8py" startline="2151">fcmaes.optimizer.De_python.cr</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1a059ad704d037181b31185585a82c9941" compoundref="optimizer_8py" startline="2376">fcmaes.optimizer.De_ask_tell.f</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__cpp_1a59179389fcc9cb26537457c5330ffd49" compoundref="optimizer_8py" startline="2035">fcmaes.optimizer.De_cpp.f</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__python_1a8f01f6f1c691b49141a1be706362fa84" compoundref="optimizer_8py" startline="2150">fcmaes.optimizer.De_python.f</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1a79b95ab48735e11bd612ddbbc65d82ba" compoundref="de_8py" startline="307">fcmaes.de.DE.keep</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1aaa99670844fc1389c8c2149247cdff1d" compoundref="optimizer_8py" startline="2375">fcmaes.optimizer.De_ask_tell.keep</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__cpp_1ac6682fdfdc8f6b55907437b02e679657" compoundref="optimizer_8py" startline="2034">fcmaes.optimizer.De_cpp.keep</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__python_1a352951220906583104f8431b7d0bc7d2" compoundref="optimizer_8py" startline="2149">fcmaes.optimizer.De_python.keep</references>
        <references refid="classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a" compoundref="optimizer_8py" startline="304" endline="307">fcmaes.optimizer.Optimizer.max_eval_num</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a761c0d9f4dee80eeede32decb57c33df" compoundref="cmaes_8py" startline="223">fcmaes.cmaes.Cmaes.popsize</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193" compoundref="cmaescpp_8py" startline="238">fcmaes.cmaescpp.ACMA_C.popsize</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1ad99f6494d91a596c6025dc5dceea0970" compoundref="crfmnescpp_8py" startline="221">fcmaes.crfmnescpp.CRFMNES_C.popsize</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1ac57257a177f51fb2637120cc3bf7ac55" compoundref="de_8py" startline="305">fcmaes.de.DE.popsize</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad122a7d34bd51afeb06228ad811f85ce" compoundref="decpp_8py" startline="293">fcmaes.decpp.DE_C.popsize</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1ab0225e759a59fcf9af44411a93f195d6" compoundref="mode_8py" startline="487">fcmaes.mode.MODE.popsize</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582" compoundref="modecpp_8py" startline="404">fcmaes.modecpp.MODE_C.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_cma__ask__tell_1a2a32bf4b1974985835c6fe4d78efbfa0" compoundref="optimizer_8py" startline="2253">fcmaes.optimizer.Cma_ask_tell.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_cma__awm_1adfed8224a61810107b7df8908a1872cb" compoundref="optimizer_8py" startline="1747">fcmaes.optimizer.Cma_awm.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_cma__cpp_1a2bb997ef25340e30ce54a699f3dea578" compoundref="optimizer_8py" startline="1359">fcmaes.optimizer.Cma_cpp.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_cma__lw_1a1861ff82b2a8709da57f19cb75a483ce" compoundref="optimizer_8py" startline="1609">fcmaes.optimizer.Cma_lw.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_cma__orig_1a90f09477ed9000f2c20750fa9ac73ed5" compoundref="optimizer_8py" startline="1471">fcmaes.optimizer.Cma_orig.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_cma__python_1a37f6cfbea5e7ae43fde5dec59bec4371" compoundref="optimizer_8py" startline="1230">fcmaes.optimizer.Cma_python.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_cma__sep_1abddd49200f8a013f6fb55ce8698dd111" compoundref="optimizer_8py" startline="1893">fcmaes.optimizer.Cma_sep.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_crfmnes_1abf110ededa79f1101d0acefadef018f8" compoundref="optimizer_8py" startline="900">fcmaes.optimizer.Crfmnes.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_crfmnes__cpp_1adf8a89f1eba94649ba1fbafd89e68ba8" compoundref="optimizer_8py" startline="1001">fcmaes.optimizer.Crfmnes_cpp.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1ad7be76f5ffe7fc538f9d630e8ebf4137" compoundref="optimizer_8py" startline="2373">fcmaes.optimizer.De_ask_tell.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__cpp_1aeee0354a9a88e72a8de9a14518e0b631" compoundref="optimizer_8py" startline="2031">fcmaes.optimizer.De_cpp.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_de__python_1a69e1e5d4ef59774da8d311e5414f423b" compoundref="optimizer_8py" startline="2147">fcmaes.optimizer.De_python.popsize</references>
        <references refid="classfcmaes_1_1optimizer_1_1_pgpe__cpp_1ad8bb83e394a209e90761b1d77b424e47" compoundref="optimizer_8py" startline="1114">fcmaes.optimizer.Pgpe_cpp.popsize</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Differential Evolution optimizer for numerical optimization tasks. </para>
    </briefdescription>
    <detaileddescription>
<para>This class implements the Differential Evolution (DE) optimizer, which is a population-based, stochastic optimization technique suitable for solving complex continuous optimization problems. The optimizer uses operations like mutation, crossover, and selection to evolve a population of candidate solutions towards an optimal solution over a number of iterations.</para>
<para><verbatim>       components are exchanged between solutions.
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>fcmaes.optimizer.De_ask_tell</label>
        <link refid="classfcmaes_1_1optimizer_1_1_de__ask__tell"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>fcmaes.optimizer.De_ask_tell</label>
        <link refid="classfcmaes_1_1optimizer_1_1_de__ask__tell"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </collaborationgraph>
    <location file="fcmaes/optimizer.py" line="2319" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2319" bodyend="2431"/>
    <listofallmembers>
      <member refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1a438d0e4e3eb02efc66eb6a0e7d2728e1" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>__init__</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1a38c525587b6c8ee2d3776273ac3846ac" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>cr</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1a059ad704d037181b31185585a82c9941" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>f</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1acf09b9b314cc4faf25c9935e76ae1821" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>get_count_runs</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1aaa99670844fc1389c8c2149247cdff1d" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>keep</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>max_eval_num</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>max_evaluations</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1add27360c14d87672fd1c81a406d8b388" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>minimize</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1ae0423ec54db7b25862e01d7863ab4708" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>name</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1ad7be76f5ffe7fc538f9d630e8ebf4137" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>popsize</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1aa94dd4195cc987dcedf14f4c483c1b51" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::De_ask_tell</scope><name>stop_fitness</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
