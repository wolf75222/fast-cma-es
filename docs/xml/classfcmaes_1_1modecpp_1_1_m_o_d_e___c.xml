<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c" kind="class" language="Python" prot="public">
    <compoundname>fcmaes::modecpp::MODE_C</compoundname>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.modecpp.MODE_C::ptr</definition>
        <argsstring></argsstring>
        <name>ptr</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.ptr</qualifiedname>
        <initializer>=  <ref refid="namespacefcmaes_1_1modecpp_1a7983baf5cae97002769592e7d8e8643b" kindref="member">initMODE_C</ref>(runid, <ref refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1af4ebfa8da5f83635f078bc8f543a3243" kindref="member">dim</ref>, <ref refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a6c3952de5a26ec3374f08723eecf3b2e" kindref="member">nobj</ref>, <ref refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa461c8e27adc9620ba6f4ed42b6e04cc" kindref="member">ncon</ref>, seed,
                               array_type(*lower), array_type(*upper), bool_array_type(*ints),
                               <ref refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582" kindref="member">popsize</ref>, f, cr,
                               pro_c, dis_c, pro_m, dis_m,
                               nsga_update, pareto_update, min_mutate, max_mutate)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="399" column="1" bodyfile="fcmaes/modecpp.py" bodystart="399" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a580bb3d8baef2a338186cac64df0ea45" compoundref="modecpp_8py" startline="423" endline="425">fcmaes.modecpp.MODE_C.__del__</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1a255b3fc3e61ebee7f65b20d63c6ba3d4" compoundref="pgpecpp_8py" startline="290" endline="292">fcmaes.pgpecpp.PGPE_C.__del__</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1" compoundref="modecpp_8py" startline="471" endline="485">fcmaes.modecpp.MODE_C.ask</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1ab63d18c231a89de22d03945f00e5fdfe" compoundref="pgpecpp_8py" startline="306" endline="321">fcmaes.pgpecpp.PGPE_C.ask</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3433826fba507128212dc6dd455a7227" compoundref="modecpp_8py" startline="569" endline="583">fcmaes.modecpp.MODE_C.population</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1aeaf7b21b34fd7cb1438ed8bcf23a2f4c" compoundref="pgpecpp_8py" startline="357" endline="371">fcmaes.pgpecpp.PGPE_C.population</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1a93ccd2d19bf80b6da653b292f276e94e" compoundref="pgpecpp_8py" startline="393" endline="407">fcmaes.pgpecpp.PGPE_C.result</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07" compoundref="modecpp_8py" startline="505" endline="519">fcmaes.modecpp.MODE_C.tell</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1a3d030c90af2ea816f60372c4f0bb98d5" compoundref="pgpecpp_8py" startline="334" endline="342">fcmaes.pgpecpp.PGPE_C.tell</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a92426eb6d5a2f38b3a1218fd9479a1bc" compoundref="modecpp_8py" startline="542" endline="550">fcmaes.modecpp.MODE_C.tell_switch</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.modecpp.MODE_C::popsize</definition>
        <argsstring></argsstring>
        <name>popsize</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.popsize</qualifiedname>
        <initializer>=  popsize</initializer>
        <briefdescription>
<para>The size of the population used in the optimization process. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="404" column="1" bodyfile="fcmaes/modecpp.py" bodystart="404" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1" compoundref="modecpp_8py" startline="471" endline="485">fcmaes.modecpp.MODE_C.ask</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1ab63d18c231a89de22d03945f00e5fdfe" compoundref="pgpecpp_8py" startline="306" endline="321">fcmaes.pgpecpp.PGPE_C.ask</referencedby>
        <referencedby refid="classexamples_1_1benchmark__gtop__pygmo_1_1_cma__pyg_1ac6519a73a433d9af5f92b533f3e1520a" compoundref="benchmark__gtop__pygmo_8py" startline="103" endline="118">examples.benchmark_gtop_pygmo.Cma_pyg.minimize</referencedby>
        <referencedby refid="classexamples_1_1benchmark__gtop__pygmo_1_1_de__pyg_1ac378a2bf0efbc53ed2ef677fa017b916" compoundref="benchmark__gtop__pygmo_8py" startline="127" endline="137">examples.benchmark_gtop_pygmo.De_pyg.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_bite__cpp_1abbc94878a7c8ceda2ea3b65361a3e972" compoundref="optimizer_8py" startline="2701" endline="2709">fcmaes.optimizer.Bite_cpp.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_cma__ask__tell_1a8cd8fee170f10d492be9efddd646f592" compoundref="optimizer_8py" startline="2291" endline="2306">fcmaes.optimizer.Cma_ask_tell.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_cma__awm_1aeae1df11cb00effaafd1a0bde69ea5e0" compoundref="optimizer_8py" startline="1792" endline="1826">fcmaes.optimizer.Cma_awm.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_cma__cpp_1adf0a83599c8dbbdab6e4c0482e22443a" compoundref="optimizer_8py" startline="1402" endline="1416">fcmaes.optimizer.Cma_cpp.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_cma__lw_1a86222ef0aed5dce4b0f3aed01c9f513a" compoundref="optimizer_8py" startline="1647" endline="1679">fcmaes.optimizer.Cma_lw.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_cma__orig_1a4dbf460c986845f8121946c4252c2fa0" compoundref="optimizer_8py" startline="1520" endline="1552">fcmaes.optimizer.Cma_orig.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_cma__python_1a11b849f7e44223c9edba4c1247b7e9e6" compoundref="optimizer_8py" startline="1273" endline="1285">fcmaes.optimizer.Cma_python.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_cma__sep_1a5220a28c20ca5b96c1312ba25ee8e1eb" compoundref="optimizer_8py" startline="1933" endline="1965">fcmaes.optimizer.Cma_sep.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_crfmnes_1aeaf53b0b1cef69245496384c9c5569fb" compoundref="optimizer_8py" startline="939" endline="949">fcmaes.optimizer.Crfmnes.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_crfmnes__cpp_1a28a1d5e195fa924386bd76c29a9f682d" compoundref="optimizer_8py" startline="1044" endline="1054">fcmaes.optimizer.Crfmnes_cpp.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_de__ask__tell_1add27360c14d87672fd1c81a406d8b388" compoundref="optimizer_8py" startline="2418" endline="2431">fcmaes.optimizer.De_ask_tell.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_de__cpp_1a339827fb8e27dd33fa0d38ee11829e7c" compoundref="optimizer_8py" startline="2072" endline="2084">fcmaes.optimizer.De_cpp.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_de__python_1aee98e8d42f4a5556e2bfcbca9208b325" compoundref="optimizer_8py" startline="2188" endline="2195">fcmaes.optimizer.De_python.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_differential__evolution_1a8096359879e83b09f09bea6b73d59776" compoundref="optimizer_8py" startline="2858" endline="2864">fcmaes.optimizer.Differential_evolution.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_pgpe__cpp_1a15393a3e9dbb73be5cf8e5c9cc6f8c2d" compoundref="optimizer_8py" startline="1156" endline="1166">fcmaes.optimizer.Pgpe_cpp.minimize</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a672b403a7e745d9e69532454f32d2b62" compoundref="modecpp_8py" startline="635" endline="646">fcmaes.modecpp.MODE_C.minimize_par</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa4a7a3e4f9a3fc84dc37faf820025306" compoundref="modecpp_8py" startline="602" endline="611">fcmaes.modecpp.MODE_C.minimize_ser</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3433826fba507128212dc6dd455a7227" compoundref="modecpp_8py" startline="569" endline="583">fcmaes.modecpp.MODE_C.population</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1aeaf7b21b34fd7cb1438ed8bcf23a2f4c" compoundref="pgpecpp_8py" startline="357" endline="371">fcmaes.pgpecpp.PGPE_C.population</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3267cafa8c068a367179034c3f5a562d" compoundref="modecpp_8py" startline="446" endline="457">fcmaes.modecpp.MODE_C.set_guess</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1af4ebfa8da5f83635f078bc8f543a3243" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.modecpp.MODE_C::dim</definition>
        <argsstring></argsstring>
        <name>dim</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.dim</qualifiedname>
        <initializer>=  dim</initializer>
        <briefdescription>
<para>The dimensionality of the decision variable space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="405" column="1" bodyfile="fcmaes/modecpp.py" bodystart="405" bodyend="-1"/>
        <referencedby refid="classexamples_1_1damp_1_1fitness_1a182cdb7a5c25015336faa57a9afebef6" compoundref="damp_8py" startline="67" endline="76">examples.damp.fitness.__call__</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1" compoundref="modecpp_8py" startline="471" endline="485">fcmaes.modecpp.MODE_C.ask</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1ab63d18c231a89de22d03945f00e5fdfe" compoundref="pgpecpp_8py" startline="306" endline="321">fcmaes.pgpecpp.PGPE_C.ask</referencedby>
        <referencedby refid="classanpcp_1_1_a_n_p_c_p_1a168520639bb6a296a24f7f11226a233a" compoundref="anpcp_8py" startline="78" endline="98">anpcp.ANPCP.init_tsp</referencedby>
        <referencedby refid="classexamples_1_1siemens_1_1_plant_1a1e32e624120cf855722e347ed941b77f" compoundref="siemens_8py" startline="108" endline="118">examples.siemens.Plant.next_product</referencedby>
        <referencedby refid="classexamples_1_1employee_1_1problem_1a96c79aee6dab29a25fd28b0b383f1916" compoundref="employee_8py" startline="241" endline="250">examples.employee.problem.optimize</referencedby>
        <referencedby refid="classexamples_1_1employee_1_1problem_1a451356183bd266ec5feb44a1b9cf92ef" compoundref="employee_8py" startline="251" endline="268">examples.employee.problem.optimize_mo</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3433826fba507128212dc6dd455a7227" compoundref="modecpp_8py" startline="569" endline="583">fcmaes.modecpp.MODE_C.population</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1aeaf7b21b34fd7cb1438ed8bcf23a2f4c" compoundref="pgpecpp_8py" startline="357" endline="371">fcmaes.pgpecpp.PGPE_C.population</referencedby>
        <referencedby refid="classexamples_1_1damp_1_1fitness_1af629821589f78858c6422998bcb02fe5" compoundref="damp_8py" startline="77" endline="90">examples.damp.fitness.qd_fit</referencedby>
        <referencedby refid="classanpcp_1_1_a_n_p_c_p_1a27cdaec6181e9866758aaf02adcd2943" compoundref="anpcp_8py" startline="99" endline="102">anpcp.ANPCP.random_x</referencedby>
        <referencedby refid="classanpcpc_1_1_a_n_p_c_p_c_1ac4f58722e70806a92094828b839f084e" compoundref="anpcpc_8py" startline="86" endline="89">anpcpc.ANPCPC.random_x</referencedby>
        <referencedby refid="classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c_1a93ccd2d19bf80b6da653b292f276e94e" compoundref="pgpecpp_8py" startline="393" endline="407">fcmaes.pgpecpp.PGPE_C.result</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a6c3952de5a26ec3374f08723eecf3b2e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.modecpp.MODE_C::nobj</definition>
        <argsstring></argsstring>
        <name>nobj</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.nobj</qualifiedname>
        <initializer>=  nobj</initializer>
        <briefdescription>
<para>The number of objective functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="406" column="1" bodyfile="fcmaes/modecpp.py" bodystart="406" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1moretry_1_1mo__wrapper_1a9f091a54dc6f2c2fefb4c6a90ab108a2" compoundref="moretry_8py" startline="327" endline="335">fcmaes.moretry.mo_wrapper.eval</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a672b403a7e745d9e69532454f32d2b62" compoundref="modecpp_8py" startline="635" endline="646">fcmaes.modecpp.MODE_C.minimize_par</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa461c8e27adc9620ba6f4ed42b6e04cc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.modecpp.MODE_C::ncon</definition>
        <argsstring></argsstring>
        <name>ncon</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.ncon</qualifiedname>
        <initializer>=  ncon</initializer>
        <briefdescription>
<para>The number of constraints in the optimization problem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="407" column="1" bodyfile="fcmaes/modecpp.py" bodystart="407" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1moretry_1_1mo__wrapper_1a9f091a54dc6f2c2fefb4c6a90ab108a2" compoundref="moretry_8py" startline="327" endline="335">fcmaes.moretry.mo_wrapper.eval</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a672b403a7e745d9e69532454f32d2b62" compoundref="modecpp_8py" startline="635" endline="646">fcmaes.modecpp.MODE_C.minimize_par</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ab5837c03082fdd02b53bb829e538a094" prot="public" static="no" mutable="no">
        <type></type>
        <definition>fcmaes.modecpp.MODE_C::bounds</definition>
        <argsstring></argsstring>
        <name>bounds</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.bounds</qualifiedname>
        <initializer>=  bounds</initializer>
        <briefdescription>
<para>The bounds on variables, specified as a sequence of (min, max) bounds or. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes an instance of the optimization problem using the specified parameters. <verbatim>   This constructor sets up the necessary parameters for a multi-objective differential
   evolution (MODE) algorithm, with options for NSGA-II-inspired updates and Pareto
   front approximations. It handles checks on bounds, dimensions, and population size,
   and initializes the required internal structures for the optimization process.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nobj</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of objectives in the optimization problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncon</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of constraints in the optimization problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>Object defining the lower and upper bounds for the decision variables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the population. Defaults to 64. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Differential weight utilized in mutation. Defaults to 0.5. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cr</parametername>
</parameternamelist>
<parameterdescription>
<para>Crossover probability. Defaults to 0.9. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pro_c</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability of crossover used in simulated binary crossover. Defaults to 0.5. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis_c</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution index for crossover. Defaults to 15.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pro_m</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability of mutation. Defaults to 0.9. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis_m</parametername>
</parameternamelist>
<parameterdescription>
<para>Distribution index for mutation. Defaults to 20.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsga_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to enable NSGA-II-inspired update rules. Defaults to True. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pareto_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode for Pareto front update. Defaults to 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ints</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary array denoting whether each variable is an integer (True) or continuous (False). Defaults to None. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_mutate</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum mutation rate for adaptive mutation. Defaults to 0.1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_mutate</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum mutation rate for adaptive mutation. Defaults to 0.5. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>Random number generator instance. Defaults to Generator(PCG64DXSM()). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>runid</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique identifier for the model run. Defaults to 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="408" column="1" bodyfile="fcmaes/modecpp.py" bodystart="408" bodyend="-1"/>
        <referencedby refid="classfcmaes_1_1optimizer_1_1_check_bounds_1a85adee224b45c4a645b251017c1d604b" compoundref="optimizer_8py" startline="2905" endline="2910">fcmaes.optimizer.CheckBounds.__call__</referencedby>
        <referencedby refid="classexamples_1_1benchmark__gtop__pygmo_1_1pygmo__udp_1a41d3b087b32923f75cbe401f3f2419e3" compoundref="benchmark__gtop__pygmo_8py" startline="49" endline="51">examples.benchmark_gtop_pygmo.pygmo_udp.get_bounds</referencedby>
        <referencedby refid="classanpcp_1_1_a_n_p_c_p_1a168520639bb6a296a24f7f11226a233a" compoundref="anpcp_8py" startline="78" endline="98">anpcp.ANPCP.init_tsp</referencedby>
        <referencedby refid="classexamples_1_1employee_1_1problem_1a96c79aee6dab29a25fd28b0b383f1916" compoundref="employee_8py" startline="241" endline="250">examples.employee.problem.optimize</referencedby>
        <referencedby refid="classexamples_1_1trappist__delivery_1_1fitness_1ad25284f2ed9bbb5897ec7ca711e5fa17" compoundref="trappist__delivery_8py" startline="944" endline="954">examples.trappist_delivery.fitness.optimize</referencedby>
        <referencedby refid="classexamples_1_1employee_1_1problem_1a451356183bd266ec5feb44a1b9cf92ef" compoundref="employee_8py" startline="251" endline="268">examples.employee.problem.optimize_mo</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac8edb933a20c41ff33f74d59f9a7f486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.modecpp.MODE_C.__init__</definition>
        <argsstring>(self, int nobj, int ncon, Bounds bounds, Optional[int] popsize=64, Optional[float] f=0.5, Optional[float] cr=0.9, Optional[float] pro_c=0.5, Optional[float] dis_c=15.0, Optional[float] pro_m=0.9, Optional[float] dis_m=20.0, Optional[bool] nsga_update=True, Optional[int] pareto_update=0, Optional[ArrayLike] ints=None, Optional[float] min_mutate=0.1, Optional[float] max_mutate=0.5, Optional[Generator] rg=Generator(PCG64DXSM()), Optional[int] runid=0)</argsstring>
        <name>__init__</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.__init__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>int</type>
          <declname>nobj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncon</declname>
        </param>
        <param>
          <type>Bounds</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>Optional</type>
          <declname>popsize</declname>
          <array>[int]</array>
          <defval>64</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>f</declname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>cr</declname>
          <array>[float]</array>
          <defval>0.9</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pro_c</declname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>dis_c</declname>
          <array>[float]</array>
          <defval>15.0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pro_m</declname>
          <array>[float]</array>
          <defval>0.9</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>dis_m</declname>
          <array>[float]</array>
          <defval>20.0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>nsga_update</declname>
          <array>[bool]</array>
          <defval>True</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pareto_update</declname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>ints</declname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>min_mutate</declname>
          <array>[float]</array>
          <defval>0.1</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_mutate</declname>
          <array>[float]</array>
          <defval>0.5</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>rg</declname>
          <array>[Generator]</array>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>runid</declname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="365" column="1" bodyfile="fcmaes/modecpp.py" bodystart="382" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a580bb3d8baef2a338186cac64df0ea45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.modecpp.MODE_C.__del__</definition>
        <argsstring>(self)</argsstring>
        <name>__del__</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.__del__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
<para>Handles the cleanup and destruction of resources managed by an instance of this class. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This method is automatically called when the instance is about to be destroyed. It ensures
   that any resources tied to the instance are released properly to avoid memory leaks or
   resource contention.
</verbatim></para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Exception</parametername>
</parameternamelist>
<parameterdescription>
<para>If the clean-up or destruction process encounters an error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="423" column="1" bodyfile="fcmaes/modecpp.py" bodystart="423" bodyend="425"/>
        <references refid="namespacefcmaes_1_1modecpp_1a8667a04257d49d4eabd9d64d0e8301a4" compoundref="modecpp_8py" startline="657">fcmaes.modecpp.destroyMODE_C</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c" compoundref="cmaescpp_8py" startline="231">fcmaes.cmaescpp.ACMA_C.ptr</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a5be4aaaff3704c64f6579594e6aa32fe" compoundref="crfmnescpp_8py" startline="217">fcmaes.crfmnescpp.CRFMNES_C.ptr</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad9095931be109c4c732f10d7791c54fc" compoundref="decpp_8py" startline="285">fcmaes.decpp.DE_C.ptr</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09" compoundref="modecpp_8py" startline="399">fcmaes.modecpp.MODE_C.ptr</references>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3267cafa8c068a367179034c3f5a562d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.modecpp.MODE_C.set_guess</definition>
        <argsstring>(self, guess, mofun, rg=None)</argsstring>
        <name>set_guess</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.set_guess</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>guess</type>
          <defname>guess</defname>
        </param>
        <param>
          <type>mofun</type>
          <defname>mofun</defname>
        </param>
        <param>
          <type>rg</type>
          <defname>rg</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Set the initial guess values for optimization along with corresponding function evaluations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes guesses and their associated computed values based on the input guess and the provided function evaluator.</para>
<para>If a random generator is not provided, a default PCG64DXSM-based generator is created and used to randomly select a subset of guesses and evaluations.</para>
<para><verbatim>       guess (Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]): Initial guesses
           for the optimization process. It can either be a numpy array of
           guesses, or a tuple containing both the guesses and their
           pre-computed evaluations.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mofun</parametername>
</parameternamelist>
<parameterdescription>
<para>A callable function used to compute the output of each guess value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>A numpy random generator for sampling. Defaults to None, in which case a new generator instance is created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="446" column="1" bodyfile="fcmaes/modecpp.py" bodystart="446" bodyend="457"/>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a761c0d9f4dee80eeede32decb57c33df" compoundref="cmaes_8py" startline="223">fcmaes.cmaes.Cmaes.popsize</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193" compoundref="cmaescpp_8py" startline="238">fcmaes.cmaescpp.ACMA_C.popsize</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1ad99f6494d91a596c6025dc5dceea0970" compoundref="crfmnescpp_8py" startline="221">fcmaes.crfmnescpp.CRFMNES_C.popsize</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1ac57257a177f51fb2637120cc3bf7ac55" compoundref="de_8py" startline="305">fcmaes.de.DE.popsize</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad122a7d34bd51afeb06228ad811f85ce" compoundref="decpp_8py" startline="293">fcmaes.decpp.DE_C.popsize</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1ab0225e759a59fcf9af44411a93f195d6" compoundref="mode_8py" startline="487">fcmaes.mode.MODE.popsize</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582" compoundref="modecpp_8py" startline="404">fcmaes.modecpp.MODE_C.popsize</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a398738e6fcf7fe101cce3257fb0d579d" compoundref="cmaes_8py" startline="360" endline="378">fcmaes.cmaes.Cmaes.tell</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a4677822852841d0e52baa48fa91cbcb8" compoundref="cmaescpp_8py" startline="310" endline="319">fcmaes.cmaescpp.ACMA_C.tell</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a30327c6b3f1ecc4add777f4a74e83533" compoundref="crfmnescpp_8py" startline="282" endline="289">fcmaes.crfmnescpp.CRFMNES_C.tell</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1aa9de9d67ac999658a523d2ad8976954b" compoundref="de_8py" startline="382" endline="391">fcmaes.de.DE.tell</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad53cc4b5553a819096b47115e1f49b42" compoundref="decpp_8py" startline="360" endline="367">fcmaes.decpp.DE_C.tell</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a8b928c29cf646933a1821566ec18d73a" compoundref="mode_8py" startline="576" endline="583">fcmaes.mode.MODE.tell</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07" compoundref="modecpp_8py" startline="505" endline="519">fcmaes.modecpp.MODE_C.tell</references>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>np.ndarray</type>
        <definition> np.ndarray fcmaes.modecpp.MODE_C.ask</definition>
        <argsstring>(self)</argsstring>
        <name>ask</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.ask</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
<para>Generates and retrieves a new population of candidate solutions. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function interacts with a C library to generate a new population of
   solutions for an optimization task. It ensures that the results are
   retrieved and formatted appropriately in a NumPy array for further
   processing or evaluation.
</verbatim></para>
<para><simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>np A 2D NumPy array containing the generated population of solutions. Each row corresponds to a candidate solution, and each column corresponds to a dimension in the solution space. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="471" column="1" bodyfile="fcmaes/modecpp.py" bodystart="471" bodyend="485"/>
        <references refid="namespacefcmaes_1_1modecpp_1a44851bd7f89116b8d2704123ae52b295" compoundref="modecpp_8py" startline="660">fcmaes.modecpp.askMODE_C</references>
        <references refid="classfcmaes_1_1advretry_1_1_store_1abe787e76d4993d0280a389dabc8c3fe9" compoundref="advretry_8py" startline="319">fcmaes.advretry.Store.dim</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a2e2ca07b4daef2f2ad49d42d3220f268" compoundref="cmaes_8py" startline="216">fcmaes.cmaes.Cmaes.dim</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef" compoundref="cmaescpp_8py" startline="239">fcmaes.cmaescpp.ACMA_C.dim</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a3a0ed9ee6a06fadc715153d6be9145b3" compoundref="crfmnescpp_8py" startline="222">fcmaes.crfmnescpp.CRFMNES_C.dim</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1a82571c812edbae94b8dbe570a781e078" compoundref="de_8py" startline="302">fcmaes.de.DE.dim</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1a174ff7e79ef1f1d187dc0197e95256e8" compoundref="decpp_8py" startline="294">fcmaes.decpp.DE_C.dim</references>
        <references refid="classfcmaes_1_1evaluator_1_1callback__mo_1aabaf4b9748dafd3dc1baf4421036190e" compoundref="evaluator_8py" startline="858">fcmaes.evaluator.callback_mo.dim</references>
        <references refid="classfcmaes_1_1evaluator_1_1callback__so_1a556242f6333ce0f2316798f6171a061c" compoundref="evaluator_8py" startline="772">fcmaes.evaluator.callback_so.dim</references>
        <references refid="classfcmaes_1_1mapelites_1_1_archive_1ab255103df42bedc30ec7132cfc618122" compoundref="mapelites_8py" startline="544">fcmaes.mapelites.Archive.dim</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a5c09cc3172e92b1253fb3e742cf30366" compoundref="mode_8py" startline="482">fcmaes.mode.MODE.dim</references>
        <references refid="classfcmaes_1_1mode_1_1store_1abb90fc4232b181b4692c5418a37a5bd7" compoundref="mode_8py" startline="217">fcmaes.mode.store.dim</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1af4ebfa8da5f83635f078bc8f543a3243" compoundref="modecpp_8py" startline="405">fcmaes.modecpp.MODE_C.dim</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a761c0d9f4dee80eeede32decb57c33df" compoundref="cmaes_8py" startline="223">fcmaes.cmaes.Cmaes.popsize</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193" compoundref="cmaescpp_8py" startline="238">fcmaes.cmaescpp.ACMA_C.popsize</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1ad99f6494d91a596c6025dc5dceea0970" compoundref="crfmnescpp_8py" startline="221">fcmaes.crfmnescpp.CRFMNES_C.popsize</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1ac57257a177f51fb2637120cc3bf7ac55" compoundref="de_8py" startline="305">fcmaes.de.DE.popsize</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad122a7d34bd51afeb06228ad811f85ce" compoundref="decpp_8py" startline="293">fcmaes.decpp.DE_C.popsize</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1ab0225e759a59fcf9af44411a93f195d6" compoundref="mode_8py" startline="487">fcmaes.mode.MODE.popsize</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582" compoundref="modecpp_8py" startline="404">fcmaes.modecpp.MODE_C.popsize</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c" compoundref="cmaescpp_8py" startline="231">fcmaes.cmaescpp.ACMA_C.ptr</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a5be4aaaff3704c64f6579594e6aa32fe" compoundref="crfmnescpp_8py" startline="217">fcmaes.crfmnescpp.CRFMNES_C.ptr</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad9095931be109c4c732f10d7791c54fc" compoundref="decpp_8py" startline="285">fcmaes.decpp.DE_C.ptr</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09" compoundref="modecpp_8py" startline="399">fcmaes.modecpp.MODE_C.ptr</references>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a672b403a7e745d9e69532454f32d2b62" compoundref="modecpp_8py" startline="635" endline="646">fcmaes.modecpp.MODE_C.minimize_par</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa4a7a3e4f9a3fc84dc37faf820025306" compoundref="modecpp_8py" startline="602" endline="611">fcmaes.modecpp.MODE_C.minimize_ser</referencedby>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition> int fcmaes.modecpp.MODE_C.tell</definition>
        <argsstring>(self, np.ndarray ys, Optional[np.ndarray] xs=None)</argsstring>
        <name>tell</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.tell</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>np.ndarray</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>Optional</type>
          <declname>xs</declname>
          <array>[np.ndarray]</array>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Submits new candidate solutions and their corresponding function values to the optimizer. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function allows reporting of new solution candidates (`xs`) along with their associated
   function values (`ys`) to the optimization process. The optimizer will use this information
   to update its state and proceed with optimization.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>A NumPy array of the function values corresponding to the given candidate solutions. This must be a one-dimensional array or will be flattened internally. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>A NumPy array of candidate solutions. This must be a two-dimensional array with each row representing a candidate solution. If not provided, only the function values (<computeroutput>ys</computeroutput>) are reported.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>int A status code. The status code indicates successful reporting of the solutions (e.g., positive values) or failure due to an exception encountered during processing (negative values like -1). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="505" column="1" bodyfile="fcmaes/modecpp.py" bodystart="505" bodyend="519"/>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c" compoundref="cmaescpp_8py" startline="231">fcmaes.cmaescpp.ACMA_C.ptr</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a5be4aaaff3704c64f6579594e6aa32fe" compoundref="crfmnescpp_8py" startline="217">fcmaes.crfmnescpp.CRFMNES_C.ptr</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad9095931be109c4c732f10d7791c54fc" compoundref="decpp_8py" startline="285">fcmaes.decpp.DE_C.ptr</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09" compoundref="modecpp_8py" startline="399">fcmaes.modecpp.MODE_C.ptr</references>
        <references refid="namespacefcmaes_1_1modecpp_1ad27774b75048f71df3a93ace96ffadf7" compoundref="modecpp_8py" startline="674">fcmaes.modecpp.setPopulationMODE_C</references>
        <references refid="namespacefcmaes_1_1modecpp_1a3f5c0d6338d68c18374d7fbcaeba9930" compoundref="modecpp_8py" startline="663">fcmaes.modecpp.tellMODE_C</references>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a672b403a7e745d9e69532454f32d2b62" compoundref="modecpp_8py" startline="635" endline="646">fcmaes.modecpp.MODE_C.minimize_par</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa4a7a3e4f9a3fc84dc37faf820025306" compoundref="modecpp_8py" startline="602" endline="611">fcmaes.modecpp.MODE_C.minimize_ser</referencedby>
        <referencedby refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3267cafa8c068a367179034c3f5a562d" compoundref="modecpp_8py" startline="446" endline="457">fcmaes.modecpp.MODE_C.set_guess</referencedby>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a92426eb6d5a2f38b3a1218fd9479a1bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition> int fcmaes.modecpp.MODE_C.tell_switch</definition>
        <argsstring>(self, np.ndarray ys, Optional[bool] nsga_update=True, Optional[int] pareto_update=0)</argsstring>
        <name>tell_switch</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.tell_switch</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>np.ndarray</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>Optional</type>
          <declname>nsga_update</declname>
          <array>[bool]</array>
          <defval>True</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>pareto_update</declname>
          <array>[int]</array>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Updates information to a switching mechanism based on the input array. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This function performs an operation to update internal mechanisms using the provided
   data. It interacts with an external library or module through a C function call,
   processing the input array into a flattened format before submission.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>A NumPy array containing input data. The array will be flattened before use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsga_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether an NSGA update mechanism is enabled. Default is True. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pareto_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether a Pareto-based update mechanism is triggered. Default is 0.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>int The result of the external function call. On successful operation, it will likely be a status code or effect-based response. In case of an error, it returns -1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="540" column="1" bodyfile="fcmaes/modecpp.py" bodystart="542" bodyend="550"/>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c" compoundref="cmaescpp_8py" startline="231">fcmaes.cmaescpp.ACMA_C.ptr</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a5be4aaaff3704c64f6579594e6aa32fe" compoundref="crfmnescpp_8py" startline="217">fcmaes.crfmnescpp.CRFMNES_C.ptr</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad9095931be109c4c732f10d7791c54fc" compoundref="decpp_8py" startline="285">fcmaes.decpp.DE_C.ptr</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09" compoundref="modecpp_8py" startline="399">fcmaes.modecpp.MODE_C.ptr</references>
        <references refid="namespacefcmaes_1_1modecpp_1a754aecb7c3cb6174c472f001c7b24e1f" compoundref="modecpp_8py" startline="667">fcmaes.modecpp.tellMODE_switchC</references>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3433826fba507128212dc6dd455a7227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>np.ndarray</type>
        <definition> np.ndarray fcmaes.modecpp.MODE_C.population</definition>
        <argsstring>(self)</argsstring>
        <name>population</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.population</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
<para>Generates and retrieves the current population of individuals in a population-based algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para>This method computes the population from an internal representation and returns it as a numpy array. The population matrix is reconstructed by splitting and reshaping raw flat data fetched from an external C function.</para>
<para><simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>np A 2D numpy array where each row represents an individual in the population and columns represent their feature values. If an error occurs during processing, the method returns None.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Exception</parametername>
</parameternamelist>
<parameterdescription>
<para>If an internal error occurs during computation or interfacing with external C functions, an exception is raised and error information is printed to standard output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="569" column="1" bodyfile="fcmaes/modecpp.py" bodystart="569" bodyend="583"/>
        <references refid="classfcmaes_1_1advretry_1_1_store_1abe787e76d4993d0280a389dabc8c3fe9" compoundref="advretry_8py" startline="319">fcmaes.advretry.Store.dim</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a2e2ca07b4daef2f2ad49d42d3220f268" compoundref="cmaes_8py" startline="216">fcmaes.cmaes.Cmaes.dim</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef" compoundref="cmaescpp_8py" startline="239">fcmaes.cmaescpp.ACMA_C.dim</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a3a0ed9ee6a06fadc715153d6be9145b3" compoundref="crfmnescpp_8py" startline="222">fcmaes.crfmnescpp.CRFMNES_C.dim</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1a82571c812edbae94b8dbe570a781e078" compoundref="de_8py" startline="302">fcmaes.de.DE.dim</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1a174ff7e79ef1f1d187dc0197e95256e8" compoundref="decpp_8py" startline="294">fcmaes.decpp.DE_C.dim</references>
        <references refid="classfcmaes_1_1evaluator_1_1callback__mo_1aabaf4b9748dafd3dc1baf4421036190e" compoundref="evaluator_8py" startline="858">fcmaes.evaluator.callback_mo.dim</references>
        <references refid="classfcmaes_1_1evaluator_1_1callback__so_1a556242f6333ce0f2316798f6171a061c" compoundref="evaluator_8py" startline="772">fcmaes.evaluator.callback_so.dim</references>
        <references refid="classfcmaes_1_1mapelites_1_1_archive_1ab255103df42bedc30ec7132cfc618122" compoundref="mapelites_8py" startline="544">fcmaes.mapelites.Archive.dim</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a5c09cc3172e92b1253fb3e742cf30366" compoundref="mode_8py" startline="482">fcmaes.mode.MODE.dim</references>
        <references refid="classfcmaes_1_1mode_1_1store_1abb90fc4232b181b4692c5418a37a5bd7" compoundref="mode_8py" startline="217">fcmaes.mode.store.dim</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1af4ebfa8da5f83635f078bc8f543a3243" compoundref="modecpp_8py" startline="405">fcmaes.modecpp.MODE_C.dim</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a761c0d9f4dee80eeede32decb57c33df" compoundref="cmaes_8py" startline="223">fcmaes.cmaes.Cmaes.popsize</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193" compoundref="cmaescpp_8py" startline="238">fcmaes.cmaescpp.ACMA_C.popsize</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1ad99f6494d91a596c6025dc5dceea0970" compoundref="crfmnescpp_8py" startline="221">fcmaes.crfmnescpp.CRFMNES_C.popsize</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1ac57257a177f51fb2637120cc3bf7ac55" compoundref="de_8py" startline="305">fcmaes.de.DE.popsize</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad122a7d34bd51afeb06228ad811f85ce" compoundref="decpp_8py" startline="293">fcmaes.decpp.DE_C.popsize</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1ab0225e759a59fcf9af44411a93f195d6" compoundref="mode_8py" startline="487">fcmaes.mode.MODE.popsize</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582" compoundref="modecpp_8py" startline="404">fcmaes.modecpp.MODE_C.popsize</references>
        <references refid="namespacefcmaes_1_1modecpp_1ae6223aa5cb7a9c8f005870cb8f3c4d58" compoundref="modecpp_8py" startline="671">fcmaes.modecpp.populationMODE_C</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c" compoundref="cmaescpp_8py" startline="231">fcmaes.cmaescpp.ACMA_C.ptr</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a5be4aaaff3704c64f6579594e6aa32fe" compoundref="crfmnescpp_8py" startline="217">fcmaes.crfmnescpp.CRFMNES_C.ptr</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad9095931be109c4c732f10d7791c54fc" compoundref="decpp_8py" startline="285">fcmaes.decpp.DE_C.ptr</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09" compoundref="modecpp_8py" startline="399">fcmaes.modecpp.MODE_C.ptr</references>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa4a7a3e4f9a3fc84dc37faf820025306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, np.ndarray]</type>
        <definition> Tuple[np.ndarray, np.ndarray] fcmaes.modecpp.MODE_C.minimize_ser</definition>
        <argsstring>(self, Callable[[ArrayLike], ArrayLike] fun, Optional[int] max_evaluations=100000)</argsstring>
        <name>minimize_ser</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.minimize_ser</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>ArrayLike]</type>
          <declname>fun</declname>
          <defname>max_evaluations</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <array>[int]</array>
          <defval>100000</defval>
        </param>
        <briefdescription>
<para>Minimizes the given scalar function using a serial optimization method. </para>
        </briefdescription>
        <detaileddescription>
<para>The function iteratively evaluates the objective function on the candidate solutions, updates the internal state of the optimizer, and stops when the termination criterion is met or the maximum number of evaluations is reached.</para>
<para><verbatim>       fun (Callable[[ArrayLike], ArrayLike]): The objective function to be minimized.
           It should take an input of type ArrayLike and return a value of type ArrayLike.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of function evaluations allowed. Defaults to 100000.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, np.ndarray]: A tuple containing the final candidate solutions as a numpy array and their corresponding evaluated objective function values as a numpy array. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="600" column="1" bodyfile="fcmaes/modecpp.py" bodystart="602" bodyend="611"/>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a56c7e2c2ad921a3fc6263e5be6a873f8" compoundref="cmaes_8py" startline="338" endline="342">fcmaes.cmaes.Cmaes.ask</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ad7ca82faa65b471b66977e2f18676025" compoundref="cmaescpp_8py" startline="277" endline="291">fcmaes.cmaescpp.ACMA_C.ask</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a70d038e8b7f0c094ef4eb618fffbb1ed" compoundref="crfmnescpp_8py" startline="253" endline="267">fcmaes.crfmnescpp.CRFMNES_C.ask</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1acc2a7649411442c90167d856c673ccb4" compoundref="de_8py" startline="343" endline="361">fcmaes.de.DE.ask</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ac938731f80bce720692af9b7b84e41d0" compoundref="decpp_8py" startline="329" endline="343">fcmaes.decpp.DE_C.ask</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a1893dc839f866ab4d22f7fd13489bf73" compoundref="mode_8py" startline="559" endline="563">fcmaes.mode.MODE.ask</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1" compoundref="modecpp_8py" startline="471" endline="485">fcmaes.modecpp.MODE_C.ask</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a761c0d9f4dee80eeede32decb57c33df" compoundref="cmaes_8py" startline="223">fcmaes.cmaes.Cmaes.popsize</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193" compoundref="cmaescpp_8py" startline="238">fcmaes.cmaescpp.ACMA_C.popsize</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1ad99f6494d91a596c6025dc5dceea0970" compoundref="crfmnescpp_8py" startline="221">fcmaes.crfmnescpp.CRFMNES_C.popsize</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1ac57257a177f51fb2637120cc3bf7ac55" compoundref="de_8py" startline="305">fcmaes.de.DE.popsize</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad122a7d34bd51afeb06228ad811f85ce" compoundref="decpp_8py" startline="293">fcmaes.decpp.DE_C.popsize</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1ab0225e759a59fcf9af44411a93f195d6" compoundref="mode_8py" startline="487">fcmaes.mode.MODE.popsize</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582" compoundref="modecpp_8py" startline="404">fcmaes.modecpp.MODE_C.popsize</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a398738e6fcf7fe101cce3257fb0d579d" compoundref="cmaes_8py" startline="360" endline="378">fcmaes.cmaes.Cmaes.tell</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a4677822852841d0e52baa48fa91cbcb8" compoundref="cmaescpp_8py" startline="310" endline="319">fcmaes.cmaescpp.ACMA_C.tell</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a30327c6b3f1ecc4add777f4a74e83533" compoundref="crfmnescpp_8py" startline="282" endline="289">fcmaes.crfmnescpp.CRFMNES_C.tell</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1aa9de9d67ac999658a523d2ad8976954b" compoundref="de_8py" startline="382" endline="391">fcmaes.de.DE.tell</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad53cc4b5553a819096b47115e1f49b42" compoundref="decpp_8py" startline="360" endline="367">fcmaes.decpp.DE_C.tell</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a8b928c29cf646933a1821566ec18d73a" compoundref="mode_8py" startline="576" endline="583">fcmaes.mode.MODE.tell</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07" compoundref="modecpp_8py" startline="505" endline="519">fcmaes.modecpp.MODE_C.tell</references>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a672b403a7e745d9e69532454f32d2b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, np.ndarray]</type>
        <definition> Tuple[np.ndarray, np.ndarray] fcmaes.modecpp.MODE_C.minimize_par</definition>
        <argsstring>(self, Callable[[ArrayLike], ArrayLike] fun, Optional[int] max_evaluations=100000, Optional[int] workers=mp.cpu_count())</argsstring>
        <name>minimize_par</name>
        <qualifiedname>fcmaes.modecpp.MODE_C.minimize_par</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>ArrayLike]</type>
          <declname>fun</declname>
          <defname>max_evaluations</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>max_evaluations</declname>
          <defname>workers</defname>
          <array>[int]</array>
          <defval>100000</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>workers</declname>
          <array>[int]</array>
          <defval>mp.cpu_count()</defval>
        </param>
        <briefdescription>
<para>Run a parallel multi-objective optimization process. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This method leverages parallel processing to perform multi-objective
   optimizations using a given objective function. It runs multiple iterations
   until the stopping criteria are met or the specified maximum evaluations are
   reached.


       fun (Callable[[ArrayLike], ArrayLike]): Objective function to minimize.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of evaluations allowed. Defaults to 100000. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of parallel workers to use. Defaults to the number of CPU cores.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, np.ndarray]: A tuple containing the array of evaluated input solutions (<computeroutput>xs</computeroutput>) and their corresponding objective values (<computeroutput>ys</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/modecpp.py" line="632" column="1" bodyfile="fcmaes/modecpp.py" bodystart="635" bodyend="646"/>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a56c7e2c2ad921a3fc6263e5be6a873f8" compoundref="cmaes_8py" startline="338" endline="342">fcmaes.cmaes.Cmaes.ask</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ad7ca82faa65b471b66977e2f18676025" compoundref="cmaescpp_8py" startline="277" endline="291">fcmaes.cmaescpp.ACMA_C.ask</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a70d038e8b7f0c094ef4eb618fffbb1ed" compoundref="crfmnescpp_8py" startline="253" endline="267">fcmaes.crfmnescpp.CRFMNES_C.ask</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1acc2a7649411442c90167d856c673ccb4" compoundref="de_8py" startline="343" endline="361">fcmaes.de.DE.ask</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ac938731f80bce720692af9b7b84e41d0" compoundref="decpp_8py" startline="329" endline="343">fcmaes.decpp.DE_C.ask</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a1893dc839f866ab4d22f7fd13489bf73" compoundref="mode_8py" startline="559" endline="563">fcmaes.mode.MODE.ask</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1" compoundref="modecpp_8py" startline="471" endline="485">fcmaes.modecpp.MODE_C.ask</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a20adacf20c1411e271fe9be8f7504fa5" compoundref="mode_8py" startline="481">fcmaes.mode.MODE.ncon</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa461c8e27adc9620ba6f4ed42b6e04cc" compoundref="modecpp_8py" startline="407">fcmaes.modecpp.MODE_C.ncon</references>
        <references refid="classfcmaes_1_1evaluator_1_1callback__mo_1a5b7f16a346ee7d2157d76a674ffeed46" compoundref="evaluator_8py" startline="859">fcmaes.evaluator.callback_mo.nobj</references>
        <references refid="classfcmaes_1_1evaluator_1_1callback__so_1a527ef30b5556fea42a808c27c9ea22f6" compoundref="evaluator_8py" startline="773">fcmaes.evaluator.callback_so.nobj</references>
        <references refid="classfcmaes_1_1evaluator_1_1parallel__mo_1a9976a23db518884ec306a66c40c241a4" compoundref="evaluator_8py" startline="651">fcmaes.evaluator.parallel_mo.nobj</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1ad8a88c6e8d55396b806493982cb1cdb5" compoundref="mode_8py" startline="480">fcmaes.mode.MODE.nobj</references>
        <references refid="classfcmaes_1_1mode_1_1store_1ad41dda52326d3c8dd58fa1ba06e4fe43" compoundref="mode_8py" startline="218">fcmaes.mode.store.nobj</references>
        <references refid="classfcmaes_1_1mode_1_1wrapper_1ad2534786b7fbf2ce570b2d2503b85482" compoundref="mode_8py" startline="1347">fcmaes.mode.wrapper.nobj</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a6c3952de5a26ec3374f08723eecf3b2e" compoundref="modecpp_8py" startline="406">fcmaes.modecpp.MODE_C.nobj</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a761c0d9f4dee80eeede32decb57c33df" compoundref="cmaes_8py" startline="223">fcmaes.cmaes.Cmaes.popsize</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193" compoundref="cmaescpp_8py" startline="238">fcmaes.cmaescpp.ACMA_C.popsize</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1ad99f6494d91a596c6025dc5dceea0970" compoundref="crfmnescpp_8py" startline="221">fcmaes.crfmnescpp.CRFMNES_C.popsize</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1ac57257a177f51fb2637120cc3bf7ac55" compoundref="de_8py" startline="305">fcmaes.de.DE.popsize</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad122a7d34bd51afeb06228ad811f85ce" compoundref="decpp_8py" startline="293">fcmaes.decpp.DE_C.popsize</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1ab0225e759a59fcf9af44411a93f195d6" compoundref="mode_8py" startline="487">fcmaes.mode.MODE.popsize</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582" compoundref="modecpp_8py" startline="404">fcmaes.modecpp.MODE_C.popsize</references>
        <references refid="classfcmaes_1_1cmaes_1_1_cmaes_1a398738e6fcf7fe101cce3257fb0d579d" compoundref="cmaes_8py" startline="360" endline="378">fcmaes.cmaes.Cmaes.tell</references>
        <references refid="classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a4677822852841d0e52baa48fa91cbcb8" compoundref="cmaescpp_8py" startline="310" endline="319">fcmaes.cmaescpp.ACMA_C.tell</references>
        <references refid="classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c_1a30327c6b3f1ecc4add777f4a74e83533" compoundref="crfmnescpp_8py" startline="282" endline="289">fcmaes.crfmnescpp.CRFMNES_C.tell</references>
        <references refid="classfcmaes_1_1de_1_1_d_e_1aa9de9d67ac999658a523d2ad8976954b" compoundref="de_8py" startline="382" endline="391">fcmaes.de.DE.tell</references>
        <references refid="classfcmaes_1_1decpp_1_1_d_e___c_1ad53cc4b5553a819096b47115e1f49b42" compoundref="decpp_8py" startline="360" endline="367">fcmaes.decpp.DE_C.tell</references>
        <references refid="classfcmaes_1_1mode_1_1_m_o_d_e_1a8b928c29cf646933a1821566ec18d73a" compoundref="mode_8py" startline="576" endline="583">fcmaes.mode.MODE.tell</references>
        <references refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07" compoundref="modecpp_8py" startline="505" endline="519">fcmaes.modecpp.MODE_C.tell</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class for managing the MODE-C optimization algorithm. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides an interface for the multi-objective differential evolution (MODE) algorithm and supports handling of objective functions, constraints, parallel evaluation, and population management. It is designed to work with scenarios that require solving optimization problems with multiple competing objectives, bounded variables, and potentially integer-constrained decision variables.</para>
<para><verbatim>       using the `scipy.optimize.Bounds` class.
</verbatim> </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>fcmaes.modecpp.MODE_C</label>
        <link refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c"/>
      </node>
    </collaborationgraph>
    <location file="fcmaes/modecpp.py" line="320" column="1" bodyfile="fcmaes/modecpp.py" bodystart="320" bodyend="646"/>
    <listofallmembers>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a580bb3d8baef2a338186cac64df0ea45" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>__del__</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac8edb933a20c41ff33f74d59f9a7f486" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>__init__</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>ask</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ab5837c03082fdd02b53bb829e538a094" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>bounds</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1af4ebfa8da5f83635f078bc8f543a3243" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>dim</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a672b403a7e745d9e69532454f32d2b62" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>minimize_par</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa4a7a3e4f9a3fc84dc37faf820025306" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>minimize_ser</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa461c8e27adc9620ba6f4ed42b6e04cc" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>ncon</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a6c3952de5a26ec3374f08723eecf3b2e" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>nobj</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>popsize</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3433826fba507128212dc6dd455a7227" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>population</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>ptr</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3267cafa8c068a367179034c3f5a562d" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>set_guess</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>tell</name></member>
      <member refid="classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a92426eb6d5a2f38b3a1218fd9479a1bc" prot="public" virt="non-virtual"><scope>fcmaes::modecpp::MODE_C</scope><name>tell_switch</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
