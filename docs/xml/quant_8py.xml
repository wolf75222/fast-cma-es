<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="quant_8py" kind="file" language="Python">
    <compoundname>quant.py</compoundname>
    <innerclass refid="classexamples_1_1quant_1_1_fitness" prot="public">examples::quant::Fitness</innerclass>
    <innernamespace refid="namespaceexamples">examples</innernamespace>
    <innernamespace refid="namespaceexamples_1_1quant">examples::quant</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceexamples_1_1quant_1a65c7b887b7f7367afcbfd16db3d1c42d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::quant.backend</definition>
        <argsstring></argsstring>
        <name>backend</name>
        <qualifiedname>examples.quant.backend</qualifiedname>
        <initializer>=  Aer.get_backend(&quot;qasm_simulator&quot;, max_parallel_threads=1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="24" column="1" bodyfile="examples/quant.py" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1quant_1aec66392ed0dc315b764d783c2cfeabe8" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::quant.stdout</definition>
        <argsstring></argsstring>
        <name>stdout</name>
        <qualifiedname>examples.quant.stdout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="31" column="1" bodyfile="examples/quant.py" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1quant_1a7cb7bd52f8064e1948012d4cf23aba31" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::quant.format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <qualifiedname>examples.quant.format</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="31" column="1" bodyfile="examples/quant.py" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1quant_1a587f1251b35e2212f728550c97f776cc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>examples::quant.level</definition>
        <argsstring></argsstring>
        <name>level</name>
        <qualifiedname>examples.quant.level</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="31" column="1" bodyfile="examples/quant.py" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1quant_1ad4a54ae9ebc5e270133852a96105cf56" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int examples::quant.NUM_SHOTS</definition>
        <argsstring></argsstring>
        <name>NUM_SHOTS</name>
        <qualifiedname>examples.quant.NUM_SHOTS</qualifiedname>
        <initializer>=  10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="34" column="1" bodyfile="examples/quant.py" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceexamples_1_1quant_1a7749e368860b241dc9bdd4d28b06f835" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list examples::quant.fits</definition>
        <argsstring></argsstring>
        <name>fits</name>
        <qualifiedname>examples.quant.fits</qualifiedname>
        <initializer>=  [<ref refid="class_fitness" kindref="compound">Fitness</ref>(random_target_distr()) for i in range(10)]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="157" column="1" bodyfile="examples/quant.py" bodystart="157" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceexamples_1_1quant_1a9072d95c70ea7d05b666c80254547034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.quant.get_var_form</definition>
        <argsstring>(params)</argsstring>
        <name>get_var_form</name>
        <qualifiedname>examples.quant.get_var_form</qualifiedname>
        <param>
          <type>params</type>
          <defname>params</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="36" column="1" bodyfile="examples/quant.py" bodystart="36" bodyend="43"/>
        <referencedby refid="namespaceexamples_1_1quant_1ab0e48a116239e90fe916567c6a16fb23" compoundref="quant_8py" startline="56" endline="68">examples.quant.objective_function</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1quant_1a9757373bc2b175a335aa0d5f752dcd78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.quant.get_probability_distribution</definition>
        <argsstring>(counts)</argsstring>
        <name>get_probability_distribution</name>
        <qualifiedname>examples.quant.get_probability_distribution</qualifiedname>
        <param>
          <type>counts</type>
          <defname>counts</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="44" column="1" bodyfile="examples/quant.py" bodystart="44" bodyend="49"/>
        <referencedby refid="namespaceexamples_1_1quant_1ab0e48a116239e90fe916567c6a16fb23" compoundref="quant_8py" startline="56" endline="68">examples.quant.objective_function</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1quant_1ada40b79fd0f923b6c0b1757cdafd4603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.quant.random_target_distr</definition>
        <argsstring>()</argsstring>
        <name>random_target_distr</name>
        <qualifiedname>examples.quant.random_target_distr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="50" column="1" bodyfile="examples/quant.py" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1quant_1ab0e48a116239e90fe916567c6a16fb23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.quant.objective_function</definition>
        <argsstring>(params, target_distr)</argsstring>
        <name>objective_function</name>
        <qualifiedname>examples.quant.objective_function</qualifiedname>
        <param>
          <type>params</type>
          <defname>params</defname>
        </param>
        <param>
          <type>target_distr</type>
          <defname>target_distr</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="56" column="1" bodyfile="examples/quant.py" bodystart="56" bodyend="68"/>
        <references refid="namespaceexamples_1_1quant_1a9757373bc2b175a335aa0d5f752dcd78" compoundref="quant_8py" startline="44" endline="49">examples.quant.get_probability_distribution</references>
        <references refid="namespaceexamples_1_1quant_1a9072d95c70ea7d05b666c80254547034" compoundref="quant_8py" startline="36" endline="43">examples.quant.get_var_form</references>
        <referencedby refid="classexamples_1_1quant_1_1_fitness_1a83ad6e774865c0d543ab7f356378e48a" compoundref="quant_8py" startline="75" endline="85">examples.quant.Fitness.__call__</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1quant_1a27dda8d7474d2d824515d4e27ee7c1e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.quant.opt_differential_evolution_loop</definition>
        <argsstring>(fits)</argsstring>
        <name>opt_differential_evolution_loop</name>
        <qualifiedname>examples.quant.opt_differential_evolution_loop</qualifiedname>
        <param>
          <type>fits</type>
          <defname>fits</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="86" column="1" bodyfile="examples/quant.py" bodystart="86" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1quant_1a308d4239e56d47cf999cd1b6ed9925f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.quant.opt_cmaes_loop</definition>
        <argsstring>(fits)</argsstring>
        <name>opt_cmaes_loop</name>
        <qualifiedname>examples.quant.opt_cmaes_loop</qualifiedname>
        <param>
          <type>fits</type>
          <defname>fits</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="97" column="1" bodyfile="examples/quant.py" bodystart="97" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1quant_1a9bdd19a5ca466377aa79f0d5eb64da2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.quant.opt_biteopt_loop</definition>
        <argsstring>(fits)</argsstring>
        <name>opt_biteopt_loop</name>
        <qualifiedname>examples.quant.opt_biteopt_loop</qualifiedname>
        <param>
          <type>fits</type>
          <defname>fits</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="108" column="1" bodyfile="examples/quant.py" bodystart="108" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1quant_1a59120aaeb10828e4a2d789db7e1895af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.quant.opt_COBYLA_evolution_loop</definition>
        <argsstring>(fits)</argsstring>
        <name>opt_COBYLA_evolution_loop</name>
        <qualifiedname>examples.quant.opt_COBYLA_evolution_loop</qualifiedname>
        <param>
          <type>fits</type>
          <defname>fits</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="119" column="1" bodyfile="examples/quant.py" bodystart="119" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceexamples_1_1quant_1aa8a413cdec1ed5fb8fd269635d471ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>examples.quant.find_COBYLA_weakness</definition>
        <argsstring>()</argsstring>
        <name>find_COBYLA_weakness</name>
        <qualifiedname>examples.quant.find_COBYLA_weakness</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="examples/quant.py" line="133" column="1" bodyfile="examples/quant.py" bodystart="133" bodyend="153"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceexamples_1_1quant" refkind="compound"><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Adapted<sp/>from<sp/>&quot;Example<sp/>with<sp/>a<sp/>Single<sp/>Qubit<sp/>Variational<sp/>Form&quot;</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">https://qiskit.org/textbook/ch-applications/vqe-molecules.html#Example-with-a-Single-Qubit-Variational-Form</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">Read<sp/>https://qiskit.org/documentation/getting_started.html<sp/>about<sp/>setting<sp/>up<sp/>your<sp/>environment</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">Install<sp/>dependencies:</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">pip<sp/>install<sp/>qiskit</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">pip<sp/>install<sp/>qiskit-aer-gpu<sp/>(doesn&apos;t<sp/>work<sp/>on<sp/>AMD<sp/>GPUs<sp/>and<sp/>is<sp/>not<sp/>required<sp/>for<sp/>executing<sp/>this<sp/>file)</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral">See<sp/>https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Quant.adoc<sp/>for<sp/>a<sp/>detailed<sp/>description.</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Tested<sp/>using<sp/>https://docs.conda.io/en/main/miniconda.html<sp/>on<sp/>Linux<sp/>Mint<sp/>21.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>qiskit<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>QuantumCircuit,<sp/>assemble,<sp/>Aer,<sp/>transpile,<sp/>ClassicalRegister,<sp/>QuantumRegister</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>qiskit.algorithms.optimizers<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>COBYLA</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>time<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>perf_counter</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacefcmaes_1_1optimizer" kindref="compound">fcmaes.optimizer</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Bite_cpp,<sp/>dtime,<sp/>wrapper</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy.optimize<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Bounds</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>fcmaes<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>retry,<sp/>de,<sp/>cmaes,<sp/>bitecpp,<sp/>cmaescpp,<sp/>decpp</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespaceexamples_1_1quant_1a65c7b887b7f7367afcbfd16db3d1c42d" refkind="member"><highlight class="normal">backend<sp/>=<sp/>Aer.get_backend(</highlight><highlight class="stringliteral">&quot;qasm_simulator&quot;</highlight><highlight class="normal">,<sp/>max_parallel_threads=1)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">#backend.set_options(device=&apos;GPU&apos;)<sp/>#<sp/>if<sp/>you<sp/>switch<sp/>GPU<sp/>on,<sp/>parallel<sp/>simulation<sp/>will<sp/>crash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>loguru<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logger</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">logger.remove()</highlight></codeline>
<codeline lineno="31" refid="namespaceexamples_1_1quant_1a7cb7bd52f8064e1948012d4cf23aba31" refkind="member"><highlight class="normal">logger.add(sys.stdout,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">logger.add(</highlight><highlight class="stringliteral">&quot;log_{time}.txt&quot;</highlight><highlight class="normal">,<sp/>format=</highlight><highlight class="stringliteral">&quot;{time:HH:mm:ss.SS}<sp/>|<sp/>{process}<sp/>|<sp/>{level}<sp/>|<sp/>{message}&quot;</highlight><highlight class="normal">,<sp/>level=</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="namespaceexamples_1_1quant_1ad4a54ae9ebc5e270133852a96105cf56" refkind="member"><highlight class="normal">NUM_SHOTS<sp/>=<sp/>10000</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespaceexamples_1_1quant_1a9072d95c70ea7d05b666c80254547034" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1quant_1a9072d95c70ea7d05b666c80254547034" kindref="member">get_var_form</ref>(params):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>qr<sp/>=<sp/>QuantumRegister(1,<sp/>name=</highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>cr<sp/>=<sp/>ClassicalRegister(1,<sp/>name=</highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>qc<sp/>=<sp/>QuantumCircuit(qr,<sp/>cr)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>qc.u(params[0],<sp/>params[1],<sp/>params[2],<sp/>qr[0])</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>qc.measure(qr,<sp/>cr[0])</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qc</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="namespaceexamples_1_1quant_1a9757373bc2b175a335aa0d5f752dcd78" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1quant_1a9757373bc2b175a335aa0d5f752dcd78" kindref="member">get_probability_distribution</ref>(counts):</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>output_distr<sp/>=<sp/>[v<sp/>/<sp/>NUM_SHOTS<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>counts.values()]</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(output_distr)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_distr.append(1<sp/>-<sp/>output_distr[0])</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output_distr</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="namespaceexamples_1_1quant_1ada40b79fd0f923b6c0b1757cdafd4603" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1quant_1ada40b79fd0f923b6c0b1757cdafd4603" kindref="member">random_target_distr</ref>():</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>target_distr<sp/>=<sp/>np.random.rand(2)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>now<sp/>convert<sp/>the<sp/>random<sp/>vector<sp/>into<sp/>a<sp/>valid<sp/>probability<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>target_distr<sp/>/=<sp/>sum(target_distr)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>target_distr</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="namespaceexamples_1_1quant_1ab0e48a116239e90fe916567c6a16fb23" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1quant_1ab0e48a116239e90fe916567c6a16fb23" kindref="member">objective_function</ref>(params,<sp/>target_distr):</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Obtain<sp/>a<sp/>quantum<sp/>circuit<sp/>instance<sp/>from<sp/>the<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>qc<sp/>=<sp/><ref refid="namespaceexamples_1_1quant_1a9072d95c70ea7d05b666c80254547034" kindref="member">get_var_form</ref>(params)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Execute<sp/>the<sp/>quantum<sp/>circuit<sp/>to<sp/>obtain<sp/>the<sp/>probability<sp/>distribution<sp/>associated<sp/>with<sp/>the<sp/>current<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>t_qc<sp/>=<sp/>transpile(qc,<sp/>backend)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>qobj<sp/>=<sp/>assemble(t_qc,<sp/>shots=NUM_SHOTS)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>backend.run(qobj).result()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Obtain<sp/>the<sp/>counts<sp/>for<sp/>each<sp/>measured<sp/>state,<sp/>and<sp/>convert<sp/>those<sp/>counts<sp/>into<sp/>a<sp/>probability<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>output_distr<sp/>=<sp/><ref refid="namespaceexamples_1_1quant_1a9757373bc2b175a335aa0d5f752dcd78" kindref="member">get_probability_distribution</ref>(result.get_counts(qc))</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Calculate<sp/>the<sp/>cost<sp/>as<sp/>the<sp/>distance<sp/>between<sp/>the<sp/>output<sp/>distribution<sp/>and<sp/>the<sp/>target<sp/>distribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>cost<sp/>=<sp/>sum([np.abs(output_distr[i]<sp/>-<sp/>target_distr[i])<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(2)])</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cost</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classexamples_1_1quant_1_1_fitness" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1quant_1_1_fitness" kindref="compound">Fitness</ref>(object):</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71" refid="classexamples_1_1quant_1_1_fitness_1ab9f14ed15a75c6f2dd7a8031eadd7ddf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1quant_1_1_fitness_1ab9f14ed15a75c6f2dd7a8031eadd7ddf" kindref="member">__init__</ref>(self,<sp/>target_distr):</highlight></codeline>
<codeline lineno="72" refid="classexamples_1_1quant_1_1_fitness_1ae776c81b56af72978888efa1e430e0c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classexamples_1_1quant_1_1_fitness_1ae776c81b56af72978888efa1e430e0c1" kindref="member">target_distr</ref><sp/>=<sp/>target_distr</highlight></codeline>
<codeline lineno="73" refid="classexamples_1_1quant_1_1_fitness_1a505efb4be4047efca40ea53ae1b3b1c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classexamples_1_1quant_1_1_fitness_1a505efb4be4047efca40ea53ae1b3b1c1" kindref="member">bounds</ref><sp/>=<sp/>Bounds([0]*3,<sp/>[2]*3)<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75" refid="classexamples_1_1quant_1_1_fitness_1a83ad6e774865c0d543ab7f356378e48a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classexamples_1_1quant_1_1_fitness_1a83ad6e774865c0d543ab7f356378e48a" kindref="member">__call__</ref>(self,<sp/>x):</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/><ref refid="namespaceexamples_1_1quant_1ab0e48a116239e90fe916567c6a16fb23" kindref="member">objective_function</ref>(x,<sp/>self.<ref refid="classexamples_1_1quant_1_1_fitness_1ae776c81b56af72978888efa1e430e0c1" kindref="member">target_distr</ref>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>np.isfinite(y)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>y<sp/>&gt;<sp/>1E9:<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1E9</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>ex:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(str(ex))<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1E9</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86" refid="namespaceexamples_1_1quant_1a27dda8d7474d2d824515d4e27ee7c1e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1quant_1a27dda8d7474d2d824515d4e27ee7c1e4" kindref="member">opt_differential_evolution_loop</ref>(fits):</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>perf_counter()</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>distances<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fit<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fits:<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>de.minimize(fit,<sp/>3,<sp/>fit.bounds,<sp/>max_evaluations<sp/>=<sp/>1000,<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_fitness<sp/>=<sp/>0.00001,<sp/>workers=16)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;de<sp/>time&quot;</highlight><highlight class="normal">,<sp/>dtime(t0),<sp/></highlight><highlight class="stringliteral">&quot;distance&quot;</highlight><highlight class="normal">,<sp/>ret.fun)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distances.append(ret.fun)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;de<sp/>mean<sp/>distance<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>str(np.mean(distances)))</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;de<sp/>std<sp/>distance<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>str(np.std(distances)))</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="namespaceexamples_1_1quant_1a308d4239e56d47cf999cd1b6ed9925f5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1quant_1a308d4239e56d47cf999cd1b6ed9925f5" kindref="member">opt_cmaes_loop</ref>(fits):</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>perf_counter()</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>distances<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fit<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fits:<sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>cmaes.minimize(fit,<sp/>fit.bounds,<sp/>input_sigma=0.7,<sp/>max_evaluations<sp/>=<sp/>1000,<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop_fitness<sp/>=<sp/>0.00001,<sp/>workers=16)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;cmaes<sp/>time&quot;</highlight><highlight class="normal">,<sp/>dtime(t0),<sp/></highlight><highlight class="stringliteral">&quot;distance&quot;</highlight><highlight class="normal">,<sp/>ret.fun)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distances.append(ret.fun)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;cmaes<sp/>mean<sp/>distance<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>str(np.mean(distances)))</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;cmaes<sp/>std<sp/>distance<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>str(np.std(distances)))</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="108" refid="namespaceexamples_1_1quant_1a9bdd19a5ca466377aa79f0d5eb64da2a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1quant_1a9bdd19a5ca466377aa79f0d5eb64da2a" kindref="member">opt_biteopt_loop</ref>(fits):</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>perf_counter()</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>distances<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fit<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fits:<sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>retry.minimize(fit,<sp/>fit.bounds,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retries=16,<sp/>optimizer=<ref refid="classfcmaes_1_1optimizer_1_1_bite__cpp" kindref="compound">Bite_cpp</ref>(100),<sp/>workers=16)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;bite<sp/>time&quot;</highlight><highlight class="normal">,<sp/>dtime(t0),<sp/></highlight><highlight class="stringliteral">&quot;distance&quot;</highlight><highlight class="normal">,<sp/>ret.fun)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distances.append(ret.fun)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;bite<sp/>mean<sp/>distance<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>str(np.mean(distances)))</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;bite<sp/>std<sp/>distance<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>str(np.std(distances)))</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="namespaceexamples_1_1quant_1a59120aaeb10828e4a2d789db7e1895af" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1quant_1a59120aaeb10828e4a2d789db7e1895af" kindref="member">opt_COBYLA_evolution_loop</ref>(fits):</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>the<sp/>COBYLA<sp/>optimizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>the<sp/>initial<sp/>parameters<sp/>(noting<sp/>that<sp/>our<sp/>single<sp/>qubit<sp/>variational<sp/>form<sp/>has<sp/>3<sp/>parameters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>perf_counter()</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>distances<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fit<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>fits:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params<sp/>=<sp/>np.random.rand(3)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimizer<sp/>=<sp/>COBYLA(maxiter=50000,<sp/>tol=0.00001)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>optimizer.minimize(fun=fit,<sp/>x0=params)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;COBYLA<sp/>time&quot;</highlight><highlight class="normal">,<sp/>dtime(t0),<sp/></highlight><highlight class="stringliteral">&quot;distance&quot;</highlight><highlight class="normal">,<sp/>ret.fun)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distances.append(ret.fun)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;COBYLA<sp/>mean<sp/>distance<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>str(np.mean(distances)))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;COBYLA<sp/>std<sp/>distance<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>str(np.std(distances)))</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133" refid="namespaceexamples_1_1quant_1aa8a413cdec1ed5fb8fd269635d471ce2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceexamples_1_1quant_1aa8a413cdec1ed5fb8fd269635d471ce2" kindref="member">find_COBYLA_weakness</ref>():</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">fitness(x):</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params<sp/>=<sp/>x[:3]<sp/></highlight><highlight class="comment">#<sp/>use<sp/>first<sp/>three<sp/>decision<sp/>variables<sp/>as<sp/>guess<sp/>for<sp/>COBYLA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_distr<sp/>=<sp/><sp/>x[3:]<sp/></highlight><highlight class="comment">#<sp/>use<sp/>two<sp/>decision<sp/>variables<sp/>as<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>min(target_distr)<sp/>&lt;<sp/>0.01:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/></highlight><highlight class="comment">#<sp/>avoid<sp/>division<sp/>by<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_distr<sp/>/=<sp/>sum(target_distr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fit<sp/>=<sp/><ref refid="classexamples_1_1quant_1_1_fitness" kindref="compound">Fitness</ref>(target_distr)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>COBYLA(maxiter=50000,<sp/>tol=0.00001).minimize(fun=fit,<sp/>x0=params)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>bitecpp.minimize(fit,<sp/>fit.bounds,<sp/>x0=params,<sp/>max_evaluations=1000,<sp/>M=6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>bitecpp.minimize(fit,<sp/>fit.bounds,<sp/>x0=params,<sp/>max_evaluations=300,<sp/>stop_fitness=0.05)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>cmaescpp.minimize(fit,<sp/>fit.bounds,<sp/>x0=params,<sp/>max_evaluations=300,<sp/>stop_fitness=0.05)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ret<sp/>=<sp/>decpp.minimize(fit,<sp/>3,<sp/>fit.bounds,<sp/>max_evaluations=300,<sp/>stop_fitness=0.05)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-ret.fun<sp/></highlight><highlight class="comment">#<sp/>we<sp/>maximize<sp/>the<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>Bounds([0]*5,<sp/>[2]*3<sp/>+<sp/>[1]*2)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>de.minimize(<ref refid="classfcmaes_1_1optimizer_1_1wrapper" kindref="compound">wrapper</ref>(fitness),<sp/>5,<sp/>bounds,<sp/>max_evaluations<sp/>=<sp/>300,<sp/>workers=16)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;worst<sp/>COBYLA<sp/>distance<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><sp/>str(ret.fun))</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>generate<sp/>Fitness<sp/>objects<sp/>associated<sp/>to<sp/>random<sp/>target<sp/>distributions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="namespaceexamples_1_1quant_1a7749e368860b241dc9bdd4d28b06f835" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>fits<sp/>=<sp/>[<ref refid="classexamples_1_1quant_1_1_fitness" kindref="compound">Fitness</ref>(<ref refid="namespaceexamples_1_1quant_1ada40b79fd0f923b6c0b1757cdafd4603" kindref="member">random_target_distr</ref>())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(10)]</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1quant_1a27dda8d7474d2d824515d4e27ee7c1e4" kindref="member">opt_differential_evolution_loop</ref>(fits)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1quant_1a308d4239e56d47cf999cd1b6ed9925f5" kindref="member">opt_cmaes_loop</ref>(fits)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1quant_1a9bdd19a5ca466377aa79f0d5eb64da2a" kindref="member">opt_biteopt_loop</ref>(fits)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceexamples_1_1quant_1a59120aaeb10828e4a2d789db7e1895af" kindref="member">opt_COBYLA_evolution_loop</ref>(fits)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>find_COBYLA_weakness()<sp/>#<sp/>check<sp/>for<sp/>weaknesses<sp/>of<sp/>COBYLA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="examples/quant.py"/>
  </compounddef>
</doxygen>
