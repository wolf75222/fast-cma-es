<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classfcmaes_1_1optimizer_1_1_basin__hopping" kind="class" language="Python" prot="public">
    <compoundname>fcmaes::optimizer::Basin_hopping</compoundname>
    <basecompoundref refid="classfcmaes_1_1optimizer_1_1_optimizer" prot="public" virt="non-virtual">fcmaes.optimizer.Optimizer</basecompoundref>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_basin__hopping_1adc078d65d34197f8aef544ebe27fde81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.optimizer.Basin_hopping.__init__</definition>
        <argsstring>(self, max_evaluations=50000, store=None)</argsstring>
        <name>__init__</name>
        <qualifiedname>fcmaes.optimizer.Basin_hopping.__init__</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6" kindref="member">max_evaluations</ref></type>
          <defname>max_evaluations</defname>
          <defval>50000</defval>
        </param>
        <param>
          <type>store</type>
          <defname>store</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Initializes the optimizer, which employs the SciPy basin-hopping algorithm to perform optimization. </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   This constructor sets up the optimizer with the maximum allowable evaluations and an optional storage system
   for retaining optimization state or results. The optimization process employs a global optimization algorithm
   that effectively navigates through a rough landscape to find the global minimum.
</verbatim></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>int The maximum number of iterations or evaluations the optimizer is allowed to perform.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional An optional storage mechanism to save or track the state/results of the optimization process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2948" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2948" bodyend="2950"/>
      </memberdef>
      <memberdef kind="function" id="classfcmaes_1_1optimizer_1_1_basin__hopping_1ab665db39cdee947aae4959f7d2f7b13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Tuple[np.ndarray, float, int]</type>
        <definition> Tuple[np.ndarray, float, int] fcmaes.optimizer.Basin_hopping.minimize</definition>
        <argsstring>(self, Callable[[ArrayLike], float] fun, Optional[Bounds] bounds, Optional[ArrayLike] guess=None, Optional[float] sdevs=None, rg=Generator(PCG64DXSM()), store=None)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.optimizer.Basin_hopping.minimize</qualifiedname>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>Callable</type>
          <defname>fun</defname>
          <array>[[ArrayLike]</array>
        </param>
        <param>
          <type>float]</type>
          <declname>fun</declname>
          <defname>bounds</defname>
        </param>
        <param>
          <type>Optional</type>
          <declname>bounds</declname>
          <defname>guess</defname>
          <array>[Bounds]</array>
        </param>
        <param>
          <type>Optional</type>
          <declname>guess</declname>
          <defname>sdevs</defname>
          <array>[ArrayLike]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>Optional</type>
          <declname>sdevs</declname>
          <defname>rg</defname>
          <array>[float]</array>
          <defval>None</defval>
        </param>
        <param>
          <type>rg</type>
          <defname>store</defname>
          <defval>Generator(PCG64DXSM())</defval>
        </param>
        <param>
          <type>store</type>
          <defval>None</defval>
        </param>
        <briefdescription>
<para>Minimizes a given objective function using the basinhopping optimization algorithm with local search. </para>
        </briefdescription>
        <detaileddescription>
<para>This method performs optimization by generating random starting points within the specified bounds and repeatedly applies local search algorithms to find the minimum of the function.</para>
<para><verbatim>       fun (Callable[[ArrayLike], float]): The objective function to minimize.
           It must accept an input array and return a scalar value as output.
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bounds</parametername>
</parameternamelist>
<parameterdescription>
<para>The bounds or constraints on the optimization problem. This should define the lower and upper limits for each dimension of the input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional initial guess for the starting point of the optimization. If not provided, a uniform random starting point within the bounds is generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdevs</parametername>
</parameternamelist>
<parameterdescription>
<para>Ignored parameter for compatibility purposes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rg</parametername>
</parameternamelist>
<parameterdescription>
<para>A random number generator for providing random points within the bounds during the optimization process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional storage object or parameter, used for handling the maximum allowable evaluations during the optimization.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tuple[np.ndarray, float, int]: Returns a tuple containing:<itemizedlist>
<listitem><para>The array of input values (<computeroutput>np.ndarray</computeroutput>) that minimize the objective </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>function.<itemizedlist>
<listitem><para>The minimum objective value (<computeroutput>float</computeroutput>).</para>
</listitem><listitem><para>The number of function evaluations performed (<computeroutput>int</computeroutput>). </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/optimizer.py" line="2981" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2987" bodyend="2999"/>
        <references refid="classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a" compoundref="optimizer_8py" startline="304" endline="307">fcmaes.optimizer.Optimizer.max_eval_num</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Optimization class implementing the basin hopping algorithm from SciPy. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is used to solve optimization problems using the basin hopping algorithm, which is a global optimization technique. It combines random perturbation of the input parameters with local optimization, making it suitable for finding global minimums in problems with multiple local minima. The optimizer stops after a maximum number of evaluations or when a suitable solution is found. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>fcmaes.optimizer.Basin_hopping</label>
        <link refid="classfcmaes_1_1optimizer_1_1_basin__hopping"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>fcmaes.optimizer.Basin_hopping</label>
        <link refid="classfcmaes_1_1optimizer_1_1_basin__hopping"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>fcmaes.optimizer.Optimizer</label>
        <link refid="classfcmaes_1_1optimizer_1_1_optimizer"/>
      </node>
    </collaborationgraph>
    <location file="fcmaes/optimizer.py" line="2923" column="1" bodyfile="fcmaes/optimizer.py" bodystart="2923" bodyend="2999"/>
    <listofallmembers>
      <member refid="classfcmaes_1_1optimizer_1_1_basin__hopping_1adc078d65d34197f8aef544ebe27fde81" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Basin_hopping</scope><name>__init__</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1acf09b9b314cc4faf25c9935e76ae1821" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Basin_hopping</scope><name>get_count_runs</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Basin_hopping</scope><name>max_eval_num</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Basin_hopping</scope><name>max_evaluations</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_basin__hopping_1ab665db39cdee947aae4959f7d2f7b13c" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Basin_hopping</scope><name>minimize</name></member>
      <member refid="classfcmaes_1_1optimizer_1_1_optimizer_1ae0423ec54db7b25862e01d7863ab4708" prot="public" virt="non-virtual"><scope>fcmaes::optimizer::Basin_hopping</scope><name>name</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
