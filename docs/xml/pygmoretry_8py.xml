<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="pygmoretry_8py" kind="file" language="Python">
    <compoundname>pygmoretry.py</compoundname>
    <innernamespace refid="namespacefcmaes">fcmaes</innernamespace>
    <innernamespace refid="namespacefcmaes_1_1pygmoretry">fcmaes::pygmoretry</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacefcmaes_1_1pygmoretry_1a328972de17ce781527987b521bc1d1bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OptimizeResult</type>
        <definition> OptimizeResult fcmaes.pygmoretry.minimize</definition>
        <argsstring>(prob, algo, value_limit=np.inf, num_retries=100 *mp.cpu_count(), workers=mp.cpu_count(), popsize=1)</argsstring>
        <name>minimize</name>
        <qualifiedname>fcmaes.pygmoretry.minimize</qualifiedname>
        <param>
          <type>prob</type>
          <defname>prob</defname>
        </param>
        <param>
          <type>algo</type>
          <defname>algo</defname>
        </param>
        <param>
          <type>value_limit</type>
          <defname>value_limit</defname>
          <defval>np.inf</defval>
        </param>
        <param>
          <type>num_retries</type>
          <defname>num_retries</defname>
          <defval>100 *mp.cpu_count()</defval>
        </param>
        <param>
          <type>workers</type>
          <defname>workers</defname>
          <defval>mp.cpu_count()</defval>
        </param>
        <param>
          <type>popsize</type>
          <defname>popsize</defname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Minimizes an optimization problem using given algorithm and configurations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function attempts to find the minimum of the given problem by applying the specified algorithm. It retries the operation a specified number of times with multiple workers and uses given population size for optimization.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prob</parametername>
</parameternamelist>
<parameterdescription>
<para>The optimization problem that defines the objective function and </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constraints.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>The optimization algorithm to be applied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional upper limit on the value of the objective function. Defaults to positive infinity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_retries</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of retries allowed for the optimization process. Defaults to 100 times the number of CPU cores available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of worker processes to use for parallel computation. Defaults to the number of CPU cores available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the population for optimization. Defaults to 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>OptimizeResult The result of the optimization process, including the solution and other relevant information about the optimization. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/pygmoretry.py" line="76" column="1" bodyfile="fcmaes/pygmoretry.py" bodystart="82" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1pygmoretry_1a81cd046316826e2601d9f2510b44f629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.pygmoretry.retry</definition>
        <argsstring>(store, prob, algo, num_retries, value_limit=np.inf, popsize=1, workers=mp.cpu_count())</argsstring>
        <name>retry</name>
        <qualifiedname>fcmaes.pygmoretry.retry</qualifiedname>
        <param>
          <type>store</type>
          <defname>store</defname>
        </param>
        <param>
          <type>prob</type>
          <defname>prob</defname>
        </param>
        <param>
          <type>algo</type>
          <defname>algo</defname>
        </param>
        <param>
          <type>num_retries</type>
          <defname>num_retries</defname>
        </param>
        <param>
          <type>value_limit</type>
          <defname>value_limit</defname>
          <defval>np.inf</defval>
        </param>
        <param>
          <type>popsize</type>
          <defname>popsize</defname>
          <defval>1</defval>
        </param>
        <param>
          <type>workers</type>
          <defname>workers</defname>
          <defval>mp.cpu_count()</defval>
        </param>
        <briefdescription>
<para>Retries optimization over multiple attempts across parallel workers to find the best result. </para>
        </briefdescription>
        <detaileddescription>
<para>The function orchestrates the parallel execution, manages random number generators for each worker, and aggregates the results.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>An object responsible for storing and managing the optimization </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob</parametername>
</parameternamelist>
<parameterdescription>
<para>The optimization problem to be solved. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>The algorithm used to perform optimization. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_retries</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of retries to attempt for the optimization process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper limit for the values considered valid in the optimization result (default is np.inf). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The population size used in the optimization process (default is 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>workers</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of parallel workers to use for the optimization (default is the number of CPU cores available).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
<simplesect kind="return"><para>OptimizeResult An object containing the best solution (<computeroutput>x</computeroutput>), the best objective value (<computeroutput>fun</computeroutput>), the number of function evaluations performed (<computeroutput>nfev</computeroutput>), and the success status of the optimization (<computeroutput>success</computeroutput>).</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>ImportError</parametername>
</parameternamelist>
<parameterdescription>
<para>If the Pygmo library is not installed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/pygmoretry.py" line="115" column="1" bodyfile="fcmaes/pygmoretry.py" bodystart="115" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacefcmaes_1_1pygmoretry_1a9ee4304fb34177166a0d9bcfd176c179" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fcmaes.pygmoretry._retry_loop</definition>
        <argsstring>(pid, rgs, store, prob, algo, num_retries, value_limit, popsize, pg)</argsstring>
        <name>_retry_loop</name>
        <qualifiedname>fcmaes.pygmoretry._retry_loop</qualifiedname>
        <param>
          <type>pid</type>
          <defname>pid</defname>
        </param>
        <param>
          <type>rgs</type>
          <defname>rgs</defname>
        </param>
        <param>
          <type>store</type>
          <defname>store</defname>
        </param>
        <param>
          <type>prob</type>
          <defname>prob</defname>
        </param>
        <param>
          <type>algo</type>
          <defname>algo</defname>
        </param>
        <param>
          <type>num_retries</type>
          <defname>num_retries</defname>
        </param>
        <param>
          <type>value_limit</type>
          <defname>value_limit</defname>
        </param>
        <param>
          <type>popsize</type>
          <defname>popsize</defname>
        </param>
        <param>
          <type>pg</type>
          <defname>pg</defname>
        </param>
        <briefdescription>
<para>Executes a retry loop for a given probabilistic algorithm to attempt finding a feasible solution. </para>
        </briefdescription>
        <detaileddescription>
<para>The function runs multiple attempts to generate solutions using a probabilistic algorithm. It retrieves a random seed, evolves a population, and evaluates the best solution. Feasible solutions meeting specified criteria are added to a result store.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier for the process or individual task. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgs</parametername>
</parameternamelist>
<parameterdescription>
<para>List of random generators corresponding to each identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Object responsible for storing results and managing retries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob</parametername>
</parameternamelist>
<parameterdescription>
<para>Problem object defining the optimization problem. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algo</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm used to evolve populations. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_retries</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of retries to evolve a solution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Feasibility threshold for solutions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>popsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the population used in each evolutionary attempt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pg</parametername>
</parameternamelist>
<parameterdescription>
<para>External module used for handling evolutionary population and problem definition. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fcmaes/pygmoretry.py" line="151" column="1" bodyfile="fcmaes/pygmoretry.py" bodystart="151" bodyend="170"/>
        <references refid="evaluator_8h_1ad408c1ac0c479863b2d1291c483c5593" compoundref="evaluator_8h" startline="110" endline="114">uniform</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>============================================================================= </para>
    </briefdescription>
    <detaileddescription>
<para>Fast version 1.6.11</para>
<para>(c) 2025 – Dietmar Wolz (c) 2025 – Latitude</para>
<para>License MIT</para>
<para><itemizedlist>
<listitem><para><ref refid="pygmoretry_8py" kindref="compound">pygmoretry.py</ref></para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Description</title><para><itemizedlist>
<listitem><para>This module provides a retry mechanism for the PYGMO/PAGMO optimization framework.</para>
</listitem><listitem><para>It allows for parallel retries of optimization problems using the PYGMO/PAGMO library.</para>
</listitem><listitem><para>It is designed to work with problems that have constraints or multiple objectives, which cannot be handled by the standard <ref refid="namespacefcmaes_1_1retry" kindref="compound">fcmaes.retry</ref> module.</para>
</listitem><listitem><para>The retry mechanism uses multiprocessing to perform multiple optimization attempts in parallel, improving efficiency and scalability.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="author"><para>:<itemizedlist>
<listitem><para>Dietmar Wolz <programlisting><codeline><highlight class="normal">-<sp/>romain.despoullains</highlight><highlight class="preprocessor">@latitude.eu</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">-<sp/>corentin.generet</highlight><highlight class="preprocessor">@latitude.eu</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>References</title><para><itemizedlist>
<listitem><para>[1] <ulink url="https://github.com/dietmarwo/fast-cma-es">https://github.com/dietmarwo/fast-cma-es</ulink></para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Documentation</title><para><itemizedlist>
<listitem><para><hruler/>
 </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacefcmaes_1_1pygmoretry" refkind="compound"><highlight class="comment">#<sp/>-*-<sp/>coding:<sp/>utf-8<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">=============================================================================</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral"><sp/>Fast<sp/>CMA-ES<sp/>-<sp/>version<sp/>1.6.11</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"><sp/>(c)<sp/>2025<sp/>–<sp/>Dietmar<sp/>Wolz</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/>(c)<sp/>2025<sp/>–<sp/>Latitude</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/>License:<sp/>MIT</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/>File:</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/>-<sp/>pygmoretry.py</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/>Description:</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/>-<sp/>This<sp/>module<sp/>provides<sp/>a<sp/>retry<sp/>mechanism<sp/>for<sp/>the<sp/>PYGMO/PAGMO<sp/>optimization<sp/>framework.</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/>-<sp/>It<sp/>allows<sp/>for<sp/>parallel<sp/>retries<sp/>of<sp/>optimization<sp/>problems<sp/>using<sp/>the<sp/>PYGMO/PAGMO<sp/>library.</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/>-<sp/>It<sp/>is<sp/>designed<sp/>to<sp/>work<sp/>with<sp/>problems<sp/>that<sp/>have<sp/>constraints<sp/>or<sp/>multiple<sp/>objectives,</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/>which<sp/>cannot<sp/>be<sp/>handled<sp/>by<sp/>the<sp/>standard<sp/>fcmaes.retry<sp/>module.</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/>-<sp/>The<sp/>retry<sp/>mechanism<sp/>uses<sp/>multiprocessing<sp/>to<sp/>perform<sp/>multiple<sp/>optimization<sp/>attempts</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/>in<sp/>parallel,<sp/>improving<sp/>efficiency<sp/>and<sp/>scalability.</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/>Authors:</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/>-<sp/>Dietmar<sp/>Wolz</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/>-<sp/>romain.despoullains@latitude.eu</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/>-<sp/>corentin.generet@latitude.eu</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/>References:</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/>-<sp/>[1]<sp/>https://github.com/dietmarwo/fast-cma-es</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/>Documentation:</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/>-</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">=============================================================================</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>numpy.random<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Generator,<sp/>PCG64DXSM,<sp/>SeedSequence</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy.optimize<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>OptimizeResult,<sp/>Bounds</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>multiprocessing<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>mp</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>multiprocessing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Process</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacefcmaes_1_1retry" kindref="compound">fcmaes.retry</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Store</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">os.environ[</highlight><highlight class="stringliteral">&apos;MKL_DEBUG_CPU_TYPE&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;5&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">os.environ[</highlight><highlight class="stringliteral">&apos;MKL_NUM_THREADS&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;1&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">os.environ[</highlight><highlight class="stringliteral">&apos;OPENBLAS_NUM_THREADS&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;1&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacefcmaes_1_1pygmoretry_1a328972de17ce781527987b521bc1d1bf" kindref="member">minimize</ref>(prob,<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algo,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_limit<sp/>=<sp/>np.inf,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retries<sp/>=<sp/>100*mp.cpu_count(),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers<sp/>=<sp/>mp.cpu_count(),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize<sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>-&gt;<sp/>OptimizeResult:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Minimizes<sp/>an<sp/>optimization<sp/>problem<sp/>using<sp/>given<sp/>algorithm<sp/>and<sp/>configurations.</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>attempts<sp/>to<sp/>find<sp/>the<sp/>minimum<sp/>of<sp/>the<sp/>given<sp/>problem<sp/>by<sp/>applying</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>specified<sp/>algorithm.<sp/>It<sp/>retries<sp/>the<sp/>operation<sp/>a<sp/>specified<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>times<sp/>with<sp/>multiple<sp/>workers<sp/>and<sp/>uses<sp/>given<sp/>population<sp/>size<sp/>for<sp/>optimization.</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob:<sp/>The<sp/>optimization<sp/>problem<sp/>that<sp/>defines<sp/>the<sp/>objective<sp/>function<sp/>and</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraints.</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algo:<sp/>The<sp/>optimization<sp/>algorithm<sp/>to<sp/>be<sp/>applied.</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_limit:<sp/>An<sp/>optional<sp/>upper<sp/>limit<sp/>on<sp/>the<sp/>value<sp/>of<sp/>the<sp/>objective</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function.<sp/>Defaults<sp/>to<sp/>positive<sp/>infinity.</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retries:<sp/>The<sp/>number<sp/>of<sp/>retries<sp/>allowed<sp/>for<sp/>the<sp/>optimization<sp/>process.</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Defaults<sp/>to<sp/>100<sp/>times<sp/>the<sp/>number<sp/>of<sp/>CPU<sp/>cores<sp/>available.</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers:<sp/>The<sp/>number<sp/>of<sp/>worker<sp/>processes<sp/>to<sp/>use<sp/>for<sp/>parallel<sp/>computation.</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Defaults<sp/>to<sp/>the<sp/>number<sp/>of<sp/>CPU<sp/>cores<sp/>available.</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize:<sp/>The<sp/>size<sp/>of<sp/>the<sp/>population<sp/>for<sp/>optimization.<sp/>Defaults<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="76" refid="namespacefcmaes_1_1pygmoretry_1a328972de17ce781527987b521bc1d1bf" refkind="member"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OptimizeResult:<sp/>The<sp/>result<sp/>of<sp/>the<sp/>optimization<sp/>process,<sp/>including<sp/>the</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>and<sp/>other<sp/>relevant<sp/>information<sp/>about<sp/>the<sp/>optimization.</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>lb,<sp/>ub<sp/>=<sp/>prob.get_bounds()</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds<sp/>=<sp/>Bounds(lb,<sp/>ub)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>store<sp/>=<sp/><ref refid="classfcmaes_1_1retry_1_1_store" kindref="compound">Store</ref>(bounds)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retry(store,<sp/>prob,<sp/>algo,<sp/>num_retries,<sp/>value_limit,<sp/>popsize,<sp/>workers)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">retry(store,<sp/>prob,<sp/>algo,<sp/>num_retries,<sp/>value_limit<sp/>=<sp/>np.inf,<sp/>popsize=1,<sp/>workers=mp.cpu_count()):</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Retries<sp/>optimization<sp/>over<sp/>multiple<sp/>attempts<sp/>across<sp/>parallel<sp/>workers<sp/>to<sp/>find</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>best<sp/>result.<sp/>The<sp/>function<sp/>orchestrates<sp/>the<sp/>parallel<sp/>execution,<sp/>manages</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>random<sp/>number<sp/>generators<sp/>for<sp/>each<sp/>worker,<sp/>and<sp/>aggregates<sp/>the<sp/>results.</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>store:<sp/>An<sp/>object<sp/>responsible<sp/>for<sp/>storing<sp/>and<sp/>managing<sp/>the<sp/>optimization</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob:<sp/>The<sp/>optimization<sp/>problem<sp/>to<sp/>be<sp/>solved.</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algo:<sp/>The<sp/>algorithm<sp/>used<sp/>to<sp/>perform<sp/>optimization.</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retries:<sp/>The<sp/>number<sp/>of<sp/>retries<sp/>to<sp/>attempt<sp/>for<sp/>the<sp/>optimization<sp/>process.</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_limit:<sp/>The<sp/>upper<sp/>limit<sp/>for<sp/>the<sp/>values<sp/>considered<sp/>valid<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimization<sp/>result<sp/>(default<sp/>is<sp/>np.inf).</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize:<sp/>The<sp/>population<sp/>size<sp/>used<sp/>in<sp/>the<sp/>optimization<sp/>process</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(default<sp/>is<sp/>1).</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers:<sp/>The<sp/>number<sp/>of<sp/>parallel<sp/>workers<sp/>to<sp/>use<sp/>for<sp/>the<sp/>optimization</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(default<sp/>is<sp/>the<sp/>number<sp/>of<sp/>CPU<sp/>cores<sp/>available).</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OptimizeResult:<sp/>An<sp/>object<sp/>containing<sp/>the<sp/>best<sp/>solution<sp/>(`x`),<sp/>the<sp/>best</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objective<sp/>value<sp/>(`fun`),<sp/>the<sp/>number<sp/>of<sp/>function<sp/>evaluations<sp/>performed</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(`nfev`),<sp/>and<sp/>the<sp/>success<sp/>status<sp/>of<sp/>the<sp/>optimization<sp/>(`success`).</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Raises:</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImportError:<sp/>If<sp/>the<sp/>Pygmo<sp/>library<sp/>is<sp/>not<sp/>installed.</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115" refid="namespacefcmaes_1_1pygmoretry_1a81cd046316826e2601d9f2510b44f629" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pygmo<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pg</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>ImportError<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ImportError(</highlight><highlight class="stringliteral">&quot;Please<sp/>install<sp/>PYGMO<sp/>(pip<sp/>install<sp/>pygmo)<sp/>to<sp/>use<sp/>PAGMO<sp/>optimizers&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>e</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>sg<sp/>=<sp/>SeedSequence()</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>rgs<sp/>=<sp/>[Generator(PCG64DXSM(s))<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sg.spawn(workers)]</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>proc=[Process(target=_retry_loop,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args=(pid,<sp/>rgs,<sp/>store,<sp/>prob,<sp/>algo,<sp/>num_retries,<sp/>value_limit,<sp/>popsize,<sp/>pg))<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>pid<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(workers)]</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>[p.start()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>proc]</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>[p.join()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>proc]</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>store.sort(store.get_xs())</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>store.dump()</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OptimizeResult(x=store.get_x_best(),<sp/>fun=store.get_y_best(),<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfev=store.get_count_evals(),<sp/>success=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacefcmaes_1_1pygmoretry_1a9ee4304fb34177166a0d9bcfd176c179" kindref="member">_retry_loop</ref>(pid,<sp/>rgs,<sp/>store,<sp/>prob,<sp/>algo,<sp/>num_retries,<sp/>value_limit,<sp/>popsize,<sp/>pg):</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Executes<sp/>a<sp/>retry<sp/>loop<sp/>for<sp/>a<sp/>given<sp/>probabilistic<sp/>algorithm<sp/>to<sp/>attempt<sp/>finding<sp/>a<sp/>feasible<sp/>solution.</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>function<sp/>runs<sp/>multiple<sp/>attempts<sp/>to<sp/>generate<sp/>solutions<sp/>using<sp/>a<sp/>probabilistic<sp/>algorithm.<sp/>It<sp/>retrieves<sp/>a<sp/>random<sp/>seed,</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>evolves<sp/>a<sp/>population,<sp/>and<sp/>evaluates<sp/>the<sp/>best<sp/>solution.<sp/>Feasible<sp/>solutions<sp/>meeting<sp/>specified<sp/>criteria<sp/>are<sp/>added<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>result<sp/>store.</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pid<sp/>(int):<sp/>Identifier<sp/>for<sp/>the<sp/>process<sp/>or<sp/>individual<sp/>task.</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgs<sp/>(list):<sp/>List<sp/>of<sp/>random<sp/>generators<sp/>corresponding<sp/>to<sp/>each<sp/>identifier.</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>store<sp/>(object):<sp/>Object<sp/>responsible<sp/>for<sp/>storing<sp/>results<sp/>and<sp/>managing<sp/>retries.</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>(object):<sp/>Problem<sp/>object<sp/>defining<sp/>the<sp/>optimization<sp/>problem.</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algo<sp/>(object):<sp/>Algorithm<sp/>used<sp/>to<sp/>evolve<sp/>populations.</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_retries<sp/>(int):<sp/>Maximum<sp/>number<sp/>of<sp/>retries<sp/>to<sp/>evolve<sp/>a<sp/>solution.</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_limit<sp/>(float):<sp/>Feasibility<sp/>threshold<sp/>for<sp/>solutions.</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popsize<sp/>(int):<sp/>Size<sp/>of<sp/>the<sp/>population<sp/>used<sp/>in<sp/>each<sp/>evolutionary<sp/>attempt.</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pg<sp/>(object):<sp/>External<sp/>module<sp/>used<sp/>for<sp/>handling<sp/>evolutionary<sp/>population<sp/>and<sp/>problem<sp/>definition.</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>store.get_runs_compare_incr(num_retries):<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>=<sp/>int(rgs[pid].<ref refid="evaluator_8h_1ad408c1ac0c479863b2d1291c483c5593" kindref="member">uniform</ref>(0,<sp/>2**32<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="151" refid="namespacefcmaes_1_1pygmoretry_1a9ee4304fb34177166a0d9bcfd176c179" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/>=<sp/>pg.population(prob,<sp/>popsize,<sp/>seed=seed)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pop<sp/>=<sp/>algo.evolve(pop)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>ignore<sp/>&quot;Maximum<sp/>number<sp/>of<sp/>iteration<sp/>reached&quot;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sol<sp/>=<sp/>pop.champion_x</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>pop.champion_f</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evals<sp/>=<sp/>pop.problem.get_fevals()</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_feasible<sp/>=<sp/>prob.feasibility_x(pop.champion_x)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_feasible:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>store.add_result(y[0],<sp/>sol,<sp/>evals,<sp/>value_limit)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>store.dump()</highlight></codeline>
    </programlisting>
    <location file="fcmaes/pygmoretry.py"/>
  </compounddef>
</doxygen>
