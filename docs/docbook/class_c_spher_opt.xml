<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_c_spher_opt" xml:lang="en-US">
<title>CSpherOpt Class Reference</title>
<indexterm><primary>CSpherOpt</primary></indexterm>
<para>
<computeroutput>#include &lt;spheropt.h&gt;</computeroutput>
</para>
Inheritance diagram for CSpherOpt:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for CSpherOpt:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_spher_opt_1a3ff6a1a07d0c5f3ac9c133b021b190ac">CSpherOpt</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_spher_opt_1a8b6557f101813e721289a7c8edecf349">~CSpherOpt</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_spher_opt_1a0be21abe1246b154cb848bd338bf1723">updateDims</link> (const int aParamCount, const int PopSize0=0)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_spher_opt_1a84b141fe50be3806222b2ad3d0846aaf">init</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double *const InitParams=NULL, const double InitRadius=1.0)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_spher_opt_1a1515c953ba95c15ca8722ad8fb46523d">optimize</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, double *const OutCost=NULL, double *const OutValues=NULL)</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; double &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_base_1af11515f00a0a685516aa9cc3daf7f603">CBiteOptBase</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_opt_base_1abc6be9a0740c36dfadb4ec3508dc0d65">~CBiteOptBase</link> ()</para>
</listitem>
            <listitem><para>virtual const double * <link linkend="_class_c_bite_opt_base_1abbed35653d8765915efc675204c19bb2">getBestParams</link> () const</para>
</listitem>
            <listitem><para>virtual double <link linkend="_class_c_bite_opt_base_1a4b2d3669723dbe251cf391cc10dd4f5c">getBestCost</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> ** <link linkend="_class_c_bite_opt_base_1a2eaae4dd1761eaef42ead68546994c12">getSels</link> ()</para>
</listitem>
            <listitem><para>const char ** <link linkend="_class_c_bite_opt_base_1afd1006a5d6154064115a205b54ecaa8c">getSelNames</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1a96f3b9e0a82d830bc34c17a5d0f8fa19">getSelCount</link> () const</para>
</listitem>
        </itemizedlist>
Public Member Functions inherited from <link linkend="_class_c_bite_opt_interface">CBiteOptInterface</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_interface_1a0155b3fcab9eeb2d7505c0326e12e809">CBiteOptInterface</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_opt_interface_1a070d1317053ec55bbe7d8ddde32076ce">~CBiteOptInterface</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_interface_1ae7f8adaf2fd8acb10ccf057592a6229d">getMinValues</link> (double *const p) const =0</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_interface_1a9debe40625c2bc248a4ffd12a9197a4d">getMaxValues</link> (double *const p) const =0</para>
</listitem>
            <listitem><para>virtual double <link linkend="_class_c_bite_opt_interface_1a45d7e2c9ea31b6f8bb23758a6879df9d">optcost</link> (const double *const p)=0</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_c_spher_opt_1a00c0facb71cb0ef24498e77ce68e6c04">initBuffers</link> (const int aParamCount, const int aPopSize, const int aCnsCount=0, const int aObjCount=1)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_spher_opt_1a6491915dd708c2791682a529005c035e">deleteBuffers</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_spher_opt_1a9bda67c2fee53ca92fc6f90bd99b459d">update</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a768362da5c773eea5a8649d44676eeed">initCommonVars</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1ac2ee22488c24887a922a30dd15d898e6">updateDiffValues</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a9e49b98f5f6a2470d060282b2fd26a53">updateBestCost</link> (const double UpdCost, const double *const UpdValues, const int p=-1)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a7b849dbede3dc6be555a4197541fad51">getRealValue</link> (const double *const NormParams, const int i) const</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a634a498e8ebd71bbf87fd1df02f178e0">wrapParamReal</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v, const int i) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a5d8710f00b828beca21c0d2699ae340d">addSel</link> (<link linkend="_class_c_bite_sel_base">CBiteSelBase</link> &amp;s, const char *const sname)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select</link> (T &amp;Sel, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1aa08dcfff8871910e4d01a94f261ee752">applySelsIncr</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v=1.0)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a47acdb7a495f75170b0eb457e0dc950e">applySelsDecr</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_par_pops_1a24cc3d1978b4dbe57fad8a6f6d7efd8a">setParPopCount</link> (const int NewCount)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_par_pops_1afa8a97732cea882b664c2d0fbedf2289">getMinDistParPop</link> (const double Cost, const double *const Params) const</para>
</listitem>
        </itemizedlist>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_par_pops_1a1d00195283da4d97f648da706e5c5cec">CBiteParPops</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_par_pops_1a772516362f17b8e5790596740ce355ba">~CBiteParPops</link> ()</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a0d5ab322641bb1a091df91ff7ee630c4">zeroParams</link> (double *const dst) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a24130fea35014433f142e3b9ed0f8929">copyParams</link> (double *const dst, const double *const src) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a57e751582761922bbabff1ddb7af277b">copyValues</link> (double *const dst, const double *const src) const</para>
</listitem>
        </itemizedlist>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop_1ad427518ed1d47fbe3c2222b3a11badb7">CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop_1a73402384f4b75abf6d956dc086ccf36e">CBitePop</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_pop_1ac386e4638d6fc6bd5370eeae895347c3">~CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_pop_1ab18cf322db6ab186db1e19b53e34c232">operator=</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a3fc2d887ae91be62fd9fc3100268e53c">copy</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a7850902dad276dcecea68559eaccc168">updateCentroid</link> ()</para>
</listitem>
            <listitem><para>const double * <link linkend="_class_c_bite_pop_1a5e6ccebb178353b084084f841b09042d">getCentroid</link> () const</para>
</listitem>
            <listitem><para>const double * <link linkend="_class_c_bite_pop_1aaa8e3f180accfedf21218cbed8ffbb79">getParamsOrdered</link> (const int i) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad38d886687357797479e69098759476a">getCnsPtr</link> (double *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad6cbe6cfbf9954dcb6f8a223a5e1f36b">getObjPtr</link> (double *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1aa4f3255c9607f72eff280f8c3c09143f">getRankPtr</link> (double *const pp) const</para>
</listitem>
            <listitem><para>const double ** <link linkend="_class_c_bite_pop_1ac2a01e9eb6b884a0b318e4b914273acf">getPopParams</link> () const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1a0053ae41c70babe967c5931f491ea865">getCurParams</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a5aef425d751172e1fff38a455cb51d34">getCurPopSize</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a7e1fbb7f7e9aaf8f73eb865fa4610185">getCurPopPos</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a767519aa2fcc2667dc135a131bc9fd85">resetCurPopPos</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a48d6ede5c82534c973e0458726e820dd">incrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a4656171c63f1944ae045d6f222d9d33a">decrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aad999ddc8a2ed72ffaee0db7732c9f76">updatePop</link> (double UpdCost, const double *const UpdParams, const bool DoUpdateCentroid, const bool CanRejectCost=true)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>double * <link linkend="_class_c_spher_opt_1a5f268cc854a7de1995a54e9b73f87e2a">WPopCent</link></para>

<para>Weighting coefficients for centroid. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_spher_opt_1a2598f95d32a6dcb9c25366f89f795912">WPopRad</link></para>

<para>Weighting coefficients for radius. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_spher_opt_1adb82e9f193684e7b21d60e35bd38237f">JitMult</link></para>

<para>Jitter multiplier. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_spher_opt_1ae8093a1a0cab7fae9e8762ff306c4827">JitOffs</link></para>

<para>Jitter multiplier offset. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_spher_opt_1a28e10a5d2dad5244fb97197e7e85095d">Radius</link></para>

<para>Current radius. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_spher_opt_1a92e80374efa3c695155056dc9bed3001">EvalFac</link></para>

<para>Evaluations factor. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_spher_opt_1a0d833587909f28ade47110ec158b0d9b">cure</link></para>

<para>Current evaluation index. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_spher_opt_1ae47ab981059bd16abc005b6c35c90259">curem</link></para>

<para>&quot;cure&quot; value threshold. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_spher_opt_1a3d0802a35e4655fc88d6082df144c20b">DoCentEval</link></para>

<para>at centroid point is required. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_spher_opt_1a03ab19cfd5185229176166ccc011f160">CentPowSel</link></para>

<para>Centroid power factor selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_spher_opt_1a29f0077440e7edc368830ae2582181ac">RadPowSel</link></para>

<para>Radius power factor selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 3 &gt; <link linkend="_class_c_spher_opt_1adb977f181df718708fe31cce2f7ee20b">EvalFacSel</link></para>

<para>EvalFac selector. </para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Attributes inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a07d5b7c3007f79c7dc1f6106d9832dc6">MinValues</link></para>

<para>Minimal parameter values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a9b100a7afa3bdcb3684383ff2df7867a">MaxValues</link></para>

<para>Maximal parameter values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a70f5211fb9521491b0e6a336e21dd7bc">DiffValues</link></para>

<para>values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1ad5c0fe9c5312847158a6df8f4639de23">DiffValuesI</link></para>

<para>Inverse DiffValues. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a0fbab700b9d9c5c36d5ef664540efad0">BestValues</link></para>

<para>Best parameter vector. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1adc4dfe02978fd4ed460f49c7e9a01633">BestCost</link></para>

<para>Cost of the best parameter vector. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a0a97be5c42eed6fbaffba04c8720e6ce">NewValues</link></para>

<para>Temporary new parameter buffer, with real values. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1ab756659a8ba09ba42ffa3d207564fdd8">StallCount</link></para>

<para>The number of iterations without improvement. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a48296b534db162fa0007ff83757cb84b">HiBound</link></para>

<para>be used by the optimizer. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1acc0aa62d6125bd03d3baae22b0bf0467">AvgCost</link></para>

<para>the optimizer. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> * <link linkend="_class_c_bite_opt_base_1aebc1904c883f8b4dafefeda608c4536b">Sels</link> [<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]</para>

<para>indexed access in some cases. </para>
</listitem>
            <listitem><para>const char * <link linkend="_class_c_bite_opt_base_1a43d69538ae5aa7d78d8b3a3e821902b7">SelNames</link> [<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]</para>

<para>Selector names. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1ae9b284aca73ab2f6784f12174e391f7b">SelCount</link></para>

<para>The number of selectors in use. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> * <link linkend="_class_c_bite_opt_base_1a3922d6b29602643882d3212071a5e679">ApplySels</link> [<link linkend="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba">MaxApplySels</link>]</para>

<para><link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select()</link> function calls during the optimize() function call. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1afc2d6ec2c61d8f41bd39bb99632cf12e">ApplySelsCount</link></para>

<para>optimize() function call. </para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; double &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link>&lt; double &gt; * <link linkend="_class_c_bite_par_pops_1a79983cca58bd18a6ff73120e65a976dd">ParPops</link> [<link linkend="_class_c_bite_par_pops_1a451f5fa8bb3503f9c344fe03f46ffcc9">MaxParPopCount</link>]</para>

<para>orbiting *this population. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_par_pops_1aea59bf6c1cf9894f944d07cec99882ee">ParPopCount</link></para>

<para>be changed via the <link linkend="_class_c_bite_par_pops_1a24cc3d1978b4dbe57fad8a6f6d7efd8a">setParPopCount()</link> function. </para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0dc6f7b3a19db513e349e68c3471f9fa">ParamCount</link></para>

<para>The total number of internal parameter values in use. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1a884c9ad4c0327aaa0110a23a89f5697a">ParamCountI</link></para>

<para>= 1.0 / ParamCount. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a58e3bf5abc2fb4b1e173aa6cb3477bfb">PopSize</link></para>

<para>The size of population in use (maximal). </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0b64743a84d5af143d44e7f6e9f02ada">PopSize1</link></para>

<para>= PopSize - 1. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1adc98fbdebc2671ef0826245d8c472cc5">CurPopSize</link></para>

<para>Current population size. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a26b81c70200085e410cf83258e139f9b">CurPopSize1</link></para>

<para>= CurPopSize - 1. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1aa5105ca75379f9a760dc9f0b9ea30ea7">CurPopSizeI</link></para>

<para>= 1.0 / CurPopSize. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aa7c87b9148768d6104f8d3dfb5abebce">CurPopPos</link></para>

<para>update. This variable should be initialized by the optimizer. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2bf725291723a8dcaa215496e3175471">CnsCount</link></para>

<para>The number of constraints per solution. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2f7c6a4707e23c21197ab32b71d900c7">ObjCount</link></para>

<para>The number of objectives per solution. </para>
</listitem>
            <listitem><para>uint8_t * <link linkend="_class_c_bite_pop_1ac69b014720b11a472509b22588eaf6c3">PopParamsBuf</link></para>

<para>Buffer for all PopParams vectors. </para>
</listitem>
            <listitem><para>double ** <link linkend="_class_c_bite_pop_1a0c41790e473b70c5ec37986d0fb1f9a2">PopParams</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a6d4a3479ca9e60de6cf4667d5b2937a5">PopCnsOffs</link></para>

<para>a population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a98e2af75120c4184b271c14d22acf9d4">PopObjOffs</link></para>

<para>population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3ecc4ffcf1c6f3f9b4e4e5a873c481fe">PopRankOffs</link></para>

<para>item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3cdac0ad2cf5c8403f1f7676171f4e76">PopItemSize</link></para>

<para>Size in bytes of population item. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ac31d95bc1f383828e72bcf1eb499e949">CentParams</link></para>

<para>Centroid of the parameter vectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_pop_1a41f29468becc588bea6ff3f842db93ea">NeedCentUpdate</link></para>

<para>&quot;True&quot; if centroid update is needed. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1ab6dec63b0ee3955563c2a3f815614f31">CentLPC</link></para>

<para>Centroid averaging filter coefficient. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1acae90e3584dca8b6c08c70d7bd317729">TmpParams</link></para>

<para>element of the PopParams array. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Static Public Attributes inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link></para>

<para>that can be added to *this object (for static arrays). </para>
</listitem>
        </itemizedlist>
</simplesect>
Static Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1a3b7e8d2276455475bd761e29c8c72ac6">wrapParam</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1aecaac61269e65bda93cb2dc1a3a26091">getGaussianInt</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double sd, const double meanInt)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1ad4e3a3c5b7a25ad02ef0231bd3fe8388">calcLP1Coeff</link> (const double Count)</para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba">MaxApplySels</link></para>

<para>that can be used during a single optimize() function call. </para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_par_pops_1a451f5fa8bb3503f9c344fe03f46ffcc9">MaxParPopCount</link></para>

<para>population supported. </para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76">IntOverBits</link></para>
</listitem>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8">IntMantBits</link></para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link></para>

<para>multiplier. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1aeba03d86b17ed01a97dc8225c5598b2d">IntMantMultM</link></para>

<para>IntMantMult. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a8c64d2e83f225b034df818b06b09ecd2">IntMantMult2</link></para>

<para>IntMantMult * 2. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a27448c9be1bed517e4a48aa656ca4f76">IntMantMask</link></para>

<para>corresponds to mantissa. </para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>

<para>&quot;Converging hyper-spheroid&quot; optimizer class. Simple, converges quite fast.</para>

<para>Description is available at <link xlink:href="https://github.com/avaneev/biteopt">https://github.com/avaneev/biteopt</link> </para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00044">44</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_c_spher_opt_1a3ff6a1a07d0c5f3ac9c133b021b190ac"/><section>
    <title>CSpherOpt()</title>
<indexterm><primary>CSpherOpt</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>CSpherOpt</secondary></indexterm>
<para><computeroutput>CSpherOpt::CSpherOpt ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_spheropt_8h_source_1l00047">47</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt_a3ff6a1a07d0c5f3ac9c133b021b190ac_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a8b6557f101813e721289a7c8edecf349"/><section>
    <title>~CSpherOpt()</title>
<indexterm><primary>~CSpherOpt</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>~CSpherOpt</secondary></indexterm>
<para><computeroutput>virtual CSpherOpt::~CSpherOpt ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_spheropt_8h_source_1l00056">56</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_c_spher_opt_1a6491915dd708c2791682a529005c035e"/><section>
    <title>deleteBuffers()</title>
<indexterm><primary>deleteBuffers</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>deleteBuffers</secondary></indexterm>
<para><computeroutput>virtual void CSpherOpt::deleteBuffers ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Function deletes buffers previously allocated via the <link linkend="_class_c_spher_opt_1a00c0facb71cb0ef24498e77ce68e6c04">initBuffers()</link> function. Derived classes should call this function of the base class. </para>
<para>
Reimplemented from <link linkend="_class_c_bite_opt_base_1aed59421f7102fb6921e4af39acfb8369">CBiteOptBase&lt; double &gt;</link>.</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00267">267</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt_a6491915dd708c2791682a529005c035e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a84b141fe50be3806222b2ad3d0846aaf"/><section>
    <title>init()</title>
<indexterm><primary>init</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>init</secondary></indexterm>
<para><computeroutput>void CSpherOpt::init (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, const double *const InitParams = <computeroutput>NULL</computeroutput>
, const double InitRadius = <computeroutput>1.0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function initializes *this optimizer.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rnd</entry><entry>
<para>Random number generator. </para>
</entry>
                            </row>
                            <row>
<entry>InitParams</entry><entry>
<para>If not NULL, initial parameter vector, also used as centroid. </para>
</entry>
                            </row>
                            <row>
<entry>InitRadius</entry><entry>
<para>Initial radius, multiplier relative to the default sigma value. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00095">95</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt_a84b141fe50be3806222b2ad3d0846aaf_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a00c0facb71cb0ef24498e77ce68e6c04"/><section>
    <title>initBuffers()</title>
<indexterm><primary>initBuffers</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>initBuffers</secondary></indexterm>
<para><computeroutput>virtual void CSpherOpt::initBuffers (const int aParamCount, const int aPopSize, const int aCnsCount = <computeroutput>0</computeroutput>
, const int aObjCount = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Function initializes all common buffers, and &quot;PopSize&quot; variables. This function should be called when population&apos;s dimensions were changed. This function calls the <link linkend="_class_c_spher_opt_1a6491915dd708c2791682a529005c035e">deleteBuffers()</link> function to release any derived classes&apos; allocated buffers. Allocates an additional vector for temporary use, which is at the same the last vector in the PopParams array. Derived classes should call this function of the base class.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aParamCount</entry><entry>
<para>New parameter count. </para>
</entry>
                            </row>
                            <row>
<entry>aPopSize</entry><entry>
<para>New population size. If &lt;= 0, population buffers will not be allocated. </para>
</entry>
                            </row>
                            <row>
<entry>aCnsCount</entry><entry>
<para>New constraint value count. </para>
</entry>
                            </row>
                            <row>
<entry>aObjCount</entry><entry>
<para>New objective value count. If equals 0, a rank element will not be auto-added. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_class_c_bite_opt_base_1a5c53a8eb3a4269a746d990282452d71e">CBiteOptBase&lt; double &gt;</link>.</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00257">257</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt_a00c0facb71cb0ef24498e77ce68e6c04_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt_a00c0facb71cb0ef24498e77ce68e6c04_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a1515c953ba95c15ca8722ad8fb46523d"/><section>
    <title>optimize()</title>
<indexterm><primary>optimize</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>optimize</secondary></indexterm>
<para><computeroutput>int CSpherOpt::optimize (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, double *const OutCost = <computeroutput>NULL</computeroutput>
, double *const OutValues = <computeroutput>NULL</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function performs the parameter optimization iteration that involves 1 objective function evaluation.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry><entry>rnd</entry><entry>
<para>Random number generator. </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>OutCost</entry><entry>
<para>If not NULL, pointer to variable that receives cost of the newly-evaluated solution. </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>OutValues</entry><entry>
<para>If not NULL, pointer to array that receives a newly-evaluated parameter vector, in real scale, in real value bounds. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The number of non-improving iterations so far. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00142">142</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt_a1515c953ba95c15ca8722ad8fb46523d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a9bda67c2fee53ca92fc6f90bd99b459d"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void CSpherOpt::update (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function updates centroid and radius.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rnd</entry><entry>
<para>PRNG object. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00281">281</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt_a9bda67c2fee53ca92fc6f90bd99b459d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt_a9bda67c2fee53ca92fc6f90bd99b459d_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a0be21abe1246b154cb848bd338bf1723"/><section>
    <title>updateDims()</title>
<indexterm><primary>updateDims</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>updateDims</secondary></indexterm>
<para><computeroutput>void CSpherOpt::updateDims (const int aParamCount, const int PopSize0 = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function updates dimensionality of *this object.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aParamCount</entry><entry>
<para>The number of parameters being optimized. </para>
</entry>
                            </row>
                            <row>
<entry>PopSize0</entry><entry>
<para>The number of elements in population to use. If set to 0 or negative, the default formula will be used. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00070">70</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_spher_opt_a0be21abe1246b154cb848bd338bf1723_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_c_spher_opt_1a03ab19cfd5185229176166ccc011f160"/><section>
    <title>CentPowSel</title>
<indexterm><primary>CentPowSel</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>CentPowSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CSpherOpt::CentPowSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Centroid power factor selector. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00253">253</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a0d833587909f28ade47110ec158b0d9b"/><section>
    <title>cure</title>
<indexterm><primary>cure</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>cure</secondary></indexterm>
<para><computeroutput>int CSpherOpt::cure<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Current evaluation index. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00249">249</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1ae47ab981059bd16abc005b6c35c90259"/><section>
    <title>curem</title>
<indexterm><primary>curem</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>curem</secondary></indexterm>
<para><computeroutput>int CSpherOpt::curem<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>&quot;cure&quot; value threshold. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00250">250</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a3d0802a35e4655fc88d6082df144c20b"/><section>
    <title>DoCentEval</title>
<indexterm><primary>DoCentEval</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>DoCentEval</secondary></indexterm>
<para><computeroutput>bool CSpherOpt::DoCentEval<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>at centroid point is required. </para>
</para>

<para>&quot;True&quot; if an initial objective function evaluation </para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00251">251</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a92e80374efa3c695155056dc9bed3001"/><section>
    <title>EvalFac</title>
<indexterm><primary>EvalFac</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>EvalFac</secondary></indexterm>
<para><computeroutput>double CSpherOpt::EvalFac<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Evaluations factor. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00248">248</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1adb977f181df718708fe31cce2f7ee20b"/><section>
    <title>EvalFacSel</title>
<indexterm><primary>EvalFacSel</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>EvalFacSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 3 &gt; CSpherOpt::EvalFacSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>EvalFac selector. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00255">255</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1adb82e9f193684e7b21d60e35bd38237f"/><section>
    <title>JitMult</title>
<indexterm><primary>JitMult</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>JitMult</secondary></indexterm>
<para><computeroutput>double CSpherOpt::JitMult<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Jitter multiplier. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00245">245</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1ae8093a1a0cab7fae9e8762ff306c4827"/><section>
    <title>JitOffs</title>
<indexterm><primary>JitOffs</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>JitOffs</secondary></indexterm>
<para><computeroutput>double CSpherOpt::JitOffs<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Jitter multiplier offset. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00246">246</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a28e10a5d2dad5244fb97197e7e85095d"/><section>
    <title>Radius</title>
<indexterm><primary>Radius</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>Radius</secondary></indexterm>
<para><computeroutput>double CSpherOpt::Radius<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Current radius. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00247">247</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a29f0077440e7edc368830ae2582181ac"/><section>
    <title>RadPowSel</title>
<indexterm><primary>RadPowSel</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>RadPowSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CSpherOpt::RadPowSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Radius power factor selector. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00254">254</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a5f268cc854a7de1995a54e9b73f87e2a"/><section>
    <title>WPopCent</title>
<indexterm><primary>WPopCent</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>WPopCent</secondary></indexterm>
<para><computeroutput>double* CSpherOpt::WPopCent<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Weighting coefficients for centroid. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00243">243</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<anchor xml:id="_class_c_spher_opt_1a2598f95d32a6dcb9c25366f89f795912"/><section>
    <title>WPopRad</title>
<indexterm><primary>WPopRad</primary><secondary>CSpherOpt</secondary></indexterm>
<indexterm><primary>CSpherOpt</primary><secondary>WPopRad</secondary></indexterm>
<para><computeroutput>double* CSpherOpt::WPopRad<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Weighting coefficients for radius. </para>
</para>
<para>
Definition at line <link linkend="_spheropt_8h_source_1l00244">244</link> of file <link linkend="_spheropt_8h_source">spheropt.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
_fcmaescpp/include/<link linkend="_spheropt_8h">spheropt.h</link></section>
</section>
