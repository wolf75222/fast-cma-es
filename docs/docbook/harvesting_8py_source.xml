<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_harvesting_8py_source" xml:lang="en-US">
<title>harvesting.py</title>
<indexterm><primary>examples/harvesting.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_harvesting_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1harvesting">00001</link> <emphasis role="comment">#&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00002"/>00002 <emphasis role="comment">#</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00005"/>00005 <emphasis role="comment">#&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;This&#32;code&#32;implements&#32;a&#32;variant&#32;of&#32;the&#32;multi&#32;objective&#32;flexible&#32;job&#32;shop&#32;problem</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00007"/>00007 <emphasis role="comment">#&#32;and&#32;is&#32;derived&#32;from&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/examples/jobshop.py&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00008"/>00008 
<anchor xml:id="_harvesting_8py_source_1l00009"/>00009 <emphasis role="comment">#&#32;It&#32;supports&#32;both&#32;a&#32;multiobjective&#32;and&#32;the&#32;single&#32;objective&#32;variant&#32;utilizing&#32;Numba&#32;and&#32;the&#32;optimizers</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00010"/>00010 <emphasis role="comment">#&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/_fcmaescpp/modeoptimizer.cpp&#32;(MO)&#32;and</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00011"/>00011 <emphasis role="comment">#&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/_fcmaescpp/include/biteopt.h&#32;(SO).</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00012"/>00012 
<anchor xml:id="_harvesting_8py_source_1l00013"/>00013 <emphasis role="comment">#&#32;The&#32;FJSP&#32;variant&#32;implemented&#32;here&#32;is&#32;related&#32;to&#32;&quot;asteroid&#32;harvesting&quot;:</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00014"/>00014 
<anchor xml:id="_harvesting_8py_source_1l00015"/>00015 <emphasis role="comment">#&#32;N&#32;movable&#32;identical&#32;factories&#32;are&#32;deployed&#32;on&#32;N&#32;asteroids&#32;to&#32;perform&#32;operations&#32;associated&#32;to&#32;m&#32;jobs.</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00016"/>00016 <emphasis role="comment">#&#32;As&#32;in&#32;FJSP&#32;the&#32;operations&#32;need&#32;to&#32;be&#32;executed&#32;in&#32;the&#32;order&#32;specified&#32;by&#32;the&#32;job.&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00017"/>00017 <emphasis role="comment">#&#32;The&#32;equivalent&#32;to&#32;a&#32;machine&#32;in&#32;FJSP&#32;is&#32;a&#32;factory&#32;deployment&#32;to&#32;a&#32;specific&#32;asteroid.&#32;Its&#32;resources</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00018"/>00018 <emphasis role="comment">#&#32;determine&#32;its&#32;capability&#32;to&#32;execute&#32;job&#32;operations.&#32;Therefore&#32;-&#32;using&#32;this&#32;simplified</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00019"/>00019 <emphasis role="comment">#&#32;model&#32;-&#32;asteroid&#32;harvesting&#32;can&#32;be&#32;viewed&#32;as&#32;a&#32;FJSP&#32;with&#32;two&#32;constraints:</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00020"/>00020 
<anchor xml:id="_harvesting_8py_source_1l00021"/>00021 <emphasis role="comment">#&#32;a)&#32;Moving&#32;factories&#32;is&#32;expensive,&#32;therefore&#32;a&#32;factory&#32;can&#32;only&#32;be&#32;deployed&#32;once&#32;on&#32;an&#32;asteroid,&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00022"/>00022 <emphasis role="comment">#&#32;it&#32;is&#32;active&#32;for&#32;a&#32;single&#32;consecutive&#32;time&#32;window.&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00023"/>00023 <emphasis role="comment">#&#32;b)&#32;The&#32;upper&#32;limit&#32;of&#32;active&#32;machines&#32;(factory&#32;deployments)&#32;is&#32;determined&#32;by&#32;N,&#32;the&#32;number</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00024"/>00024 <emphasis role="comment">#&#32;of&#32;factories.&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00025"/>00025 
<anchor xml:id="_harvesting_8py_source_1l00026"/>00026 <emphasis role="comment">#&#32;See&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/JobShop.adoc&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00027"/>00027 
<anchor xml:id="_harvesting_8py_source_1l00028"/>00028 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00029"/>00029 
<anchor xml:id="_harvesting_8py_source_1l00030"/>00030 <emphasis role="keyword">import</emphasis>&#32;math
<anchor xml:id="_harvesting_8py_source_1l00031"/>00031 <emphasis role="keyword">import</emphasis>&#32;pandas&#32;<emphasis role="keyword">as</emphasis>&#32;pd
<anchor xml:id="_harvesting_8py_source_1l00032"/>00032 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_harvesting_8py_source_1l00033"/>00033 <emphasis role="keyword">import</emphasis>&#32;sys,&#32;math,&#32;time
<anchor xml:id="_harvesting_8py_source_1l00034"/>00034 <emphasis role="keyword">from</emphasis>&#32;pathlib&#32;<emphasis role="keyword">import</emphasis>&#32;Path
<anchor xml:id="_harvesting_8py_source_1l00035"/>00035 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;retry,&#32;advretry,&#32;mode,&#32;modecpp,&#32;moretry
<anchor xml:id="_harvesting_8py_source_1l00036"/>00036 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;Bite_cpp,&#32;Cma_cpp,&#32;De_cpp,&#32;de_cma,&#32;dtime,&#32;Differential_evolution
<anchor xml:id="_harvesting_8py_source_1l00037"/>00037 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds
<anchor xml:id="_harvesting_8py_source_1l00038"/>00038 <emphasis role="keyword">import</emphasis>&#32;ctypes&#32;<emphasis role="keyword">as</emphasis>&#32;ct
<anchor xml:id="_harvesting_8py_source_1l00039"/>00039 <emphasis role="keyword">import</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">as</emphasis>&#32;mp&#32;
<anchor xml:id="_harvesting_8py_source_1l00040"/>00040 <emphasis role="keyword">from</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">import</emphasis>&#32;Process
<anchor xml:id="_harvesting_8py_source_1l00041"/>00041 <emphasis role="keyword">from</emphasis>&#32;numba&#32;<emphasis role="keyword">import</emphasis>&#32;njit,&#32;numba
<anchor xml:id="_harvesting_8py_source_1l00042"/>00042 <emphasis role="keyword">from</emphasis>&#32;numpy.random&#32;<emphasis role="keyword">import</emphasis>&#32;Generator,&#32;MT19937,&#32;SeedSequence
<anchor xml:id="_harvesting_8py_source_1l00043"/>00043 <emphasis role="keyword">from</emphasis>&#32;jobshop&#32;<emphasis role="keyword">import</emphasis>&#32;gantt,&#32;read_fjs,&#32;job_indices,&#32;filter_tasks,&#32;reorder&#32;
<anchor xml:id="_harvesting_8py_source_1l00044"/>00044 <emphasis role="keyword">import</emphasis>&#32;jobshop
<anchor xml:id="_harvesting_8py_source_1l00045"/>00045 
<anchor xml:id="_harvesting_8py_source_1l00046"/>00046 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_harvesting_8py_source_1l00047"/>00047 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_harvesting_8py_source_1l00048"/>00048 
<anchor xml:id="_harvesting_8py_source_1l00049"/>00049 logger.remove()
<anchor xml:id="_harvesting_8py_source_1l00050"/><link linkend="_namespaceexamples_1_1harvesting_1a48e2ae48f8a81a448c4f19d7014cfdeb">00050</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_harvesting_8py_source_1l00051"/>00051 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_harvesting_8py_source_1l00052"/>00052 
<anchor xml:id="_harvesting_8py_source_1l00053"/><link linkend="_namespaceexamples_1_1harvesting_1a666bda29f0fbc73cf7507967dbd8e2d8">00053</link> <emphasis role="keyword">def&#32;</emphasis>scheduling(tasks,&#32;n_jobs,&#32;n_machines,&#32;max_active,&#32;start,&#32;duration):
<anchor xml:id="_harvesting_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;success,&#32;start,&#32;stop&#32;=&#32;<link linkend="_namespaceexamples_1_1harvesting_1ad7244b0bc13af9e1df5e1a29be8200a6">adjust_timing</link>(start,&#32;duration,&#32;max_active)
<anchor xml:id="_harvesting_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;success:
<anchor xml:id="_harvesting_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logger.info(<emphasis role="stringliteral">&quot;timing&#32;error&quot;</emphasis>)
<anchor xml:id="_harvesting_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;machine_time&#32;=&#32;start&#32;<emphasis role="comment">#&#32;we&#32;initialize&#32;with&#32;the&#32;machine&#32;startup&#32;times</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;job_time&#32;=&#32;np.zeros(n_jobs)
<anchor xml:id="_harvesting_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;fails&#32;=&#32;0
<anchor xml:id="_harvesting_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;solution&#32;=&#32;{<emphasis role="stringliteral">&apos;machine&apos;</emphasis>:&#32;[],&#32;<emphasis role="stringliteral">&apos;start&apos;</emphasis>:&#32;[],&#32;<emphasis role="stringliteral">&apos;end&apos;</emphasis>:&#32;[],&#32;<emphasis role="stringliteral">&apos;job&apos;</emphasis>:&#32;[],&#32;<emphasis role="stringliteral">&apos;task&apos;</emphasis>:[]}
<anchor xml:id="_harvesting_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;task&#32;<emphasis role="keywordflow">in</emphasis>&#32;tasks:
<anchor xml:id="_harvesting_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;job&#32;=&#32;int(task[0])
<anchor xml:id="_harvesting_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;machine&#32;=&#32;int(task[2])
<anchor xml:id="_harvesting_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time&#32;=&#32;task[3]
<anchor xml:id="_harvesting_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;max(machine_time[machine],&#32;job_time[job])
<anchor xml:id="_harvesting_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end&#32;=&#32;start&#32;+&#32;time
<anchor xml:id="_harvesting_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;end&#32;&gt;&#32;stop[machine]:&#32;<emphasis role="comment">#&#32;machine&#32;already&#32;shut&#32;down</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fails&#32;+=&#32;1&#32;<emphasis role="comment">#&#32;failure&#32;to&#32;execute&#32;task&#32;at&#32;all</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;machine_time[machine]&#32;=&#32;end
<anchor xml:id="_harvesting_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;job_time[job]&#32;=&#32;end&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution[<emphasis role="stringliteral">&apos;machine&apos;</emphasis>].append(int(machine))
<anchor xml:id="_harvesting_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution[<emphasis role="stringliteral">&apos;start&apos;</emphasis>].append(int(start))
<anchor xml:id="_harvesting_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution[<emphasis role="stringliteral">&apos;end&apos;</emphasis>].append(int(end))
<anchor xml:id="_harvesting_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution[<emphasis role="stringliteral">&apos;job&apos;</emphasis>].append(int(job))
<anchor xml:id="_harvesting_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution[<emphasis role="stringliteral">&apos;task&apos;</emphasis>].append(int(task[1]))
<anchor xml:id="_harvesting_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;logger.info(<emphasis role="stringliteral">&apos;fails&#32;=&#32;&apos;</emphasis>&#32;+&#32;str(fails))
<anchor xml:id="_harvesting_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;solution
<anchor xml:id="_harvesting_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00080"/><link linkend="_namespaceexamples_1_1harvesting_1a372d76d3dd55bdbce747759184911516">00080</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1harvesting_1a372d76d3dd55bdbce747759184911516">chart</link>(tasks,&#32;n_jobs,&#32;n_machines,&#32;max_active,&#32;start,&#32;duration):
<anchor xml:id="_harvesting_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;solution&#32;=&#32;scheduling(tasks,&#32;n_jobs,&#32;n_machines,&#32;max_active,&#32;start,&#32;duration)
<anchor xml:id="_harvesting_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;logger.info(solution)
<anchor xml:id="_harvesting_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;gantt(solution)
<anchor xml:id="_harvesting_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00085"/>00085 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00086"/><link linkend="_namespaceexamples_1_1harvesting_1ad7244b0bc13af9e1df5e1a29be8200a6">00086</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1harvesting_1ad7244b0bc13af9e1df5e1a29be8200a6">adjust_timing</link>(start,&#32;duration,&#32;max_active):
<anchor xml:id="_harvesting_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;inf&#32;=&#32;10000000
<anchor xml:id="_harvesting_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;start&#32;=&#32;start.copy()
<anchor xml:id="_harvesting_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;i_sort&#32;=&#32;np.argsort(start)
<anchor xml:id="_harvesting_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;k&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(max_active):
<anchor xml:id="_harvesting_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start[i_sort[k]]&#32;=&#32;0&#32;&#32;<emphasis role="comment">#&#32;first&#32;max_active&#32;available&#32;from&#32;start</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;stop&#32;=&#32;start&#32;+&#32;duration&#32;
<anchor xml:id="_harvesting_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;j_sort&#32;=&#32;np.argsort(stop)
<anchor xml:id="_harvesting_8py_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;k&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(max_active):
<anchor xml:id="_harvesting_8py_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop[j_sort[-1&#32;-&#32;k]]&#32;=&#32;inf&#32;&#32;<emphasis role="comment">#&#32;last&#32;max_active&#32;available&#32;forever</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;n&#32;=&#32;len(start)
<anchor xml:id="_harvesting_8py_source_1l00097"/>00097 &#32;&#32;&#32;&#32;moved&#32;=&#32;<emphasis role="keyword">True</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;moved:
<anchor xml:id="_harvesting_8py_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;active&#32;=&#32;0
<anchor xml:id="_harvesting_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;0
<anchor xml:id="_harvesting_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;=&#32;0
<anchor xml:id="_harvesting_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;moved&#32;=&#32;<emphasis role="keyword">False</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;i&#32;&lt;&#32;n&#32;<emphasis role="keywordflow">and</emphasis>&#32;j&#32;&lt;&#32;n:
<anchor xml:id="_harvesting_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ci&#32;=&#32;i_sort[i]&#32;&#32;<emphasis role="comment">#&#32;current&#32;start</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cj&#32;=&#32;j_sort[j]&#32;&#32;<emphasis role="comment">#&#32;current&#32;stop</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;start[ci]&#32;&gt;=&#32;stop[cj]:
<anchor xml:id="_harvesting_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;active&#32;-=&#32;1
<anchor xml:id="_harvesting_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;+=&#32;1
<anchor xml:id="_harvesting_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_harvesting_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;active&#32;&lt;&#32;max_active:
<anchor xml:id="_harvesting_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;active&#32;+=&#32;1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;+=&#32;1
<anchor xml:id="_harvesting_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_harvesting_8py_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ci&#32;!=&#32;cj):&#32;<emphasis role="comment">#&#32;move&#32;start&#32;after&#32;next&#32;machine&#32;stops</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(n):
<anchor xml:id="_harvesting_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;start[i]&#32;==&#32;stop[ci]:&#32;<emphasis role="comment">#&#32;other&#32;machine&#32;already&#32;waiting&#32;for&#32;stop[cj]</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">False</emphasis>,&#32;start,&#32;stop&#32;<emphasis role="comment">#&#32;otherwise&#32;can&#32;lead&#32;to&#32;an&#32;infinite&#32;loop</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start[ci]&#32;=&#32;stop[cj]
<anchor xml:id="_harvesting_8py_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop[ci]&#32;=&#32;start[ci]&#32;+&#32;duration[ci]&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;moved&#32;=&#32;<emphasis role="keyword">True</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_harvesting_8py_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;+=&#32;1
<anchor xml:id="_harvesting_8py_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;moved:
<anchor xml:id="_harvesting_8py_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i_sort&#32;=&#32;np.argsort(start)&#32;&#32;<emphasis role="comment">#&#32;sort&#32;again</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j_sort&#32;=&#32;np.argsort(stop)&#32;
<anchor xml:id="_harvesting_8py_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">True</emphasis>,&#32;start,&#32;stop
<anchor xml:id="_harvesting_8py_source_1l00128"/>00128 &#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00129"/>00129 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>&#32;
<anchor xml:id="_harvesting_8py_source_1l00130"/><link linkend="_namespaceexamples_1_1harvesting_1a5e6fd72941106ed07937bf8806852011">00130</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1harvesting_1a5e6fd72941106ed07937bf8806852011">exec_tasks</link>(tasks,&#32;n_jobs,&#32;n_machines,&#32;max_active,&#32;start,&#32;duration):
<anchor xml:id="_harvesting_8py_source_1l00131"/>00131 &#32;&#32;&#32;&#32;success,&#32;start,&#32;stop&#32;=&#32;<link linkend="_namespaceexamples_1_1harvesting_1ad7244b0bc13af9e1df5e1a29be8200a6">adjust_timing</link>(start,&#32;duration,&#32;max_active)
<anchor xml:id="_harvesting_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;success:
<anchor xml:id="_harvesting_8py_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>,&#32;<emphasis role="keywordtype">None</emphasis>,&#32;<emphasis role="keywordtype">None</emphasis>,&#32;<emphasis role="keywordtype">None</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;machine_time&#32;=&#32;start&#32;<emphasis role="comment">#&#32;we&#32;initialize&#32;with&#32;the&#32;machine&#32;startup&#32;times</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00135"/>00135 &#32;&#32;&#32;&#32;machine_work_time&#32;=&#32;np.zeros(n_machines)
<anchor xml:id="_harvesting_8py_source_1l00136"/>00136 &#32;&#32;&#32;&#32;job_time&#32;=&#32;np.zeros(n_jobs)
<anchor xml:id="_harvesting_8py_source_1l00137"/>00137 &#32;&#32;&#32;&#32;fails&#32;=&#32;0
<anchor xml:id="_harvesting_8py_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;task&#32;<emphasis role="keywordflow">in</emphasis>&#32;tasks:
<anchor xml:id="_harvesting_8py_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;job&#32;=&#32;int(task[0])
<anchor xml:id="_harvesting_8py_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;machine&#32;=&#32;int(task[2])
<anchor xml:id="_harvesting_8py_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time&#32;=&#32;task[3]
<anchor xml:id="_harvesting_8py_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;previous&#32;task&#32;needs&#32;to&#32;be&#32;finished&#32;and&#32;machine&#32;needs&#32;to&#32;be&#32;available</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end_time&#32;=&#32;max(machine_time[machine],&#32;job_time[job])&#32;+&#32;time
<anchor xml:id="_harvesting_8py_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;end_time&#32;&gt;&#32;stop[machine]:&#32;<emphasis role="comment">#&#32;machine&#32;already&#32;shut&#32;down</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fails&#32;+=&#32;1&#32;<emphasis role="comment">#&#32;failure&#32;to&#32;execute&#32;task&#32;at&#32;all</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;machine_time[machine]&#32;=&#32;end_time
<anchor xml:id="_harvesting_8py_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;job_time[job]&#32;=&#32;end_time&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;machine_work_time[machine]&#32;+=&#32;time
<anchor xml:id="_harvesting_8py_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;machine_time,&#32;job_time,&#32;machine_work_time,&#32;fails
<anchor xml:id="_harvesting_8py_source_1l00151"/>00151 
<anchor xml:id="_harvesting_8py_source_1l00152"/>00152 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00153"/><link linkend="_namespaceexamples_1_1harvesting_1ac5401be59f58e63fbbb729287a4c3171">00153</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1harvesting_1ac5401be59f58e63fbbb729287a4c3171">filtered_tasks</link>(x,&#32;task_data,&#32;n_operations,&#32;n_machines,&#32;job_indices,&#32;job_ids):
<anchor xml:id="_harvesting_8py_source_1l00154"/>00154 &#32;&#32;&#32;&#32;operations&#32;=&#32;filter_tasks(x,&#32;task_data,&#32;n_operations,&#32;n_machines)
<anchor xml:id="_harvesting_8py_source_1l00155"/>00155 &#32;&#32;&#32;&#32;order&#32;=&#32;np.argsort(x[n_operations:2*n_operations])
<anchor xml:id="_harvesting_8py_source_1l00156"/>00156 &#32;&#32;&#32;&#32;tasks&#32;=&#32;reorder(operations,&#32;order,&#32;n_operations,&#32;job_ids,&#32;job_indices)
<anchor xml:id="_harvesting_8py_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tasks
<anchor xml:id="_harvesting_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00159"/><link linkend="_classexamples_1_1harvesting_1_1fitness">00159</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1harvesting_1_1fitness">fitness</link>:&#32;
<anchor xml:id="_harvesting_8py_source_1l00160"/>00160 
<anchor xml:id="_harvesting_8py_source_1l00161"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1aff9639a19d154ee6ceeedd5f73acf9bf">00161</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1harvesting_1_1fitness_1aff9639a19d154ee6ceeedd5f73acf9bf">__init__</link>(self,&#32;task_data,&#32;bounds,&#32;n_jobs,&#32;n_operations,&#32;n_machines,&#32;max_active,&#32;name):
<anchor xml:id="_harvesting_8py_source_1l00162"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1acdccca1f5f064cff1ed3b227f6ee6083">00162</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1acdccca1f5f064cff1ed3b227f6ee6083">evals</link>&#32;=&#32;mp.RawValue(ct.c_long,&#32;0)&#32;&#32;<emphasis role="comment">#&#32;writable&#32;across&#32;python&#32;processes</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00163"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1abef7ef0eef0226fbf7c2b05dd707e4be">00163</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1abef7ef0eef0226fbf7c2b05dd707e4be">best_y</link>&#32;=&#32;mp.RawValue(ct.c_double,&#32;np.inf)&#32;<emphasis role="comment">#&#32;writable&#32;across&#32;python&#32;processes</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00164"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1a82bfcf17e6bdebbb45766a25fa07c7ee">00164</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a82bfcf17e6bdebbb45766a25fa07c7ee">t0</link>&#32;=&#32;time.perf_counter()
<anchor xml:id="_harvesting_8py_source_1l00165"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1ab83d77fabcdf2ad945a09d15415441a9">00165</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ab83d77fabcdf2ad945a09d15415441a9">task_data</link>&#32;=&#32;task_data&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00166"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1a8307767d6fcf38a545057515e9e2081d">00166</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a8307767d6fcf38a545057515e9e2081d">n_jobs</link>&#32;=&#32;n_jobs
<anchor xml:id="_harvesting_8py_source_1l00167"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1aa2e6edce71626a64d0f92cf7f1fe0978">00167</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1aa2e6edce71626a64d0f92cf7f1fe0978">n_operations</link>&#32;=&#32;n_operations
<anchor xml:id="_harvesting_8py_source_1l00168"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">00168</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>&#32;=&#32;n_machines&#32;
<anchor xml:id="_harvesting_8py_source_1l00169"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1a93ba55f2cf507f0c20f5d93241873d80">00169</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a93ba55f2cf507f0c20f5d93241873d80">max_active</link>&#32;=&#32;max_active&#32;
<anchor xml:id="_harvesting_8py_source_1l00170"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1a7c5f7176944c928ea0b8a667e20c0934">00170</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a7c5f7176944c928ea0b8a667e20c0934">bounds</link>&#32;=&#32;bounds
<anchor xml:id="_harvesting_8py_source_1l00171"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1a5df1d237e656b28b147deab852aa5617">00171</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a5df1d237e656b28b147deab852aa5617">name</link>&#32;=&#32;name
<anchor xml:id="_harvesting_8py_source_1l00172"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1afae97d0f6a70547ee1f5fda0e3b1f608">00172</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1afae97d0f6a70547ee1f5fda0e3b1f608">nobj</link>&#32;=&#32;3
<anchor xml:id="_harvesting_8py_source_1l00173"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1a87d8c30285fadcd3387ea1b0f5194db4">00173</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a87d8c30285fadcd3387ea1b0f5194db4">ncon</link>&#32;=&#32;1
<anchor xml:id="_harvesting_8py_source_1l00174"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1ad62323e2fef3b563c6062a4987ce6d14">00174</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad62323e2fef3b563c6062a4987ce6d14">weights</link>&#32;=&#32;np.array([1.0,&#32;0.02,&#32;0.001,&#32;1000])&#32;<emphasis role="comment">#&#32;only&#32;used&#32;for&#32;single&#32;objective&#32;optimization&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00175"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1a1576b605b6dd4a4f3d4fff693b8933a9">00175</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1aa724092b904a41081b0749a0fb0efffb">job_indices</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a1576b605b6dd4a4f3d4fff693b8933a9">job_ids</link>&#32;=&#32;<link linkend="_classexamples_1_1harvesting_1_1fitness_1aa724092b904a41081b0749a0fb0efffb">job_indices</link>(task_data)
<anchor xml:id="_harvesting_8py_source_1l00176"/>00176 
<anchor xml:id="_harvesting_8py_source_1l00177"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1acb6ce7a10ef6b8a08952a7cf7b94b4f6">00177</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1harvesting_1_1fitness_1acb6ce7a10ef6b8a08952a7cf7b94b4f6">chart</link>(self,&#32;x):
<anchor xml:id="_harvesting_8py_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_time&#32;=&#32;x[-1]
<anchor xml:id="_harvesting_8py_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;x[-self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>-1:-1]*max_time
<anchor xml:id="_harvesting_8py_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;=&#32;x[-2*self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>-1:-self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>-1]*max_time
<anchor xml:id="_harvesting_8py_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tasks&#32;=&#32;<link linkend="_namespaceexamples_1_1harvesting_1ac5401be59f58e63fbbb729287a4c3171">filtered_tasks</link>(x,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ab83d77fabcdf2ad945a09d15415441a9">task_data</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1aa2e6edce71626a64d0f92cf7f1fe0978">n_operations</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>,
<anchor xml:id="_harvesting_8py_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1aa724092b904a41081b0749a0fb0efffb">job_indices</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a1576b605b6dd4a4f3d4fff693b8933a9">job_ids</link>)
<anchor xml:id="_harvesting_8py_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classexamples_1_1harvesting_1_1fitness_1acb6ce7a10ef6b8a08952a7cf7b94b4f6">chart</link>(tasks,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a8307767d6fcf38a545057515e9e2081d">n_jobs</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a93ba55f2cf507f0c20f5d93241873d80">max_active</link>,&#32;start,&#32;duration)
<anchor xml:id="_harvesting_8py_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00185"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1ac9d51d3f1b4b38e405e5cce9fdd48b7d">00185</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1harvesting_1_1fitness_1ac9d51d3f1b4b38e405e5cce9fdd48b7d">fun</link>(self,&#32;x):&#32;<emphasis role="comment">#&#32;multi&#32;objective&#32;function&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tasks&#32;=&#32;<link linkend="_namespaceexamples_1_1harvesting_1ac5401be59f58e63fbbb729287a4c3171">filtered_tasks</link>(x,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ab83d77fabcdf2ad945a09d15415441a9">task_data</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1aa2e6edce71626a64d0f92cf7f1fe0978">n_operations</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>,
<anchor xml:id="_harvesting_8py_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1aa724092b904a41081b0749a0fb0efffb">job_indices</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a1576b605b6dd4a4f3d4fff693b8933a9">job_ids</link>)
<anchor xml:id="_harvesting_8py_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_time&#32;=&#32;x[-1]
<anchor xml:id="_harvesting_8py_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;x[-self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>-1:-1]*max_time
<anchor xml:id="_harvesting_8py_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&#32;=&#32;x[-2*self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>-1:-self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>-1]*max_time
<anchor xml:id="_harvesting_8py_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;machine_time,&#32;job_time,&#32;machine_work_time,&#32;fails&#32;=&#32;\
<anchor xml:id="_harvesting_8py_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1harvesting_1a5e6fd72941106ed07937bf8806852011">exec_tasks</link>(tasks,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a8307767d6fcf38a545057515e9e2081d">n_jobs</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad69eef392c3e8bfa54df715ddc71a097">n_machines</link>,&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a93ba55f2cf507f0c20f5d93241873d80">max_active</link>,&#32;start,&#32;duration)
<anchor xml:id="_harvesting_8py_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;fails&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:&#32;<emphasis role="comment">#&#32;timing&#32;error</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;np.array([0,&#32;0,&#32;0,&#32;10000])
<anchor xml:id="_harvesting_8py_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;span&#32;=&#32;np.amax(machine_time)
<anchor xml:id="_harvesting_8py_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;work&#32;=&#32;np.sum(machine_work_time)
<anchor xml:id="_harvesting_8py_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wmax&#32;=&#32;np.amax(machine_work_time)
<anchor xml:id="_harvesting_8py_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;=&#32;np.array([span,&#32;work,&#32;wmax,&#32;fails])&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;sum(self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad62323e2fef3b563c6062a4987ce6d14">weights</link>*ys)&#32;<emphasis role="comment">#&#32;weighted&#32;sum&#32;&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1acdccca1f5f064cff1ed3b227f6ee6083">evals</link>.value&#32;+=&#32;1
<anchor xml:id="_harvesting_8py_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;y&#32;&lt;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1abef7ef0eef0226fbf7c2b05dd707e4be">best_y</link>.value:
<anchor xml:id="_harvesting_8py_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1abef7ef0eef0226fbf7c2b05dd707e4be">best_y</link>.value&#32;=&#32;y&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logger.info(<emphasis role="stringliteral">&quot;evals&#32;=&#32;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;t&#32;=&#32;{2:.0f}&#32;f&#32;=&#32;{3:.0f}&#32;y&#32;=&#32;{4:.2f}&#32;s&#32;=&#32;{5:.2f}&#32;w&#32;=&#32;{6:.0f}&#32;m&#32;=&#32;{7:.0f}&#32;m=&#32;{8:s}&#32;j=&#32;{9:s}&#32;w=&#32;{10:s}&quot;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1harvesting_1a48e2ae48f8a81a448c4f19d7014cfdeb">format</link>(self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1acdccca1f5f064cff1ed3b227f6ee6083">evals</link>.value,&#32;dtime(self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1a82bfcf17e6bdebbb45766a25fa07c7ee">t0</link>),&#32;max_time,&#32;fails,&#32;y,&#32;span,&#32;work,&#32;wmax,
<anchor xml:id="_harvesting_8py_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str([int(si)&#32;<emphasis role="keywordflow">for</emphasis>&#32;si&#32;<emphasis role="keywordflow">in</emphasis>&#32;machine_time]),
<anchor xml:id="_harvesting_8py_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str([int(oi)&#32;<emphasis role="keywordflow">for</emphasis>&#32;oi&#32;<emphasis role="keywordflow">in</emphasis>&#32;job_time]),
<anchor xml:id="_harvesting_8py_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str([int(oi)&#32;<emphasis role="keywordflow">for</emphasis>&#32;oi&#32;<emphasis role="keywordflow">in</emphasis>&#32;machine_work_time]),
<anchor xml:id="_harvesting_8py_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;))
<anchor xml:id="_harvesting_8py_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ys&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00210"/>00210 
<anchor xml:id="_harvesting_8py_source_1l00211"/><link linkend="_classexamples_1_1harvesting_1_1fitness_1add29e0fd221efd5ffa3ce2f0933b633f">00211</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1harvesting_1_1fitness_1add29e0fd221efd5ffa3ce2f0933b633f">__call__</link>(self,&#32;x):&#32;&#32;<emphasis role="comment">#&#32;single&#32;objective&#32;function&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;=&#32;self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ac9d51d3f1b4b38e405e5cce9fdd48b7d">fun</link>(x)
<anchor xml:id="_harvesting_8py_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sum(self.<link linkend="_classexamples_1_1harvesting_1_1fitness_1ad62323e2fef3b563c6062a4987ce6d14">weights</link>*ys)&#32;<emphasis role="comment">#&#32;weighted&#32;sum&#32;&#32;</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00214"/>00214 
<anchor xml:id="_harvesting_8py_source_1l00215"/><link linkend="_namespaceexamples_1_1harvesting_1abe8c6e1997927ab3f18d66329f8e3ff9">00215</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1harvesting_1abe8c6e1997927ab3f18d66329f8e3ff9">retry_modecpp</link>(fit,&#32;retry_num&#32;=&#32;32,&#32;popsize&#32;=&#32;48,&#32;max_eval&#32;=&#32;500000,&#32;
<anchor xml:id="_harvesting_8py_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update&#32;=&#32;True,&#32;workers=mp.cpu_count()):
<anchor xml:id="_harvesting_8py_source_1l00217"/>00217 &#32;&#32;&#32;&#32;xf,&#32;yf&#32;=&#32;modecpp.retry(fit.fun,&#32;fit.nobj,&#32;fit.ncon,&#32;fit.bounds,&#32;<emphasis role="keywordtype">None</emphasis>,&#32;retry_num,&#32;popsize,&#32;
<anchor xml:id="_harvesting_8py_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;=&#32;960000,&#32;nsga_update&#32;=&#32;nsga_update,&#32;workers=workers)
<anchor xml:id="_harvesting_8py_source_1l00219"/>00219 &#32;&#32;&#32;&#32;xs&#32;=&#32;[];&#32;ys&#32;=&#32;[]
<anchor xml:id="_harvesting_8py_source_1l00220"/>00220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(yf)):
<anchor xml:id="_harvesting_8py_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;yf[i][-1]&#32;==&#32;0:&#32;<emphasis role="comment">#&#32;filter&#32;valid&#32;solutions</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs.append(xf[i])
<anchor xml:id="_harvesting_8py_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys.append(yf[i][:fit.nobj])
<anchor xml:id="_harvesting_8py_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;np.array(xs),&#32;np.array(ys)
<anchor xml:id="_harvesting_8py_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00226"/><link linkend="_namespaceexamples_1_1harvesting_1ab869345e6c0b51fa393095935a395060">00226</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1harvesting_1ab869345e6c0b51fa393095935a395060">optall</link>(max_active,&#32;multi_objective&#32;=&#32;True):
<anchor xml:id="_harvesting_8py_source_1l00227"/>00227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(1,16):
<anchor xml:id="_harvesting_8py_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1harvesting_1a12ed3a155bf3c4c55dcfa7935b5d5b90">optimize</link>(i,&#32;max_active,&#32;multi_objective)
<anchor xml:id="_harvesting_8py_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00230"/><link linkend="_namespaceexamples_1_1harvesting_1a12ed3a155bf3c4c55dcfa7935b5d5b90">00230</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1harvesting_1a12ed3a155bf3c4c55dcfa7935b5d5b90">optimize</link>(bi,&#32;max_active,&#32;multi_objective&#32;=&#32;True):&#32;
<anchor xml:id="_harvesting_8py_source_1l00231"/>00231 &#32;&#32;&#32;&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;BrandimarteMk&quot;</emphasis>&#32;+&#32;str(bi)
<anchor xml:id="_harvesting_8py_source_1l00232"/>00232 &#32;&#32;&#32;&#32;tasks,&#32;n_jobs,&#32;n_machines,&#32;n_operations,&#32;sum_time&#32;=&#32;read_fjs(<emphasis role="stringliteral">&quot;data/1_Brandimarte/&quot;</emphasis>&#32;+&#32;name&#32;+&#32;<emphasis role="stringliteral">&quot;.fjs&quot;</emphasis>)
<anchor xml:id="_harvesting_8py_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00234"/>00234 &#32;&#32;&#32;&#32;dim&#32;=&#32;2*n_operations&#32;+&#32;2*n_machines&#32;+&#32;1
<anchor xml:id="_harvesting_8py_source_1l00235"/>00235 &#32;&#32;&#32;&#32;lower_bound&#32;=&#32;np.zeros(dim)
<anchor xml:id="_harvesting_8py_source_1l00236"/>00236 &#32;&#32;&#32;&#32;lower_bound[:]&#32;=&#32;0.0000001&#32;
<anchor xml:id="_harvesting_8py_source_1l00237"/>00237 &#32;&#32;&#32;&#32;upper_bound&#32;=&#32;np.zeros(dim)
<anchor xml:id="_harvesting_8py_source_1l00238"/>00238 &#32;&#32;&#32;&#32;upper_bound[:]&#32;=&#32;0.9999999
<anchor xml:id="_harvesting_8py_source_1l00239"/>00239 &#32;&#32;&#32;&#32;upper_bound[-1]&#32;=&#32;sum_time
<anchor xml:id="_harvesting_8py_source_1l00240"/>00240 &#32;&#32;&#32;&#32;bounds&#32;=&#32;Bounds(lower_bound,&#32;upper_bound)
<anchor xml:id="_harvesting_8py_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00242"/>00242 &#32;&#32;&#32;&#32;fit&#32;=&#32;<link linkend="_classexamples_1_1harvesting_1_1fitness">fitness</link>(tasks,&#32;bounds,&#32;n_jobs,&#32;n_operations,&#32;n_machines,&#32;max_active,&#32;name)
<anchor xml:id="_harvesting_8py_source_1l00243"/>00243 &#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00244"/>00244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;multi_objective:
<anchor xml:id="_harvesting_8py_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs,&#32;front&#32;=&#32;<link linkend="_namespaceexamples_1_1harvesting_1abe8c6e1997927ab3f18d66329f8e3ff9">retry_modecpp</link>(fit,&#32;retry_num&#32;=&#32;32,&#32;popsize&#32;=&#32;48,&#32;max_eval&#32;=&#32;500000,&#32;
<anchor xml:id="_harvesting_8py_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update&#32;=&#32;<emphasis role="keyword">True</emphasis>,&#32;workers=16)
<anchor xml:id="_harvesting_8py_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logger.info(name&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;modecpp.retry(num_retries=32,&#32;popsize&#32;=&#32;48,&#32;max_evals&#32;=&#32;960000,&#32;nsga_update&#32;=&#32;True,&#32;workers=16&quot;</emphasis>&#32;)
<anchor xml:id="_harvesting_8py_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logger.info(str([tuple(y)&#32;<emphasis role="keywordflow">for</emphasis>&#32;y&#32;<emphasis role="keywordflow">in</emphasis>&#32;front]))
<anchor xml:id="_harvesting_8py_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store&#32;=&#32;<link linkend="_classfcmaes_1_1retry_1_1_store">retry.Store</link>(fit,&#32;bounds)&#32;
<anchor xml:id="_harvesting_8py_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logger.info(name&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;Bite_cpp(960000,M=1).minimize,&#32;num_retries=256)&quot;</emphasis>&#32;)
<anchor xml:id="_harvesting_8py_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retry.retry(store,&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(960000,M=1).minimize,&#32;num_retries=256)&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fit,&#32;xs
<anchor xml:id="_harvesting_8py_source_1l00255"/>00255 
<anchor xml:id="_harvesting_8py_source_1l00256"/><link linkend="_namespaceexamples_1_1harvesting_1a499ab2843b981f8e2c10eb21636a6d01">00256</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1harvesting_1a499ab2843b981f8e2c10eb21636a6d01">main</link>():
<anchor xml:id="_harvesting_8py_source_1l00257"/>00257 &#32;&#32;&#32;&#32;<emphasis role="comment">#optall(max_active&#32;=&#32;4,&#32;multi_objective&#32;=&#32;True)</emphasis>
<anchor xml:id="_harvesting_8py_source_1l00258"/>00258 &#32;&#32;&#32;&#32;fit,&#32;xs&#32;=&#32;<link linkend="_namespaceexamples_1_1harvesting_1a12ed3a155bf3c4c55dcfa7935b5d5b90">optimize</link>(1,&#32;max_active&#32;=&#32;4,&#32;multi_objective&#32;=&#32;<emphasis role="keyword">True</emphasis>)
<anchor xml:id="_harvesting_8py_source_1l00259"/>00259 &#32;&#32;&#32;&#32;fit.chart(xs[0])&#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00260"/>00260 &#32;&#32;&#32;
<anchor xml:id="_harvesting_8py_source_1l00261"/>00261 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_harvesting_8py_source_1l00262"/>00262 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1harvesting_1a499ab2843b981f8e2c10eb21636a6d01">main</link>()
</programlisting></section>
