<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_optimizer_8py" xml:lang="en-US">
<title>fcmaes/optimizer.py File Reference</title>
<indexterm><primary>fcmaes/optimizer.py</primary></indexterm>
<para>

<para>============================================================================= </para>
 
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1wrapper">fcmaes.optimizer.wrapper</link></para>

<para>Wrapper for optimization evaluation and logging. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">fcmaes.optimizer.Optimizer</link></para>

<para>Provides functionalities for optimization tasks. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_sequence">fcmaes.optimizer.Sequence</link></para>

<para>A class for sequentially combining multiple optimizers. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_choice">fcmaes.optimizer.Choice</link></para>

<para>A class representing a choice-based optimizer. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_crfmnes">fcmaes.optimizer.Crfmnes</link></para>

<para>Implements the CR-FM-NES (Covariance Matrix Adaptation Evolution Strategy with Full Matrix) optimization algorithm. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_crfmnes__cpp">fcmaes.optimizer.Crfmnes_cpp</link></para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_pgpe__cpp">fcmaes.optimizer.Pgpe_cpp</link></para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_cma__python">fcmaes.optimizer.Cma_python</link></para>

<para><link linkend="_classfcmaes_1_1optimizer_1_1_cma__python">Cma_python</link> optimizer class. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_cma__cpp">fcmaes.optimizer.Cma_cpp</link></para>

<para>This class implements the CMA-ES optimization algorithm with customization options. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_cma__orig">fcmaes.optimizer.Cma_orig</link></para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_cma__lw">fcmaes.optimizer.Cma_lw</link></para>

<para>CMA-ES lightweight optimizer implementation. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_cma__awm">fcmaes.optimizer.Cma_awm</link></para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_cma__sep">fcmaes.optimizer.Cma_sep</link></para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_de__cpp">fcmaes.optimizer.De_cpp</link></para>

<para>Differential Evolution optimizer using C++ backend. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_de__python">fcmaes.optimizer.De_python</link></para>

<para>Differential Evolution (DE) optimizer implemented in Python. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_cma__ask__tell">fcmaes.optimizer.Cma_ask_tell</link></para>

<para>CMA-ES Ask-Tell based optimizer. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_de__ask__tell">fcmaes.optimizer.De_ask_tell</link></para>

<para>Differential Evolution optimizer for numerical optimization tasks. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1random__search">fcmaes.optimizer.random_search</link></para>

<para>A class for performing optimization using a random search strategy. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_da__cpp">fcmaes.optimizer.Da_cpp</link></para>

<para>Represents the <link linkend="_classfcmaes_1_1optimizer_1_1_da__cpp">Da_cpp</link> optimization algorithm, a variant of the <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">Optimizer</link> class. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">fcmaes.optimizer.Bite_cpp</link></para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_dual__annealing">fcmaes.optimizer.Dual_annealing</link></para>

<para>Dual annealing optimization algorithm implementation. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_differential__evolution">fcmaes.optimizer.Differential_evolution</link></para>

<para>A class for performing optimization using the Differential Evolution algorithm. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_check_bounds">fcmaes.optimizer.CheckBounds</link></para>

<para>Validates whether a given set of values falls within specified bounds. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_basin__hopping">fcmaes.optimizer.Basin_hopping</link></para>

<para>Optimization class implementing the basin hopping algorithm from SciPy. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_minimize">fcmaes.optimizer.Minimize</link></para>

<para>Optimization utilizing the scipy minimize function. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_shgo">fcmaes.optimizer.Shgo</link></para>

<para><link linkend="_classfcmaes_1_1optimizer_1_1_shgo">Shgo</link> optimizer for mathematical function minimization. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1single__objective">fcmaes.optimizer.single_objective</link></para>

<para>Represents a wrapper for a single-objective optimization problem. </para>
</listitem>
            <listitem><para>class <link linkend="_classfcmaes_1_1optimizer_1_1_n_lopt">fcmaes.optimizer.NLopt</link></para>

<para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">Optimizer</link> class utilizing <link linkend="_classfcmaes_1_1optimizer_1_1_n_lopt">NLopt</link> algorithms for optimization tasks. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacefcmaes">fcmaes</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacefcmaes_1_1optimizer_1ae1056ace6b9d6293933260f0ffd8b139">fcmaes.optimizer.eprint</link> (*args, **kwargs)</para>

<para>Prints the provided arguments to the standard error stream. </para>
</listitem>
            <listitem><para>np.ndarray <link linkend="_namespacefcmaes_1_1optimizer_1a4bd18244815f50df9c133ce56be95865">fcmaes.optimizer.scale</link> (ArrayLike lower, ArrayLike upper)</para>

<para>Scales the difference between the upper and lower bounds by a factor of 0.5. </para>
</listitem>
            <listitem><para>np.ndarray <link linkend="_namespacefcmaes_1_1optimizer_1aaae18e4aad3a1d3f8ca3b264c16f10a8">fcmaes.optimizer.typical</link> (ArrayLike lower, ArrayLike upper)</para>

<para>Computes the midpoint of the bounds by taking the average of the lower and upper bounds. </para>
</listitem>
            <listitem><para>np.ndarray <link linkend="_namespacefcmaes_1_1optimizer_1a83e03a72c4ba10e3773f1ec31350bd56">fcmaes.optimizer.fitting</link> (ArrayLike guess, ArrayLike lower, ArrayLike upper)</para>

<para>Clip an input array-like to ensure it remains within specified bounds. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespacefcmaes_1_1optimizer_1a28ae2bbd57e22b7bf12623dcc7cb75c8">fcmaes.optimizer.is_terminate</link> (int runid, int iterations, float val)</para>

<para>Determines whether a process should terminate based on the given parameters. </para>
</listitem>
            <listitem><para>np.ndarray <link linkend="_namespacefcmaes_1_1optimizer_1a86bf62954992be8d3ff9a4fbeed47c54">fcmaes.optimizer.random_x</link> (ArrayLike lower, ArrayLike upper)</para>

<para>Generates a random numpy array of values within the specified bounds. </para>
</listitem>
            <listitem><para>float <link linkend="_namespacefcmaes_1_1optimizer_1ac563cd1fadd680f0e114a92adb740159">fcmaes.optimizer.dtime</link> (float t0)</para>

<para>Calculates the elapsed time in seconds since the provided starting time <computeroutput>t0</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_sequence">Sequence</link> <link linkend="_namespacefcmaes_1_1optimizer_1a7619d6ba38c7ec9033f6dbd0580f094b">fcmaes.optimizer.de_cma</link> (Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[float] stop_fitness=-np.inf, Optional[int] de_max_evals=None, Optional[int] cma_max_evals=None, Optional[ArrayLike] ints=None, Optional[int] workers=None)</para>

<para>Creates a sequence of optimization algorithms combining Differential Evolution (DE) and Covariance Matrix Adaptation (CMA). </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_sequence">Sequence</link> <link linkend="_namespacefcmaes_1_1optimizer_1a47d1c3b0025fdbfe74a53b4c09e50b2f">fcmaes.optimizer.de_cma_py</link> (Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[float] stop_fitness=-np.inf, Optional[int] de_max_evals=None, Optional[int] cma_max_evals=None, Optional[ArrayLike] ints=None, Optional[int] workers=None)</para>

<para>Creates and returns a sequence of optimizers configured with DE (Differential Evolution) and CMA (Covariance Matrix Adaptation) algorithms. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_sequence">Sequence</link> <link linkend="_namespacefcmaes_1_1optimizer_1a08e08a743a3d7654472d545ac33dd2d4">fcmaes.optimizer.da_cma</link> (Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[int] da_max_evals=None, Optional[int] cma_max_evals=None, Optional[float] stop_fitness=-np.inf)</para>

<para>Combines Differential Algorithm (DA) and Covariance Matrix Adaptation (CMA) optimization techniques into a sequential process, dividing the computational budget between the two algorithms and returning the resulting sequence. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_sequence">Sequence</link> <link linkend="_namespacefcmaes_1_1optimizer_1acf749397f0f3e9790e9d162554304df7">fcmaes.optimizer.de_crfmnes</link> (Optional[int] max_evaluations=50000, Optional[int] popsize=32, Optional[float] stop_fitness=-np.inf, Optional[int] de_max_evals=None, Optional[int] crfm_max_evals=None, Optional[ArrayLike] ints=None, Optional[int] workers=None)</para>

<para>Combines Differential Evolution (DE) and Covariance Matrix Adaptation Evolution Strategies (CR-FM-NES) optimization algorithms in sequence. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_sequence">Sequence</link> <link linkend="_namespacefcmaes_1_1optimizer_1acdb72c2fc9851551f88b19ccb5f58874">fcmaes.optimizer.crfmnes_bite</link> (Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[float] stop_fitness=-np.inf, Optional[int] crfm_max_evals=None, Optional[int] bite_max_evals=None, Optional[int] M=1)</para>

<para>Creates a sequence of two optimization methods, <link linkend="_classfcmaes_1_1optimizer_1_1_crfmnes__cpp">Crfmnes_cpp</link> and <link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>, with configurable parameters for evaluations, population size, stopping fitness criteria, and others. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_sequence">Sequence</link> <link linkend="_namespacefcmaes_1_1optimizer_1aa81db687f4de5f26a620f2275ad5667a">fcmaes.optimizer.bite_cma</link> (Optional[int] max_evaluations=50000, Optional[int] popsize=31, Optional[float] stop_fitness=-np.inf, Optional[int] bite_max_evals=None, Optional[int] cma_max_evals=None, Optional[int] M=1)</para>

<para>Generates a sequence of optimization strategies using the Biogeography-based optimization technique (Bite) and the Covariance Matrix Adaptation (CMA) algorithm. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_sequence">Sequence</link> <link linkend="_namespacefcmaes_1_1optimizer_1a62ac4124b543bccd313f445c06b7354a">fcmaes.optimizer.cma_bite</link> (Optional[int] max_evaluations=50000, Optional[int] popsize=32, Optional[float] stop_fitness=-np.inf, Optional[int] cma_max_evals=None, Optional[int] bite_max_evals=None, Optional[int] M=1)</para>

<para>Combines CMA-ES and BITE optimization algorithms into a single sequence of operations, utilizing their respective strengths for optimization. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>============================================================================= </para>

<para>Fast version 1.6.11</para>

<para>(c) 2025 – Dietmar Wolz (c) 2025 – Latitude</para>

<para>License MIT</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_optimizer_8py">optimizer.py</link></para>
</listitem></itemizedlist>
</para>

<para><formalpara>
<title>Description</title>
<para><itemizedlist>
<listitem>
<para>Provides different optimization methods for use with parallel retry.</para>
</listitem><listitem>
<para>Implements a sequence of optimizers, random choice of optimizers, and different optimizers like CRFMNES, CMA-ES, Differential Evolution, Dual Annealing, Bite, and PGPE.</para>
</listitem><listitem>
<para>Provides a wrapper for fitness functions to use with parallel retry.</para>
</listitem><listitem>
<para>Implements utility functions for scaling, fitting, and generating random values.</para>
</listitem><listitem>
<para>Implements a base class for optimizers and derived classes for specific optimizers.</para>
</listitem><listitem>
<para>Provides functions to create common optimizer sequences like DE -&gt; CMA-ES,</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>Author</title>

<para>:<itemizedlist>
<listitem>
<para>Dietmar Wolz <literallayout><computeroutput>-&#32;romain.despoullains<emphasis role="preprocessor">@latitude.eu</emphasis>
-&#32;corentin.generet<emphasis role="preprocessor">@latitude.eu</emphasis>
</computeroutput></literallayout></para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara>
<title>References</title>
<para><itemizedlist>
<listitem>
<para>[1] <link xlink:href="https://github.com/dietmarwo/fast-cma-es">https://github.com/dietmarwo/fast-cma-es</link></para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara>
<title>Documentation</title>
<para><itemizedlist>
<listitem>
<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
<para>
Definition in file <link linkend="_optimizer_8py_source">optimizer.py</link>.</para>
</section>
</section>
