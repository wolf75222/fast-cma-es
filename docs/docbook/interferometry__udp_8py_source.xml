<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_interferometry__udp_8py_source" xml:lang="en-US">
<title>interferometry_udp.py</title>
<indexterm><primary>examples/interferometry_udp.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_interferometry__udp_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1interferometry__udp">00001</link> <emphasis role="comment">#&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00002"/>00002 <emphasis role="comment">#</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00005"/>00005 
<anchor xml:id="_interferometry__udp_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;This&#32;code&#32;was&#32;posted&#32;on&#32;https://gitter.im/pagmo2/Lobby&#32;by&#32;</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00007"/>00007 <emphasis role="comment">#&#32;Markus&#32;MÃ¤rtens&#32;@CoolRunning&#32;and&#32;extended&#32;by&#32;a&#32;</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00008"/>00008 <emphasis role="comment">#&#32;fcmaes&#32;parallel&#32;differential&#32;evolution&#32;solver&#32;for&#32;comparison&#32;with&#32;the&#32;pagmo&#32;island&#32;concept.</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00009"/>00009 <emphasis role="comment">#&#32;requires&#32;oagmo&#32;(pip&#32;install&#32;pagmo)&#32;for&#32;the&#32;comparison.&#32;Tested&#32;with&#32;Anaconda&#32;2020.11&#32;</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00010"/>00010 <emphasis role="comment">#&#32;https://repo.anaconda.com/archive/&#32;using&#32;Python&#32;3.8&#32;on&#32;Linux</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00011"/>00011 <emphasis role="comment">#&#32;The&#32;test&#32;image&#32;used&#32;is&#32;here:&#32;https://api.optimize.esa.int/data/interferometry/orion.jpg</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00012"/>00012 
<anchor xml:id="_interferometry__udp_8py_source_1l00013"/>00013 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00014"/>00014 
<anchor xml:id="_interferometry__udp_8py_source_1l00015"/>00015 <emphasis role="keyword">import</emphasis>&#32;math
<anchor xml:id="_interferometry__udp_8py_source_1l00016"/>00016 <emphasis role="keyword">from</emphasis>&#32;time&#32;<emphasis role="keyword">import</emphasis>&#32;time
<anchor xml:id="_interferometry__udp_8py_source_1l00017"/>00017 
<anchor xml:id="_interferometry__udp_8py_source_1l00018"/>00018 <emphasis role="keyword">from</emphasis>&#32;matplotlib&#32;<emphasis role="keyword">import</emphasis>&#32;pyplot
<anchor xml:id="_interferometry__udp_8py_source_1l00019"/>00019 <emphasis role="keyword">from</emphasis>&#32;numba&#32;<emphasis role="keyword">import</emphasis>&#32;njit
<anchor xml:id="_interferometry__udp_8py_source_1l00020"/>00020 <emphasis role="keyword">from</emphasis>&#32;scipy&#32;<emphasis role="keyword">import</emphasis>&#32;fft
<anchor xml:id="_interferometry__udp_8py_source_1l00021"/>00021 <emphasis role="keyword">from</emphasis>&#32;skimage.metrics&#32;<emphasis role="keyword">import</emphasis>&#32;mean_squared_error
<anchor xml:id="_interferometry__udp_8py_source_1l00022"/>00022 <emphasis role="keyword">from</emphasis>&#32;skimage.transform&#32;<emphasis role="keyword">import</emphasis>&#32;resize
<anchor xml:id="_interferometry__udp_8py_source_1l00023"/>00023 
<anchor xml:id="_interferometry__udp_8py_source_1l00024"/>00024 <emphasis role="keyword">import</emphasis>&#32;ctypes&#32;<emphasis role="keyword">as</emphasis>&#32;ct
<anchor xml:id="_interferometry__udp_8py_source_1l00025"/>00025 <emphasis role="keyword">import</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">as</emphasis>&#32;mp
<anchor xml:id="_interferometry__udp_8py_source_1l00026"/>00026 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_interferometry__udp_8py_source_1l00027"/>00027 
<anchor xml:id="_interferometry__udp_8py_source_1l00028"/>00028 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00029"/>00029 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_interferometry__udp_8py_source_1l00030"/>00030 
<anchor xml:id="_interferometry__udp_8py_source_1l00031"/>00031 logger.remove()
<anchor xml:id="_interferometry__udp_8py_source_1l00032"/><link linkend="_namespaceexamples_1_1interferometry__udp_1af7003fd9174f0ca0c0fcb7a766387191">00032</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_interferometry__udp_8py_source_1l00033"/>00033 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_interferometry__udp_8py_source_1l00034"/>00034 
<anchor xml:id="_interferometry__udp_8py_source_1l00035"/>00035 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00036"/><link linkend="_namespaceexamples_1_1interferometry__udp_1aeab16d7e29734973fa9765c86dc90bc0">00036</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1interferometry__udp_1aeab16d7e29734973fa9765c86dc90bc0">_get_observed</link>(n_points,&#32;im_ft,&#32;chromosome):
<anchor xml:id="_interferometry__udp_8py_source_1l00037"/>00037 &#32;&#32;&#32;&#32;r,&#32;c&#32;=&#32;im_ft.shape
<anchor xml:id="_interferometry__udp_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;l&#32;=&#32;0.01
<anchor xml:id="_interferometry__udp_8py_source_1l00039"/>00039 &#32;&#32;&#32;&#32;x,&#32;y&#32;=&#32;chromosome[:n_points],&#32;chromosome[n_points:]
<anchor xml:id="_interferometry__udp_8py_source_1l00040"/>00040 &#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;lx&#32;=&#32;(np.expand_dims(x,&#32;-1)&#32;-&#32;x).ravel()
<anchor xml:id="_interferometry__udp_8py_source_1l00042"/>00042 &#32;&#32;&#32;&#32;ly&#32;=&#32;(np.expand_dims(y,&#32;-1)&#32;-&#32;y).ravel()
<anchor xml:id="_interferometry__udp_8py_source_1l00043"/>00043 
<anchor xml:id="_interferometry__udp_8py_source_1l00044"/>00044 &#32;&#32;&#32;&#32;theta&#32;=&#32;np.linspace(0,&#32;2*np.pi,&#32;10000)
<anchor xml:id="_interferometry__udp_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;cos_theta&#32;=&#32;np.cos(theta)
<anchor xml:id="_interferometry__udp_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;sin_theta&#32;=&#32;np.sin(theta)
<anchor xml:id="_interferometry__udp_8py_source_1l00047"/>00047 
<anchor xml:id="_interferometry__udp_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;obs_uv_matrix&#32;=&#32;np.zeros((r,&#32;c),&#32;dtype=np.int32)
<anchor xml:id="_interferometry__udp_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(10000):
<anchor xml:id="_interferometry__udp_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;j&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(lx)):&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;full_re_u&#32;=&#32;math.floor((lx[j]&#32;*&#32;&#32;cos_theta[i]&#32;+&#32;ly[j]&#32;*&#32;sin_theta[i]&#32;)&#32;/&#32;l)
<anchor xml:id="_interferometry__udp_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;full_re_v&#32;=&#32;math.floor((lx[j]&#32;*&#32;-sin_theta[i]&#32;+&#32;ly[j]&#32;*&#32;cos_theta[i]&#32;)&#32;/&#32;l)&#32;&#32;&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;math.floor(full_re_u&#32;*&#32;r&#32;/&#32;2**2.5&#32;*&#32;l)
<anchor xml:id="_interferometry__udp_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;math.floor(full_re_v&#32;*&#32;r&#32;/&#32;2**2.5&#32;*&#32;l)
<anchor xml:id="_interferometry__udp_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;obs_uv_matrix[x][y]&#32;=&#32;1
<anchor xml:id="_interferometry__udp_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;im_ft&#32;*&#32;obs_uv_matrix
<anchor xml:id="_interferometry__udp_8py_source_1l00059"/>00059 
<anchor xml:id="_interferometry__udp_8py_source_1l00060"/><link linkend="_namespaceexamples_1_1interferometry__udp_1a1fa9fbcc27bb7a7e4a2a1304d29496b1">00060</link> best&#32;=&#32;mp.RawValue(ct.c_double,&#32;np.inf)&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00061"/><link linkend="_namespaceexamples_1_1interferometry__udp_1a8fe727e854115e399d2a0f00c17bdfbc">00061</link> count&#32;=&#32;mp.RawValue(ct.c_int,&#32;0)&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00062"/><link linkend="_namespaceexamples_1_1interferometry__udp_1a92a0fa419a0d32fac263c9e25af3da4f">00062</link> t0&#32;=&#32;time()
<anchor xml:id="_interferometry__udp_8py_source_1l00063"/><link linkend="_namespaceexamples_1_1interferometry__udp_1a742b65934a702e09a3e3ab28673ed758">00063</link> monitor&#32;=&#32;mp.Lock()
<anchor xml:id="_interferometry__udp_8py_source_1l00064"/>00064 
<anchor xml:id="_interferometry__udp_8py_source_1l00065"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry">00065</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry">Interferometry</link>():
<anchor xml:id="_interferometry__udp_8py_source_1l00066"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1ac3456e586ad91c7a24ca7b89e321133f">00066</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1ac3456e586ad91c7a24ca7b89e321133f">__init__</link>(self,&#32;number_points,&#32;image,&#32;image_size):
<anchor xml:id="_interferometry__udp_8py_source_1l00067"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e">00067</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e">number_points</link>&#32;=&#32;number_points
<anchor xml:id="_interferometry__udp_8py_source_1l00068"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a468ad50f14f7acacbc604489b7348269">00068</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a468ad50f14f7acacbc604489b7348269">image</link>&#32;=&#32;image
<anchor xml:id="_interferometry__udp_8py_source_1l00069"/>00069 
<anchor xml:id="_interferometry__udp_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#We&#32;make&#32;sure&#32;that&#32;it&#32;is&#32;a&#32;power&#32;of&#32;2</emphasis>
<anchor xml:id="_interferometry__udp_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert((image_size&#32;&amp;&#32;(image_size-1)&#32;==&#32;0)&#32;<emphasis role="keywordflow">and</emphasis>&#32;image_size&#32;!=&#32;0)
<anchor xml:id="_interferometry__udp_8py_source_1l00072"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1ada31a2daf6f03c43db3a69a6a085a24a">00072</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1ada31a2daf6f03c43db3a69a6a085a24a">image_size_log2</link>&#32;=&#32;np.log2(image_size)
<anchor xml:id="_interferometry__udp_8py_source_1l00073"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a1eb1ca6f3df61ce5e288b5431d41b4b3">00073</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a1eb1ca6f3df61ce5e288b5431d41b4b3">image_size</link>&#32;=&#32;image_size
<anchor xml:id="_interferometry__udp_8py_source_1l00074"/>00074 
<anchor xml:id="_interferometry__udp_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;img&#32;=&#32;pyplot.imread(self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a468ad50f14f7acacbc604489b7348269">image</link>)
<anchor xml:id="_interferometry__udp_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;img&#32;=&#32;resize(img,&#32;(self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a1eb1ca6f3df61ce5e288b5431d41b4b3">image_size</link>,self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a1eb1ca6f3df61ce5e288b5431d41b4b3">image_size</link>),&#32;preserve_range=<emphasis role="keyword">True</emphasis>,&#32;anti_aliasing=<emphasis role="keyword">True</emphasis>)
<anchor xml:id="_interferometry__udp_8py_source_1l00077"/>00077 
<anchor xml:id="_interferometry__udp_8py_source_1l00078"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a033ed091186328f2783d7d6a7548de03">00078</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a033ed091186328f2783d7d6a7548de03">im_numpy</link>&#32;=&#32;np.asarray(img)
<anchor xml:id="_interferometry__udp_8py_source_1l00079"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1ad907cb45808a3f0dcda1a08e46a372ce">00079</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1ad907cb45808a3f0dcda1a08e46a372ce">im_fft</link>&#32;=&#32;fft.fft2(self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a033ed091186328f2783d7d6a7548de03">im_numpy</link>)
<anchor xml:id="_interferometry__udp_8py_source_1l00080"/>00080 
<anchor xml:id="_interferometry__udp_8py_source_1l00081"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a2d43e438cc90a1c292c90925583652b7">00081</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a2d43e438cc90a1c292c90925583652b7">get_bounds</link>(self):
<anchor xml:id="_interferometry__udp_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;([-1.0]*self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e">number_points</link>*2,&#32;[1.0]*self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e">number_points</link>*2)
<anchor xml:id="_interferometry__udp_8py_source_1l00083"/>00083 
<anchor xml:id="_interferometry__udp_8py_source_1l00084"/><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a35547ca7bad49ebeec4beaf458f53856">00084</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a35547ca7bad49ebeec4beaf458f53856">fitness</link>(self,&#32;x):
<anchor xml:id="_interferometry__udp_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;observed&#32;=&#32;<link linkend="_namespaceexamples_1_1interferometry__udp_1aeab16d7e29734973fa9765c86dc90bc0">_get_observed</link>(self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a0de82ef011a26a1945319b023f9da85e">number_points</link>,&#32;self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1ad907cb45808a3f0dcda1a08e46a372ce">im_fft</link>,&#32;x)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;im_reconstruct&#32;=&#32;fft.ifft2(observed).real
<anchor xml:id="_interferometry__udp_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val&#32;=&#32;(mean_squared_error(self.<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry_1a033ed091186328f2783d7d6a7548de03">im_numpy</link>,&#32;im_reconstruct),)
<anchor xml:id="_interferometry__udp_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;monitor:
<anchor xml:id="_interferometry__udp_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count.value&#32;+=&#32;1
<anchor xml:id="_interferometry__udp_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;val[0]&#32;&lt;&#32;best.value:
<anchor xml:id="_interferometry__udp_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best.value&#32;=&#32;val[0]
<anchor xml:id="_interferometry__udp_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(str(count.value)&#32;+&#32;<emphasis role="stringliteral">&apos;&#32;fval&#32;=&#32;&apos;</emphasis>&#32;+&#32;str(val[0])&#32;+&#32;
<anchor xml:id="_interferometry__udp_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;t&#32;=&#32;&quot;</emphasis>&#32;+&#32;str(round(1000*(time()&#32;-&#32;t0)))&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;ms&quot;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;x&#32;=&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>.join(str(xi)&#32;<emphasis role="keywordflow">for</emphasis>&#32;xi&#32;<emphasis role="keywordflow">in</emphasis>&#32;x))
<anchor xml:id="_interferometry__udp_8py_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val
<anchor xml:id="_interferometry__udp_8py_source_1l00095"/>00095 &#32;&#32;&#32;&#32;
</programlisting></section>
