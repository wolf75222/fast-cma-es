<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_c_bite_opt" xml:lang="en-US">
<title>CBiteOpt Class Reference</title>
<indexterm><primary>CBiteOpt</primary></indexterm>
<para>
<computeroutput>#include &lt;biteopt.h&gt;</computeroutput>
</para>
Inheritance diagram for CBiteOpt:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for CBiteOpt:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_c_bite_opt_1_1_c_par_opt">CParOpt</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef int64_t <link linkend="_class_c_bite_opt_1a80651b5ffb10feccb67729f4c472a5dd">ptype</link></para>

<para>signed integer type, same as <link linkend="_class_c_bite_opt_base">CBiteOptBase</link> template parameter). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_1a5f4640ecb94e39ea475d71ca2234bc39">CBiteOpt</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a73dc570985bec54dc288690c31a8d8c7">updateDims</link> (const int aParamCount, const int PopSize0=0)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a24a8733fc9dbb2c7e314b699fc360d7b">init</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double *const InitParams=NULL, const double InitRadius=1.0)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_1a2f56a9d5d682c92e2da1234ed68d54ed">optimize</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, <link linkend="_class_c_bite_opt">CBiteOpt</link> *const PushOpt=NULL)</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_base_1af11515f00a0a685516aa9cc3daf7f603">CBiteOptBase</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_opt_base_1abc6be9a0740c36dfadb4ec3508dc0d65">~CBiteOptBase</link> ()</para>
</listitem>
            <listitem><para>virtual const double * <link linkend="_class_c_bite_opt_base_1abbed35653d8765915efc675204c19bb2">getBestParams</link> () const</para>
</listitem>
            <listitem><para>virtual double <link linkend="_class_c_bite_opt_base_1a4b2d3669723dbe251cf391cc10dd4f5c">getBestCost</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> ** <link linkend="_class_c_bite_opt_base_1a2eaae4dd1761eaef42ead68546994c12">getSels</link> ()</para>
</listitem>
            <listitem><para>const char ** <link linkend="_class_c_bite_opt_base_1afd1006a5d6154064115a205b54ecaa8c">getSelNames</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1a96f3b9e0a82d830bc34c17a5d0f8fa19">getSelCount</link> () const</para>
</listitem>
        </itemizedlist>
Public Member Functions inherited from <link linkend="_class_c_bite_opt_interface">CBiteOptInterface</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_interface_1a0155b3fcab9eeb2d7505c0326e12e809">CBiteOptInterface</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_opt_interface_1a070d1317053ec55bbe7d8ddde32076ce">~CBiteOptInterface</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_interface_1ae7f8adaf2fd8acb10ccf057592a6229d">getMinValues</link> (double *const p) const =0</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_interface_1a9debe40625c2bc248a4ffd12a9197a4d">getMaxValues</link> (double *const p) const =0</para>
</listitem>
            <listitem><para>virtual double <link linkend="_class_c_bite_opt_interface_1a45d7e2c9ea31b6f8bb23758a6879df9d">optcost</link> (const double *const p)=0</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a168cd86a91750b0548698f046e4b6d83">updateParPop</link> (const double UpdCost, const <link linkend="_class_c_bite_opt_1a80651b5ffb10feccb67729f4c472a5dd">ptype</link> *const UpdParams)</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_opt_1a344271b2490d03eaa0c8e1ab062d916d">selectParPop</link> (const int gi, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_opt_1ab98060db69130d7610818bddda8c7115">selectAltPop</link> (const int gi, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_1af25cdfb71a0ad9081148c31da58fe949">getMinSolIndex</link> (const int gi, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const int ps)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1aaf2f5bc8a214a95532426c9a9b38fdb8">generateSol1</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1ab6de0da3b279e77788efed7d3e05a0e2">generateSol2</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1abd6c435c82a97476332139663d9a1c82">generateSol2b</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a2363863090db7154792f78ec46abcf47">generateSol2c</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a76fa9d8bf4abde13b69e06761acc82f5">generateSol2d</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a2babc6c08dad9718d349683242805bc0">generateSol3</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1ae48399aea9fc3c2e01b370b846d88c82">generateSol4</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a01e7f5a94a2ae837844f8c60ddf21db6">generateSol5</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1aac1bd4dd832e20880872b94b07773946">generateSol5b</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a001440627928387b57b5f266696ba330">generateSol6</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a6766fe9d56bee1f623d297b2f9cf8500">generateSol7</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a332b03425de84b8ef8eb362af8e75e78">generateSol8</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1adca09db7345122f1da38d8f5c1800d83">generateSol9</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a8a5048dc4357f48344cf5ade0757ae2b">generateSol10</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1aee604953caf90013f483d9f77fd3881c">generateSolPar</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_base_1a5c53a8eb3a4269a746d990282452d71e">initBuffers</link> (const int aParamCount, const int aPopSize, const int aCnsCount=0, const int aObjCount=1)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_base_1aed59421f7102fb6921e4af39acfb8369">deleteBuffers</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a768362da5c773eea5a8649d44676eeed">initCommonVars</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1ac2ee22488c24887a922a30dd15d898e6">updateDiffValues</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a9e49b98f5f6a2470d060282b2fd26a53">updateBestCost</link> (const double UpdCost, const double *const UpdValues, const int p=-1)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a7b849dbede3dc6be555a4197541fad51">getRealValue</link> (const int64_t *const NormParams, const int i) const</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a634a498e8ebd71bbf87fd1df02f178e0">wrapParamReal</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v, const int i) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a5d8710f00b828beca21c0d2699ae340d">addSel</link> (<link linkend="_class_c_bite_sel_base">CBiteSelBase</link> &amp;s, const char *const sname)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select</link> (T &amp;Sel, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1aa08dcfff8871910e4d01a94f261ee752">applySelsIncr</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v=1.0)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a47acdb7a495f75170b0eb457e0dc950e">applySelsDecr</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_par_pops_1a24cc3d1978b4dbe57fad8a6f6d7efd8a">setParPopCount</link> (const int NewCount)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_par_pops_1afa8a97732cea882b664c2d0fbedf2289">getMinDistParPop</link> (const double Cost, const int64_t *const Params) const</para>
</listitem>
        </itemizedlist>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_par_pops_1a1d00195283da4d97f648da706e5c5cec">CBiteParPops</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_par_pops_1a772516362f17b8e5790596740ce355ba">~CBiteParPops</link> ()</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a0d5ab322641bb1a091df91ff7ee630c4">zeroParams</link> (int64_t *const dst) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a24130fea35014433f142e3b9ed0f8929">copyParams</link> (int64_t *const dst, const int64_t *const src) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a57e751582761922bbabff1ddb7af277b">copyValues</link> (double *const dst, const double *const src) const</para>
</listitem>
        </itemizedlist>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop_1ad427518ed1d47fbe3c2222b3a11badb7">CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop_1a73402384f4b75abf6d956dc086ccf36e">CBitePop</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_pop_1ac386e4638d6fc6bd5370eeae895347c3">~CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_pop_1ab18cf322db6ab186db1e19b53e34c232">operator=</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a3fc2d887ae91be62fd9fc3100268e53c">copy</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a7850902dad276dcecea68559eaccc168">updateCentroid</link> ()</para>
</listitem>
            <listitem><para>const int64_t * <link linkend="_class_c_bite_pop_1a5e6ccebb178353b084084f841b09042d">getCentroid</link> () const</para>
</listitem>
            <listitem><para>const int64_t * <link linkend="_class_c_bite_pop_1aaa8e3f180accfedf21218cbed8ffbb79">getParamsOrdered</link> (const int i) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad38d886687357797479e69098759476a">getCnsPtr</link> (int64_t *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad6cbe6cfbf9954dcb6f8a223a5e1f36b">getObjPtr</link> (int64_t *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1aa4f3255c9607f72eff280f8c3c09143f">getRankPtr</link> (int64_t *const pp) const</para>
</listitem>
            <listitem><para>const int64_t ** <link linkend="_class_c_bite_pop_1ac2a01e9eb6b884a0b318e4b914273acf">getPopParams</link> () const</para>
</listitem>
            <listitem><para>int64_t * <link linkend="_class_c_bite_pop_1a0053ae41c70babe967c5931f491ea865">getCurParams</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a5aef425d751172e1fff38a455cb51d34">getCurPopSize</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a7e1fbb7f7e9aaf8f73eb865fa4610185">getCurPopPos</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a767519aa2fcc2667dc135a131bc9fd85">resetCurPopPos</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a48d6ede5c82534c973e0458726e820dd">incrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a4656171c63f1944ae045d6f222d9d33a">decrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aad999ddc8a2ed72ffaee0db7732c9f76">updatePop</link> (double UpdCost, const int64_t *const UpdParams, const bool DoUpdateCentroid, const bool CanRejectCost=true)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a91a52c9eab07a265fce92f0ba0ec0d03">MethodSel</link></para>

<para>Population generator 4-method selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a03f51391b90a59f023178008e3d27746">M1Sel</link></para>

<para>Method 1&apos;s sub-method selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 3 &gt; <link linkend="_class_c_bite_opt_1a3af3717f98de343325970c75aca0845c">M1ASel</link></para>

<para>Method 1&apos;s sub-sub-method A selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a7e0f0eb4591c8c8f0a0147324e91e9e1">M1BSel</link></para>

<para>Method 1&apos;s sub-sub-method B selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a19ae8f821f9f26a9c0e01870bad6c42a">M1CSel</link></para>

<para>Method 1&apos;s sub-sub-method C selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a7d27a27405a83e13d6674d22e22c4f4f">M2Sel</link></para>

<para>Method 2&apos;s sub-method selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a7f28d33448459a4a860f6df420333afc">M2BSel</link></para>

<para>Method 2&apos;s sub-sub-method B selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1acac20a0af0c58f4aa58fb20bf4be11d5">PopChangeIncrSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1acd43fdffae9a65684c1436aaee087fd1">PopChangeDecrSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a1926decbab37c16bdf14787724e875d6">ParOpt2Sel</link></para>

<para>Parallel optimizer 2 use selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a47f66536806d836d1ec0ee5926995c0d">ParPopPSel</link> [4]</para>

<para>probability selectors. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a7c38e45fe68be8f7f9e6cbb4f1ec7e50">AltPopPSel</link></para>

<para>Alternative population use selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1abdbe1b2dca3680429d01e33ad78e0588">AltPopSel</link> [4]</para>

<para>selectors. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a1f08554f3c3fffb89fafd91104d6ac5d">MinSolPwrSel</link> [4]</para>

<para>least-cost population index selection. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a26719d83668ff3b3cce919878c358967">MinSolMulSel</link> [4]</para>

<para>least-cost population index selection. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1aabfab1d71a0563959f94970b250c5df9">Gen1AllpSel</link></para>

<para>Generator method 1&apos;s Allp selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a4cb14ff23736a5a74987504f94f1bf4b">Gen1MoveAsyncSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a88b8c7fcc43de72d390950fbfdc86cad">Gen1MoveSpanSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1aa05a9c04ac6d2a2ec6b679abd789df64">Gen2ModeSel</link></para>

<para>Generator method 2&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a8d6a5b4fd019d8aa73529c1fda6e91d5">Gen2bModeSel</link></para>

<para>Generator method 2b&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a96dbb17248d735d60d10b6ef4be3b7c5">Gen2cModeSel</link></para>

<para>Generator method 2c&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a1db3ecb43fe42f89db5b8dc1644baad6">Gen2dModeSel</link></para>

<para>Generator method 2d&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1abe8a0cedf383e8d0b272e779c2c8c6a4">Gen3ModeSel</link></para>

<para>Generator method 3&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1adf6acc728abfdec9b464d4a3c37b6a82">Gen4MixFacSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1af0f831fa6f9105ecab62be7bbb2c79b8">Gen5bModeSel</link></para>

<para>Generator method 5b&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1aad5bacfdff08b09d2834231c17bab4a2">Gen7PowFacSel</link></para>

<para>Generator method 7&apos;s Power selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a44981d73146ac3b77f4c7283af776473">Gen8ModeSel</link></para>

<para>Generator method 8&apos;s mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1af4e31b724cbc2a4e859ebd205e5cfd25">Gen8NumSel</link></para>

<para>Generator method 8&apos;s NumSols selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1ada28884009d78c2651d1b68dd3f6e1ba">Gen8SpanSel</link> [2]</para>

<para>selectors. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> <link linkend="_class_c_bite_opt_1a7c347ab2966fe6e79a9022fb136d25fc">OldPop</link></para>

<para>probabilistically. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_opt_1af14783d4853d9e7e207f00788583a42e">DoInitEvals</link></para>

<para>&quot;True&quot; if initial evaluations should be performed. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_opt_1ae7df30b17e5821498b7284e182425cdf">DoEval</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_1a764c6c8faa178116999c26b3866f8189">NewCost</link></para>

<para>value (cost). </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_opt_1_1_c_par_opt">CParOpt</link>&lt; <link linkend="_class_c_spher_opt">CSpherOpt</link> &gt; <link linkend="_class_c_bite_opt_1aa2ca8983a05dc599ff5a5f47d3af16b4">ParOpt</link></para>

<para>Parallel optimizer. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> <link linkend="_class_c_bite_opt_1a93a88d27436aa1660edea574fea346ef">ParOptPop</link></para>

<para>Includes only its solutions. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_opt_1_1_c_par_opt">CParOpt</link>&lt; <link linkend="_class_c_n_m_seq_opt">CNMSeqOpt</link> &gt; <link linkend="_class_c_bite_opt_1a2ddf8b2ba7691dc249b50baab668a5c8">ParOpt2</link></para>

<para>Parallel optimizer2. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> <link linkend="_class_c_bite_opt_1afb37a6bb1eacba21280536ee17511830">ParOpt2Pop</link></para>

<para>Includes only its solutions. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_1ab3a911c7924b1a55c9a38365ea1e60ef">UseParOpt</link></para>

<para>Parallel optimizer currently being in use. </para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Attributes inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a07d5b7c3007f79c7dc1f6106d9832dc6">MinValues</link></para>

<para>Minimal parameter values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a9b100a7afa3bdcb3684383ff2df7867a">MaxValues</link></para>

<para>Maximal parameter values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a70f5211fb9521491b0e6a336e21dd7bc">DiffValues</link></para>

<para>values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1ad5c0fe9c5312847158a6df8f4639de23">DiffValuesI</link></para>

<para>Inverse DiffValues. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a0fbab700b9d9c5c36d5ef664540efad0">BestValues</link></para>

<para>Best parameter vector. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1adc4dfe02978fd4ed460f49c7e9a01633">BestCost</link></para>

<para>Cost of the best parameter vector. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a0a97be5c42eed6fbaffba04c8720e6ce">NewValues</link></para>

<para>Temporary new parameter buffer, with real values. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1ab756659a8ba09ba42ffa3d207564fdd8">StallCount</link></para>

<para>The number of iterations without improvement. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a48296b534db162fa0007ff83757cb84b">HiBound</link></para>

<para>be used by the optimizer. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1acc0aa62d6125bd03d3baae22b0bf0467">AvgCost</link></para>

<para>the optimizer. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> * <link linkend="_class_c_bite_opt_base_1aebc1904c883f8b4dafefeda608c4536b">Sels</link> [<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]</para>

<para>indexed access in some cases. </para>
</listitem>
            <listitem><para>const char * <link linkend="_class_c_bite_opt_base_1a43d69538ae5aa7d78d8b3a3e821902b7">SelNames</link> [<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]</para>

<para>Selector names. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1ae9b284aca73ab2f6784f12174e391f7b">SelCount</link></para>

<para>The number of selectors in use. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> * <link linkend="_class_c_bite_opt_base_1a3922d6b29602643882d3212071a5e679">ApplySels</link> [<link linkend="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba">MaxApplySels</link>]</para>

<para><link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select()</link> function calls during the optimize() function call. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1afc2d6ec2c61d8f41bd39bb99632cf12e">ApplySelsCount</link></para>

<para>optimize() function call. </para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link>&lt; int64_t &gt; * <link linkend="_class_c_bite_par_pops_1a79983cca58bd18a6ff73120e65a976dd">ParPops</link> [<link linkend="_class_c_bite_par_pops_1a451f5fa8bb3503f9c344fe03f46ffcc9">MaxParPopCount</link>]</para>

<para>orbiting *this population. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_par_pops_1aea59bf6c1cf9894f944d07cec99882ee">ParPopCount</link></para>

<para>be changed via the <link linkend="_class_c_bite_par_pops_1a24cc3d1978b4dbe57fad8a6f6d7efd8a">setParPopCount()</link> function. </para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0dc6f7b3a19db513e349e68c3471f9fa">ParamCount</link></para>

<para>The total number of internal parameter values in use. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1a884c9ad4c0327aaa0110a23a89f5697a">ParamCountI</link></para>

<para>= 1.0 / ParamCount. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a58e3bf5abc2fb4b1e173aa6cb3477bfb">PopSize</link></para>

<para>The size of population in use (maximal). </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0b64743a84d5af143d44e7f6e9f02ada">PopSize1</link></para>

<para>= PopSize - 1. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1adc98fbdebc2671ef0826245d8c472cc5">CurPopSize</link></para>

<para>Current population size. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a26b81c70200085e410cf83258e139f9b">CurPopSize1</link></para>

<para>= CurPopSize - 1. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1aa5105ca75379f9a760dc9f0b9ea30ea7">CurPopSizeI</link></para>

<para>= 1.0 / CurPopSize. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aa7c87b9148768d6104f8d3dfb5abebce">CurPopPos</link></para>

<para>update. This variable should be initialized by the optimizer. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2bf725291723a8dcaa215496e3175471">CnsCount</link></para>

<para>The number of constraints per solution. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2f7c6a4707e23c21197ab32b71d900c7">ObjCount</link></para>

<para>The number of objectives per solution. </para>
</listitem>
            <listitem><para>uint8_t * <link linkend="_class_c_bite_pop_1ac69b014720b11a472509b22588eaf6c3">PopParamsBuf</link></para>

<para>Buffer for all PopParams vectors. </para>
</listitem>
            <listitem><para>int64_t ** <link linkend="_class_c_bite_pop_1a0c41790e473b70c5ec37986d0fb1f9a2">PopParams</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a6d4a3479ca9e60de6cf4667d5b2937a5">PopCnsOffs</link></para>

<para>a population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a98e2af75120c4184b271c14d22acf9d4">PopObjOffs</link></para>

<para>population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3ecc4ffcf1c6f3f9b4e4e5a873c481fe">PopRankOffs</link></para>

<para>item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3cdac0ad2cf5c8403f1f7676171f4e76">PopItemSize</link></para>

<para>Size in bytes of population item. </para>
</listitem>
            <listitem><para>int64_t * <link linkend="_class_c_bite_pop_1ac31d95bc1f383828e72bcf1eb499e949">CentParams</link></para>

<para>Centroid of the parameter vectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_pop_1a41f29468becc588bea6ff3f842db93ea">NeedCentUpdate</link></para>

<para>&quot;True&quot; if centroid update is needed. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1ab6dec63b0ee3955563c2a3f815614f31">CentLPC</link></para>

<para>Centroid averaging filter coefficient. </para>
</listitem>
            <listitem><para>int64_t * <link linkend="_class_c_bite_pop_1acae90e3584dca8b6c08c70d7bd317729">TmpParams</link></para>

<para>element of the PopParams array. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Static Public Attributes inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link></para>

<para>that can be added to *this object (for static arrays). </para>
</listitem>
        </itemizedlist>
</simplesect>
Static Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static int64_t <link linkend="_class_c_bite_pop_1a3b7e8d2276455475bd761e29c8c72ac6">wrapParam</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const int64_t v)</para>
</listitem>
            <listitem><para>static int64_t <link linkend="_class_c_bite_pop_1aecaac61269e65bda93cb2dc1a3a26091">getGaussianInt</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double sd, const int64_t meanInt)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1ad4e3a3c5b7a25ad02ef0231bd3fe8388">calcLP1Coeff</link> (const double Count)</para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba">MaxApplySels</link></para>

<para>that can be used during a single optimize() function call. </para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_par_pops_1a451f5fa8bb3503f9c344fe03f46ffcc9">MaxParPopCount</link></para>

<para>population supported. </para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76">IntOverBits</link></para>
</listitem>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8">IntMantBits</link></para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link></para>

<para>multiplier. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1aeba03d86b17ed01a97dc8225c5598b2d">IntMantMultM</link></para>

<para>IntMantMult. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a8c64d2e83f225b034df818b06b09ecd2">IntMantMult2</link></para>

<para>IntMantMult * 2. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a27448c9be1bed517e4a48aa656ca4f76">IntMantMask</link></para>

<para>corresponds to mantissa. </para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>

<para>BiteOpt optimization class. Implements a stochastic non-linear bound-constrained derivative-free optimization method.</para>

<para>Description is available at <link xlink:href="https://github.com/avaneev/biteopt">https://github.com/avaneev/biteopt</link> </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00046">46</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_c_bite_opt_1a80651b5ffb10feccb67729f4c472a5dd"/><section>
    <title>ptype</title>
<indexterm><primary>ptype</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>ptype</secondary></indexterm>
<para><computeroutput>typedef int64_t <link linkend="_class_c_bite_opt_1a80651b5ffb10feccb67729f4c472a5dd">CBiteOpt::ptype</link></computeroutput></para><para>

<para>signed integer type, same as <link linkend="_class_c_bite_opt_base">CBiteOptBase</link> template parameter). </para>
</para>

<para>Parameter value storage type (should be a </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00049">49</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_c_bite_opt_1a5f4640ecb94e39ea475d71ca2234bc39"/><section>
    <title>CBiteOpt()</title>
<indexterm><primary>CBiteOpt</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>CBiteOpt</secondary></indexterm>
<para><computeroutput>CBiteOpt::CBiteOpt ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteopt_8h_source_1l00052">52</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a5f4640ecb94e39ea475d71ca2234bc39_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a5f4640ecb94e39ea475d71ca2234bc39_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_c_bite_opt_1aaf2f5bc8a214a95532426c9a9b38fdb8"/><section>
    <title>generateSol1()</title>
<indexterm><primary>generateSol1</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol1</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol1 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>The original &quot;bitmask inversion with random move&quot; solution generator. Most of the time adjusts only a single parameter of a better solution, yet manages to produce excellent &quot;reference points&quot;. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00598">598</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_aaf2f5bc8a214a95532426c9a9b38fdb8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_aaf2f5bc8a214a95532426c9a9b38fdb8_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a8a5048dc4357f48344cf5ade0757ae2b"/><section>
    <title>generateSol10()</title>
<indexterm><primary>generateSol10</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol10</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol10 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Solution generator based on SpherOpt&apos;s converging hyper-spheroid. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01316">1316</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a8a5048dc4357f48344cf5ade0757ae2b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a8a5048dc4357f48344cf5ade0757ae2b_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1ab6de0da3b279e77788efed7d3e05a0e2"/><section>
    <title>generateSol2()</title>
<indexterm><primary>generateSol2</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol2</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol2 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>The &quot;Differential Evolution&quot;-based solution generator. Note that compared to a usual DE, this generator does not use crossover, and it uses one, or an average of two best solutions as the base. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00690">690</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_ab6de0da3b279e77788efed7d3e05a0e2_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_ab6de0da3b279e77788efed7d3e05a0e2_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1abd6c435c82a97476332139663d9a1c82"/><section>
    <title>generateSol2b()</title>
<indexterm><primary>generateSol2b</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol2b</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol2b (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>An alternative &quot;Differential Evolution&quot;-based solution generator. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00738">738</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_abd6c435c82a97476332139663d9a1c82_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_abd6c435c82a97476332139663d9a1c82_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a2363863090db7154792f78ec46abcf47"/><section>
    <title>generateSol2c()</title>
<indexterm><primary>generateSol2c</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol2c</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol2c (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>&quot;Differential Evolution&quot;-based solution generator, almost an exact replica of the <link linkend="_class_c_d_e_opt">CDEOpt</link> optimizer. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00786">786</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a2363863090db7154792f78ec46abcf47_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a2363863090db7154792f78ec46abcf47_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a76fa9d8bf4abde13b69e06761acc82f5"/><section>
    <title>generateSol2d()</title>
<indexterm><primary>generateSol2d</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol2d</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol2d (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>An alternative &quot;Differential Evolution&quot;-based solution generator that uses &quot;OldPop&quot; population. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00893">893</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a76fa9d8bf4abde13b69e06761acc82f5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a76fa9d8bf4abde13b69e06761acc82f5_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a2babc6c08dad9718d349683242805bc0"/><section>
    <title>generateSol3()</title>
<indexterm><primary>generateSol3</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol3</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol3 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>&quot;Centroid mix with DE&quot; solution generator, works well for convex functions. For DE operation, uses a better solution and a random previous solution. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00941">941</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a2babc6c08dad9718d349683242805bc0_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a2babc6c08dad9718d349683242805bc0_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1ae48399aea9fc3c2e01b370b846d88c82"/><section>
    <title>generateSol4()</title>
<indexterm><primary>generateSol4</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol4</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol4 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>&quot;Entropy bit mixing&quot;-based solution generator. Performs crossing-over of an odd number (this is important) of random solutions via XOR operation. Slightly less effective than the DE-based mixing, but makes the optimization method more diverse overall. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00983">983</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_ae48399aea9fc3c2e01b370b846d88c82_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_ae48399aea9fc3c2e01b370b846d88c82_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a01e7f5a94a2ae837844f8c60ddf21db6"/><section>
    <title>generateSol5()</title>
<indexterm><primary>generateSol5</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol5</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol5 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>A novel &quot;Randomized bit crossing-over&quot; candidate solution generation method. Effective, but on its own cannot stand coordinate system offsets, converges slowly. Completely mixes bits of two randomly-selected solutions, plus changes 1 random bit.</para>

<para>This method is similar to a biological DNA crossing-over, but on a single-bit scale. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01029">1029</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a01e7f5a94a2ae837844f8c60ddf21db6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a01e7f5a94a2ae837844f8c60ddf21db6_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1aac1bd4dd832e20880872b94b07773946"/><section>
    <title>generateSol5b()</title>
<indexterm><primary>generateSol5b</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol5b</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol5b (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>&quot;Randomized parameter cross-over&quot; solution generator. Similar to the &quot;randomized bit cross-over&quot;, but works with the whole parameter values. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01068">1068</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_aac1bd4dd832e20880872b94b07773946_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_aac1bd4dd832e20880872b94b07773946_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a001440627928387b57b5f266696ba330"/><section>
    <title>generateSol6()</title>
<indexterm><primary>generateSol6</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol6</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol6 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>A short-cut solution generator. Parameter value short-cuts: they considerably reduce convergence time for some functions while not severely impacting performance for other functions.</para>

<para>Can use variation with randomization between two values, and a slight move towards real 0. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01126">1126</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a001440627928387b57b5f266696ba330_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a001440627928387b57b5f266696ba330_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a6766fe9d56bee1f623d297b2f9cf8500"/><section>
    <title>generateSol7()</title>
<indexterm><primary>generateSol7</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol7</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol7 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>A solution generator that randomly combines solutions from the main and &quot;old&quot; populations. Conceptually, it can be called a weighted-random crossover that combines solutions from diverse sources. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01167">1167</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a6766fe9d56bee1f623d297b2f9cf8500_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a6766fe9d56bee1f623d297b2f9cf8500_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a332b03425de84b8ef8eb362af8e75e78"/><section>
    <title>generateSol8()</title>
<indexterm><primary>generateSol8</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol8</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol8 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Solution generator that is DE-alike in its base. It calculates a centroid of a number of best solutions, and then applies &quot;mutation&quot; operation between the centroid and the solutions, using a random multiplier. This generator is similar to the &quot;move&quot; operation of generator 1. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01201">1201</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a332b03425de84b8ef8eb362af8e75e78_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a332b03425de84b8ef8eb362af8e75e78_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1adca09db7345122f1da38d8f5c1800d83"/><section>
    <title>generateSol9()</title>
<indexterm><primary>generateSol9</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSol9</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSol9 (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>A &quot;water drain&quot; solution generator: makes a fixed-multiplier step from a better random solution 1 towards or away from worse random solution<orderedlist>
<listitem>
<para>Moderately efficient on its own. </para>
</listitem></orderedlist>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01280">1280</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_adca09db7345122f1da38d8f5c1800d83_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_adca09db7345122f1da38d8f5c1800d83_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1aee604953caf90013f483d9f77fd3881c"/><section>
    <title>generateSolPar()</title>
<indexterm><primary>generateSolPar</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>generateSolPar</secondary></indexterm>
<para><computeroutput>void CBiteOpt::generateSolPar (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Solution generator that obtains solution from an independently-running parallel optimizer. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01370">1370</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_aee604953caf90013f483d9f77fd3881c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_aee604953caf90013f483d9f77fd3881c_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1af25cdfb71a0ad9081148c31da58fe949"/><section>
    <title>getMinSolIndex()</title>
<indexterm><primary>getMinSolIndex</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>getMinSolIndex</secondary></indexterm>
<para><computeroutput>int CBiteOpt::getMinSolIndex (const int gi, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, const int ps)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function returns a dynamically-selected minimal population index, used in some solution generation methods.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>gi</entry><entry>
<para>Solution generator index (0-3). </para>
</entry>
                            </row>
                            <row>
<entry>rnd</entry><entry>
<para>PRNG object. </para>
</entry>
                            </row>
                            <row>
<entry>ps</entry><entry>
<para>Population size. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00581">581</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_af25cdfb71a0ad9081148c31da58fe949_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_af25cdfb71a0ad9081148c31da58fe949_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a24a8733fc9dbb2c7e314b699fc360d7b"/><section>
    <title>init()</title>
<indexterm><primary>init</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>init</secondary></indexterm>
<para><computeroutput>void CBiteOpt::init (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, const double *const InitParams = <computeroutput>NULL</computeroutput>
, const double InitRadius = <computeroutput>1.0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function initializes *this optimizer. Does not perform objective function evaluations.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rnd</entry><entry>
<para>Random number generator. </para>
</entry>
                            </row>
                            <row>
<entry>InitParams</entry><entry>
<para>If not NULL, initial parameter vector, also used as centroid for initial population vectors. </para>
</entry>
                            </row>
                            <row>
<entry>InitRadius</entry><entry>
<para>Initial radius, multiplier relative to the default sigma value. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00144">144</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a24a8733fc9dbb2c7e314b699fc360d7b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a2f56a9d5d682c92e2da1234ed68d54ed"/><section>
    <title>optimize()</title>
<indexterm><primary>optimize</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>optimize</secondary></indexterm>
<para><computeroutput>int CBiteOpt::optimize (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, <link linkend="_class_c_bite_opt">CBiteOpt</link> *const PushOpt = <computeroutput>NULL</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function performs the parameter optimization iteration that involves 1 objective function evaluation.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rnd</entry><entry>
<para>Random number generator. </para>
</entry>
                            </row>
                            <row>
<entry>PushOpt</entry><entry>
<para>Optimizer where the recently obtained solution should be &quot;pushed&quot;, used for deep optimization algorithm. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The number of non-improving iterations so far. A high value means optimizer has reached an optimization plateau. The suggested threshold value is ParamCount * 128. When this value was reached, the probability of plateau is high. This value, however, should not be solely relied upon when considering a stopping criteria: a hard iteration limit should be always used as in some cases convergence time may be very high with small, but frequent improving steps. This value is best used to allocate iteration budget between optimization attempts more efficiently. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00221">221</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a2f56a9d5d682c92e2da1234ed68d54ed_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1ab98060db69130d7610818bddda8c7115"/><section>
    <title>selectAltPop()</title>
<indexterm><primary>selectAltPop</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>selectAltPop</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_pop">CBitePop</link> &amp; CBiteOpt::selectAltPop (const int gi, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function selects an alternative, parallel optimizer&apos;s, population, to use in some solution generators.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>gi</entry><entry>
<para>Solution generator index (0-3). </para>
</entry>
                            </row>
                            <row>
<entry>rnd</entry><entry>
<para>PRNG object. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00549">549</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_ab98060db69130d7610818bddda8c7115_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_ab98060db69130d7610818bddda8c7115_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a344271b2490d03eaa0c8e1ab062d916d"/><section>
    <title>selectParPop()</title>
<indexterm><primary>selectParPop</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>selectParPop</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_pop">CBitePop</link> &amp; CBiteOpt::selectParPop (const int gi, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function selects a parallel population to use for solution generation. With certain probability, *this object&apos;s own population will be returned instead of parallel population.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>gi</entry><entry>
<para>Solution generator index (0-3). </para>
</entry>
                            </row>
                            <row>
<entry>rnd</entry><entry>
<para>PRNG object. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00531">531</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a344271b2490d03eaa0c8e1ab062d916d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a344271b2490d03eaa0c8e1ab062d916d_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a73dc570985bec54dc288690c31a8d8c7"/><section>
    <title>updateDims()</title>
<indexterm><primary>updateDims</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>updateDims</secondary></indexterm>
<para><computeroutput>void CBiteOpt::updateDims (const int aParamCount, const int PopSize0 = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function updates dimensionality of *this object. Function does nothing if dimensionality has not changed since the last call. This function should be called at least once before calling the <link linkend="_class_c_bite_opt_1a24a8733fc9dbb2c7e314b699fc360d7b">init()</link> function.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aParamCount</entry><entry>
<para>The number of parameters being optimized. </para>
</entry>
                            </row>
                            <row>
<entry>PopSize0</entry><entry>
<para>The number of elements in population to use. If set to 0 or negative, the default formula will be used. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00110">110</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a73dc570985bec54dc288690c31a8d8c7_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a168cd86a91750b0548698f046e4b6d83"/><section>
    <title>updateParPop()</title>
<indexterm><primary>updateParPop</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>updateParPop</secondary></indexterm>
<para><computeroutput>void CBiteOpt::updateParPop (const double UpdCost, const <link linkend="_class_c_bite_opt_1a80651b5ffb10feccb67729f4c472a5dd">ptype</link> *const UpdParams)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function updates an appropriate parallel population.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>UpdCost</entry><entry>
<para>Cost of the new solution. </para>
</entry>
                            </row>
                            <row>
<entry>UpdParams</entry><entry>
<para>New parameter values. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00512">512</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a168cd86a91750b0548698f046e4b6d83_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_a168cd86a91750b0548698f046e4b6d83_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_c_bite_opt_1a7c38e45fe68be8f7f9e6cbb4f1ec7e50"/><section>
    <title>AltPopPSel</title>
<indexterm><primary>AltPopPSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>AltPopPSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::AltPopPSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Alternative population use selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00437">437</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1abdbe1b2dca3680429d01e33ad78e0588"/><section>
    <title>AltPopSel</title>
<indexterm><primary>AltPopSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>AltPopSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::AltPopSel[4]<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>selectors. </para>
</para>

<para>Alternative population type use </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00438">438</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1ae7df30b17e5821498b7284e182425cdf"/><section>
    <title>DoEval</title>
<indexterm><primary>DoEval</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>DoEval</secondary></indexterm>
<para><computeroutput>bool CBiteOpt::DoEval<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Temporary variable which equals to &quot;true&quot; if the newly-generated solution should be evaluated via the <link linkend="_class_c_bite_opt_interface_1a45d7e2c9ea31b6f8bb23758a6879df9d">optcost()</link> function. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00465">465</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1af14783d4853d9e7e207f00788583a42e"/><section>
    <title>DoInitEvals</title>
<indexterm><primary>DoInitEvals</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>DoInitEvals</secondary></indexterm>
<para><computeroutput>bool CBiteOpt::DoInitEvals<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>&quot;True&quot; if initial evaluations should be performed. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00464">464</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1aabfab1d71a0563959f94970b250c5df9"/><section>
    <title>Gen1AllpSel</title>
<indexterm><primary>Gen1AllpSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen1AllpSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::Gen1AllpSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 1&apos;s Allp selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00444">444</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a4cb14ff23736a5a74987504f94f1bf4b"/><section>
    <title>Gen1MoveAsyncSel</title>
<indexterm><primary>Gen1MoveAsyncSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen1MoveAsyncSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::Gen1MoveAsyncSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>selector. </para>
</para>

<para>Generator method 1&apos;s Move async </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00445">445</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a88b8c7fcc43de72d390950fbfdc86cad"/><section>
    <title>Gen1MoveSpanSel</title>
<indexterm><primary>Gen1MoveSpanSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen1MoveSpanSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::Gen1MoveSpanSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>selector. </para>
</para>

<para>Generator method 1&apos;s Move span </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00447">447</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a8d6a5b4fd019d8aa73529c1fda6e91d5"/><section>
    <title>Gen2bModeSel</title>
<indexterm><primary>Gen2bModeSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen2bModeSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::Gen2bModeSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 2b&apos;s Mode selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00450">450</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a96dbb17248d735d60d10b6ef4be3b7c5"/><section>
    <title>Gen2cModeSel</title>
<indexterm><primary>Gen2cModeSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen2cModeSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::Gen2cModeSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 2c&apos;s Mode selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00451">451</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a1db3ecb43fe42f89db5b8dc1644baad6"/><section>
    <title>Gen2dModeSel</title>
<indexterm><primary>Gen2dModeSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen2dModeSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::Gen2dModeSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 2d&apos;s Mode selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00452">452</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1aa05a9c04ac6d2a2ec6b679abd789df64"/><section>
    <title>Gen2ModeSel</title>
<indexterm><primary>Gen2ModeSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen2ModeSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::Gen2ModeSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 2&apos;s Mode selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00449">449</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1abe8a0cedf383e8d0b272e779c2c8c6a4"/><section>
    <title>Gen3ModeSel</title>
<indexterm><primary>Gen3ModeSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen3ModeSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::Gen3ModeSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 3&apos;s Mode selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00453">453</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1adf6acc728abfdec9b464d4a3c37b6a82"/><section>
    <title>Gen4MixFacSel</title>
<indexterm><primary>Gen4MixFacSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen4MixFacSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::Gen4MixFacSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>selector. </para>
</para>

<para>Generator method 4&apos;s mixing count </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00454">454</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1af0f831fa6f9105ecab62be7bbb2c79b8"/><section>
    <title>Gen5bModeSel</title>
<indexterm><primary>Gen5bModeSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen5bModeSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::Gen5bModeSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 5b&apos;s Mode selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00456">456</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1aad5bacfdff08b09d2834231c17bab4a2"/><section>
    <title>Gen7PowFacSel</title>
<indexterm><primary>Gen7PowFacSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen7PowFacSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::Gen7PowFacSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 7&apos;s Power selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00457">457</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a44981d73146ac3b77f4c7283af776473"/><section>
    <title>Gen8ModeSel</title>
<indexterm><primary>Gen8ModeSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen8ModeSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::Gen8ModeSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 8&apos;s mode selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00458">458</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1af4e31b724cbc2a4e859ebd205e5cfd25"/><section>
    <title>Gen8NumSel</title>
<indexterm><primary>Gen8NumSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen8NumSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::Gen8NumSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Generator method 8&apos;s NumSols selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00459">459</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1ada28884009d78c2651d1b68dd3f6e1ba"/><section>
    <title>Gen8SpanSel</title>
<indexterm><primary>Gen8SpanSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>Gen8SpanSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::Gen8SpanSel[2]<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>selectors. </para>
</para>

<para>Generator method 8&apos;s random span </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00460">460</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a3af3717f98de343325970c75aca0845c"/><section>
    <title>M1ASel</title>
<indexterm><primary>M1ASel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>M1ASel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 3 &gt; CBiteOpt::M1ASel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Method 1&apos;s sub-sub-method A selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00425">425</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a7e0f0eb4591c8c8f0a0147324e91e9e1"/><section>
    <title>M1BSel</title>
<indexterm><primary>M1BSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>M1BSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::M1BSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Method 1&apos;s sub-sub-method B selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00426">426</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a19ae8f821f9f26a9c0e01870bad6c42a"/><section>
    <title>M1CSel</title>
<indexterm><primary>M1CSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>M1CSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::M1CSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Method 1&apos;s sub-sub-method C selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00427">427</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a03f51391b90a59f023178008e3d27746"/><section>
    <title>M1Sel</title>
<indexterm><primary>M1Sel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>M1Sel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::M1Sel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Method 1&apos;s sub-method selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00424">424</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a7f28d33448459a4a860f6df420333afc"/><section>
    <title>M2BSel</title>
<indexterm><primary>M2BSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>M2BSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::M2BSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Method 2&apos;s sub-sub-method B selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00429">429</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a7d27a27405a83e13d6674d22e22c4f4f"/><section>
    <title>M2Sel</title>
<indexterm><primary>M2Sel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>M2Sel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::M2Sel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Method 2&apos;s sub-method selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00428">428</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a91a52c9eab07a265fce92f0ba0ec0d03"/><section>
    <title>MethodSel</title>
<indexterm><primary>MethodSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>MethodSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::MethodSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Population generator 4-method selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00423">423</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a26719d83668ff3b3cce919878c358967"/><section>
    <title>MinSolMulSel</title>
<indexterm><primary>MinSolMulSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>MinSolMulSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::MinSolMulSel[4]<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>least-cost population index selection. </para>
</para>

<para>Multiplier selectors, for </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00442">442</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a1f08554f3c3fffb89fafd91104d6ac5d"/><section>
    <title>MinSolPwrSel</title>
<indexterm><primary>MinSolPwrSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>MinSolPwrSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; CBiteOpt::MinSolPwrSel[4]<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>least-cost population index selection. </para>
</para>

<para>Power factor selectors, for </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00440">440</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a764c6c8faa178116999c26b3866f8189"/><section>
    <title>NewCost</title>
<indexterm><primary>NewCost</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>NewCost</secondary></indexterm>
<para><computeroutput>double CBiteOpt::NewCost<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>value (cost). </para>
</para>

<para>Temporary variable that receives objective function&apos;s </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00468">468</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a7c347ab2966fe6e79a9022fb136d25fc"/><section>
    <title>OldPop</title>
<indexterm><primary>OldPop</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>OldPop</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_pop">CBitePop</link> CBiteOpt::OldPop<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>probabilistically. </para>
</para>

<para>Population of older solutions, updated </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00462">462</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1aa2ca8983a05dc599ff5a5f47d3af16b4"/><section>
    <title>ParOpt</title>
<indexterm><primary>ParOpt</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>ParOpt</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_opt_1_1_c_par_opt">CParOpt</link>&lt; <link linkend="_class_c_spher_opt">CSpherOpt</link> &gt; CBiteOpt::ParOpt<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Parallel optimizer. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00497">497</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a2ddf8b2ba7691dc249b50baab668a5c8"/><section>
    <title>ParOpt2</title>
<indexterm><primary>ParOpt2</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>ParOpt2</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_opt_1_1_c_par_opt">CParOpt</link>&lt; <link linkend="_class_c_n_m_seq_opt">CNMSeqOpt</link> &gt; CBiteOpt::ParOpt2<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Parallel optimizer2. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00500">500</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1afb37a6bb1eacba21280536ee17511830"/><section>
    <title>ParOpt2Pop</title>
<indexterm><primary>ParOpt2Pop</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>ParOpt2Pop</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_pop">CBitePop</link> CBiteOpt::ParOpt2Pop<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Includes only its solutions. </para>
</para>

<para>Population of parallel optimizer 2&apos;s solutions. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00501">501</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a1926decbab37c16bdf14787724e875d6"/><section>
    <title>ParOpt2Sel</title>
<indexterm><primary>ParOpt2Sel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>ParOpt2Sel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::ParOpt2Sel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Parallel optimizer 2 use selector. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00434">434</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a93a88d27436aa1660edea574fea346ef"/><section>
    <title>ParOptPop</title>
<indexterm><primary>ParOptPop</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>ParOptPop</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_pop">CBitePop</link> CBiteOpt::ParOptPop<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Includes only its solutions. </para>
</para>

<para>Population of parallel optimizer&apos;s solutions. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00498">498</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1a47f66536806d836d1ec0ee5926995c0d"/><section>
    <title>ParPopPSel</title>
<indexterm><primary>ParPopPSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>ParPopPSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::ParPopPSel[4]<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>probability selectors. </para>
</para>

<para>Parallel population use </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00435">435</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1acd43fdffae9a65684c1436aaee087fd1"/><section>
    <title>PopChangeDecrSel</title>
<indexterm><primary>PopChangeDecrSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>PopChangeDecrSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::PopChangeDecrSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>selector. </para>
</para>

<para>Population size change decrease </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00432">432</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1acac20a0af0c58f4aa58fb20bf4be11d5"/><section>
    <title>PopChangeIncrSel</title>
<indexterm><primary>PopChangeIncrSel</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>PopChangeIncrSel</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; CBiteOpt::PopChangeIncrSel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>selector. </para>
</para>

<para>Population size change increase </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00430">430</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_1ab3a911c7924b1a55c9a38365ea1e60ef"/><section>
    <title>UseParOpt</title>
<indexterm><primary>UseParOpt</primary><secondary>CBiteOpt</secondary></indexterm>
<indexterm><primary>CBiteOpt</primary><secondary>UseParOpt</secondary></indexterm>
<para><computeroutput>int CBiteOpt::UseParOpt<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Parallel optimizer currently being in use. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l00503">503</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
_fcmaescpp/include/<link linkend="_biteopt_8h">biteopt.h</link></section>
</section>
