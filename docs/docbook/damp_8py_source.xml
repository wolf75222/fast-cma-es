<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_damp_8py_source" xml:lang="en-US">
<title>damp.py</title>
<indexterm><primary>examples/damp.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_damp_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1damp">00001</link> <emphasis role="comment">#&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_damp_8py_source_1l00002"/>00002 <emphasis role="comment">#</emphasis>
<anchor xml:id="_damp_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_damp_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_damp_8py_source_1l00005"/>00005 
<anchor xml:id="_damp_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;See&#32;&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Damp.adoc&#32;</emphasis>
<anchor xml:id="_damp_8py_source_1l00007"/>00007 
<anchor xml:id="_damp_8py_source_1l00008"/>00008 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_damp_8py_source_1l00009"/>00009 
<anchor xml:id="_damp_8py_source_1l00010"/>00010 <emphasis role="keyword">import</emphasis>&#32;time,&#32;sys,&#32;warnings,&#32;math
<anchor xml:id="_damp_8py_source_1l00011"/>00011 
<anchor xml:id="_damp_8py_source_1l00012"/>00012 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;retry
<anchor xml:id="_damp_8py_source_1l00013"/>00013 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;De_cpp,&#32;wrapper
<anchor xml:id="_damp_8py_source_1l00014"/>00014 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;diversifier,&#32;mapelites
<anchor xml:id="_damp_8py_source_1l00015"/>00015 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_damp_8py_source_1l00016"/>00016 <emphasis role="keyword">from</emphasis>&#32;scipy.integrate&#32;<emphasis role="keyword">import</emphasis>&#32;ode
<anchor xml:id="_damp_8py_source_1l00017"/>00017 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds
<anchor xml:id="_damp_8py_source_1l00018"/>00018 
<anchor xml:id="_damp_8py_source_1l00019"/>00019 <emphasis role="keyword">import</emphasis>&#32;ctypes&#32;<emphasis role="keyword">as</emphasis>&#32;ct
<anchor xml:id="_damp_8py_source_1l00020"/>00020 <emphasis role="keyword">import</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">as</emphasis>&#32;mp&#32;
<anchor xml:id="_damp_8py_source_1l00021"/>00021 
<anchor xml:id="_damp_8py_source_1l00022"/>00022 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_damp_8py_source_1l00023"/>00023 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_damp_8py_source_1l00024"/>00024 
<anchor xml:id="_damp_8py_source_1l00025"/>00025 logger.remove()
<anchor xml:id="_damp_8py_source_1l00026"/><link linkend="_namespaceexamples_1_1damp_1ad9f3f1d785cc34c870cc15ee5622c308">00026</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_damp_8py_source_1l00027"/>00027 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_damp_8py_source_1l00028"/>00028 
<anchor xml:id="_damp_8py_source_1l00029"/>00029 <emphasis role="comment">#&#32;Numpy&#32;based&#32;integration</emphasis>
<anchor xml:id="_damp_8py_source_1l00030"/><link linkend="_namespaceexamples_1_1damp_1a120d80f0e9c27f43e15cf2b0f733842f">00030</link> <emphasis role="keyword">def&#32;</emphasis>spring(t,&#32;y):
<anchor xml:id="_damp_8py_source_1l00031"/>00031 &#32;&#32;&#32;&#32;x1,&#32;x2,&#32;alpha&#32;=&#32;y&#32;
<anchor xml:id="_damp_8py_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[x2,&#32;-x1&#32;+&#32;alpha,&#32;0]
<anchor xml:id="_damp_8py_source_1l00033"/>00033 
<anchor xml:id="_damp_8py_source_1l00034"/><link linkend="_namespaceexamples_1_1damp_1aee7af86328f6a9a28f0ce52ff807f5e3">00034</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1damp_1aee7af86328f6a9a28f0ce52ff807f5e3">integrator</link>():
<anchor xml:id="_damp_8py_source_1l00035"/>00035 &#32;&#32;&#32;&#32;I&#32;=&#32;ode(spring)
<anchor xml:id="_damp_8py_source_1l00036"/>00036 &#32;&#32;&#32;&#32;I.set_integrator(<emphasis role="stringliteral">&quot;dopri5&quot;</emphasis>,&#32;nsteps=1000,&#32;rtol=1e-6,&#32;atol=1e-6)
<anchor xml:id="_damp_8py_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;I
<anchor xml:id="_damp_8py_source_1l00038"/>00038 
<anchor xml:id="_damp_8py_source_1l00039"/><link linkend="_namespaceexamples_1_1damp_1abdb44c5b9f3ef91f23f856138800f22e">00039</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1damp_1abdb44c5b9f3ef91f23f856138800f22e">integrate</link>(I,&#32;t):
<anchor xml:id="_damp_8py_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;warnings.catch_warnings():
<anchor xml:id="_damp_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;warnings.simplefilter(<emphasis role="stringliteral">&quot;ignore&quot;</emphasis>)
<anchor xml:id="_damp_8py_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;I.integrate(t)
<anchor xml:id="_damp_8py_source_1l00043"/>00043 
<anchor xml:id="_damp_8py_source_1l00044"/>00044 <emphasis role="comment">#&#32;C-based&#32;integration&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_damp_8py_source_1l00045"/><link linkend="_namespaceexamples_1_1damp_1ae2820d97b3059c42c2e26899fada5bae">00045</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1damp_1ae2820d97b3059c42c2e26899fada5bae">integrate_C</link>(y,&#32;dt,&#32;alpha,&#32;step):
<anchor xml:id="_damp_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_damp_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type&#32;=&#32;ct.c_double&#32;*&#32;y.size&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ry&#32;=&#32;<link linkend="_namespaceexamples_1_1damp_1a20808bf28b9c96938a20ffc20c60a2ad">integrateDamp_C</link>(array_type(*y),&#32;alpha,&#32;dt,&#32;step)
<anchor xml:id="_damp_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;np.array(np.fromiter(ry,&#32;dtype=np.float64,&#32;count=y.size))
<anchor xml:id="_damp_8py_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1damp_1afb4a0fde354ff82618033ed7c3d845b8">freemem</link>(ry)
<anchor xml:id="_damp_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y
<anchor xml:id="_damp_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;e:
<anchor xml:id="_damp_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="comment">#&#32;fail</emphasis>
<anchor xml:id="_damp_8py_source_1l00054"/>00054 
<anchor xml:id="_damp_8py_source_1l00055"/><link linkend="_namespaceexamples_1_1damp_1a172062e32b094696498aa4407e0d1164">00055</link> max_alpha&#32;=&#32;0.1&#32;
<anchor xml:id="_damp_8py_source_1l00056"/><link linkend="_namespaceexamples_1_1damp_1af0f3e235c844a34ba40537940b74051a">00056</link> max_time&#32;=&#32;40
<anchor xml:id="_damp_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00058"/><link linkend="_classexamples_1_1damp_1_1fitness">00058</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1damp_1_1fitness">fitness</link>(object):
<anchor xml:id="_damp_8py_source_1l00059"/>00059 
<anchor xml:id="_damp_8py_source_1l00060"/><link linkend="_classexamples_1_1damp_1_1fitness_1a7bdfce437aa4db20680c43739eb43be5">00060</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1damp_1_1fitness_1a7bdfce437aa4db20680c43739eb43be5">__init__</link>(self,&#32;dim):
<anchor xml:id="_damp_8py_source_1l00061"/><link linkend="_classexamples_1_1damp_1_1fitness_1a9442ab7a67e53c7af403ae3380d126e2">00061</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1damp_1_1fitness_1a9442ab7a67e53c7af403ae3380d126e2">dim</link>&#32;=&#32;dim&#32;
<anchor xml:id="_damp_8py_source_1l00062"/><link linkend="_classexamples_1_1damp_1_1fitness_1a83ffb937421ee9b1f73bbd1cb8421dfd">00062</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1damp_1_1fitness_1a83ffb937421ee9b1f73bbd1cb8421dfd">best_y</link>&#32;=&#32;mp.RawValue(ct.c_double,&#32;np.inf)&#32;
<anchor xml:id="_damp_8py_source_1l00063"/><link linkend="_classexamples_1_1damp_1_1fitness_1a221a43fe417289340272db9250b90f92">00063</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1damp_1_1fitness_1a221a43fe417289340272db9250b90f92">bounds</link>&#32;=&#32;Bounds([0]*dim,&#32;[1]*dim)
<anchor xml:id="_damp_8py_source_1l00064"/><link linkend="_classexamples_1_1damp_1_1fitness_1a0c02985bc005febd02d0d0501c35db07">00064</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1damp_1_1fitness_1a0c02985bc005febd02d0d0501c35db07">qd_dim</link>&#32;=&#32;2
<anchor xml:id="_damp_8py_source_1l00065"/><link linkend="_classexamples_1_1damp_1_1fitness_1aef5f8c2aac81732fac5237797ab0e3bb">00065</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1damp_1_1fitness_1aef5f8c2aac81732fac5237797ab0e3bb">qd_bounds</link>&#32;=&#32;Bounds([10,&#32;0.5],&#32;[40,&#32;1.5])
<anchor xml:id="_damp_8py_source_1l00066"/>00066 
<anchor xml:id="_damp_8py_source_1l00067"/><link linkend="_classexamples_1_1damp_1_1fitness_1a182cdb7a5c25015336faa57a9afebef6">00067</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1damp_1_1fitness_1a182cdb7a5c25015336faa57a9afebef6">__call__</link>(self,&#32;X):
<anchor xml:id="_damp_8py_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;int(self.<link linkend="_classexamples_1_1damp_1_1fitness_1a9442ab7a67e53c7af403ae3380d126e2">dim</link>/2)
<anchor xml:id="_damp_8py_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dt&#32;=&#32;2*max_time/n
<anchor xml:id="_damp_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dts&#32;=&#32;X[:n]*dt&#32;
<anchor xml:id="_damp_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alphas&#32;=&#32;X[n:]*2*max_alpha&#32;-&#32;max_alpha&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;np.array([1,0])
<anchor xml:id="_damp_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(n):
<anchor xml:id="_damp_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;<link linkend="_namespaceexamples_1_1damp_1ae2820d97b3059c42c2e26899fada5bae">integrate_C</link>(y,&#32;dts[i],&#32;alphas[i],&#32;0.1)
<anchor xml:id="_damp_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;abs(y[0])+abs(y[1])&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00076"/>00076 
<anchor xml:id="_damp_8py_source_1l00077"/><link linkend="_classexamples_1_1damp_1_1fitness_1af629821589f78858c6422998bcb02fe5">00077</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1damp_1_1fitness_1af629821589f78858c6422998bcb02fe5">qd_fit</link>(self,&#32;x):&#32;
<anchor xml:id="_damp_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;self(x)
<anchor xml:id="_damp_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;int(self.<link linkend="_classexamples_1_1damp_1_1fitness_1a9442ab7a67e53c7af403ae3380d126e2">dim</link>/2)
<anchor xml:id="_damp_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dt&#32;=&#32;2*max_time/n
<anchor xml:id="_damp_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dts&#32;=&#32;x[:n]*dt&#32;
<anchor xml:id="_damp_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alphas&#32;=&#32;x[n:]*2*max_alpha&#32;-&#32;max_alpha
<anchor xml:id="_damp_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dtsum&#32;=&#32;np.sum(dts)
<anchor xml:id="_damp_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;energy&#32;=&#32;np.sum(np.multiply(dts,&#32;abs(alphas)))
<anchor xml:id="_damp_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b&#32;=&#32;np.array([dtsum,&#32;energy])
<anchor xml:id="_damp_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;y&#32;&lt;&#32;self.<link linkend="_classexamples_1_1damp_1_1fitness_1a83ffb937421ee9b1f73bbd1cb8421dfd">best_y</link>.value:
<anchor xml:id="_damp_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1damp_1_1fitness_1a83ffb937421ee9b1f73bbd1cb8421dfd">best_y</link>.value&#32;=&#32;y
<anchor xml:id="_damp_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(f<emphasis role="stringliteral">&apos;{y:.3f}&#32;{&#32;list(b)&#32;}&apos;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y,&#32;b&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00090"/>00090 
<anchor xml:id="_damp_8py_source_1l00091"/><link linkend="_namespaceexamples_1_1damp_1ac57ba480422b498635e1a96503b7d82e">00091</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1damp_1ac57ba480422b498635e1a96503b7d82e">parallel_retry</link>(dim,&#32;opt&#32;=&#32;De_cpp(20000)):
<anchor xml:id="_damp_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;fit&#32;=&#32;<link linkend="_classexamples_1_1damp_1_1fitness">fitness</link>(dim)
<anchor xml:id="_damp_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retry.minimize(<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">wrapper</link>(fit),&#32;fit.bounds,&#32;optimizer=opt,&#32;num_retries=32)
<anchor xml:id="_damp_8py_source_1l00094"/>00094 
<anchor xml:id="_damp_8py_source_1l00095"/><link linkend="_namespaceexamples_1_1damp_1a2850a13c811fbfdfe69e7950e68377ac">00095</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1damp_1a2850a13c811fbfdfe69e7950e68377ac">plot3d</link>(ys,&#32;name,&#32;xlabel=&apos;&apos;,&#32;ylabel=&apos;&apos;,&#32;zlabel=&apos;&apos;):
<anchor xml:id="_damp_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keyword">import</emphasis>&#32;matplotlib.pyplot&#32;<emphasis role="keyword">as</emphasis>&#32;plt
<anchor xml:id="_damp_8py_source_1l00097"/>00097 &#32;&#32;&#32;&#32;x&#32;=&#32;ys[:,&#32;0];&#32;y&#32;=&#32;ys[:,&#32;1];&#32;z&#32;=&#32;ys[:,&#32;2]
<anchor xml:id="_damp_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;fig&#32;=&#32;plt.figure()
<anchor xml:id="_damp_8py_source_1l00099"/>00099 &#32;&#32;&#32;&#32;ax&#32;=&#32;fig.add_subplot()&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;img&#32;=&#32;ax.scatter(x,&#32;y,&#32;s=4,&#32;c=z,&#32;cmap=<emphasis role="stringliteral">&apos;rainbow&apos;</emphasis>)
<anchor xml:id="_damp_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;cbar&#32;=&#32;fig.colorbar(img)
<anchor xml:id="_damp_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;plt.xlabel(xlabel)&#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00103"/>00103 &#32;&#32;&#32;&#32;plt.ylabel(ylabel)
<anchor xml:id="_damp_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;cbar.set_label(zlabel)
<anchor xml:id="_damp_8py_source_1l00105"/>00105 &#32;&#32;&#32;&#32;fig.set_figheight(8)
<anchor xml:id="_damp_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;fig.set_figwidth(8)
<anchor xml:id="_damp_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;fig.savefig(name,&#32;dpi=300)
<anchor xml:id="_damp_8py_source_1l00108"/>00108 
<anchor xml:id="_damp_8py_source_1l00109"/><link linkend="_namespaceexamples_1_1damp_1a56eb880b40f4b83f6f114f81b6427c0e">00109</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1damp_1a56eb880b40f4b83f6f114f81b6427c0e">plot_archive</link>(problem,&#32;archive&#32;=&#32;None):
<anchor xml:id="_damp_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;name&#32;=&#32;<emphasis role="stringliteral">&apos;damp_nd&apos;</emphasis>
<anchor xml:id="_damp_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;archive&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_damp_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;archive&#32;=&#32;mapelites.load_archive(name,&#32;problem.bounds,&#32;problem.qd_bounds)
<anchor xml:id="_damp_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;si&#32;=&#32;archive.argsort()
<anchor xml:id="_damp_8py_source_1l00114"/>00114 &#32;&#32;&#32;&#32;ysp&#32;=&#32;[]
<anchor xml:id="_damp_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;beh&#32;=&#32;archive.get_ds()[si]
<anchor xml:id="_damp_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;ys&#32;=&#32;archive.get_ys()[si]
<anchor xml:id="_damp_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;lb&#32;=&#32;problem.qd_bounds.lb
<anchor xml:id="_damp_8py_source_1l00118"/>00118 &#32;&#32;&#32;&#32;ub&#32;=&#32;problem.qd_bounds.ub
<anchor xml:id="_damp_8py_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="comment">#xs&#32;=&#32;archive.get_xs()[si]</emphasis>
<anchor xml:id="_damp_8py_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(si)):
<anchor xml:id="_damp_8py_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ys[i]&#32;&lt;&#32;1.0:&#32;<emphasis role="comment">#&#32;throw&#32;out&#32;invalid</emphasis>
<anchor xml:id="_damp_8py_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b&#32;=&#32;beh[i]
<anchor xml:id="_damp_8py_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;np.any(np.greater(b,&#32;ub))&#32;<emphasis role="keywordflow">or</emphasis>&#32;np.any(np.greater(lb,&#32;b)):
<anchor xml:id="_damp_8py_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>
<anchor xml:id="_damp_8py_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ysp.append([b[0],&#32;b[1],&#32;ys[i]])
<anchor xml:id="_damp_8py_source_1l00126"/>00126 &#32;&#32;&#32;&#32;ysp&#32;=&#32;np.array(ysp)
<anchor xml:id="_damp_8py_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1damp_1a2850a13c811fbfdfe69e7950e68377ac">plot3d</link>(ysp,&#32;name,&#32;<emphasis role="stringliteral">&apos;time&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;energy&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;amplitude&apos;</emphasis>)
<anchor xml:id="_damp_8py_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00129"/><link linkend="_namespaceexamples_1_1damp_1a7c1340c7c027e4ca57ce802c60670acc">00129</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1damp_1a7c1340c7c027e4ca57ce802c60670acc">optimize_qd</link>(dim):
<anchor xml:id="_damp_8py_source_1l00130"/>00130 &#32;&#32;&#32;&#32;problem&#32;=&#32;<link linkend="_classexamples_1_1damp_1_1fitness">fitness</link>(dim)
<anchor xml:id="_damp_8py_source_1l00131"/>00131 &#32;&#32;&#32;&#32;name&#32;=&#32;<emphasis role="stringliteral">&apos;damp_nd&apos;</emphasis>
<anchor xml:id="_damp_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;opt_params0&#32;=&#32;{<emphasis role="stringliteral">&apos;solver&apos;</emphasis>:<emphasis role="stringliteral">&apos;elites&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;popsize&apos;</emphasis>:512}
<anchor xml:id="_damp_8py_source_1l00133"/>00133 &#32;&#32;&#32;&#32;<emphasis role="comment">#opt_params1&#32;=&#32;{&apos;solver&apos;:&apos;CRMFNES_CPP&apos;,&#32;&apos;max_evals&apos;:4000,&#32;&apos;popsize&apos;:32,&#32;&apos;stall_criterion&apos;:3}</emphasis>
<anchor xml:id="_damp_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="comment">#opt_params1&#32;=&#32;{&apos;solver&apos;:&apos;DE_CPP&apos;,&#32;&apos;max_evals&apos;:6000,&#32;&apos;popsize&apos;:32,&#32;&apos;stall_criterion&apos;:3}</emphasis>
<anchor xml:id="_damp_8py_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="comment">#opt_params1&#32;=&#32;{&apos;solver&apos;:&apos;CMA_CPP&apos;,&#32;&apos;max_evals&apos;:6000,&#32;&apos;pnp.zeros(10)opsize&apos;:32,&#32;&apos;stall_criterion&apos;:3}</emphasis>
<anchor xml:id="_damp_8py_source_1l00136"/>00136 &#32;&#32;&#32;&#32;archive&#32;=&#32;diversifier.minimize(
<anchor xml:id="_damp_8py_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfcmaes_1_1mapelites_1_1wrapper">mapelites.wrapper</link>(problem.qd_fit,&#32;problem.qd_dim,&#32;interval=200000,&#32;save_interval=12000000),&#32;
<anchor xml:id="_damp_8py_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;problem.bounds,&#32;problem.qd_bounds,&#32;opt_params=[opt_params0],&#32;max_evals=30000000)&#32;
<anchor xml:id="_damp_8py_source_1l00139"/>00139 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&apos;final&#32;archive:&apos;</emphasis>,&#32;archive.info())
<anchor xml:id="_damp_8py_source_1l00140"/>00140 &#32;&#32;&#32;&#32;archive.save(name)
<anchor xml:id="_damp_8py_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1damp_1a56eb880b40f4b83f6f114f81b6427c0e">plot_archive</link>(problem,&#32;archive)
<anchor xml:id="_damp_8py_source_1l00142"/>00142 
<anchor xml:id="_damp_8py_source_1l00143"/>00143 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1cmaescpp">fcmaes.cmaescpp</link>&#32;<emphasis role="keyword">import</emphasis>&#32;libcmalib
<anchor xml:id="_damp_8py_source_1l00144"/><link linkend="_namespaceexamples_1_1damp_1a20808bf28b9c96938a20ffc20c60a2ad">00144</link> integrateDamp_C&#32;=&#32;libcmalib.integrateDamp_C
<anchor xml:id="_damp_8py_source_1l00145"/><link linkend="_namespaceexamples_1_1damp_1a5743df027c1a41a275daff76a57ace27">00145</link> integrateDamp_C.argtypes&#32;=&#32;[ct.POINTER(ct.c_double),&#32;ct.c_double,&#32;ct.c_double,&#32;ct.c_double]
<anchor xml:id="_damp_8py_source_1l00146"/><link linkend="_namespaceexamples_1_1damp_1a39244848ee7e782c96a1c058b81970c6">00146</link> integrateDamp_C.restype&#32;=&#32;ct.POINTER(ct.c_double)&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00147"/><link linkend="_namespaceexamples_1_1damp_1afb4a0fde354ff82618033ed7c3d845b8">00147</link> freemem&#32;=&#32;libcmalib.free_mem
<anchor xml:id="_damp_8py_source_1l00148"/>00148 freemem.argtypes&#32;=&#32;[ct.POINTER(ct.c_double)]
<anchor xml:id="_damp_8py_source_1l00149"/>00149 &#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00150"/>00150 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:&#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00151"/><link linkend="_namespaceexamples_1_1damp_1a9431849b162e37e8131f56bdd7bc66a0">00151</link> &#32;&#32;&#32;&#32;dim&#32;=&#32;12
<anchor xml:id="_damp_8py_source_1l00152"/>00152 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;apply&#32;a&#32;QD&#32;algorithm</emphasis>
<anchor xml:id="_damp_8py_source_1l00153"/>00153 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1damp_1a7c1340c7c027e4ca57ce802c60670acc">optimize_qd</link>(dim)
<anchor xml:id="_damp_8py_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;plot&#32;the&#32;result</emphasis>
<anchor xml:id="_damp_8py_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1damp_1a56eb880b40f4b83f6f114f81b6427c0e">plot_archive</link>(<link linkend="_classexamples_1_1damp_1_1fitness">fitness</link>(dim))
<anchor xml:id="_damp_8py_source_1l00156"/>00156 &#32;&#32;&#32;&#32;
<anchor xml:id="_damp_8py_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;lets&#32;find&#32;the&#32;best&#32;solution</emphasis>
<anchor xml:id="_damp_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;parallel_retry(dim)</emphasis>
<anchor xml:id="_damp_8py_source_1l00159"/>00159 &#32;
</programlisting></section>
