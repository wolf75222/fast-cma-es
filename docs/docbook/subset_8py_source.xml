<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_subset_8py_source" xml:lang="en-US">
<title>subset.py</title>
<indexterm><primary>examples/subset.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_subset_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1subset">00001</link> <emphasis role="stringliteral">&quot;&quot;&quot;Find&#32;the&#32;optimal&#32;subset&#32;fulfilling&#32;any&#32;property.</emphasis>
<anchor xml:id="_subset_8py_source_1l00002"/>00002 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_subset_8py_source_1l00003"/>00003 <emphasis role="stringliteral">Single&#32;objective&#32;variant&#32;of&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/examples/subset_mo.py&#32;</emphasis>
<anchor xml:id="_subset_8py_source_1l00004"/>00004 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_subset_8py_source_1l00005"/>00005 <emphasis role="stringliteral">As&#32;example&#32;we&#32;use&#32;transactions&#32;where&#32;a&#32;subset&#32;is&#32;to&#32;be&#32;matched&#32;to&#32;a&#32;list&#32;of&#32;payments.&#32;</emphasis>
<anchor xml:id="_subset_8py_source_1l00006"/>00006 <emphasis role="stringliteral">For&#32;transactions:&#32;[2,4,5,1,3]&#32;and&#32;payments:&#32;[4,&#32;4]&#32;the&#32;sum&#32;of&#32;payments&#32;is&#32;8.&#32;</emphasis>
<anchor xml:id="_subset_8py_source_1l00007"/>00007 <emphasis role="stringliteral">Subsets&#32;of&#32;transactions&#32;that&#32;minimize&#32;the&#32;difference&#32;between&#32;payments&#32;and&#32;</emphasis>
<anchor xml:id="_subset_8py_source_1l00008"/>00008 <emphasis role="stringliteral">transactions&#32;are&#32;for&#32;instance&#32;[5,3],&#32;or&#32;[4,3,1].&#32;</emphasis>
<anchor xml:id="_subset_8py_source_1l00009"/>00009 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_subset_8py_source_1l00010"/>00010 <emphasis role="stringliteral">In&#32;general&#32;we&#32;have&#32;to&#32;define&#32;a&#32;mapping&#32;&apos;selection_value&apos;&#32;which&#32;maps&#32;a&#32;</emphasis>
<anchor xml:id="_subset_8py_source_1l00011"/>00011 <emphasis role="stringliteral">specific&#32;selection/subset&#32;represented&#32;as&#32;boolean&#32;array&#32;to&#32;a&#32;value&#32;to&#32;be&#32;minimized.&#32;</emphasis>
<anchor xml:id="_subset_8py_source_1l00012"/>00012 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_subset_8py_source_1l00013"/>00013 <emphasis role="stringliteral">See&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Subset.adoc&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_subset_8py_source_1l00014"/>00014 <emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_subset_8py_source_1l00015"/>00015 
<anchor xml:id="_subset_8py_source_1l00016"/>00016 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.</emphasis>
<anchor xml:id="_subset_8py_source_1l00017"/>00017 
<anchor xml:id="_subset_8py_source_1l00018"/>00018 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_subset_8py_source_1l00019"/>00019 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds&#32;
<anchor xml:id="_subset_8py_source_1l00020"/>00020 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;retry
<anchor xml:id="_subset_8py_source_1l00021"/>00021 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;wrapper,&#32;Bite_cpp
<anchor xml:id="_subset_8py_source_1l00022"/>00022 
<anchor xml:id="_subset_8py_source_1l00023"/>00023 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_subset_8py_source_1l00024"/>00024 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_subset_8py_source_1l00025"/>00025 
<anchor xml:id="_subset_8py_source_1l00026"/>00026 logger.remove()
<anchor xml:id="_subset_8py_source_1l00027"/><link linkend="_namespaceexamples_1_1subset_1a77a7fc2ebc4d922deef408e9504f60a6">00027</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_subset_8py_source_1l00028"/>00028 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_subset_8py_source_1l00029"/>00029 
<anchor xml:id="_subset_8py_source_1l00030"/>00030 <emphasis role="comment">#&#32;replace&#32;with&#32;your&#32;mapping&#32;selection&#32;-&gt;&#32;value</emphasis>
<anchor xml:id="_subset_8py_source_1l00031"/><link linkend="_classexamples_1_1subset_1_1transaction__value">00031</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1subset_1_1transaction__value">transaction_value</link>():
<anchor xml:id="_subset_8py_source_1l00032"/>00032 &#32;&#32;&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00033"/><link linkend="_classexamples_1_1subset_1_1transaction__value_1a4bc56ebf914f8befe5083a3d6668a2b6">00033</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1subset_1_1transaction__value_1a4bc56ebf914f8befe5083a3d6668a2b6">__init__</link>(self,&#32;transactions,&#32;payments):
<anchor xml:id="_subset_8py_source_1l00034"/><link linkend="_classexamples_1_1subset_1_1transaction__value_1a3086eca902943812e3e2510f8d74341e">00034</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1subset_1_1transaction__value_1a3086eca902943812e3e2510f8d74341e">transactions</link>&#32;=&#32;transactions
<anchor xml:id="_subset_8py_source_1l00035"/><link linkend="_classexamples_1_1subset_1_1transaction__value_1a7354605592874ce9edfbbfd81f82b8bf">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1subset_1_1transaction__value_1a7354605592874ce9edfbbfd81f82b8bf">sum_payments</link>&#32;=&#32;sum(payments)
<anchor xml:id="_subset_8py_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00037"/><link linkend="_classexamples_1_1subset_1_1transaction__value_1ae7f666e74665559231d774bbcc3c4c2e">00037</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1subset_1_1transaction__value_1ae7f666e74665559231d774bbcc3c4c2e">__call__</link>(self,&#32;selection):
<anchor xml:id="_subset_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;abs(sum(self.<link linkend="_classexamples_1_1subset_1_1transaction__value_1a3086eca902943812e3e2510f8d74341e">transactions</link>[selection])&#32;-&#32;self.<link linkend="_classexamples_1_1subset_1_1transaction__value_1a7354605592874ce9edfbbfd81f82b8bf">sum_payments</link>)
<anchor xml:id="_subset_8py_source_1l00039"/>00039 &#32;&#32;&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00040"/><link linkend="_classexamples_1_1subset_1_1fitness">00040</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1subset_1_1fitness">fitness</link>():
<anchor xml:id="_subset_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00042"/><link linkend="_classexamples_1_1subset_1_1fitness_1ae81edf4a9e7c38ca6097c440e6574e84">00042</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1subset_1_1fitness_1ae81edf4a9e7c38ca6097c440e6574e84">__init__</link>(self,&#32;selection_value,&#32;dim):
<anchor xml:id="_subset_8py_source_1l00043"/><link linkend="_classexamples_1_1subset_1_1fitness_1a89b260fa32177cc4e1225469d21b54b3">00043</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1subset_1_1fitness_1a89b260fa32177cc4e1225469d21b54b3">selection_value</link>&#32;=&#32;selection_value
<anchor xml:id="_subset_8py_source_1l00044"/><link linkend="_classexamples_1_1subset_1_1fitness_1abb7b10a459f0ace0493e56922e5b87cf">00044</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1subset_1_1fitness_1abb7b10a459f0ace0493e56922e5b87cf">bounds</link>&#32;=&#32;Bounds([0]*dim,&#32;[1.99999999]*dim)&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00046"/><link linkend="_classexamples_1_1subset_1_1fitness_1afbd613f893539051a353e244d53ba64e">00046</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1subset_1_1fitness_1afbd613f893539051a353e244d53ba64e">selected</link>(self,&#32;x):
<anchor xml:id="_subset_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x.astype(int)
<anchor xml:id="_subset_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;all&#32;decision&#32;variables&#32;are&#32;in&#32;the&#32;[0,2[&#32;interval&#32;and&#32;mapped&#32;to&#32;a&#32;boolean&#32;array.&#32;</emphasis>
<anchor xml:id="_subset_8py_source_1l00050"/><link linkend="_classexamples_1_1subset_1_1fitness_1a23ae3f9deb0bf53a1a594e1f2564c14c">00050</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1subset_1_1fitness_1a23ae3f9deb0bf53a1a594e1f2564c14c">__call__</link>(self,&#32;x):
<anchor xml:id="_subset_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;self.<link linkend="_classexamples_1_1subset_1_1fitness_1a89b260fa32177cc4e1225469d21b54b3">selection_value</link>(x.astype(int).astype(bool))
<anchor xml:id="_subset_8py_source_1l00052"/>00052 
<anchor xml:id="_subset_8py_source_1l00053"/>00053 <emphasis role="comment">#&#32;Multiple&#32;optimizations&#32;are&#32;executed&#32;in&#32;parallel&#32;and&#32;all&#32;results&#32;are&#32;collected&#32;</emphasis>
<anchor xml:id="_subset_8py_source_1l00054"/><link linkend="_namespaceexamples_1_1subset_1a7bbe5727bd22adb4b3799c9609a7f02c">00054</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1subset_1a7bbe5727bd22adb4b3799c9609a7f02c">optimize</link>(fitness,&#32;opt,&#32;num_retries&#32;=&#32;32):
<anchor xml:id="_subset_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;store&#32;=&#32;<link linkend="_classfcmaes_1_1retry_1_1_store">retry.Store</link>(<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">wrapper</link>(fitness),&#32;fitness.bounds)
<anchor xml:id="_subset_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;retry.retry(store,&#32;opt.minimize,&#32;num_retries)
<anchor xml:id="_subset_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;xs&#32;=&#32;store.get_xs()
<anchor xml:id="_subset_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;ys&#32;=&#32;store.get_ys()
<anchor xml:id="_subset_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;show&#32;the&#32;best&#32;results</emphasis>
<anchor xml:id="_subset_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(xs)):
<anchor xml:id="_subset_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ys[i]&#32;&gt;&#32;0.001:&#32;<emphasis role="keywordflow">break</emphasis>
<anchor xml:id="_subset_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(i+1,&#32;<emphasis role="stringliteral">&quot;)&#32;Optimal&#32;Objective&#32;value:&#32;&quot;</emphasis>,&#32;ys[i])
<anchor xml:id="_subset_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(fitness.selected(xs[i]))
<anchor xml:id="_subset_8py_source_1l00064"/>00064 &#32;
<anchor xml:id="_subset_8py_source_1l00065"/>00065 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_subset_8py_source_1l00066"/><link linkend="_namespaceexamples_1_1subset_1ab1d139b33d16d6305c757593dedaff64">00066</link> &#32;&#32;&#32;&#32;seed&#32;=&#32;13
<anchor xml:id="_subset_8py_source_1l00067"/><link linkend="_namespaceexamples_1_1subset_1a469a03a585c93bb6faa83a9cd5d88489">00067</link> &#32;&#32;&#32;&#32;rng&#32;=&#32;np.random.default_rng(seed)&#32;&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00068"/><link linkend="_namespaceexamples_1_1subset_1a6f3071fe7ad84dc50bb98cfc1a047727">00068</link> &#32;&#32;&#32;&#32;transactions=&#32;rng.integers(100,&#32;2500,&#32;1000)&#32;/&#32;100&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00069"/><link linkend="_namespaceexamples_1_1subset_1a39f642e1a3269c4fa74c288ae81cc3bf">00069</link> &#32;&#32;&#32;&#32;payments&#32;=&#32;rng.integers(10,&#32;50,&#32;100)&#32;&#32;&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00070"/><link linkend="_namespaceexamples_1_1subset_1a5503474dac56ffe85b0a09c9f2939ac4">00070</link> &#32;&#32;&#32;&#32;selection_value&#32;=&#32;<link linkend="_classexamples_1_1subset_1_1transaction__value">transaction_value</link>(transactions,&#32;payments)&#32;&#32;&#32;&#32;
<anchor xml:id="_subset_8py_source_1l00071"/><link linkend="_namespaceexamples_1_1subset_1a4695d9c7629719d263f5b6591b1fb7e2">00071</link> &#32;&#32;&#32;&#32;fit&#32;=&#32;<link linkend="_classexamples_1_1subset_1_1fitness">fitness</link>(selection_value,&#32;len(transactions))
<anchor xml:id="_subset_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;use&#32;Bite_cpp(10000)&#32;for&#32;smaller&#32;dimension</emphasis>
<anchor xml:id="_subset_8py_source_1l00073"/><link linkend="_namespaceexamples_1_1subset_1a87a59c35e9b45d5a99ac814703ebd27c">00073</link> &#32;&#32;&#32;&#32;opt&#32;=&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(50000,&#32;popsize=500)
<anchor xml:id="_subset_8py_source_1l00074"/><link linkend="_namespaceexamples_1_1subset_1abb9b555e6ed2dbbd8bcaaed5c6743559">00074</link> &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1subset_1a7bbe5727bd22adb4b3799c9609a7f02c">optimize</link>(fit,&#32;opt,&#32;num_retries=32)
</programlisting></section>
