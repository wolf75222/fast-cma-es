<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacefcmaes_1_1pgpecpp" xml:lang="en-US">
<title>fcmaes.pgpecpp Namespace Reference</title>
<indexterm><primary>fcmaes.pgpecpp</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c">PGPE_C</link></para>

<para>Optimization class using a C++ CR-FM-NES implementation via <computeroutput>ctypes</computeroutput>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>OptimizeResult <link linkend="_namespacefcmaes_1_1pgpecpp_1ac26ca85a239168914a5e741b112af39f">minimize</link> (Callable[[ArrayLike], float] fun, Optional[Bounds] bounds=None, Optional[ArrayLike] x0=None, Optional[Union[float, ArrayLike, Callable]] input_sigma=0.1, Optional[int] popsize=32, Optional[int] max_evaluations=100000, Optional[int] workers=None, Optional[float] stop_fitness=-np.inf, Optional[Generator] rg=Generator(PCG64DXSM()), Optional[int] runid=0, Optional[bool] normalize=True, Optional[int] lr_decay_steps=1000, Optional[bool] use_ranking=True, Optional[float] center_learning_rate=0.15, Optional[float] stdev_learning_rate=0.1, Optional[float] stdev_max_change=0.2, Optional[float] b1=0.9, Optional[float] b2=0.999, Optional[float] eps=1e-8, Optional[float] decay_coef=1.0)</para>

<para>Optimize a given objective function by minimizing its value using the PGPE (Policy Gradient with Parameter-based Exploration) method. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacefcmaes_1_1pgpecpp_1af8da1cbe352bc1a796e5f15d878647f2">optimizePGPE_C</link> = libcmalib.optimizePGPE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1pgpecpp_1af356a4b052dd645eb6858407c6c30cca">argtypes</link></para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1pgpecpp_1aee73bd986018e30ab0fef7ab6f5d8b18">initPGPE_C</link> = libcmalib.initPGPE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1pgpecpp_1a5c33aa0b6c6e1fb0369e7516eacb5649">restype</link></para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1pgpecpp_1a03df7e468c547553701bf0f0dc702b4f">destroyPGPE_C</link> = libcmalib.destroyPGPE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1pgpecpp_1a89e498c3d796b4113e670e638aa85163">askPGPE_C</link> = libcmalib.askPGPE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1pgpecpp_1a83964137647622f1ea94a90106b7fc85">tellPGPE_C</link> = libcmalib.tellPGPE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1pgpecpp_1a3c39b0fa9cb8f471f226bc6916bf3a71">populationPGPE_C</link> = libcmalib.populationPGPE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1pgpecpp_1a550fd833f381cfb0e882cdccfe52ef2a">resultPGPE_C</link> = libcmalib.resultPGPE_C</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1ac26ca85a239168914a5e741b112af39f"/><section>
    <title>minimize()</title>
<indexterm><primary>minimize</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>minimize</secondary></indexterm>
<para><computeroutput> OptimizeResult fcmaes.pgpecpp.minimize (Callable[[ArrayLike], float] fun, Optional[Bounds]  bounds = <computeroutput>None</computeroutput>
, Optional[ArrayLike]  x0 = <computeroutput>None</computeroutput>
, Optional[Union[float, ArrayLike, Callable]]  input_sigma = <computeroutput>0.1</computeroutput>
, Optional[int]  popsize = <computeroutput>32</computeroutput>
, Optional[int]  max_evaluations = <computeroutput>100000</computeroutput>
, Optional[int]  workers = <computeroutput>None</computeroutput>
, Optional[float]  stop_fitness = <computeroutput>-np.inf</computeroutput>
, Optional[Generator]  rg = <computeroutput>Generator(PCG64DXSM())</computeroutput>
, Optional[int]  runid = <computeroutput>0</computeroutput>
, Optional[bool]  normalize = <computeroutput>True</computeroutput>
, Optional[int]  lr_decay_steps = <computeroutput>1000</computeroutput>
, Optional[bool]  use_ranking = <computeroutput>True</computeroutput>
, Optional[float]  center_learning_rate = <computeroutput>0.15</computeroutput>
, Optional[float]  stdev_learning_rate = <computeroutput>0.1</computeroutput>
, Optional[float]  stdev_max_change = <computeroutput>0.2</computeroutput>
, Optional[float]  b1 = <computeroutput>0.9</computeroutput>
, Optional[float]  b2 = <computeroutput>0.999</computeroutput>
, Optional[float]  eps = <computeroutput>1e-8</computeroutput>
, Optional[float]  decay_coef = <computeroutput>1.0</computeroutput>
)</computeroutput></para><para>

<para>Optimize a given objective function by minimizing its value using the PGPE (Policy Gradient with Parameter-based Exploration) method. </para>
</para>

<para>This optimization approach uses parallel processing and supports both optional parameter normalization and adaptive learning rates for center and standard deviation.</para>

<para><literallayout><computeroutput>   fun (Callable[[ArrayLike], float]): Objective function to minimize. Must
       take a single input of type ArrayLike and return a float.
</computeroutput></literallayout> 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>bounds</entry><entry>
<para>Bounds for the variables. Should be specified as a tuple (lower_bounds, upper_bounds) or None for unbounded variables. </para>
</entry>
                            </row>
                            <row>
<entry>x0</entry><entry>
<para>Initial guess for the variables. If None, random initialization will be applied within bounds if specified. input_sigma (Optional[Union[float, ArrayLike, Callable]]): Initial standard deviation for parameter sampling. Defaults to 0.1. Can be a scalar, array, or callable returning an array. </para>
</entry>
                            </row>
                            <row>
<entry>popsize</entry><entry>
<para>Population size for sampling. Defaults to 32. If not specified or odd, it will be adjusted to the next even number. </para>
</entry>
                            </row>
                            <row>
<entry>max_evaluations</entry><entry>
<para>Maximum number of function evaluations to perform. Defaults to 100000. </para>
</entry>
                            </row>
                            <row>
<entry>workers</entry><entry>
<para>Number of parallel workers to use for evaluation. Defaults to None (no parallelism). </para>
</entry>
                            </row>
                            <row>
<entry>stop_fitness</entry><entry>
<para>Value of fitness to stop early. If the objective reaches this value, the algorithm will terminate early. Defaults to -infinity. </para>
</entry>
                            </row>
                            <row>
<entry>rg</entry><entry>
<para>Random number generator to use during optimization. Defaults to Generator(PCG64DXSM()). </para>
</entry>
                            </row>
                            <row>
<entry>runid</entry><entry>
<para>Unique identifier for the run. Useful for distinguishing runs in logging or debugging. </para>
</entry>
                            </row>
                            <row>
<entry>normalize</entry><entry>
<para>Whether to normalize the input parameters for the optimizer. Defaults to True. </para>
</entry>
                            </row>
                            <row>
<entry>lr_decay_steps</entry><entry>
<para>Number of steps for learning rate decay. Defaults to 1000. </para>
</entry>
                            </row>
                            <row>
<entry>use_ranking</entry><entry>
<para>Whether to use ranking over raw fitness when calculating updates. Defaults to True. </para>
</entry>
                            </row>
                            <row>
<entry>center_learning_rate</entry><entry>
<para>Learning rate used to update the center. Defaults to 0.15. </para>
</entry>
                            </row>
                            <row>
<entry>stdev_learning_rate</entry><entry>
<para>Learning rate used to update the standard deviation. Defaults to 0.1. </para>
</entry>
                            </row>
                            <row>
<entry>stdev_max_change</entry><entry>
<para>Maximum allowed change for standard deviation updates. Defaults to 0.2. </para>
</entry>
                            </row>
                            <row>
<entry>b1</entry><entry>
<para>Exponential moving average factor for the first moment estimate during adaptive updates. Defaults to 0.9. </para>
</entry>
                            </row>
                            <row>
<entry>b2</entry><entry>
<para>Exponential moving average factor for the second moment estimate during adaptive updates. Defaults to 0.999. </para>
</entry>
                            </row>
                            <row>
<entry>eps</entry><entry>
<para>Small term added to avoid division by zero in adaptive algorithms. Defaults to 1e-8. </para>
</entry>
                            </row>
                            <row>
<entry>decay_coef</entry><entry>
<para>Coefficient that controls decay in the learning rate updates. Defaults to 1.0.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>

<para>OptimizeResult An object containing optimization results, including the best parameters found (<computeroutput>x</computeroutput>), the objective value (<computeroutput>fun</computeroutput>) at those parameters, the number of function evaluations (<computeroutput>nfev</computeroutput>), the number of iterations (<computeroutput>nit</computeroutput>), the stopping status as an integer code (<computeroutput>status</computeroutput>), and a boolean success flag (<computeroutput>success</computeroutput>). </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00109">109</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1af356a4b052dd645eb6858407c6c30cca"/><section>
    <title>argtypes</title>
<indexterm><primary>argtypes</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>argtypes</secondary></indexterm>
<para><computeroutput>fcmaes.pgpecpp.argtypes</computeroutput></para><para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00411">411</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1a89e498c3d796b4113e670e638aa85163"/><section>
    <title>askPGPE_C</title>
<indexterm><primary>askPGPE_C</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>askPGPE_C</secondary></indexterm>
<para><computeroutput>fcmaes.pgpecpp.askPGPE_C = libcmalib.askPGPE_C</computeroutput></para><para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00432">432</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1a03df7e468c547553701bf0f0dc702b4f"/><section>
    <title>destroyPGPE_C</title>
<indexterm><primary>destroyPGPE_C</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>destroyPGPE_C</secondary></indexterm>
<para><computeroutput>fcmaes.pgpecpp.destroyPGPE_C = libcmalib.destroyPGPE_C</computeroutput></para><para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00429">429</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1aee73bd986018e30ab0fef7ab6f5d8b18"/><section>
    <title>initPGPE_C</title>
<indexterm><primary>initPGPE_C</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>initPGPE_C</secondary></indexterm>
<para><computeroutput>fcmaes.pgpecpp.initPGPE_C = libcmalib.initPGPE_C</computeroutput></para><para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00419">419</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1af8da1cbe352bc1a796e5f15d878647f2"/><section>
    <title>optimizePGPE_C</title>
<indexterm><primary>optimizePGPE_C</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>optimizePGPE_C</secondary></indexterm>
<para><computeroutput>fcmaes.pgpecpp.optimizePGPE_C = libcmalib.optimizePGPE_C</computeroutput></para><para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00410">410</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1a3c39b0fa9cb8f471f226bc6916bf3a71"/><section>
    <title>populationPGPE_C</title>
<indexterm><primary>populationPGPE_C</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>populationPGPE_C</secondary></indexterm>
<para><computeroutput>fcmaes.pgpecpp.populationPGPE_C = libcmalib.populationPGPE_C</computeroutput></para><para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00439">439</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1a5c33aa0b6c6e1fb0369e7516eacb5649"/><section>
    <title>restype</title>
<indexterm><primary>restype</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>restype</secondary></indexterm>
<para><computeroutput>fcmaes.pgpecpp.restype</computeroutput></para><para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00427">427</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1a550fd833f381cfb0e882cdccfe52ef2a"/><section>
    <title>resultPGPE_C</title>
<indexterm><primary>resultPGPE_C</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>resultPGPE_C</secondary></indexterm>
<para><computeroutput>fcmaes.pgpecpp.resultPGPE_C = libcmalib.resultPGPE_C</computeroutput></para><para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00442">442</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
<anchor xml:id="_namespacefcmaes_1_1pgpecpp_1a83964137647622f1ea94a90106b7fc85"/><section>
    <title>tellPGPE_C</title>
<indexterm><primary>tellPGPE_C</primary><secondary>fcmaes.pgpecpp</secondary></indexterm>
<indexterm><primary>fcmaes.pgpecpp</primary><secondary>tellPGPE_C</secondary></indexterm>
<para><computeroutput>fcmaes.pgpecpp.tellPGPE_C = libcmalib.tellPGPE_C</computeroutput></para><para>
Definition at line <link linkend="_pgpecpp_8py_source_1l00435">435</link> of file <link linkend="_pgpecpp_8py_source">pgpecpp.py</link>.</para>
</section>
</section>
</section>
