<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_gear__train_8py_source" xml:lang="en-US">
<title>gear_train.py</title>
<indexterm><primary>examples/gear_train.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_gear__train_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1gear__train">00001</link> <emphasis role="comment">#&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00002"/>00002 <emphasis role="comment">#</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00005"/>00005 
<anchor xml:id="_gear__train_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;A&#32;compound&#32;gear&#32;train&#32;is&#32;to&#32;be&#32;designed&#32;to&#32;achieve&#32;a&#32;specific&#32;gear&#32;ratio&#32;between&#32;the</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00007"/>00007 <emphasis role="comment">#&#32;driver&#32;and&#32;driven&#32;shafts.&#32;The&#32;objective&#32;of&#32;the&#32;gear&#32;train&#32;design&#32;is&#32;to&#32;find&#32;the&#32;number</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00008"/>00008 <emphasis role="comment">#&#32;of&#32;teeth&#32;in&#32;each&#32;of&#32;the&#32;four&#32;gears&#32;so&#32;as&#32;to&#32;minimize&#32;</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00009"/>00009 <emphasis role="comment">#&#32;-&#32;the&#32;error&#32;between&#32;the&#32;obtained&#32;gear&#32;ratio&#32;and&#32;a&#32;required&#32;gear&#32;rafio&#32;of&#32;1/6.931&#32;and&#32;</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00010"/>00010 <emphasis role="comment">#&#32;-&#32;the&#32;maximum&#32;size&#32;of&#32;any&#32;of&#32;the&#32;four&#32;gears.&#32;</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00011"/>00011 <emphasis role="comment">#&#32;Since&#32;the&#32;number&#32;of&#32;teeth&#32;must&#32;be&#32;integers,&#32;all&#32;four&#32;variables&#32;are&#32;strictly&#32;integers.</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00012"/>00012 <emphasis role="comment">#&#32;This&#32;example&#32;is&#32;taken&#32;from&#32;https://link.springer.com/chapter/10.1007/3-540-45356-3_84&#32;</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00013"/>00013 
<anchor xml:id="_gear__train_8py_source_1l00014"/>00014 <emphasis role="comment">#&#32;This&#32;example&#32;illustrates&#32;that&#32;for&#32;relatively&#32;simple&#32;tasks&#32;no&#32;dedicated&#32;mixed&#32;integer</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00015"/>00015 <emphasis role="comment">#&#32;solver&#32;is&#32;required.&#32;500&#32;solutions&#32;with&#32;different&#32;upper&#32;bounds&#32;are&#32;computed&#32;in&#32;about&#32;80&#32;sec</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00016"/>00016 <emphasis role="comment">#&#32;on&#32;an&#32;AMD&#32;3950x&#32;16&#32;core&#32;processor.&#32;The&#32;continuous&#32;input&#32;vector&#32;is&#32;made&#32;discrete&#32;by</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00017"/>00017 <emphasis role="comment">#&#32;calling&#32;&apos;_feasible(x)&apos;&#32;in&#32;the&#32;objective&#32;function&#32;&apos;feasable_ratio()&apos;.&#32;The&#32;second&#32;objective</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00018"/>00018 <emphasis role="comment">#&#32;is&#32;modeled&#32;as&#32;boxed&#32;boundary.&#32;By&#32;incrementally&#32;increasing&#32;the&#32;bounds&#32;on&#32;the&#32;teeth&#32;number</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00019"/>00019 <emphasis role="comment">#&#32;the&#32;whole&#32;pareto&#32;front&#32;is&#32;listed.&#32;</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00020"/>00020 
<anchor xml:id="_gear__train_8py_source_1l00021"/>00021 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00022"/>00022 
<anchor xml:id="_gear__train_8py_source_1l00023"/>00023 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;retry,&#32;advretry
<anchor xml:id="_gear__train_8py_source_1l00024"/>00024 <emphasis role="keyword">import</emphasis>&#32;math
<anchor xml:id="_gear__train_8py_source_1l00025"/>00025 <emphasis role="keyword">import</emphasis>&#32;time
<anchor xml:id="_gear__train_8py_source_1l00026"/>00026 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_gear__train_8py_source_1l00027"/>00027 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds
<anchor xml:id="_gear__train_8py_source_1l00028"/>00028 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;dtime
<anchor xml:id="_gear__train_8py_source_1l00029"/>00029 
<anchor xml:id="_gear__train_8py_source_1l00030"/>00030 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_gear__train_8py_source_1l00031"/>00031 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_gear__train_8py_source_1l00032"/>00032 
<anchor xml:id="_gear__train_8py_source_1l00033"/>00033 logger.remove()
<anchor xml:id="_gear__train_8py_source_1l00034"/><link linkend="_namespaceexamples_1_1gear__train_1a7f0a36761745a3929e1ef1af7f977201">00034</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_gear__train_8py_source_1l00035"/>00035 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_gear__train_8py_source_1l00036"/>00036 
<anchor xml:id="_gear__train_8py_source_1l00037"/><link linkend="_namespaceexamples_1_1gear__train_1ad2a2ddca5789d754aeaca5f116195235">00037</link> fac&#32;=&#32;1.0
<anchor xml:id="_gear__train_8py_source_1l00038"/><link linkend="_namespaceexamples_1_1gear__train_1ac55edaaa100d315167378785d8149a44">00038</link> lowerbound&#32;=&#32;[12,&#32;12,&#32;12,&#32;12]
<anchor xml:id="_gear__train_8py_source_1l00039"/>00039 
<anchor xml:id="_gear__train_8py_source_1l00040"/><link linkend="_namespaceexamples_1_1gear__train_1aa60f94f1dcb8bd291893acc7c3284ffb">00040</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1gear__train_1aa60f94f1dcb8bd291893acc7c3284ffb">ratio</link>(x):&#32;&#32;&#32;
<anchor xml:id="_gear__train_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(1&#32;/&#32;6.931&#32;-&#32;x[0]*x[1]&#32;/&#32;(x[2]*x[3]))&#32;**&#32;2
<anchor xml:id="_gear__train_8py_source_1l00042"/>00042 
<anchor xml:id="_gear__train_8py_source_1l00043"/>00043 <emphasis role="comment">#&#32;map&#32;floats&#32;to&#32;discrete&#32;integer&#32;variables</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00044"/><link linkend="_namespaceexamples_1_1gear__train_1aed91576b10d97cb488c1badbe66e796c">00044</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1gear__train_1aed91576b10d97cb488c1badbe66e796c">discrete</link>(x):
<anchor xml:id="_gear__train_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;feasible_x&#32;=&#32;x&#32;-&#32;x&#32;%&#32;fac
<anchor xml:id="_gear__train_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;feasible_x&#32;&lt;&#32;12:
<anchor xml:id="_gear__train_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;feasible_x&#32;+=&#32;fac
<anchor xml:id="_gear__train_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;feasible_x&#32;&gt;&#32;60:
<anchor xml:id="_gear__train_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;feasible_x&#32;=&#32;60
<anchor xml:id="_gear__train_8py_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;feasible_x
<anchor xml:id="_gear__train_8py_source_1l00051"/>00051 &#32;
<anchor xml:id="_gear__train_8py_source_1l00052"/><link linkend="_namespaceexamples_1_1gear__train_1a8650b80b6d76475be4dfd225a55c62b0">00052</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1gear__train_1a8650b80b6d76475be4dfd225a55c62b0">_feasible</link>(x):
<anchor xml:id="_gear__train_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;x&#32;=&#32;np.array(x)
<anchor xml:id="_gear__train_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[<link linkend="_namespaceexamples_1_1gear__train_1aed91576b10d97cb488c1badbe66e796c">discrete</link>(v)&#32;<emphasis role="keywordflow">for</emphasis>&#32;v&#32;<emphasis role="keywordflow">in</emphasis>&#32;x]
<anchor xml:id="_gear__train_8py_source_1l00055"/>00055 &#32;
<anchor xml:id="_gear__train_8py_source_1l00056"/><link linkend="_namespaceexamples_1_1gear__train_1adf9cb51be26cd8e06226d3836a2782f1">00056</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1gear__train_1adf9cb51be26cd8e06226d3836a2782f1">feasable_ratio</link>(x):&#32;
<anchor xml:id="_gear__train_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;x&#32;=&#32;<link linkend="_namespaceexamples_1_1gear__train_1a8650b80b6d76475be4dfd225a55c62b0">_feasible</link>(x)&#32;&#32;&#32;
<anchor xml:id="_gear__train_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceexamples_1_1gear__train_1aa60f94f1dcb8bd291893acc7c3284ffb">ratio</link>(x)&#32;
<anchor xml:id="_gear__train_8py_source_1l00059"/>00059 
<anchor xml:id="_gear__train_8py_source_1l00060"/><link linkend="_namespaceexamples_1_1gear__train_1a5f77cab0f2182c613735dba90ac0a2b2">00060</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1gear__train_1a5f77cab0f2182c613735dba90ac0a2b2">print_result</link>(ret,&#32;best,&#32;t0,&#32;i):
<anchor xml:id="_gear__train_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;x&#32;=&#32;<link linkend="_namespaceexamples_1_1gear__train_1a8650b80b6d76475be4dfd225a55c62b0">_feasible</link>(ret.x)&#32;<emphasis role="comment">#&#32;make&#32;sure&#32;result&#32;is&#32;_feasible&#32;/&#32;discrete</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;val&#32;=&#32;<link linkend="_namespaceexamples_1_1gear__train_1aa60f94f1dcb8bd291893acc7c3284ffb">ratio</link>(x)
<anchor xml:id="_gear__train_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;val&#32;&lt;&#32;best:
<anchor xml:id="_gear__train_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(val,&#32;best)
<anchor xml:id="_gear__train_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.3E}&#32;f(xmin)&#32;=&#32;{3:.3E}&#32;x&#32;=&#32;{4:s}&quot;</emphasis>
<anchor xml:id="_gear__train_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1gear__train_1a7f0a36761745a3929e1ef1af7f977201">format</link>(i,&#32;dtime(t0),&#32;best,&#32;val,&#32;str(x)))
<anchor xml:id="_gear__train_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;best
<anchor xml:id="_gear__train_8py_source_1l00068"/>00068 &#32;
<anchor xml:id="_gear__train_8py_source_1l00069"/><link linkend="_namespaceexamples_1_1gear__train_1a6942c7e5c634c2d56ccc8e6991db3725">00069</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1gear__train_1a6942c7e5c634c2d56ccc8e6991db3725">test_optimizer</link>(fun,&#32;n):
<anchor xml:id="_gear__train_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_gear__train_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter()
<anchor xml:id="_gear__train_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(n):
<anchor xml:id="_gear__train_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_x&#32;=&#32;i&#32;+&#32;12
<anchor xml:id="_gear__train_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds&#32;=&#32;Bounds(lowerbound,&#32;[max_x+0.99]*4)
<anchor xml:id="_gear__train_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;retry.minimize(fun,&#32;bounds,&#32;max_evaluations=10000,&#32;num_retries=100)
<anchor xml:id="_gear__train_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;<link linkend="_namespaceexamples_1_1gear__train_1a5f77cab0f2182c613735dba90ac0a2b2">print_result</link>(ret,&#32;best,&#32;t0,&#32;max_x)
<anchor xml:id="_gear__train_8py_source_1l00077"/>00077 
<anchor xml:id="_gear__train_8py_source_1l00078"/><link linkend="_namespaceexamples_1_1gear__train_1aedfd50e048f3a8af3a3782a7e4b76fb1">00078</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1gear__train_1aedfd50e048f3a8af3a3782a7e4b76fb1">test_optimizer_adv</link>(fun,&#32;n):
<anchor xml:id="_gear__train_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_gear__train_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter()
<anchor xml:id="_gear__train_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(n):
<anchor xml:id="_gear__train_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_x&#32;=&#32;i&#32;+&#32;12
<anchor xml:id="_gear__train_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds&#32;=&#32;Bounds(lowerbound,&#32;[max_x+0.99]*4)
<anchor xml:id="_gear__train_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;advretry.minimize(fun,&#32;bounds,&#32;min_evaluations=5000,&#32;num_retries=100)
<anchor xml:id="_gear__train_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;<link linkend="_namespaceexamples_1_1gear__train_1a5f77cab0f2182c613735dba90ac0a2b2">print_result</link>(ret,&#32;best,&#32;t0,&#32;max_x)
<anchor xml:id="_gear__train_8py_source_1l00086"/>00086 &#32;
<anchor xml:id="_gear__train_8py_source_1l00087"/>00087 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_gear__train_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;
<anchor xml:id="_gear__train_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1gear__train_1aedfd50e048f3a8af3a3782a7e4b76fb1">test_optimizer_adv</link>(feasable_ratio,&#32;500)
<anchor xml:id="_gear__train_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="comment">#test_optimizer(feasable_ratio,&#32;500)</emphasis>
</programlisting></section>
