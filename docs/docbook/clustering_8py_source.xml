<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_clustering_8py_source" xml:lang="en-US">
<title>clustering.py</title>
<indexterm><primary>examples/clustering.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_clustering_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1clustering">00001</link> <emphasis role="stringliteral">&quot;&quot;&quot;Cluster&#32;200&#32;cities&#32;in&#32;4&#32;equal&#32;groups&#32;to&#32;minimize&#32;sum&#32;of&#32;crossed&#32;distances.</emphasis>
<anchor xml:id="_clustering_8py_source_1l00002"/>00002 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_clustering_8py_source_1l00003"/>00003 <emphasis role="stringliteral">Derived&#32;from&#32;https://github.com/google/or-tools/blob/stable/examples/python/clustering_sat.py</emphasis>
<anchor xml:id="_clustering_8py_source_1l00004"/>00004 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_clustering_8py_source_1l00005"/>00005 <emphasis role="stringliteral">Please&#32;also&#32;try&#32;the&#32;original&#32;with&#32;200&#32;cities.&#32;</emphasis>
<anchor xml:id="_clustering_8py_source_1l00006"/>00006 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_clustering_8py_source_1l00007"/>00007 <emphasis role="stringliteral">See&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Clustering.adoc&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_clustering_8py_source_1l00008"/>00008 <emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_clustering_8py_source_1l00009"/>00009 
<anchor xml:id="_clustering_8py_source_1l00010"/>00010 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_clustering_8py_source_1l00011"/>00011 
<anchor xml:id="_clustering_8py_source_1l00012"/>00012 
<anchor xml:id="_clustering_8py_source_1l00013"/>00013 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_clustering_8py_source_1l00014"/>00014 <emphasis role="keyword">from</emphasis>&#32;numba&#32;<emphasis role="keyword">import</emphasis>&#32;njit
<anchor xml:id="_clustering_8py_source_1l00015"/>00015 <emphasis role="keyword">import</emphasis>&#32;numba
<anchor xml:id="_clustering_8py_source_1l00016"/>00016 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;Bite_cpp,&#32;wrapper
<anchor xml:id="_clustering_8py_source_1l00017"/>00017 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;retry
<anchor xml:id="_clustering_8py_source_1l00018"/>00018 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds
<anchor xml:id="_clustering_8py_source_1l00019"/>00019 
<anchor xml:id="_clustering_8py_source_1l00020"/>00020 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_clustering_8py_source_1l00021"/>00021 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_clustering_8py_source_1l00022"/>00022 
<anchor xml:id="_clustering_8py_source_1l00023"/>00023 logger.remove()
<anchor xml:id="_clustering_8py_source_1l00024"/><link linkend="_namespaceexamples_1_1clustering_1a11456775a0cb6c71d900fb46eb3f3624">00024</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_clustering_8py_source_1l00025"/>00025 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_clustering_8py_source_1l00026"/>00026 &#32;&#32;&#32;
<anchor xml:id="_clustering_8py_source_1l00027"/><link linkend="_namespaceexamples_1_1clustering_1a2c1a0f7c6153841d4c8aad2e493c98f2">00027</link> distance_matrix&#32;=&#32;[
<anchor xml:id="_clustering_8py_source_1l00028"/>00028 &#32;&#32;&#32;&#32;[0,&#32;10938,&#32;4542,&#32;2835,&#32;29441,&#32;2171,&#32;1611,&#32;9208,&#32;9528,&#32;11111,&#32;16120,&#32;22606,&#32;22127,&#32;20627,&#32;21246,&#32;23387,&#32;16697,&#32;33609,&#32;26184,&#32;24772,&#32;22644,&#32;20655,&#32;30492,&#32;23296,&#32;32979,&#32;18141,&#32;19248,&#32;17129,&#32;17192,&#32;15645,&#32;12658,&#32;11210,&#32;12094,&#32;13175,&#32;18162,&#32;4968,&#32;12308,&#32;10084,&#32;13026,&#32;15056],
<anchor xml:id="_clustering_8py_source_1l00029"/>00029 &#32;&#32;&#32;&#32;[10938,&#32;0,&#32;6422,&#32;9742,&#32;18988,&#32;12974,&#32;11216,&#32;19715,&#32;19004,&#32;18271,&#32;25070,&#32;31971,&#32;31632,&#32;30571,&#32;31578,&#32;33841,&#32;27315,&#32;43964,&#32;36944,&#32;35689,&#32;33569,&#32;31481,&#32;41360,&#32;33760,&#32;43631,&#32;28730,&#32;29976,&#32;27803,&#32;28076,&#32;26408,&#32;23504,&#32;22025,&#32;22000,&#32;13197,&#32;14936,&#32;15146,&#32;23246,&#32;20956,&#32;23963,&#32;25994],
<anchor xml:id="_clustering_8py_source_1l00030"/>00030 &#32;&#32;&#32;&#32;[4542,&#32;6422,&#32;0,&#32;3644,&#32;25173,&#32;6552,&#32;5092,&#32;13584,&#32;13372,&#32;13766,&#32;19805,&#32;26537,&#32;26117,&#32;24804,&#32;25590,&#32;27784,&#32;21148,&#32;37981,&#32;30693,&#32;29315,&#32;27148,&#32;25071,&#32;34943,&#32;27472,&#32;37281,&#32;22389,&#32;23592,&#32;21433,&#32;21655,&#32;20011,&#32;17087,&#32;15612,&#32;15872,&#32;11653,&#32;15666,&#32;8842,&#32;16843,&#32;14618,&#32;17563,&#32;19589],
<anchor xml:id="_clustering_8py_source_1l00031"/>00031 &#32;&#32;&#32;&#32;[2835,&#32;9742,&#32;3644,&#32;0,&#32;28681,&#32;3851,&#32;4341,&#32;11660,&#32;12294,&#32;13912,&#32;18893,&#32;25283,&#32;24777,&#32;23173,&#32;23636,&#32;25696,&#32;18950,&#32;35927,&#32;28233,&#32;26543,&#32;24127,&#32;21864,&#32;31765,&#32;24018,&#32;33904,&#32;19005,&#32;20295,&#32;18105,&#32;18551,&#32;16763,&#32;13958,&#32;12459,&#32;12296,&#32;10370,&#32;15331,&#32;5430,&#32;14044,&#32;12135,&#32;14771,&#32;16743],
<anchor xml:id="_clustering_8py_source_1l00032"/>00032 &#32;&#32;&#32;&#32;[29441,&#32;18988,&#32;25173,&#32;28681,&#32;0,&#32;31590,&#32;29265,&#32;37173,&#32;35501,&#32;32929,&#32;40239,&#32;47006,&#32;46892,&#32;46542,&#32;48112,&#32;50506,&#32;44539,&#32;60103,&#32;54208,&#32;53557,&#32;51878,&#32;50074,&#32;59849,&#32;52645,&#32;62415,&#32;47544,&#32;48689,&#32;46560,&#32;46567,&#32;45086,&#32;42083,&#32;40648,&#32;40971,&#32;29929,&#32;28493,&#32;34015,&#32;41473,&#32;38935,&#32;42160,&#32;44198],
<anchor xml:id="_clustering_8py_source_1l00033"/>00033 &#32;&#32;&#32;&#32;[2171,&#32;12974,&#32;6552,&#32;3851,&#32;31590,&#32;0,&#32;3046,&#32;7856,&#32;8864,&#32;11330,&#32;15411,&#32;21597,&#32;21065,&#32;19382,&#32;19791,&#32;21845,&#32;15099,&#32;32076,&#32;24425,&#32;22848,&#32;20600,&#32;18537,&#32;28396,&#32;21125,&#32;30825,&#32;15975,&#32;17101,&#32;14971,&#32;15104,&#32;13503,&#32;10544,&#32;9080,&#32;9983,&#32;13435,&#32;18755,&#32;2947,&#32;10344,&#32;8306,&#32;11069,&#32;13078],
<anchor xml:id="_clustering_8py_source_1l00034"/>00034 &#32;&#32;&#32;&#32;[1611,&#32;11216,&#32;5092,&#32;4341,&#32;29265,&#32;3046,&#32;0,&#32;8526,&#32;8368,&#32;9573,&#32;14904,&#32;21529,&#32;21085,&#32;19719,&#32;20504,&#32;22713,&#32;16118,&#32;32898,&#32;25728,&#32;24541,&#32;22631,&#32;20839,&#32;30584,&#32;23755,&#32;33278,&#32;18557,&#32;19545,&#32;17490,&#32;17309,&#32;15936,&#32;12881,&#32;11498,&#32;12944,&#32;14711,&#32;19589,&#32;5993,&#32;12227,&#32;9793,&#32;12925,&#32;14967],
<anchor xml:id="_clustering_8py_source_1l00035"/>00035 &#32;&#32;&#32;&#32;[9208,&#32;19715,&#32;13584,&#32;11660,&#32;37173,&#32;7856,&#32;8526,&#32;0,&#32;3248,&#32;7855,&#32;8245,&#32;13843,&#32;13272,&#32;11526,&#32;12038,&#32;14201,&#32;7599,&#32;24411,&#32;17259,&#32;16387,&#32;15050,&#32;13999,&#32;23134,&#32;17899,&#32;26460,&#32;12894,&#32;13251,&#32;11680,&#32;10455,&#32;9997,&#32;7194,&#32;6574,&#32;10678,&#32;20959,&#32;26458,&#32;8180,&#32;5255,&#32;2615,&#32;5730,&#32;7552],
<anchor xml:id="_clustering_8py_source_1l00036"/>00036 &#32;&#32;&#32;&#32;[9528,&#32;19004,&#32;13372,&#32;12294,&#32;35501,&#32;8864,&#32;8368,&#32;3248,&#32;0,&#32;4626,&#32;6598,&#32;13168,&#32;12746,&#32;11567,&#32;12731,&#32;15083,&#32;9120,&#32;25037,&#32;18718,&#32;18433,&#32;17590,&#32;16888,&#32;25630,&#32;20976,&#32;29208,&#32;16055,&#32;16300,&#32;14838,&#32;13422,&#32;13165,&#32;10430,&#32;9813,&#32;13777,&#32;22300,&#32;27564,&#32;10126,&#32;8388,&#32;5850,&#32;8778,&#32;10422],
<anchor xml:id="_clustering_8py_source_1l00037"/>00037 &#32;&#32;&#32;&#32;[11111,&#32;18271,&#32;13766,&#32;13912,&#32;32929,&#32;11330,&#32;9573,&#32;7855,&#32;4626,&#32;0,&#32;7318,&#32;14185,&#32;14005,&#32;13655,&#32;15438,&#32;17849,&#32;12839,&#32;27179,&#32;21947,&#32;22230,&#32;21814,&#32;21366,&#32;29754,&#32;25555,&#32;33535,&#32;20674,&#32;20872,&#32;19457,&#32;17961,&#32;17787,&#32;15048,&#32;14372,&#32;18115,&#32;24280,&#32;29101,&#32;13400,&#32;13008,&#32;10467,&#32;13375,&#32;14935],
<anchor xml:id="_clustering_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;[16120,&#32;25070,&#32;19805,&#32;18893,&#32;40239,&#32;15411,&#32;14904,&#32;8245,&#32;6598,&#32;7318,&#32;0,&#32;6939,&#32;6702,&#32;6498,&#32;8610,&#32;10961,&#32;7744,&#32;19889,&#32;15350,&#32;16403,&#32;16975,&#32;17517,&#32;24357,&#32;22176,&#32;28627,&#32;18093,&#32;17672,&#32;16955,&#32;14735,&#32;15510,&#32;13694,&#32;13768,&#32;18317,&#32;28831,&#32;34148,&#32;16326,&#32;11276,&#32;9918,&#32;11235,&#32;11891],
<anchor xml:id="_clustering_8py_source_1l00039"/>00039 &#32;&#32;&#32;&#32;[22606,&#32;31971,&#32;26537,&#32;25283,&#32;47006,&#32;21597,&#32;21529,&#32;13843,&#32;13168,&#32;14185,&#32;6939,&#32;0,&#32;793,&#32;3401,&#32;5562,&#32;6839,&#32;8923,&#32;13433,&#32;11264,&#32;13775,&#32;15853,&#32;17629,&#32;21684,&#32;22315,&#32;26411,&#32;19539,&#32;18517,&#32;18636,&#32;16024,&#32;17632,&#32;16948,&#32;17587,&#32;22131,&#32;34799,&#32;40296,&#32;21953,&#32;14739,&#32;14568,&#32;14366,&#32;14002],
<anchor xml:id="_clustering_8py_source_1l00040"/>00040 &#32;&#32;&#32;&#32;[22127,&#32;31632,&#32;26117,&#32;24777,&#32;46892,&#32;21065,&#32;21085,&#32;13272,&#32;12746,&#32;14005,&#32;6702,&#32;793,&#32;0,&#32;2608,&#32;4809,&#32;6215,&#32;8151,&#32;13376,&#32;10702,&#32;13094,&#32;15099,&#32;16845,&#32;21039,&#32;21535,&#32;25744,&#32;18746,&#32;17725,&#32;17845,&#32;15232,&#32;16848,&#32;16197,&#32;16859,&#32;21391,&#32;34211,&#32;39731,&#32;21345,&#32;14006,&#32;13907,&#32;13621,&#32;13225],
<anchor xml:id="_clustering_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;[20627,&#32;30571,&#32;24804,&#32;23173,&#32;46542,&#32;19382,&#32;19719,&#32;11526,&#32;11567,&#32;13655,&#32;6498,&#32;3401,&#32;2608,&#32;0,&#32;2556,&#32;4611,&#32;5630,&#32;13586,&#32;9157,&#32;11005,&#32;12681,&#32;14285,&#32;19044,&#32;18996,&#32;23644,&#32;16138,&#32;15126,&#32;15240,&#32;12625,&#32;14264,&#32;13736,&#32;14482,&#32;18958,&#32;32292,&#32;37879,&#32;19391,&#32;11621,&#32;11803,&#32;11188,&#32;10671],
<anchor xml:id="_clustering_8py_source_1l00042"/>00042 &#32;&#32;&#32;&#32;[21246,&#32;31578,&#32;25590,&#32;23636,&#32;48112,&#32;19791,&#32;20504,&#32;12038,&#32;12731,&#32;15438,&#32;8610,&#32;5562,&#32;4809,&#32;2556,&#32;0,&#32;2411,&#32;4917,&#32;12395,&#32;6757,&#32;8451,&#32;10292,&#32;12158,&#32;16488,&#32;16799,&#32;21097,&#32;14374,&#32;13194,&#32;13590,&#32;10943,&#32;12824,&#32;12815,&#32;13779,&#32;18042,&#32;32259,&#32;37918,&#32;19416,&#32;10975,&#32;11750,&#32;10424,&#32;9475],
<anchor xml:id="_clustering_8py_source_1l00043"/>00043 &#32;&#32;&#32;&#32;[23387,&#32;33841,&#32;27784,&#32;25696,&#32;50506,&#32;21845,&#32;22713,&#32;14201,&#32;15083,&#32;17849,&#32;10961,&#32;6839,&#32;6215,&#32;4611,&#32;2411,&#32;0,&#32;6760,&#32;10232,&#32;4567,&#32;7010,&#32;9607,&#32;12003,&#32;14846,&#32;16408,&#32;19592,&#32;14727,&#32;13336,&#32;14109,&#32;11507,&#32;13611,&#32;14104,&#32;15222,&#32;19237,&#32;34013,&#32;39703,&#32;21271,&#32;12528,&#32;13657,&#32;11907,&#32;10633],
<anchor xml:id="_clustering_8py_source_1l00044"/>00044 &#32;&#32;&#32;&#32;[16697,&#32;27315,&#32;21148,&#32;18950,&#32;44539,&#32;15099,&#32;16118,&#32;7599,&#32;9120,&#32;12839,&#32;7744,&#32;8923,&#32;8151,&#32;5630,&#32;4917,&#32;6760,&#32;0,&#32;16982,&#32;9699,&#32;9400,&#32;9302,&#32;9823,&#32;16998,&#32;14534,&#32;21042,&#32;10911,&#32;10190,&#32;9900,&#32;7397,&#32;8758,&#32;8119,&#32;8948,&#32;13353,&#32;27354,&#32;33023,&#32;14542,&#32;6106,&#32;6901,&#32;5609,&#32;5084],
<anchor xml:id="_clustering_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;[33609,&#32;43964,&#32;37981,&#32;35927,&#32;60103,&#32;32076,&#32;32898,&#32;24411,&#32;25037,&#32;27179,&#32;19889,&#32;13433,&#32;13376,&#32;13586,&#32;12395,&#32;10232,&#32;16982,&#32;0,&#32;8843,&#32;12398,&#32;16193,&#32;19383,&#32;16423,&#32;22583,&#32;20997,&#32;22888,&#32;21194,&#32;22640,&#32;20334,&#32;22636,&#32;23801,&#32;25065,&#32;28675,&#32;44048,&#32;49756,&#32;31426,&#32;22528,&#32;23862,&#32;21861,&#32;20315],
<anchor xml:id="_clustering_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;[26184,&#32;36944,&#32;30693,&#32;28233,&#32;54208,&#32;24425,&#32;25728,&#32;17259,&#32;18718,&#32;21947,&#32;15350,&#32;11264,&#32;10702,&#32;9157,&#32;6757,&#32;4567,&#32;9699,&#32;8843,&#32;0,&#32;3842,&#32;7518,&#32;10616,&#32;10666,&#32;14237,&#32;15515,&#32;14053,&#32;12378,&#32;13798,&#32;11537,&#32;13852,&#32;15276,&#32;16632,&#32;19957,&#32;35660,&#32;41373,&#32;23361,&#32;14333,&#32;16125,&#32;13624,&#32;11866],
<anchor xml:id="_clustering_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;[24772,&#32;35689,&#32;29315,&#32;26543,&#32;53557,&#32;22848,&#32;24541,&#32;16387,&#32;18433,&#32;22230,&#32;16403,&#32;13775,&#32;13094,&#32;11005,&#32;8451,&#32;7010,&#32;9400,&#32;12398,&#32;3842,&#32;0,&#32;3795,&#32;7014,&#32;8053,&#32;10398,&#32;12657,&#32;10633,&#32;8889,&#32;10569,&#32;8646,&#32;10938,&#32;12906,&#32;14366,&#32;17106,&#32;33171,&#32;38858,&#32;21390,&#32;12507,&#32;14748,&#32;11781,&#32;9802],
<anchor xml:id="_clustering_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;[22644,&#32;33569,&#32;27148,&#32;24127,&#32;51878,&#32;20600,&#32;22631,&#32;15050,&#32;17590,&#32;21814,&#32;16975,&#32;15853,&#32;15099,&#32;12681,&#32;10292,&#32;9607,&#32;9302,&#32;16193,&#32;7518,&#32;3795,&#32;0,&#32;3250,&#32;8084,&#32;6873,&#32;11763,&#32;6949,&#32;5177,&#32;7050,&#32;5619,&#32;7730,&#32;10187,&#32;11689,&#32;13792,&#32;30012,&#32;35654,&#32;18799,&#32;10406,&#32;12981,&#32;9718,&#32;7682],
<anchor xml:id="_clustering_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;[20655,&#32;31481,&#32;25071,&#32;21864,&#32;50074,&#32;18537,&#32;20839,&#32;13999,&#32;16888,&#32;21366,&#32;17517,&#32;17629,&#32;16845,&#32;14285,&#32;12158,&#32;12003,&#32;9823,&#32;19383,&#32;10616,&#32;7014,&#32;3250,&#32;0,&#32;9901,&#32;4746,&#32;12531,&#32;3737,&#32;1961,&#32;4036,&#32;3588,&#32;5109,&#32;7996,&#32;9459,&#32;10846,&#32;27094,&#32;32690,&#32;16451,&#32;8887,&#32;11624,&#32;8304,&#32;6471],
<anchor xml:id="_clustering_8py_source_1l00050"/>00050 &#32;&#32;&#32;&#32;[30492,&#32;41360,&#32;34943,&#32;31765,&#32;59849,&#32;28396,&#32;30584,&#32;23134,&#32;25630,&#32;29754,&#32;24357,&#32;21684,&#32;21039,&#32;19044,&#32;16488,&#32;14846,&#32;16998,&#32;16423,&#32;10666,&#32;8053,&#32;8084,&#32;9901,&#32;0,&#32;9363,&#32;4870,&#32;13117,&#32;11575,&#32;13793,&#32;13300,&#32;15009,&#32;17856,&#32;19337,&#32;20454,&#32;36551,&#32;42017,&#32;26352,&#32;18403,&#32;21033,&#32;17737,&#32;15720],
<anchor xml:id="_clustering_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;[23296,&#32;33760,&#32;27472,&#32;24018,&#32;52645,&#32;21125,&#32;23755,&#32;17899,&#32;20976,&#32;25555,&#32;22176,&#32;22315,&#32;21535,&#32;18996,&#32;16799,&#32;16408,&#32;14534,&#32;22583,&#32;14237,&#32;10398,&#32;6873,&#32;4746,&#32;9363,&#32;0,&#32;10020,&#32;5211,&#32;4685,&#32;6348,&#32;7636,&#32;8010,&#32;11074,&#32;12315,&#32;11926,&#32;27537,&#32;32880,&#32;18634,&#32;12644,&#32;15358,&#32;12200,&#32;10674],
<anchor xml:id="_clustering_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;[32979,&#32;43631,&#32;37281,&#32;33904,&#32;62415,&#32;30825,&#32;33278,&#32;26460,&#32;29208,&#32;33535,&#32;28627,&#32;26411,&#32;25744,&#32;23644,&#32;21097,&#32;19592,&#32;21042,&#32;20997,&#32;15515,&#32;12657,&#32;11763,&#32;12531,&#32;4870,&#32;10020,&#32;0,&#32;14901,&#32;13738,&#32;15855,&#32;16118,&#32;17348,&#32;20397,&#32;21793,&#32;21936,&#32;37429,&#32;42654,&#32;28485,&#32;21414,&#32;24144,&#32;20816,&#32;18908],
<anchor xml:id="_clustering_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;[18141,&#32;28730,&#32;22389,&#32;19005,&#32;47544,&#32;15975,&#32;18557,&#32;12894,&#32;16055,&#32;20674,&#32;18093,&#32;19539,&#32;18746,&#32;16138,&#32;14374,&#32;14727,&#32;10911,&#32;22888,&#32;14053,&#32;10633,&#32;6949,&#32;3737,&#32;13117,&#32;5211,&#32;14901,&#32;0,&#32;1777,&#32;1217,&#32;3528,&#32;2896,&#32;5892,&#32;7104,&#32;7338,&#32;23517,&#32;29068,&#32;13583,&#32;7667,&#32;10304,&#32;7330,&#32;6204],
<anchor xml:id="_clustering_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;[19248,&#32;29976,&#32;23592,&#32;20295,&#32;48689,&#32;17101,&#32;19545,&#32;13251,&#32;16300,&#32;20872,&#32;17672,&#32;18517,&#32;17725,&#32;15126,&#32;13194,&#32;13336,&#32;10190,&#32;21194,&#32;12378,&#32;8889,&#32;5177,&#32;1961,&#32;11575,&#32;4685,&#32;13738,&#32;1777,&#32;0,&#32;2217,&#32;2976,&#32;3610,&#32;6675,&#32;8055,&#32;8965,&#32;25197,&#32;30774,&#32;14865,&#32;8007,&#32;10742,&#32;7532,&#32;6000],
<anchor xml:id="_clustering_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;[17129,&#32;27803,&#32;21433,&#32;18105,&#32;46560,&#32;14971,&#32;17490,&#32;11680,&#32;14838,&#32;19457,&#32;16955,&#32;18636,&#32;17845,&#32;15240,&#32;13590,&#32;14109,&#32;9900,&#32;22640,&#32;13798,&#32;10569,&#32;7050,&#32;4036,&#32;13793,&#32;6348,&#32;15855,&#32;1217,&#32;2217,&#32;0,&#32;2647,&#32;1686,&#32;4726,&#32;6000,&#32;6810,&#32;23060,&#32;28665,&#32;12674,&#32;6450,&#32;9094,&#32;6117,&#32;5066],
<anchor xml:id="_clustering_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;[17192,&#32;28076,&#32;21655,&#32;18551,&#32;46567,&#32;15104,&#32;17309,&#32;10455,&#32;13422,&#32;17961,&#32;14735,&#32;16024,&#32;15232,&#32;12625,&#32;10943,&#32;11507,&#32;7397,&#32;20334,&#32;11537,&#32;8646,&#32;5619,&#32;3588,&#32;13300,&#32;7636,&#32;16118,&#32;3528,&#32;2976,&#32;2647,&#32;0,&#32;2320,&#32;4593,&#32;6093,&#32;8479,&#32;24542,&#32;30219,&#32;13194,&#32;5301,&#32;8042,&#32;4735,&#32;3039],
<anchor xml:id="_clustering_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;[15645,&#32;26408,&#32;20011,&#32;16763,&#32;45086,&#32;13503,&#32;15936,&#32;9997,&#32;13165,&#32;17787,&#32;15510,&#32;17632,&#32;16848,&#32;14264,&#32;12824,&#32;13611,&#32;8758,&#32;22636,&#32;13852,&#32;10938,&#32;7730,&#32;5109,&#32;15009,&#32;8010,&#32;17348,&#32;2896,&#32;3610,&#32;1686,&#32;2320,&#32;0,&#32;3086,&#32;4444,&#32;6169,&#32;22301,&#32;27963,&#32;11344,&#32;4780,&#32;7408,&#32;4488,&#32;3721],
<anchor xml:id="_clustering_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;[12658,&#32;23504,&#32;17087,&#32;13958,&#32;42083,&#32;10544,&#32;12881,&#32;7194,&#32;10430,&#32;15048,&#32;13694,&#32;16948,&#32;16197,&#32;13736,&#32;12815,&#32;14104,&#32;8119,&#32;23801,&#32;15276,&#32;12906,&#32;10187,&#32;7996,&#32;17856,&#32;11074,&#32;20397,&#32;5892,&#32;6675,&#32;4726,&#32;4593,&#32;3086,&#32;0,&#32;1501,&#32;5239,&#32;20390,&#32;26101,&#32;8611,&#32;2418,&#32;4580,&#32;2599,&#32;3496],
<anchor xml:id="_clustering_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;[11210,&#32;22025,&#32;15612,&#32;12459,&#32;40648,&#32;9080,&#32;11498,&#32;6574,&#32;9813,&#32;14372,&#32;13768,&#32;17587,&#32;16859,&#32;14482,&#32;13779,&#32;15222,&#32;8948,&#32;25065,&#32;16632,&#32;14366,&#32;11689,&#32;9459,&#32;19337,&#32;12315,&#32;21793,&#32;7104,&#32;8055,&#32;6000,&#32;6093,&#32;4444,&#32;1501,&#32;0,&#32;4608,&#32;19032,&#32;24747,&#32;7110,&#32;2860,&#32;4072,&#32;3355,&#32;4772],
<anchor xml:id="_clustering_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;[12094,&#32;22000,&#32;15872,&#32;12296,&#32;40971,&#32;9983,&#32;12944,&#32;10678,&#32;13777,&#32;18115,&#32;18317,&#32;22131,&#32;21391,&#32;18958,&#32;18042,&#32;19237,&#32;13353,&#32;28675,&#32;19957,&#32;17106,&#32;13792,&#32;10846,&#32;20454,&#32;11926,&#32;21936,&#32;7338,&#32;8965,&#32;6810,&#32;8479,&#32;6169,&#32;5239,&#32;4608,&#32;0,&#32;16249,&#32;21866,&#32;7146,&#32;7403,&#32;8446,&#32;7773,&#32;8614],
<anchor xml:id="_clustering_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;[13175,&#32;13197,&#32;11653,&#32;10370,&#32;29929,&#32;13435,&#32;14711,&#32;20959,&#32;22300,&#32;24280,&#32;28831,&#32;34799,&#32;34211,&#32;32292,&#32;32259,&#32;34013,&#32;27354,&#32;44048,&#32;35660,&#32;33171,&#32;30012,&#32;27094,&#32;36551,&#32;27537,&#32;37429,&#32;23517,&#32;25197,&#32;23060,&#32;24542,&#32;22301,&#32;20390,&#32;19032,&#32;16249,&#32;0,&#32;5714,&#32;12901,&#32;21524,&#32;20543,&#32;22186,&#32;23805],
<anchor xml:id="_clustering_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;[18162,&#32;14936,&#32;15666,&#32;15331,&#32;28493,&#32;18755,&#32;19589,&#32;26458,&#32;27564,&#32;29101,&#32;34148,&#32;40296,&#32;39731,&#32;37879,&#32;37918,&#32;39703,&#32;33023,&#32;49756,&#32;41373,&#32;38858,&#32;35654,&#32;32690,&#32;42017,&#32;32880,&#32;42654,&#32;29068,&#32;30774,&#32;28665,&#32;30219,&#32;27963,&#32;26101,&#32;24747,&#32;21866,&#32;5714,&#32;0,&#32;18516,&#32;27229,&#32;26181,&#32;27895,&#32;29519],
<anchor xml:id="_clustering_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;[4968,&#32;15146,&#32;8842,&#32;5430,&#32;34015,&#32;2947,&#32;5993,&#32;8180,&#32;10126,&#32;13400,&#32;16326,&#32;21953,&#32;21345,&#32;19391,&#32;19416,&#32;21271,&#32;14542,&#32;31426,&#32;23361,&#32;21390,&#32;18799,&#32;16451,&#32;26352,&#32;18634,&#32;28485,&#32;13583,&#32;14865,&#32;12674,&#32;13194,&#32;11344,&#32;8611,&#32;7110,&#32;7146,&#32;12901,&#32;18516,&#32;0,&#32;9029,&#32;7668,&#32;9742,&#32;11614],
<anchor xml:id="_clustering_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;[12308,&#32;23246,&#32;16843,&#32;14044,&#32;41473,&#32;10344,&#32;12227,&#32;5255,&#32;8388,&#32;13008,&#32;11276,&#32;14739,&#32;14006,&#32;11621,&#32;10975,&#32;12528,&#32;6106,&#32;22528,&#32;14333,&#32;12507,&#32;10406,&#32;8887,&#32;18403,&#32;12644,&#32;21414,&#32;7667,&#32;8007,&#32;6450,&#32;5301,&#32;4780,&#32;2418,&#32;2860,&#32;7403,&#32;21524,&#32;27229,&#32;9029,&#32;0,&#32;2747,&#32;726,&#32;2749],
<anchor xml:id="_clustering_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;[10084,&#32;20956,&#32;14618,&#32;12135,&#32;38935,&#32;8306,&#32;9793,&#32;2615,&#32;5850,&#32;10467,&#32;9918,&#32;14568,&#32;13907,&#32;11803,&#32;11750,&#32;13657,&#32;6901,&#32;23862,&#32;16125,&#32;14748,&#32;12981,&#32;11624,&#32;21033,&#32;15358,&#32;24144,&#32;10304,&#32;10742,&#32;9094,&#32;8042,&#32;7408,&#32;4580,&#32;4072,&#32;8446,&#32;20543,&#32;26181,&#32;7668,&#32;2747,&#32;0,&#32;3330,&#32;5313],
<anchor xml:id="_clustering_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;[13026,&#32;23963,&#32;17563,&#32;14771,&#32;42160,&#32;11069,&#32;12925,&#32;5730,&#32;8778,&#32;13375,&#32;11235,&#32;14366,&#32;13621,&#32;11188,&#32;10424,&#32;11907,&#32;5609,&#32;21861,&#32;13624,&#32;11781,&#32;9718,&#32;8304,&#32;17737,&#32;12200,&#32;20816,&#32;7330,&#32;7532,&#32;6117,&#32;4735,&#32;4488,&#32;2599,&#32;3355,&#32;7773,&#32;22186,&#32;27895,&#32;9742,&#32;726,&#32;3330,&#32;0,&#32;2042],
<anchor xml:id="_clustering_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;[15056,&#32;25994,&#32;19589,&#32;16743,&#32;44198,&#32;13078,&#32;14967,&#32;7552,&#32;10422,&#32;14935,&#32;11891,&#32;14002,&#32;13225,&#32;10671,&#32;9475,&#32;10633,&#32;5084,&#32;20315,&#32;11866,&#32;9802,&#32;7682,&#32;6471,&#32;15720,&#32;10674,&#32;18908,&#32;6204,&#32;6000,&#32;5066,&#32;3039,&#32;3721,&#32;3496,&#32;4772,&#32;8614,&#32;23805,&#32;29519,&#32;11614,&#32;2749,&#32;5313,&#32;2042,&#32;0],
<anchor xml:id="_clustering_8py_source_1l00068"/>00068 &#32;]&#32;<emphasis role="comment">#&#32;yapf:&#32;disable</emphasis>
<anchor xml:id="_clustering_8py_source_1l00069"/>00069 
<anchor xml:id="_clustering_8py_source_1l00070"/>00070 <emphasis role="comment">#&#32;increase&#32;matrix&#32;from&#32;40&#32;to&#32;200&#32;cities</emphasis>
<anchor xml:id="_clustering_8py_source_1l00071"/><link linkend="_namespaceexamples_1_1clustering_1a85ceb44b790fbcebb039824f122ca84b">00071</link> repeat&#32;=&#32;5
<anchor xml:id="_clustering_8py_source_1l00072"/>00072 distance_matrix&#32;=&#32;np.array(distance_matrix)
<anchor xml:id="_clustering_8py_source_1l00073"/>00073 distance_matrix&#32;=&#32;np.repeat(distance_matrix,&#32;repeat,&#32;0)
<anchor xml:id="_clustering_8py_source_1l00074"/>00074 distance_matrix&#32;=&#32;np.repeat(distance_matrix,&#32;repeat,&#32;1)
<anchor xml:id="_clustering_8py_source_1l00075"/>00075 
<anchor xml:id="_clustering_8py_source_1l00076"/><link linkend="_namespaceexamples_1_1clustering_1a6db539b92ada28d4d19bff9faef164e1">00076</link> num_nodes&#32;=&#32;len(distance_matrix)
<anchor xml:id="_clustering_8py_source_1l00077"/>00077 
<anchor xml:id="_clustering_8py_source_1l00078"/>00078 <emphasis role="comment">#&#32;Number&#32;of&#32;groups&#32;to&#32;split&#32;the&#32;nodes,&#32;must&#32;divide&#32;num_nodes.</emphasis>
<anchor xml:id="_clustering_8py_source_1l00079"/><link linkend="_namespaceexamples_1_1clustering_1a8a1cd579f497af72e82d3bc9795622e4">00079</link> num_groups&#32;=&#32;4
<anchor xml:id="_clustering_8py_source_1l00080"/><link linkend="_namespaceexamples_1_1clustering_1a8d19357740cd283ce14597219d2a193f">00080</link> group_size&#32;=&#32;num_nodes&#32;//&#32;num_groups
<anchor xml:id="_clustering_8py_source_1l00081"/>00081 
<anchor xml:id="_clustering_8py_source_1l00082"/>00082 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_clustering_8py_source_1l00083"/><link linkend="_namespaceexamples_1_1clustering_1a2b0696d94d5bb65cab882dc62228498a">00083</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1clustering_1a2b0696d94d5bb65cab882dc62228498a">sum_distance</link>(s):
<anchor xml:id="_clustering_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;dist&#32;=&#32;0
<anchor xml:id="_clustering_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;g&#32;=&#32;np.empty((num_groups,&#32;group_size),&#32;dtype=numba.int32)
<anchor xml:id="_clustering_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num_groups):
<anchor xml:id="_clustering_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g[i]&#32;=&#32;s[i*group_size:(i+1)*group_size]
<anchor xml:id="_clustering_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num_groups):
<anchor xml:id="_clustering_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;v&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(group_size):
<anchor xml:id="_clustering_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;w&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(group_size):
<anchor xml:id="_clustering_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dist&#32;+=&#32;distance_matrix[g[i,v],g[i,w]]
<anchor xml:id="_clustering_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dist
<anchor xml:id="_clustering_8py_source_1l00093"/>00093 
<anchor xml:id="_clustering_8py_source_1l00094"/><link linkend="_namespaceexamples_1_1clustering_1a3abfba0cdea4b88b27ef19171a4e8179">00094</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1clustering_1a3abfba0cdea4b88b27ef19171a4e8179">unique</link>(x):&#32;&#32;&#32;&#32;
<anchor xml:id="_clustering_8py_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;np.argsort(x)
<anchor xml:id="_clustering_8py_source_1l00096"/>00096 
<anchor xml:id="_clustering_8py_source_1l00097"/><link linkend="_namespaceexamples_1_1clustering_1a14d4f9f604e631d0140dffffb4f2cae6">00097</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1clustering_1a14d4f9f604e631d0140dffffb4f2cae6">fitness</link>(x):
<anchor xml:id="_clustering_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceexamples_1_1clustering_1a2b0696d94d5bb65cab882dc62228498a">sum_distance</link>(<link linkend="_namespaceexamples_1_1clustering_1a3abfba0cdea4b88b27ef19171a4e8179">unique</link>(x))
<anchor xml:id="_clustering_8py_source_1l00099"/>00099 
<anchor xml:id="_clustering_8py_source_1l00100"/><link linkend="_namespaceexamples_1_1clustering_1a2e4522195ee18b33c6e344d71e0ed39d">00100</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1clustering_1a2e4522195ee18b33c6e344d71e0ed39d">show</link>(s):
<anchor xml:id="_clustering_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;g&#32;=&#32;np.empty((num_groups,group_size),&#32;dtype=int)
<anchor xml:id="_clustering_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num_groups):
<anchor xml:id="_clustering_8py_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g[i]&#32;=&#32;s[i*group_size:(i+1)*group_size]
<anchor xml:id="_clustering_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;print(g,&#32;<link linkend="_namespaceexamples_1_1clustering_1a2b0696d94d5bb65cab882dc62228498a">sum_distance</link>(s))
<anchor xml:id="_clustering_8py_source_1l00105"/>00105 
<anchor xml:id="_clustering_8py_source_1l00106"/><link linkend="_namespaceexamples_1_1clustering_1a8de29e7cf2101e2d46966e6af4940e5f">00106</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1clustering_1a8de29e7cf2101e2d46966e6af4940e5f">opt</link>():&#32;&#32;&#32;&#32;
<anchor xml:id="_clustering_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&apos;Num&#32;nodes&#32;=&apos;</emphasis>,&#32;num_nodes)
<anchor xml:id="_clustering_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;res&#32;=&#32;retry.minimize(<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">wrapper</link>(fitness),&#32;
<anchor xml:id="_clustering_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bounds([0]*num_nodes,&#32;[1]*num_nodes),&#32;
<anchor xml:id="_clustering_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optimizer=<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(500000,&#32;stall_criterion&#32;=&#32;3),&#32;
<anchor xml:id="_clustering_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries=32)
<anchor xml:id="_clustering_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1clustering_1a2e4522195ee18b33c6e344d71e0ed39d">show</link>(<link linkend="_namespaceexamples_1_1clustering_1a3abfba0cdea4b88b27ef19171a4e8179">unique</link>(res.x))
<anchor xml:id="_clustering_8py_source_1l00113"/>00113 
<anchor xml:id="_clustering_8py_source_1l00114"/>00114 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_clustering_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1clustering_1a8de29e7cf2101e2d46966e6af4940e5f">opt</link>()
<anchor xml:id="_clustering_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_clustering_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;
</programlisting></section>
