<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_quantumcomm_8py_source" xml:lang="en-US">
<title>quantumcomm.py</title>
<indexterm><primary>examples/esa2/quantumcomm.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_quantumcomm_8py_source_1l00001"/><link linkend="_namespacequantumcomm">00001</link> <emphasis role="comment">#&#32;See&#32;original&#32;code&#32;at</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00002"/>00002 <emphasis role="comment">#&#32;https://optimize.esa.int/challenge/spoc-2-quantum-communications-constellations/About</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;https://optimize.esa.int/challenge/spoc-2-quantum-communications-constellations/p/quantum-communications-constellations</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00005"/>00005 <emphasis role="comment">#&#32;Changes:&#32;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;-&#32;Factor&#32;30&#32;speedup&#32;using&#32;numba&#32;and&#32;igraph</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00007"/>00007 <emphasis role="comment">#&#32;-&#32;Added&#32;competitive&#32;algorithms</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00008"/>00008 <emphasis role="comment">#&#32;-&#32;See&#32;corresponding&#32;tutorial&#32;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00009"/>00009 <emphasis role="comment">#&#32;&#32;&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/ESAChallenge.adoc</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00010"/>00010 
<anchor xml:id="_quantumcomm_8py_source_1l00011"/>00011 <emphasis role="comment">#&#32;Requires&#32;pykep&#32;which&#32;needs&#32;python&#32;3.8,&#32;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00012"/>00012 <emphasis role="comment">#&#32;Create&#32;an&#32;python&#32;3.8&#32;environment:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00013"/>00013 
<anchor xml:id="_quantumcomm_8py_source_1l00014"/>00014 <emphasis role="comment">#&#32;mamba&#32;create&#32;-n&#32;env38&#32;python=3.8</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00015"/>00015 <emphasis role="comment">#&#32;conda&#32;activate&#32;env38</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00016"/>00016 
<anchor xml:id="_quantumcomm_8py_source_1l00017"/>00017 <emphasis role="comment">#&#32;Install&#32;dependencies:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00018"/>00018 
<anchor xml:id="_quantumcomm_8py_source_1l00019"/>00019 <emphasis role="comment">#&#32;mamba&#32;install&#32;pykep</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00020"/>00020 <emphasis role="comment">#&#32;mamba&#32;install&#32;pygmo</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00021"/>00021 <emphasis role="comment">#&#32;pip&#32;install&#32;networkx</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00022"/>00022 <emphasis role="comment">#&#32;pip&#32;install&#32;sgp4</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00023"/>00023 <emphasis role="comment">#&#32;pip&#32;install&#32;seaborn</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00024"/>00024 <emphasis role="comment">#&#32;pip&#32;install&#32;matplotlib</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00025"/>00025 <emphasis role="comment">#&#32;pip&#32;install&#32;igraph</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00026"/>00026 <emphasis role="comment">#&#32;pip&#32;install&#32;pymoo</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00027"/>00027 
<anchor xml:id="_quantumcomm_8py_source_1l00028"/>00028 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00029"/>00029 
<anchor xml:id="_quantumcomm_8py_source_1l00030"/>00030 <emphasis role="comment">#&#32;Basic&#32;imports</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00031"/>00031 <emphasis role="keyword">import</emphasis>&#32;pykep&#32;<emphasis role="keyword">as</emphasis>&#32;pk
<anchor xml:id="_quantumcomm_8py_source_1l00032"/>00032 <emphasis role="keyword">import</emphasis>&#32;pygmo&#32;<emphasis role="keyword">as</emphasis>&#32;pg
<anchor xml:id="_quantumcomm_8py_source_1l00033"/>00033 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_quantumcomm_8py_source_1l00034"/>00034 <emphasis role="keyword">import</emphasis>&#32;scipy
<anchor xml:id="_quantumcomm_8py_source_1l00035"/>00035 <emphasis role="keyword">import</emphasis>&#32;os,&#32;time
<anchor xml:id="_quantumcomm_8py_source_1l00036"/>00036 <emphasis role="keyword">from</emphasis>&#32;matplotlib&#32;<emphasis role="keyword">import</emphasis>&#32;pyplot&#32;<emphasis role="keyword">as</emphasis>&#32;plt
<anchor xml:id="_quantumcomm_8py_source_1l00037"/>00037 
<anchor xml:id="_quantumcomm_8py_source_1l00038"/>00038 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00039"/>00039 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_quantumcomm_8py_source_1l00040"/>00040 
<anchor xml:id="_quantumcomm_8py_source_1l00041"/>00041 logger.remove()
<anchor xml:id="_quantumcomm_8py_source_1l00042"/><link linkend="_namespacequantumcomm_1aa02045840efca4723c7830b9d2478fea">00042</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_quantumcomm_8py_source_1l00043"/>00043 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_quantumcomm_8py_source_1l00044"/>00044 
<anchor xml:id="_quantumcomm_8py_source_1l00045"/>00045 <emphasis role="keyword">import</emphasis>&#32;seaborn&#32;<emphasis role="keyword">as</emphasis>&#32;sns
<anchor xml:id="_quantumcomm_8py_source_1l00046"/>00046 <emphasis role="comment">#&#32;SGP4&#32;-&#32;we&#32;use&#32;SPG4&#32;to&#32;propagate&#32;orbits&#32;around&#32;New&#32;Mars&#32;as&#32;a&#32;proxy</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00047"/>00047 <emphasis role="comment">#&#32;for&#32;a&#32;plausible&#32;orbital&#32;positions&#32;propagator&#32;around&#32;a&#32;habitable&#32;planet</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00048"/>00048 <emphasis role="keyword">from</emphasis>&#32;sgp4.api&#32;<emphasis role="keyword">import</emphasis>&#32;Satrec,&#32;SatrecArray
<anchor xml:id="_quantumcomm_8py_source_1l00049"/>00049 <emphasis role="keyword">from</emphasis>&#32;sgp4.api&#32;<emphasis role="keyword">import</emphasis>&#32;WGS72
<anchor xml:id="_quantumcomm_8py_source_1l00050"/>00050 
<anchor xml:id="_quantumcomm_8py_source_1l00051"/>00051 <emphasis role="comment">#&#32;Networkx</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00052"/>00052 <emphasis role="keyword">import</emphasis>&#32;igraph&#32;<emphasis role="keyword">as</emphasis>&#32;ig&#32;<emphasis role="comment">#&#32;for&#32;speed</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00053"/>00053 <emphasis role="keyword">import</emphasis>&#32;networkx&#32;<emphasis role="keyword">as</emphasis>&#32;nx
<anchor xml:id="_quantumcomm_8py_source_1l00054"/>00054 
<anchor xml:id="_quantumcomm_8py_source_1l00055"/>00055 <emphasis role="comment">#&#32;Static&#32;data</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00056"/>00056 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacequantumcomm_1a7c43375b014085ada1580778d0deb20c">get_mothership_satellites</link>():
<anchor xml:id="_quantumcomm_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;Construct&#32;array&#32;of&#32;mothership&#32;orbital&#32;elements</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00058"/>00058 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;(the&#32;TLEs&#32;of&#32;actual&#32;Earth-orbiting&#32;satellites&#32;below&#32;are&#32;used&#32;as&#32;a&#32;proxy&#32;for</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00059"/>00059 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;plausible&#32;orbital&#32;dynamics&#32;around&#32;a&#32;habitable&#32;planet)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00060"/><link linkend="_namespacequantumcomm_1a7c43375b014085ada1580778d0deb20c">00060</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;mothership_tles&#32;=&#32;[
<anchor xml:id="_quantumcomm_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[
<anchor xml:id="_quantumcomm_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1&#32;39634U&#32;14016A&#32;&#32;&#32;22349.82483685&#32;&#32;.00000056&#32;&#32;00000-0&#32;&#32;21508-4&#32;0&#32;&#32;9992&quot;</emphasis>,
<anchor xml:id="_quantumcomm_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2&#32;39634&#32;&#32;98.1813&#32;354.7934&#32;0001199&#32;&#32;83.3324&#32;276.7993&#32;14.59201191463475&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;],
<anchor xml:id="_quantumcomm_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[
<anchor xml:id="_quantumcomm_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1&#32;26400U&#32;00037A&#32;&#32;&#32;00208.84261022&#32;+.00077745&#32;+00000-0&#32;+00000-0&#32;0&#32;&#32;9995&quot;</emphasis>,
<anchor xml:id="_quantumcomm_8py_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2&#32;26400&#32;051.5790&#32;297.6001&#32;0012791&#32;171.3037&#32;188.7763&#32;15.69818870002328&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;],
<anchor xml:id="_quantumcomm_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[
<anchor xml:id="_quantumcomm_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1&#32;36508U&#32;10013A&#32;&#32;&#32;22349.92638064&#32;&#32;.00000262&#32;&#32;00000-0&#32;&#32;64328-4&#32;0&#32;&#32;9992&quot;</emphasis>,
<anchor xml:id="_quantumcomm_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2&#32;36508&#32;&#32;92.0240&#32;328.0627&#32;0004726&#32;&#32;21.3451&#32;338.7953&#32;14.51905975672463&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;],
<anchor xml:id="_quantumcomm_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[
<anchor xml:id="_quantumcomm_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1&#32;40128U&#32;14050A&#32;&#32;&#32;22349.31276420&#32;-.00000077&#32;&#32;00000-0&#32;&#32;00000-0&#32;0&#32;&#32;9995&quot;</emphasis>,
<anchor xml:id="_quantumcomm_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2&#32;40128&#32;&#32;50.1564&#32;325.0733&#32;1614819&#32;130.5958&#32;244.6527&#32;&#32;1.85519534&#32;54574&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;],
<anchor xml:id="_quantumcomm_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[
<anchor xml:id="_quantumcomm_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1&#32;49810U&#32;21116B&#32;&#32;&#32;23065.71091236&#32;-.00000083&#32;&#32;00000+0&#32;&#32;00000+0&#32;0&#32;&#32;9998&quot;</emphasis>,
<anchor xml:id="_quantumcomm_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2&#32;49810&#32;&#32;57.2480&#32;&#32;13.9949&#32;0001242&#32;301.4399&#32;239.8890&#32;&#32;1.70475839&#32;&#32;7777&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;],
<anchor xml:id="_quantumcomm_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[
<anchor xml:id="_quantumcomm_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1&#32;44878U&#32;19092F&#32;&#32;&#32;22349.75758852&#32;&#32;.00015493&#32;&#32;00000-0&#32;&#32;00000-0&#32;0&#32;&#32;9998&quot;</emphasis>,
<anchor xml:id="_quantumcomm_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2&#32;44878&#32;&#32;97.4767&#32;172.6133&#32;0012815&#32;&#32;68.6990&#32;291.5614&#32;15.23910904165768&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;],
<anchor xml:id="_quantumcomm_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[
<anchor xml:id="_quantumcomm_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1&#32;04382U&#32;70034A&#32;&#32;&#32;22349.88472104&#32;&#32;.00001138&#32;&#32;00000-0&#32;&#32;18306-3&#32;0&#32;&#32;9999&quot;</emphasis>,
<anchor xml:id="_quantumcomm_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2&#32;04382&#32;&#32;68.4200&#32;140.9159&#32;1043234&#32;&#32;48.2283&#32;320.3286&#32;13.08911192477908&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]
<anchor xml:id="_quantumcomm_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;]
<anchor xml:id="_quantumcomm_8py_source_1l00091"/>00091 
<anchor xml:id="_quantumcomm_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Assembling&#32;the&#32;list&#32;of&#32;Satrec&#32;motherships</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;motherships&#32;=&#32;[]
<anchor xml:id="_quantumcomm_8py_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;tle&#32;<emphasis role="keywordflow">in</emphasis>&#32;mothership_tles:
<anchor xml:id="_quantumcomm_8py_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;motherships.append(Satrec.twoline2rv(tle[0],&#32;tle[1]))
<anchor xml:id="_quantumcomm_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;motherships
<anchor xml:id="_quantumcomm_8py_source_1l00097"/>00097 
<anchor xml:id="_quantumcomm_8py_source_1l00098"/>00098 <emphasis role="keyword">from</emphasis>&#32;numba&#32;<emphasis role="keyword">import</emphasis>&#32;njit
<anchor xml:id="_quantumcomm_8py_source_1l00099"/>00099 
<anchor xml:id="_quantumcomm_8py_source_1l00100"/>00100 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00101"/>00101 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacequantumcomm_1adeb3d6f34e9ce9bde81d145e0cb4b1c6">line_of_sight</link>(r1,r2):
<anchor xml:id="_quantumcomm_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;Given&#32;two&#32;position&#32;vectors&#32;returns&#32;the&#32;distance&#32;of&#32;the&#32;line&#32;of&#32;sight&#32;to&#32;the&#32;origin</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00103"/>00103 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00104"/>00104 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00105"/>00105 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r1&#32;(numpy&#32;array):&#32;first&#32;point</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00106"/>00106 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r2&#32;(numpy&#32;array):&#32;second&#32;point</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00107"/><link linkend="_namespacequantumcomm_1adeb3d6f34e9ce9bde81d145e0cb4b1c6">00107</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;denom&#32;=&#32;np.linalg.norm(r2-r1)
<anchor xml:id="_quantumcomm_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;denom&#32;&lt;&#32;1e-6:
<anchor xml:id="_quantumcomm_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;if&#32;r1&#32;~=&#32;r2,&#32;it&#32;will&#32;return&#32;the&#32;norm&#32;of&#32;r1</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;np.linalg.norm(r1)
<anchor xml:id="_quantumcomm_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_quantumcomm_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r21&#32;=&#32;(r2-r1)&#32;/&#32;denom
<anchor xml:id="_quantumcomm_8py_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h1&#32;=&#32;np.dot(r1,r21)
<anchor xml:id="_quantumcomm_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg&#32;=&#32;np.linalg.norm(r1)**2&#32;-&#32;h1**2
<anchor xml:id="_quantumcomm_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;We&#32;check&#32;for&#32;a&#32;positive&#32;arg&#32;in&#32;case&#32;r1&#32;and&#32;r2&#32;are&#32;near&#32;collinearity</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;np.sqrt(arg)&#32;<emphasis role="keywordflow">if</emphasis>&#32;arg&#32;&gt;&#32;1e-6&#32;<emphasis role="keywordflow">else</emphasis>&#32;0.0
<anchor xml:id="_quantumcomm_8py_source_1l00118"/>00118 
<anchor xml:id="_quantumcomm_8py_source_1l00119"/>00119 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00120"/>00120 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacequantumcomm_1a32214ea35bfdc5ac32988510e98f5643">zenith_angle</link>(src,&#32;dst):
<anchor xml:id="_quantumcomm_8py_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;Computes&#32;the&#32;cosine&#32;of&#32;the&#32;zenith&#32;angle&#32;(theta_z)&#32;of&#32;the&#32;LOS&#32;between&#32;source&#32;and&#32;destination&#32;node</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00122"/>00122 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00123"/>00123 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00124"/>00124 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src&#32;(numpy&#32;array,&#32;N_r&#32;x&#32;3):&#32;rover&#32;x,&#32;y,&#32;z&#32;positions</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00125"/>00125 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst&#32;(numpy&#32;array,&#32;N_s&#32;x&#32;3):&#32;mothership&#32;x,&#32;y,&#32;z&#32;positions</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00126"/>00126 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00127"/>00127 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00128"/>00128 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;cosine&#32;of&#32;the&#32;zenith&#32;angle</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00129"/><link linkend="_namespacequantumcomm_1a32214ea35bfdc5ac32988510e98f5643">00129</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00130"/>00130 &#32;&#32;&#32;&#32;dpos&#32;=&#32;dst&#32;-&#32;src
<anchor xml:id="_quantumcomm_8py_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;np.linalg.norm(dpos)&#32;&lt;&#32;1e-6:
<anchor xml:id="_quantumcomm_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cos_theta_z&#32;=&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l00133"/>00133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_quantumcomm_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cos_theta_z&#32;=&#32;np.dot(dpos,&#32;src)&#32;/&#32;(np.linalg.norm(dpos)&#32;*&#32;np.linalg.norm(src))
<anchor xml:id="_quantumcomm_8py_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cos_theta_z
<anchor xml:id="_quantumcomm_8py_source_1l00136"/>00136 
<anchor xml:id="_quantumcomm_8py_source_1l00137"/>00137 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00138"/>00138 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacequantumcomm_1af0f5b86687bc9356f53b8e0fcd826c2d">qkd_metric</link>(idx,&#32;src,&#32;dst,&#32;cos_theta_z,&#32;eta,&#32;eps_z,&#32;n_rovers):
<anchor xml:id="_quantumcomm_8py_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;Computes&#32;the&#32;edge&#32;weight&#32;according&#32;to&#32;QKD&#32;probabilities</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00140"/>00140 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00141"/>00141 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00142"/>00142 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;idx&#32;(int):&#32;index&#32;of&#32;node&#32;in&#32;the&#32;graph</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00143"/>00143 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src&#32;(numpy&#32;array,&#32;1x3):&#32;position&#32;of&#32;source&#32;node</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00144"/>00144 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst&#32;(numpy&#32;array,&#32;1x3):&#32;position&#32;of&#32;destination&#32;node</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00145"/>00145 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cos_theta_z&#32;(float):&#32;cosine&#32;of&#32;the&#32;zenith&#32;angle&#32;of&#32;qkd&#32;link</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00146"/>00146 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eta&#32;(int):&#32;satellite&#32;quality&#32;indicator&#32;for&#32;corresponding&#32;constellation</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00147"/>00147 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00148"/>00148 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00149"/>00149 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;edge&#32;weight</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00150"/>00150 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;communications&#32;link&#32;distance&#32;between&#32;src&#32;and&#32;dst</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00151"/><link linkend="_namespacequantumcomm_1af0f5b86687bc9356f53b8e0fcd826c2d">00151</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00152"/>00152 &#32;&#32;&#32;&#32;edge_weight&#32;=&#32;-np.log(eta)&#32;<emphasis role="comment">#&#32;constellation&#32;quality&#32;score</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00153"/>00153 &#32;&#32;&#32;&#32;d_link&#32;=&#32;np.linalg.norm(src&#32;-&#32;dst)&#32;<emphasis role="comment">#&#32;distance&#32;of&#32;communications&#32;link</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00154"/>00154 &#32;&#32;&#32;&#32;edge_weight&#32;+=&#32;2&#32;*&#32;np.log(d_link)&#32;<emphasis role="comment">#&#32;final&#32;edge&#32;weight</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;edge_weight&#32;&lt;&#32;0:
<anchor xml:id="_quantumcomm_8py_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Safeguard:&#32;whenever&#32;this&#32;happens,&#32;the&#32;collision-avoidance&#32;constraint&#32;is</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;also&#32;not&#32;satisfied.&#32;Nevertheless,&#32;we&#32;must&#32;return&#32;a&#32;value&#32;for&#32;the&#32;edge&#32;weight</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;to&#32;ensure&#32;that&#32;the&#32;fitness&#32;does&#32;not&#32;throw&#32;(a&#32;negative&#32;valued&#32;edge&#32;would&#32;also</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;imply&#32;the&#32;non-existence&#32;of&#32;a&#32;shortest&#32;path)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_weight&#32;=&#32;1e3
<anchor xml:id="_quantumcomm_8py_source_1l00161"/>00161 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;idx&#32;&lt;=&#32;n_rovers:
<anchor xml:id="_quantumcomm_8py_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;cos_theta_z&#32;&gt;=&#32;eps_z:&#32;<emphasis role="comment">#&#32;Apply&#32;max&#32;zenith&#32;angle&#32;constraint&#32;to&#32;mothership-rover&#32;link</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_weight&#32;+=&#32;1.0&#32;/&#32;np.sin(np.pi&#32;/&#32;2&#32;-&#32;np.arccos(cos_theta_z))
<anchor xml:id="_quantumcomm_8py_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_quantumcomm_8py_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_weight&#32;=&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;edge_weight,&#32;d_link
<anchor xml:id="_quantumcomm_8py_source_1l00168"/>00168 
<anchor xml:id="_quantumcomm_8py_source_1l00169"/>00169 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00170"/><link linkend="_namespacequantumcomm_1a0b9a5d09cf8b8062250d0631d392b9e4">00170</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacequantumcomm_1a0b9a5d09cf8b8062250d0631d392b9e4">get_adjmatrix</link>(pos,&#32;ep_idx,&#32;eta,&#32;num_w1_sats,&#32;LOS,&#32;N,&#32;eps_z,&#32;n_rovers):
<anchor xml:id="_quantumcomm_8py_source_1l00171"/>00171 &#32;&#32;&#32;&#32;adjmatrix&#32;=&#32;np.zeros((N,&#32;N))
<anchor xml:id="_quantumcomm_8py_source_1l00172"/>00172 &#32;&#32;&#32;&#32;d_min&#32;=&#32;np.inf
<anchor xml:id="_quantumcomm_8py_source_1l00173"/>00173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(N):
<anchor xml:id="_quantumcomm_8py_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;j&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(i):
<anchor xml:id="_quantumcomm_8py_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Ensure&#32;there&#32;is&#32;LOS</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;los&#32;=&#32;<link linkend="_namespacequantumcomm_1adeb3d6f34e9ce9bde81d145e0cb4b1c6">line_of_sight</link>(pos[i,&#32;ep_idx,&#32;:],&#32;pos[j,&#32;ep_idx,&#32;:])
<anchor xml:id="_quantumcomm_8py_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cos_theta_z&#32;=&#32;<link linkend="_namespacequantumcomm_1a32214ea35bfdc5ac32988510e98f5643">zenith_angle</link>(pos[i,&#32;ep_idx,&#32;:],&#32;pos[j,&#32;ep_idx,&#32;:])
<anchor xml:id="_quantumcomm_8py_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;los&#32;&gt;=&#32;LOS&#32;<emphasis role="keywordflow">or</emphasis>&#32;cos_theta_z&#32;&gt;&#32;0:
<anchor xml:id="_quantumcomm_8py_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Eta&#32;based&#32;on&#32;j&#32;because&#32;it&#32;is&#32;the&#32;destination&#32;satellite&#32;in&#32;the&#32;link</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eta_j&#32;=&#32;eta[0]&#32;<emphasis role="keywordflow">if</emphasis>&#32;j&#32;&lt;&#32;num_w1_sats&#32;<emphasis role="keywordflow">else</emphasis>&#32;eta[1]
<anchor xml:id="_quantumcomm_8py_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjmatrix[i,j],&#32;d_link&#32;=&#32;\
<anchor xml:id="_quantumcomm_8py_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacequantumcomm_1af0f5b86687bc9356f53b8e0fcd826c2d">qkd_metric</link>(N-i,&#32;pos[i,&#32;ep_idx,&#32;:],&#32;pos[j,&#32;ep_idx,&#32;:],&#32;cos_theta_z,&#32;eta_j,&#32;eps_z,&#32;n_rovers)
<anchor xml:id="_quantumcomm_8py_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;d_link&#32;&lt;&#32;d_min:
<anchor xml:id="_quantumcomm_8py_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d_min&#32;=&#32;d_link
<anchor xml:id="_quantumcomm_8py_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjmatrix[j,i]&#32;=&#32;adjmatrix[i,j]
<anchor xml:id="_quantumcomm_8py_source_1l00186"/>00186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;adjmatrix,&#32;d_min
<anchor xml:id="_quantumcomm_8py_source_1l00187"/>00187 
<anchor xml:id="_quantumcomm_8py_source_1l00188"/>00188 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00189"/>00189 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacequantumcomm_1ab6b2e04e125b00253e56eea291fb11a5">construct_rover_pos</link>(lambda0,&#32;phi0,&#32;n_rovers,&#32;jds,&#32;R_p,&#32;w_p):
<anchor xml:id="_quantumcomm_8py_source_1l00190"/>00190 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;Computes&#32;the&#32;position&#32;of&#32;the&#32;rovers&#32;at&#32;time&#32;t&#32;based&#32;on&#32;the&#32;initial&#32;latitude&#32;and&#32;longitude</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00191"/>00191 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00192"/>00192 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00193"/>00193 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lambda0&#32;(float,&#32;N_r&#32;x&#32;1):&#32;initial&#32;latitudes&#32;of&#32;the&#32;rovers</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00194"/>00194 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;phi0&#32;(float,&#32;N_r&#32;x&#32;1):&#32;initial&#32;longitudes&#32;of&#32;the&#32;rovers</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00195"/>00195 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00196"/>00196 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00197"/>00197 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float,&#32;n_rovers&#32;x&#32;n_epochs&#32;x&#32;3:&#32;rover&#32;x,&#32;y,&#32;z&#32;positions</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00198"/><link linkend="_namespacequantumcomm_1ab6b2e04e125b00253e56eea291fb11a5">00198</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00199"/>00199 &#32;&#32;&#32;&#32;pos_r&#32;=&#32;np.zeros((n_rovers,&#32;jds.shape[0],&#32;3))
<anchor xml:id="_quantumcomm_8py_source_1l00200"/>00200 &#32;&#32;&#32;&#32;time_range&#32;=&#32;(jds&#32;-&#32;jds[0])&#32;*&#32;24&#32;*&#32;3600&#32;<emphasis role="comment">#&#32;in&#32;seconds</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i,&#32;t&#32;<emphasis role="keywordflow">in</emphasis>&#32;enumerate(time_range):
<anchor xml:id="_quantumcomm_8py_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_r[:,&#32;i,&#32;0]&#32;=&#32;R_p&#32;*&#32;np.cos(lambda0)&#32;*&#32;np.cos(phi0&#32;+&#32;w_p&#32;*&#32;t)&#32;<emphasis role="comment">#&#32;x</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_r[:,&#32;i,&#32;1]&#32;=&#32;R_p&#32;*&#32;np.cos(lambda0)&#32;*&#32;np.sin(phi0&#32;+&#32;w_p&#32;*&#32;t)&#32;<emphasis role="comment">#&#32;y</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_r[:,&#32;i,&#32;2]&#32;=&#32;R_p&#32;*&#32;np.sin(lambda0)&#32;<emphasis role="comment">#&#32;z</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00205"/>00205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos_r
<anchor xml:id="_quantumcomm_8py_source_1l00206"/>00206 
<anchor xml:id="_quantumcomm_8py_source_1l00207"/>00207 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classquantumcomm_1_1constellation__udp">constellation_udp</link>:
<anchor xml:id="_quantumcomm_8py_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;A&#32;Pygmo&#32;compatible&#32;UDP&#32;(User&#32;Defined&#32;Problem)&#32;representing&#32;the&#32;constellation&#32;design&#32;problem&#32;for&#32;SpOC&#32;2023.</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00209"/>00209 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00210"/>00210 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Two&#32;Walker&#32;constellations&#32;are&#32;defined&#32;in&#32;a&#32;mixint&#32;chromosome:</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00211"/>00211 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;[a1,ei,i1,w1,eta1]&#32;+&#32;[a2,e2,i2,w2,eta2]&#32;+&#32;[S1,P1,F1]&#32;+&#32;[S2,P2,F2]&#32;+&#32;[r1,r2,r3,r4]</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00212"/>00212 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00213"/>00213 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;The&#32;constellations&#32;must&#32;relay&#32;information&#32;between&#32;7&#32;motherships&#32;in&#32;orbit&#32;and&#32;4&#32;rovers&#32;on&#32;the&#32;surface&#32;of&#32;New&#32;Mars</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00214"/>00214 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00215"/>00215 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>__init__(self):
<anchor xml:id="_quantumcomm_8py_source_1l00216"/><link linkend="_classquantumcomm_1_1constellation__udp">00216</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;Constructor&quot;&quot;&quot;</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00217"/>00217 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00218"/><link linkend="_classquantumcomm_1_1constellation__udp_1a8804eea0d2eaffcea2926f6780aafdf8">00218</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Define&#32;the&#32;time&#32;grid&#32;over&#32;which&#32;to&#32;optimize&#32;the&#32;communications&#32;network</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00219"/>00219 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self._t0&#32;=&#32;10000&#32;#&#32;starting&#32;epoch&#32;in&#32;mjd2000</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00220"/>00220 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.n_epochs&#32;=&#32;11&#32;#&#32;number&#32;of&#32;epochs&#32;in&#32;time&#32;grid&#32;to&#32;consider</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00221"/><link linkend="_classquantumcomm_1_1constellation__udp_1ad924507a2abeb0b7bb5e89d5f925b559">00221</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self._duration&#32;=&#32;10&#32;#&#32;difference&#32;between&#32;the&#32;first&#32;and&#32;last&#32;epoch&#32;considered&#32;in&#32;years</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00222"/><link linkend="_classquantumcomm_1_1constellation__udp_1a9d785ce76d7893987af5b9439f8dbf16">00222</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jd0,&#32;fr&#32;=&#32;pk.epoch(self._t0,&#32;&apos;mjd2000&apos;).jd,&#32;0.0&#32;#&#32;reference&#32;Julian&#32;date</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00223"/><link linkend="_classquantumcomm_1_1constellation__udp_1af578ab2b4d0d76d74336fd7756fa33bd">00223</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.jds&#32;=&#32;np.linspace(jd0,&#32;jd0&#32;+&#32;self._duration&#32;*&#32;365.25,&#32;self.n_epochs)&#32;#&#32;time&#32;grid&#32;in&#32;JD</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00224"/>00224 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.frs&#32;=&#32;self.jds&#32;*&#32;fr&#32;#&#32;date&#32;fractions&#32;(defaults&#32;to&#32;0)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00225"/><link linkend="_classquantumcomm_1_1constellation__udp_1a6c229d5e6f94a3e1d7847a5cc85a3629">00225</link> <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00226"/><link linkend="_classquantumcomm_1_1constellation__udp_1a9e02bb6ac8e8e0aed1249640e1ea4a5d">00226</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Reference&#32;epoch&#32;for&#32;SGP4&#32;is&#32;1949&#32;December&#32;31&#32;00:00&#32;UT</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00227"/>00227 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.ep_ref&#32;=&#32;pk.epoch_from_iso_string(&quot;19491231T000000&quot;)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00228"/>00228 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00229"/><link linkend="_classquantumcomm_1_1constellation__udp_1aea71bfcc1860bfebd45edf3f50061450">00229</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;SGP4-ready&#32;mothership&#32;satellites</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00230"/>00230 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mothership_satellites&#32;=&#32;get_mothership_satellites()</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00231"/>00231 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.pos_m&#32;=&#32;self.construct_mothership_pos(SatrecArray(mothership_satellites))</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00232"/>00232 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.n_motherships&#32;=&#32;len(mothership_satellites)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00233"/><link linkend="_classquantumcomm_1_1constellation__udp_1a94f4701662430239b3a0df294b8e5121">00233</link> <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00234"/><link linkend="_classquantumcomm_1_1constellation__udp_1aed45357b9732be28c9301a0da997fbe1">00234</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Latitudes&#32;and&#32;longitudes&#32;of&#32;rovers</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00235"/>00235 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rovers_db_path&#32;=&#32;os.path.join(&quot;.&quot;,&#32;&quot;data&quot;,&#32;&quot;spoc2&quot;,&#32;&quot;constellations&quot;,&#32;&quot;rovers.txt&quot;)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00236"/>00236 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.rovers_db&#32;=&#32;np.loadtxt(rovers_db_path)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00237"/>00237 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.lambdas&#32;=&#32;self.rovers_db[:,&#32;0]&#32;#&#32;latitudes</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00238"/><link linkend="_classquantumcomm_1_1constellation__udp_1aaf595a09122ffe6d5db7ab8bc8fb8888">00238</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.phis&#32;=&#32;self.rovers_db[:,&#32;1]&#32;#&#32;longitudes</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00239"/><link linkend="_classquantumcomm_1_1constellation__udp_1a92b6079745dcc7e51160f9a6f6e40dd7">00239</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self._min_rover_dist&#32;=&#32;3000&#32;#&#32;minimum&#32;inter-rover&#32;distance&#32;(km)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00240"/><link linkend="_classquantumcomm_1_1constellation__udp_1a9a86bb566548f702ddc82c688de151c5">00240</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.n_rovers&#32;=&#32;4</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00241"/><link linkend="_classquantumcomm_1_1constellation__udp_1a8dde60f0189c428a6b1c9b47677b9284">00241</link> <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00242"/><link linkend="_classquantumcomm_1_1constellation__udp_1a1b50811adb76ab085077e2b1e275d851">00242</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Minimum&#32;line-of-sight&#32;parameter&#32;(km)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00243"/>00243 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Radius&#32;amplification&#32;factor:&#32;1.05</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00244"/>00244 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.LOS&#32;=&#32;1.05&#32;*&#32;pk.EARTH_RADIUS&#32;/&#32;1000.0</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00245"/>00245 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Radius&#32;of&#32;the&#32;New-Mars&#32;planet&#32;(km)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00246"/><link linkend="_classquantumcomm_1_1constellation__udp_1adeb6632a7a453441664f79cfcb9a9c2a">00246</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.R_p&#32;=&#32;pk.EARTH_RADIUS&#32;/&#32;1000.0</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00247"/>00247 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Angular&#32;velocity&#32;of&#32;New&#32;Mars&#32;(rad/s)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00248"/><link linkend="_classquantumcomm_1_1constellation__udp_1a9e52ccef528d06e738e4c8479347b334">00248</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.w_p&#32;=&#32;7.29e-5&#32;#&#32;2&#32;*&#32;pi&#32;/&#32;(23&#32;hours&#32;56&#32;minutes&#32;4&#32;seconds)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00249"/>00249 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Threshold&#32;zenith&#32;angle&#32;constraint&#32;for&#32;rover-sat&#32;link&#32;(rad)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00250"/><link linkend="_classquantumcomm_1_1constellation__udp_1a9f5d75bc8ab2658b521fbef7c6ef4475">00250</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self._zenith_angle&#32;=&#32;np.pi&#32;/&#32;3</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00251"/>00251 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.eps_z&#32;=&#32;np.cos(self._zenith_angle)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00252"/><link linkend="_classquantumcomm_1_1constellation__udp_1af928486a95f4c02e8139a82a5856e74d">00252</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Minimum&#32;inter-satellite&#32;distance&#32;(km)</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00253"/><link linkend="_classquantumcomm_1_1constellation__udp_1ab9b87fefd4eca71a6ec905ebc2354244">00253</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self._min_sat_dist&#32;=&#32;50</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00254"/>00254 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00255"/><link linkend="_classquantumcomm_1_1constellation__udp_1a02e82edc599f86967503c01d2d7219f0">00255</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;def&#32;get_bounds(self):</emphasis>
<anchor xml:id="_quantumcomm_8py_source_1l00256"/>00256 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>Get&#32;bounds&#32;for&#32;the&#32;decision&#32;variables.
<anchor xml:id="_quantumcomm_8py_source_1l00257"/>00257 
<anchor xml:id="_quantumcomm_8py_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tuple&#32;of&#32;lists:&#32;bounds&#32;for&#32;the&#32;decision&#32;variables.
<anchor xml:id="_quantumcomm_8py_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lb&#32;=&#32;[1.06,&#32;0.,&#32;0.,&#32;0.,&#32;1.0]&#32;+&#32;[2.0,&#32;0.,&#32;0.,&#32;0.,&#32;1.0]&#32;+&#32;[4,&#32;2,&#32;0]&#32;+&#32;[4,&#32;2,&#32;0]&#32;+&#32;[0,&#32;0,&#32;0,&#32;0]
<anchor xml:id="_quantumcomm_8py_source_1l00262"/><link linkend="_classquantumcomm_1_1constellation__udp_1ae0a95b68653b5337476415c5f69fb960">00262</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ub&#32;=&#32;[1.8,&#32;0.02,&#32;np.pi,&#32;2*np.pi,&#32;1000.0]&#32;+&#32;[3.5,&#32;0.1,&#32;np.pi,&#32;2*np.pi,&#32;1000.0]&#32;+&#32;[10,&#32;10,&#32;9]&#32;+&#32;[10,&#32;10,&#32;9]&#32;+&#32;[99,&#32;99,&#32;99,&#32;99]
<anchor xml:id="_quantumcomm_8py_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;we&#32;adapt&#32;the&#32;boundaries&#32;so&#32;that&#32;they&#32;work&#32;with&#32;a&#32;continuous&#32;optimizer
<anchor xml:id="_quantumcomm_8py_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ub&#32;=&#32;[1.8,&#32;0.02,&#32;np.pi,&#32;2*np.pi,&#32;1000.0]&#32;+&#32;[3.5,&#32;0.1,&#32;np.pi,&#32;2*np.pi,&#32;1000.0]&#32;+&#32;\
<anchor xml:id="_quantumcomm_8py_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[10.9999,&#32;10.9999,&#32;9.9999]&#32;+&#32;[10.9999,&#32;10.9999,&#32;9.9999]&#32;+&#32;[99.9999,&#32;99.9999,&#32;99.9999,&#32;99.9999]
<anchor xml:id="_quantumcomm_8py_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;(lb,&#32;ub)
<anchor xml:id="_quantumcomm_8py_source_1l00267"/>00267 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00268"/>00268 &#32;&#32;&#32;&#32;def&#32;get_ints(self):
<anchor xml:id="_quantumcomm_8py_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;np.array([False]*10&#32;+&#32;[True]*10)
<anchor xml:id="_quantumcomm_8py_source_1l00270"/><link linkend="_classquantumcomm_1_1constellation__udp_1aeaefa471acf6233e861c77385d2e9695">00270</link> 
<anchor xml:id="_quantumcomm_8py_source_1l00271"/>00271 &#32;&#32;&#32;&#32;def&#32;get_nix(self):
<anchor xml:id="_quantumcomm_8py_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Get&#32;number&#32;of&#32;integer&#32;variables.
<anchor xml:id="_quantumcomm_8py_source_1l00273"/>00273 
<anchor xml:id="_quantumcomm_8py_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int:&#32;number&#32;of&#32;integer&#32;variables.
<anchor xml:id="_quantumcomm_8py_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;6&#32;+&#32;4
<anchor xml:id="_quantumcomm_8py_source_1l00278"/><link linkend="_classquantumcomm_1_1constellation__udp_1a3bb518a054083acd70ee7d5e884d22bb">00278</link> 
<anchor xml:id="_quantumcomm_8py_source_1l00279"/>00279 &#32;&#32;&#32;&#32;def&#32;get_nobj(self):
<anchor xml:id="_quantumcomm_8py_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Get&#32;number&#32;of&#32;objectives.
<anchor xml:id="_quantumcomm_8py_source_1l00281"/>00281 
<anchor xml:id="_quantumcomm_8py_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int:&#32;the&#32;number&#32;of&#32;objectives
<anchor xml:id="_quantumcomm_8py_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;2
<anchor xml:id="_quantumcomm_8py_source_1l00286"/><link linkend="_classquantumcomm_1_1constellation__udp_1a37eb35c15c7342a8c31a2f4a0d78c97a">00286</link> &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00287"/>00287 &#32;&#32;&#32;&#32;def&#32;get_nic(self):
<anchor xml:id="_quantumcomm_8py_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Get&#32;number&#32;of&#32;inequality&#32;constraints.
<anchor xml:id="_quantumcomm_8py_source_1l00289"/>00289 
<anchor xml:id="_quantumcomm_8py_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int:&#32;the&#32;number&#32;of&#32;constraints
<anchor xml:id="_quantumcomm_8py_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;2
<anchor xml:id="_quantumcomm_8py_source_1l00294"/><link linkend="_classquantumcomm_1_1constellation__udp_1a14b241afc0f8cc6ce5203fe8de9e4f7e">00294</link> &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00295"/>00295 &#32;&#32;&#32;&#32;def&#32;get_rover_constraint(self,&#32;lambda0,&#32;phi0):
<anchor xml:id="_quantumcomm_8py_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Evaluate&#32;the&#32;rover&#32;constraint&#32;(minimum&#32;distance&#32;between&#32;any&#32;two&#32;rovers)
<anchor xml:id="_quantumcomm_8py_source_1l00297"/>00297 
<anchor xml:id="_quantumcomm_8py_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lambda0&#32;(float,&#32;N_r&#32;x&#32;1):&#32;latitudes&#32;of&#32;the&#32;rovers
<anchor xml:id="_quantumcomm_8py_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;phi0&#32;(float,&#32;N_r&#32;x&#32;1):&#32;longitudes&#32;of&#32;the&#32;rovers
<anchor xml:id="_quantumcomm_8py_source_1l00301"/>00301 
<anchor xml:id="_quantumcomm_8py_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns
<anchor xml:id="_quantumcomm_8py_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;the&#32;difference&#32;between&#32;the&#32;actual&#32;and&#32;allowable&#32;minimum&#32;distance&#32;between&#32;rovers
<anchor xml:id="_quantumcomm_8py_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Compute&#32;rover&#32;positions&#32;on&#32;the&#32;planet
<anchor xml:id="_quantumcomm_8py_source_1l00306"/><link linkend="_classquantumcomm_1_1constellation__udp_1a793f1ab728c23da59e9c59f30396cf73">00306</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;np.zeros((self.n_rovers,&#32;3))
<anchor xml:id="_quantumcomm_8py_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos[:,&#32;0]&#32;=&#32;np.sin(lambda0)&#32;*&#32;np.cos(phi0)
<anchor xml:id="_quantumcomm_8py_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos[:,&#32;1]&#32;=&#32;np.cos(lambda0)&#32;*&#32;np.cos(phi0)
<anchor xml:id="_quantumcomm_8py_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos[:,&#32;2]&#32;=&#32;np.sin(phi0)
<anchor xml:id="_quantumcomm_8py_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;safe_arccos(u,&#32;v):
<anchor xml:id="_quantumcomm_8py_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inner_product&#32;=&#32;np.dot(u,&#32;v)
<anchor xml:id="_quantumcomm_8py_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;inner_product&#32;&gt;&#32;1:
<anchor xml:id="_quantumcomm_8py_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;inner_product&#32;&lt;&#32;-1:
<anchor xml:id="_quantumcomm_8py_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;np.pi
<anchor xml:id="_quantumcomm_8py_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;np.arccos(inner_product)
<anchor xml:id="_quantumcomm_8py_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;scipy.spatial.distance.cdist(pos,&#32;pos,&#32;lambda&#32;u,&#32;v:&#32;pk.EARTH_RADIUS/1000&#32;*&#32;safe_arccos(u,&#32;v))
<anchor xml:id="_quantumcomm_8py_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;d&#32;+&#32;np.diag([np.inf]*4)
<anchor xml:id="_quantumcomm_8py_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_d&#32;=&#32;np.min(d)
<anchor xml:id="_quantumcomm_8py_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Will&#32;be&#32;negative&#32;if&#32;min(d)&#32;is&#32;larger&#32;than&#32;the&#32;min&#32;allowable&#32;inter-rover&#32;distance
<anchor xml:id="_quantumcomm_8py_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;self._min_rover_dist&#32;-&#32;min_d,&#32;min_d
<anchor xml:id="_quantumcomm_8py_source_1l00322"/>00322 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00323"/>00323 &#32;&#32;&#32;&#32;def&#32;get_sat_constraint(self,&#32;d_min):
<anchor xml:id="_quantumcomm_8py_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Evaluate&#32;the&#32;satellite&#32;constraint&#32;(minimum&#32;distance&#32;between&#32;any&#32;two&#32;satellites)
<anchor xml:id="_quantumcomm_8py_source_1l00325"/>00325 
<anchor xml:id="_quantumcomm_8py_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d_min&#32;(float):&#32;the&#32;minimum&#32;distance&#32;between&#32;any&#32;two&#32;satellites&#32;at&#32;any&#32;epoch
<anchor xml:id="_quantumcomm_8py_source_1l00328"/>00328 
<anchor xml:id="_quantumcomm_8py_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;the&#32;difference&#32;between&#32;the&#32;actual&#32;and&#32;allowable&#32;minimum&#32;distance&#32;between&#32;satellites
<anchor xml:id="_quantumcomm_8py_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Will&#32;be&#32;negative&#32;if&#32;d_min&#32;is&#32;larger&#32;than&#32;the&#32;min&#32;allowable&#32;inter-satellite&#32;distance
<anchor xml:id="_quantumcomm_8py_source_1l00333"/><link linkend="_classquantumcomm_1_1constellation__udp_1a228c4f828e7c8261bbeedd69d6d19573">00333</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;self._min_sat_dist&#32;-&#32;d_min
<anchor xml:id="_quantumcomm_8py_source_1l00334"/>00334 
<anchor xml:id="_quantumcomm_8py_source_1l00335"/>00335 
<anchor xml:id="_quantumcomm_8py_source_1l00336"/>00336 &#32;&#32;&#32;&#32;def&#32;generate_walker(self,&#32;S,P,F,a,e,incl,w,t0):
<anchor xml:id="_quantumcomm_8py_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Generates&#32;a&#32;Walker&#32;constallation&#32;as&#32;a&#32;SatrecArray
<anchor xml:id="_quantumcomm_8py_source_1l00338"/>00338 
<anchor xml:id="_quantumcomm_8py_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;S&#32;(int):&#32;number&#32;of&#32;satellites&#32;per&#32;plane
<anchor xml:id="_quantumcomm_8py_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;P&#32;(int):&#32;number&#32;of&#32;planes&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;F&#32;(int):&#32;spacing&#32;parameter&#32;(i.e.&#32;if&#32;2&#32;phasing&#32;repeats&#32;each&#32;2&#32;planes)
<anchor xml:id="_quantumcomm_8py_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;(float):&#32;semi-major&#32;axis
<anchor xml:id="_quantumcomm_8py_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e&#32;(float):&#32;eccentricity
<anchor xml:id="_quantumcomm_8py_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;incl&#32;(float):&#32;inclination
<anchor xml:id="_quantumcomm_8py_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w&#32;(float):&#32;argument&#32;of&#32;perigee
<anchor xml:id="_quantumcomm_8py_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t0&#32;(float):&#32;epoch
<anchor xml:id="_quantumcomm_8py_source_1l00348"/>00348 
<anchor xml:id="_quantumcomm_8py_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SatrecArray:&#32;satellites&#32;ready&#32;to&#32;be&#32;SGP4&#32;propagated
<anchor xml:id="_quantumcomm_8py_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;walker_l&#32;=&#32;[]
<anchor xml:id="_quantumcomm_8py_source_1l00353"/><link linkend="_classquantumcomm_1_1constellation__udp_1a7751ec7ef991c732aeffdb2ac59332e6">00353</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean_motion&#32;=&#32;np.sqrt(pk.MU_EARTH/a**3/pk.EARTH_RADIUS**3)
<anchor xml:id="_quantumcomm_8py_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;planes
<anchor xml:id="_quantumcomm_8py_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;i&#32;in&#32;range(P):
<anchor xml:id="_quantumcomm_8py_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#satellites
<anchor xml:id="_quantumcomm_8py_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;j&#32;in&#32;range(S):
<anchor xml:id="_quantumcomm_8py_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;satellite&#32;=&#32;Satrec()
<anchor xml:id="_quantumcomm_8py_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;satellite.sgp4init(
<anchor xml:id="_quantumcomm_8py_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WGS72,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;gravity&#32;model
<anchor xml:id="_quantumcomm_8py_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&apos;i&apos;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;&apos;a&apos;&#32;=&#32;old&#32;AFSPC&#32;mode,&#32;&apos;i&apos;&#32;=&#32;improved&#32;mode
<anchor xml:id="_quantumcomm_8py_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;+&#32;i*S,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;satnum:&#32;Satellite&#32;number
<anchor xml:id="_quantumcomm_8py_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t0-self.ep_ref.mjd2000,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;epoch:&#32;days&#32;since&#32;1949&#32;December&#32;31&#32;00:00&#32;UT
<anchor xml:id="_quantumcomm_8py_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;bstar:&#32;drag&#32;coefficient&#32;(1/earth&#32;radii)&#32;-&#32;3.8792e-05
<anchor xml:id="_quantumcomm_8py_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;ndot:&#32;ballistic&#32;coefficient&#32;(revs/day)
<anchor xml:id="_quantumcomm_8py_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;nddot:&#32;mean&#32;motion&#32;2nd&#32;derivative&#32;(revs/day^3)
<anchor xml:id="_quantumcomm_8py_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;ecco:&#32;eccentricity
<anchor xml:id="_quantumcomm_8py_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;argpo:&#32;argument&#32;of&#32;perigee&#32;(radians)
<anchor xml:id="_quantumcomm_8py_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;incl,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;inclo:&#32;inclination&#32;(radians)
<anchor xml:id="_quantumcomm_8py_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2*np.pi/P/S*F*i+2.*np.pi/S*j,&#32;&#32;&#32;&#32;&#32;#&#32;mo:&#32;mean&#32;anomaly&#32;(radians)
<anchor xml:id="_quantumcomm_8py_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean_motion*60,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;no_kozai:&#32;mean&#32;motion&#32;(radians/minute)
<anchor xml:id="_quantumcomm_8py_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2.*np.pi/P*i&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;nodeo:&#32;R.A.&#32;of&#32;ascending&#32;node&#32;(radians)
<anchor xml:id="_quantumcomm_8py_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="_quantumcomm_8py_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;walker_l.append(satellite)
<anchor xml:id="_quantumcomm_8py_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Creating&#32;the&#32;vectorized&#32;list
<anchor xml:id="_quantumcomm_8py_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;SatrecArray(walker_l)
<anchor xml:id="_quantumcomm_8py_source_1l00377"/>00377 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00378"/>00378 &#32;&#32;&#32;&#32;def&#32;build_graph(self,&#32;ep_idx,&#32;pos,&#32;num_w1_sats,&#32;eta):
<anchor xml:id="_quantumcomm_8py_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Builds&#32;a&#32;networkx&#32;graph&#32;from&#32;the&#32;satellite&#32;positions.&#32;Links&#32;are&#32;weighted&#32;via&#32;a&#32;&quot;QKD-inspired&#32;metric
<anchor xml:id="_quantumcomm_8py_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;only&#32;exist&#32;when&#32;motherships/constellation&#32;satellites/rovers&#32;have&#32;line-of-sight
<anchor xml:id="_quantumcomm_8py_source_1l00381"/>00381 
<anchor xml:id="_quantumcomm_8py_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ep_idx&#32;(int):&#32;idx&#32;of&#32;the&#32;epoch&#32;in&#32;the&#32;time&#32;grid&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;(numpy&#32;array&#32;3xN):&#32;position&#32;vector&#32;of&#32;the&#32;satellites
<anchor xml:id="_quantumcomm_8py_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_w1_sats&#32;(int):&#32;number&#32;of&#32;satellites&#32;in&#32;the&#32;first&#32;Walker&#32;constellation
<anchor xml:id="_quantumcomm_8py_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eta&#32;(tuple):&#32;satellite&#32;quality&#32;indicator&#32;for&#32;each&#32;Walker&#32;constellation
<anchor xml:id="_quantumcomm_8py_source_1l00387"/>00387 
<anchor xml:id="_quantumcomm_8py_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;igraph&#32;graph:&#32;nodes&#32;are&#32;motherships/Walker&#32;satellites/rovers;&#32;links&#32;are&#32;distances&#32;when&#32;there&#32;is&#32;LOS
<anchor xml:id="_quantumcomm_8py_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N&#32;=&#32;pos[:,&#32;ep_idx,&#32;:].shape[0]&#32;#&#32;number&#32;of&#32;vertices
<anchor xml:id="_quantumcomm_8py_source_1l00392"/><link linkend="_classquantumcomm_1_1constellation__udp_1a06e2f7fe5888de4c38d08d4b1f290511">00392</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjmatrix,&#32;d_min&#32;=&#32;get_adjmatrix(pos,&#32;ep_idx,&#32;eta,&#32;num_w1_sats,&#32;self.LOS,&#32;N,&#32;self.eps_z,&#32;self.n_rovers)
<anchor xml:id="_quantumcomm_8py_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g&#32;=&#32;ig.Graph.Adjacency((adjmatrix&#32;&gt;&#32;0).tolist())
<anchor xml:id="_quantumcomm_8py_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g.es[&apos;weight&apos;]&#32;=&#32;adjmatrix[adjmatrix.nonzero()]
<anchor xml:id="_quantumcomm_8py_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;g,&#32;adjmatrix,&#32;d_min
<anchor xml:id="_quantumcomm_8py_source_1l00396"/>00396 
<anchor xml:id="_quantumcomm_8py_source_1l00397"/>00397 &#32;&#32;&#32;&#32;def&#32;average_shortest_path(self,&#32;G,&#32;src,&#32;dst):
<anchor xml:id="_quantumcomm_8py_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Computes&#32;the&#32;average&#32;shortest&#32;path&#32;length&#32;between&#32;the&#32;source&#32;and&#32;destination&#32;*partitions*&#32;of&#32;nodes&#32;in&#32;the&#32;graph&#32;*G*
<anchor xml:id="_quantumcomm_8py_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(the&#32;source&#32;is&#32;assumed&#32;to&#32;be&#32;the&#32;motherships&#32;and&#32;the&#32;destination&#32;the&#32;rovers)
<anchor xml:id="_quantumcomm_8py_source_1l00400"/>00400 
<anchor xml:id="_quantumcomm_8py_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G&#32;(networkx&#32;graph):&#32;The&#32;graph
<anchor xml:id="_quantumcomm_8py_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src&#32;(int):&#32;the&#32;number&#32;of&#32;motherships&#32;(to&#32;be&#32;used&#32;as&#32;a&#32;negative&#32;index&#32;in&#32;G)
<anchor xml:id="_quantumcomm_8py_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst&#32;(int):&#32;the&#32;number&#32;of&#32;rovers&#32;(to&#32;be&#32;used&#32;as&#32;a&#32;negative&#32;index&#32;in&#32;G)
<anchor xml:id="_quantumcomm_8py_source_1l00405"/>00405 
<anchor xml:id="_quantumcomm_8py_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;average&#32;shortest&#32;path
<anchor xml:id="_quantumcomm_8py_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_nodes&#32;=&#32;G.vcount()
<anchor xml:id="_quantumcomm_8py_source_1l00410"/><link linkend="_classquantumcomm_1_1constellation__udp_1a5827f9a431732de6732e1d7a4d0a5fe5">00410</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src0&#32;=&#32;n_nodes&#32;-&#32;src&#32;-&#32;dst
<anchor xml:id="_quantumcomm_8py_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst0&#32;=&#32;n_nodes&#32;-&#32;dst
<anchor xml:id="_quantumcomm_8py_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sp&#32;=&#32;np.array(G.distances(list(range(src0,&#32;src0+src)),&#32;\
<anchor xml:id="_quantumcomm_8py_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list(range(dst0,&#32;dst0+dst)),&#32;weights=G.es[&quot;weight&quot;]))
<anchor xml:id="_quantumcomm_8py_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;np.mean(sp)
<anchor xml:id="_quantumcomm_8py_source_1l00415"/>00415 
<anchor xml:id="_quantumcomm_8py_source_1l00416"/>00416 &#32;&#32;&#32;&#32;def&#32;construct_walkers(self,&#32;x):
<anchor xml:id="_quantumcomm_8py_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Generates&#32;two&#32;Walker&#32;constellations&#32;according&#32;to&#32;specifications
<anchor xml:id="_quantumcomm_8py_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;(list):&#32;chromosome&#32;describing&#32;the&#32;New&#32;Mars&#32;communications&#32;infrastructure
<anchor xml:id="_quantumcomm_8py_source_1l00421"/>00421 
<anchor xml:id="_quantumcomm_8py_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SatrecArray:&#32;Walker1&#32;constellation&#32;satellites&#32;ready&#32;to&#32;be&#32;SGP4&#32;propagated
<anchor xml:id="_quantumcomm_8py_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SatrecArray:&#32;Walker2&#32;constellation&#32;satellites&#32;ready&#32;to&#32;be&#32;SGP4&#32;propagated
<anchor xml:id="_quantumcomm_8py_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Parse&#32;the&#32;chromosome
<anchor xml:id="_quantumcomm_8py_source_1l00427"/><link linkend="_classquantumcomm_1_1constellation__udp_1a0488615446771fa666b9fa156ab6627e">00427</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a1,e1,i1,w1,_,a2,e2,i2,w2,_,S1,P1,F1,S2,P2,F2,_,_,_,_&#32;=&#32;x
<anchor xml:id="_quantumcomm_8py_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Construct&#32;the&#32;1st&#32;walker&#32;constellation&#32;as&#32;a&#32;SatrecArray
<anchor xml:id="_quantumcomm_8py_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;walker1&#32;=&#32;self.generate_walker(int(S1),int(P1),int(F1),a1,e1,i1,w1,self._t0)
<anchor xml:id="_quantumcomm_8py_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Construct&#32;the&#32;2nd&#32;walker&#32;constellation&#32;as&#32;a&#32;SatrecArray
<anchor xml:id="_quantumcomm_8py_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;walker2&#32;=&#32;self.generate_walker(int(S2),int(P2),int(F2),a2,e2,i2,w2,self._t0)
<anchor xml:id="_quantumcomm_8py_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;walker1,&#32;walker2
<anchor xml:id="_quantumcomm_8py_source_1l00433"/>00433 
<anchor xml:id="_quantumcomm_8py_source_1l00434"/>00434 &#32;&#32;&#32;&#32;def&#32;construct_mothership_pos(self,&#32;motherships):
<anchor xml:id="_quantumcomm_8py_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Computes&#32;the&#32;position&#32;of&#32;the&#32;motherships&#32;over&#32;a&#32;predefined&#32;time&#32;grid
<anchor xml:id="_quantumcomm_8py_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;motherships&#32;(SatrecArray):&#32;mothership&#32;satellites&#32;ready&#32;to&#32;be&#32;SGP4&#32;propagated
<anchor xml:id="_quantumcomm_8py_source_1l00439"/>00439 
<anchor xml:id="_quantumcomm_8py_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float,&#32;n_motherships&#32;x&#32;n_epochs&#32;x&#32;3:&#32;mothership&#32;x,&#32;y,&#32;z&#32;positions
<anchor xml:id="_quantumcomm_8py_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00443"/>00443 
<anchor xml:id="_quantumcomm_8py_source_1l00444"/><link linkend="_classquantumcomm_1_1constellation__udp_1ac050bcb0c45f9e8238563588261417e9">00444</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err,&#32;pos,&#32;_&#32;=&#32;motherships.sgp4(self.jds,&#32;self.frs)
<anchor xml:id="_quantumcomm_8py_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Check&#32;propagation&#32;went&#32;well
<anchor xml:id="_quantumcomm_8py_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;not&#32;np.all(err&#32;==&#32;0):
<anchor xml:id="_quantumcomm_8py_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise&#32;ValueError(&quot;The&#32;motherships&#32;cannot&#32;be&#32;propagated&#32;succesfully&#32;on&#32;the&#32;defined&#32;time&#32;grid&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;pos
<anchor xml:id="_quantumcomm_8py_source_1l00449"/>00449 
<anchor xml:id="_quantumcomm_8py_source_1l00450"/>00450 &#32;&#32;&#32;&#32;def&#32;construct_pos(self,&#32;walker1,&#32;walker2,&#32;pos_r):
<anchor xml:id="_quantumcomm_8py_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Construct&#32;cumulative&#32;position&#32;of&#32;Walker&#32;satellites,&#32;motherships&#32;and&#32;rovers
<anchor xml:id="_quantumcomm_8py_source_1l00452"/>00452 
<anchor xml:id="_quantumcomm_8py_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;walker1&#32;(SatrecArray):&#32;Walker1&#32;constellation&#32;satellites&#32;ready&#32;to&#32;be&#32;SGP4&#32;propagated
<anchor xml:id="_quantumcomm_8py_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;walker2&#32;(SatrecArray):&#32;Walker2&#32;constellation&#32;satellites&#32;ready&#32;to&#32;be&#32;SGP4&#32;propagated
<anchor xml:id="_quantumcomm_8py_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_r&#32;(float,&#32;n_rovers&#32;x&#32;n_epochs&#32;x&#32;3):&#32;rover&#32;x,&#32;y,&#32;z&#32;positions
<anchor xml:id="_quantumcomm_8py_source_1l00457"/>00457 
<anchor xml:id="_quantumcomm_8py_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float,&#32;(S1xP1&#32;+&#32;S2xP2&#32;+&#32;n_motherships&#32;+&#32;n_rovers)&#32;x&#32;n_epochs&#32;x&#32;3:&#32;overall&#32;position&#32;vector
<anchor xml:id="_quantumcomm_8py_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Compute&#32;ephemerides&#32;for&#32;Walker1&#32;satellites&#32;at&#32;all&#32;epochs)
<anchor xml:id="_quantumcomm_8py_source_1l00462"/><link linkend="_classquantumcomm_1_1constellation__udp_1a46cbd774de9aefba3ee882c665072446">00462</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err_w1,&#32;pos_w1,&#32;_&#32;=&#32;walker1.sgp4(self.jds,&#32;self.frs)
<anchor xml:id="_quantumcomm_8py_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Compute&#32;ephemerides&#32;for&#32;Walker2&#32;satellites&#32;at&#32;all&#32;epochs)
<anchor xml:id="_quantumcomm_8py_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err_w2,&#32;pos_w2,&#32;_&#32;=&#32;walker2.sgp4(self.jds,&#32;self.frs)
<anchor xml:id="_quantumcomm_8py_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Check&#32;propagation&#32;went&#32;well
<anchor xml:id="_quantumcomm_8py_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;not&#32;(np.all(err_w1&#32;==&#32;0)&#32;and&#32;np.all(err_w2&#32;==&#32;0)):
<anchor xml:id="_quantumcomm_8py_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise&#32;ValueError(&quot;The&#32;walker&#32;constellations&#32;cannot&#32;be&#32;propagated&#32;successfully&#32;on&#32;the&#32;defined&#32;time&#32;grid&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Position&#32;vector&#32;for&#32;Walker&#32;constellation&#32;satellites,&#32;motherships&#32;and&#32;rovers)
<anchor xml:id="_quantumcomm_8py_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cum_pos&#32;=&#32;np.concatenate((pos_w1,pos_w2,&#32;self.pos_m,&#32;pos_r))
<anchor xml:id="_quantumcomm_8py_source_1l00470"/>00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;cum_pos
<anchor xml:id="_quantumcomm_8py_source_1l00471"/>00471 
<anchor xml:id="_quantumcomm_8py_source_1l00472"/>00472 &#32;&#32;&#32;&#32;def&#32;fitness(self,&#32;x,&#32;verbose=False):
<anchor xml:id="_quantumcomm_8py_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Evaluate&#32;the&#32;fitness&#32;of&#32;the&#32;decision&#32;variables.
<anchor xml:id="_quantumcomm_8py_source_1l00474"/>00474 
<anchor xml:id="_quantumcomm_8py_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;(list):&#32;chromosome&#32;describing&#32;the&#32;New&#32;Mars&#32;communications&#32;infrastructure
<anchor xml:id="_quantumcomm_8py_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;verbose&#32;(bool):&#32;If&#32;True,&#32;print&#32;some&#32;info.
<anchor xml:id="_quantumcomm_8py_source_1l00478"/>00478 
<anchor xml:id="_quantumcomm_8py_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;fitness&#32;for&#32;average&#32;shortest&#32;path
<anchor xml:id="_quantumcomm_8py_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;fitness&#32;for&#32;total&#32;number&#32;of&#32;satellites
<anchor xml:id="_quantumcomm_8py_source_1l00482"/>00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;constraint&#32;for&#32;rover&#32;positioning
<anchor xml:id="_quantumcomm_8py_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Construct&#32;the&#32;Walker&#32;constellations&#32;based&#32;on&#32;input&#32;chromosome&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00485"/><link linkend="_classquantumcomm_1_1constellation__udp_1a13abd2e63f36cb79a4c08d96557d3d87">00485</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;walker1,&#32;walker2&#32;=&#32;self.construct_walkers(x)
<anchor xml:id="_quantumcomm_8py_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Extract&#32;the&#32;quality&#32;factors&#32;and&#32;the&#32;number&#32;of&#32;satellites&#32;in&#32;the&#32;Walkers
<anchor xml:id="_quantumcomm_8py_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_,_,_,_,eta1,_,_,_,_,eta2,S1,P1,_,S2,P2,_,_,_,_,_&#32;=&#32;x
<anchor xml:id="_quantumcomm_8py_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N1&#32;=&#32;S1&#32;*&#32;P1
<anchor xml:id="_quantumcomm_8py_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N2&#32;=&#32;S2&#32;*&#32;P2
<anchor xml:id="_quantumcomm_8py_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Extract&#32;the&#32;rover&#32;indices&#32;from&#32;the&#32;input&#32;chromosome
<anchor xml:id="_quantumcomm_8py_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rovers_idx&#32;=&#32;np.array(x[-4:]).astype(int)
<anchor xml:id="_quantumcomm_8py_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Look&#32;up&#32;latitude&#32;and&#32;longitudes&#32;corresponding&#32;to&#32;rover&#32;indices
<anchor xml:id="_quantumcomm_8py_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lambda0&#32;=&#32;self.lambdas[rovers_idx]
<anchor xml:id="_quantumcomm_8py_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;phi0&#32;=&#32;self.phis[rovers_idx]
<anchor xml:id="_quantumcomm_8py_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Construct&#32;the&#32;rover&#32;positions
<anchor xml:id="_quantumcomm_8py_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rovers&#32;=&#32;construct_rover_pos(lambda0,&#32;phi0,&#32;self.n_rovers,&#32;self.jds,&#32;self.R_p,&#32;self.w_p)
<anchor xml:id="_quantumcomm_8py_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Concatenate&#32;the&#32;position&#32;of&#32;the&#32;Walkers,&#32;motherships&#32;and&#32;rover
<anchor xml:id="_quantumcomm_8py_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cum_pos&#32;=&#32;self.construct_pos(walker1,&#32;walker2,&#32;rovers)
<anchor xml:id="_quantumcomm_8py_source_1l00499"/>00499 
<anchor xml:id="_quantumcomm_8py_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Evaluating&#32;the&#32;fitness&#32;function
<anchor xml:id="_quantumcomm_8py_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;verbose:
<anchor xml:id="_quantumcomm_8py_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;FITNESS&#32;EVALUATION:&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00503"/>00503 
<anchor xml:id="_quantumcomm_8py_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;First&#32;objective&#32;(minimize):
<anchor xml:id="_quantumcomm_8py_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Compute&#32;the&#32;average&#32;shortest&#32;path&#32;between&#32;any&#32;mothership-rover&#32;pair
<anchor xml:id="_quantumcomm_8py_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Iterate&#32;over&#32;epochs
<anchor xml:id="_quantumcomm_8py_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f1&#32;=&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nf1&#32;=&#32;34&#32;#&#32;f1&#32;normalization&#32;factor
<anchor xml:id="_quantumcomm_8py_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d_sat_min_ep&#32;=&#32;np.inf
<anchor xml:id="_quantumcomm_8py_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;ep_idx&#32;in&#32;range(1,&#32;self.n_epochs):
<anchor xml:id="_quantumcomm_8py_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Constructs&#32;the&#32;graph:
<anchor xml:id="_quantumcomm_8py_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Nodes:&#32;Walker&#32;sats&#32;+&#32;motherships&#32;+&#32;rovers
<anchor xml:id="_quantumcomm_8py_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Edges:&#32;LOS&#32;communication
<anchor xml:id="_quantumcomm_8py_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G,&#32;_,&#32;d_sat_min&#32;=&#32;self.build_graph(ep_idx,&#32;cum_pos,&#32;N1,&#32;(eta1,&#32;eta2))
<anchor xml:id="_quantumcomm_8py_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;d_sat_min&#32;&lt;&#32;d_sat_min_ep:
<anchor xml:id="_quantumcomm_8py_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d_sat_min_ep&#32;=&#32;d_sat_min
<anchor xml:id="_quantumcomm_8py_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f1&#32;+=&#32;self.average_shortest_path(G,&#32;self.n_motherships,&#32;self.n_rovers)
<anchor xml:id="_quantumcomm_8py_source_1l00518"/>00518 
<anchor xml:id="_quantumcomm_8py_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Average&#32;over&#32;the&#32;number&#32;of&#32;epochs
<anchor xml:id="_quantumcomm_8py_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f1&#32;/=&#32;(self.n_epochs&#32;-&#32;1)
<anchor xml:id="_quantumcomm_8py_source_1l00521"/>00521 
<anchor xml:id="_quantumcomm_8py_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Second&#32;objective&#32;(minimize):
<anchor xml:id="_quantumcomm_8py_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Compute&#32;the&#32;total&#32;number&#32;of&#32;satellites&#32;(weighted&#32;by&#32;the&#32;quality&#32;factors)
<anchor xml:id="_quantumcomm_8py_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f2&#32;=&#32;eta1&#32;*&#32;N1&#32;+&#32;eta2&#32;*&#32;N2
<anchor xml:id="_quantumcomm_8py_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nf2&#32;=&#32;100000&#32;#&#32;f2&#32;normalization&#32;factor
<anchor xml:id="_quantumcomm_8py_source_1l00526"/>00526 
<anchor xml:id="_quantumcomm_8py_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Constraints:
<anchor xml:id="_quantumcomm_8py_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;The&#32;minimum&#32;distance&#32;between&#32;any&#32;two&#32;rovers&#32;needs&#32;to&#32;be&#32;at&#32;least&#32;3000km
<anchor xml:id="_quantumcomm_8py_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;to&#32;ensure&#32;good&#32;coverage&#32;of&#32;the&#32;surface&#32;of&#32;New&#32;Mars
<anchor xml:id="_quantumcomm_8py_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_rover_d,&#32;d_rover_min&#32;=&#32;self.get_rover_constraint(lambda0,&#32;phi0)
<anchor xml:id="_quantumcomm_8py_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;The&#32;minimum&#32;distance&#32;between&#32;any&#32;two&#32;nodes&#32;of&#32;the&#32;graph&#32;across&#32;all&#32;epochs&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;needs&#32;to&#32;be&#32;at&#32;least&#32;50km&#32;to&#32;ensure&#32;a&#32;collision-free&#32;communications&#32;network
<anchor xml:id="_quantumcomm_8py_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_sat_d&#32;=&#32;self.get_sat_constraint(d_sat_min_ep)&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00534"/>00534 
<anchor xml:id="_quantumcomm_8py_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Additional&#32;information&#32;on&#32;the&#32;fitness&#32;of&#32;the&#32;input&#32;chromosome
<anchor xml:id="_quantumcomm_8py_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;verbose:
<anchor xml:id="_quantumcomm_8py_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(100&#32;*&#32;&quot;-&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;RESULTS:&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;Total&#32;number&#32;of&#32;satellites&#32;(W1:&#32;{},&#32;W2:&#32;{}):&#32;{}&quot;.format(N1,&#32;N2,&#32;N1+N2))
<anchor xml:id="_quantumcomm_8py_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;OBJECTIVE&#32;#1&#32;-&#32;Average&#32;communications&#32;cost:&#32;{}&quot;.format(f1/nf1))
<anchor xml:id="_quantumcomm_8py_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;OBJECTIVE&#32;#2&#32;-&#32;Cost&#32;of&#32;infrastructure:&#32;{}&quot;.format(f2/nf2))
<anchor xml:id="_quantumcomm_8py_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;CONSTRAINT&#32;-&#32;Minimum&#32;distance&#32;between&#32;rovers&#32;({}):&#32;{}&#32;km&quot;.format(&quot;NOK&quot;&#32;if&#32;min_rover_d&#32;&gt;&#32;0&#32;else&#32;&quot;OK&quot;,&#32;d_rover_min))
<anchor xml:id="_quantumcomm_8py_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;CONSTRAINT&#32;-&#32;Minimum&#32;distance&#32;between&#32;sats&#32;({}):&#32;{}&#32;km&quot;.format(&quot;NOK&quot;&#32;if&#32;min_sat_d&#32;&gt;&#32;0&#32;else&#32;&quot;OK&quot;,&#32;d_sat_min_ep))
<anchor xml:id="_quantumcomm_8py_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(100&#32;*&#32;&quot;-&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;[f1/nf1,&#32;f2/nf2,&#32;min_rover_d,&#32;min_sat_d]
<anchor xml:id="_quantumcomm_8py_source_1l00546"/>00546 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00547"/>00547 &#32;&#32;&#32;&#32;def&#32;pretty(self,&#32;x):
<anchor xml:id="_quantumcomm_8py_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;A&#32;verbose&#32;evaluation&#32;of&#32;the&#32;fitness&#32;functions
<anchor xml:id="_quantumcomm_8py_source_1l00549"/>00549 
<anchor xml:id="_quantumcomm_8py_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;(list):&#32;chromosome&#32;describing&#32;the&#32;New&#32;Mars&#32;communications&#32;infrastructure
<anchor xml:id="_quantumcomm_8py_source_1l00552"/>00552 
<anchor xml:id="_quantumcomm_8py_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;fitness&#32;for&#32;average&#32;shortest&#32;path
<anchor xml:id="_quantumcomm_8py_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;fitness&#32;for&#32;total&#32;number&#32;of&#32;satellites
<anchor xml:id="_quantumcomm_8py_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;constraint&#32;for&#32;rover&#32;positioning
<anchor xml:id="_quantumcomm_8py_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float:&#32;constraint&#32;for&#32;satellite&#32;positioning
<anchor xml:id="_quantumcomm_8py_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f1,&#32;f2,&#32;c1,&#32;c2&#32;=&#32;self.fitness(x,&#32;verbose=True)
<anchor xml:id="_quantumcomm_8py_source_1l00560"/><link linkend="_classquantumcomm_1_1constellation__udp_1a8c60ffafb21bc14b969a3f3f4079d24d">00560</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;f1,&#32;f2,&#32;c1,&#32;c2
<anchor xml:id="_quantumcomm_8py_source_1l00561"/>00561 
<anchor xml:id="_quantumcomm_8py_source_1l00562"/>00562 &#32;&#32;&#32;&#32;def&#32;example(self,&#32;verbose=False):
<anchor xml:id="_quantumcomm_8py_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;A&#32;random&#32;chromosome&#32;example&#32;for&#32;the&#32;constellation&#32;optimization
<anchor xml:id="_quantumcomm_8py_source_1l00564"/>00564 
<anchor xml:id="_quantumcomm_8py_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list:&#32;a&#32;valid&#32;chromosome&#32;representing&#32;a&#32;possible&#32;constellation&#32;design
<anchor xml:id="_quantumcomm_8py_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;verbose:
<anchor xml:id="_quantumcomm_8py_source_1l00569"/><link linkend="_classquantumcomm_1_1constellation__udp_1abd7080d6cfab62437f82a825e53f1e53">00569</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;CHROMOSOME:&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;x&#32;=&#32;[a1,&#32;e1,&#32;i1,&#32;w1,&#32;eta1]&#32;+&#32;[a2,&#32;e2,&#32;i2,&#32;w2,&#32;eta2]&#32;+&#32;[S1,&#32;P1,&#32;F1]&#32;+&#32;[S2,&#32;P2,&#32;F2]&#32;+&#32;[r1,&#32;r2,&#32;r3,&#32;r4]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(100&#32;*&#32;&quot;-&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;a1:&#32;float&#32;representing&#32;the&#32;normalized&#32;semi-major&#32;axis&#32;of&#32;Walker1&#32;satellite&#32;orbits&#32;(in&#32;km)&#32;[1.05,1.8]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;e1:&#32;float&#32;representing&#32;the&#32;eccentricity&#32;[0,&#32;0.1]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;i1:&#32;float&#32;representing&#32;the&#32;inclination&#32;[0,&#32;pi]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;w1:&#32;float&#32;representing&#32;the&#32;argument&#32;of&#32;the&#32;perigee&#32;[0,&#32;2pi]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;eta1:&#32;float&#32;defined&#32;as&#32;the&#32;quality&#32;indicator&#32;of&#32;satellites&#32;in&#32;the&#32;first&#32;walker&#32;constellation&#32;[0,&#32;100]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(100&#32;*&#32;&quot;-&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;a2:&#32;float&#32;representing&#32;the&#32;normalized&#32;semi-major&#32;axis&#32;of&#32;Walker2&#32;satellite&#32;orbits&#32;(in&#32;km)&#32;[2.0,3.5]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;e2:&#32;float&#32;representing&#32;the&#32;eccentricity&#32;[0,&#32;0.1]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00580"/>00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;i2:&#32;float&#32;representing&#32;the&#32;inclination&#32;[0,&#32;pi]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;w2:&#32;float&#32;representing&#32;the&#32;argument&#32;of&#32;the&#32;perigee&#32;[0,&#32;2pi]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;eta2:&#32;float&#32;defined&#32;as&#32;the&#32;quality&#32;indicator&#32;of&#32;satellites&#32;in&#32;the&#32;first&#32;walker&#32;constellation&#32;[0,&#32;100]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00583"/>00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(100&#32;*&#32;&quot;-&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;S1:&#32;integer&#32;corresponding&#32;to&#32;the&#32;number&#32;of&#32;satellites&#32;per&#32;plane&#32;[4,&#32;10]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00585"/>00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;P1:&#32;integer&#32;corresponding&#32;to&#32;the&#32;number&#32;of&#32;planes&#32;[2,&#32;10]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00586"/>00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;F1:&#32;integer&#32;defining&#32;the&#32;phasing&#32;of&#32;the&#32;constellation&#32;[0,&#32;9]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00587"/>00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(100&#32;*&#32;&quot;-&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00588"/>00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;S2:&#32;integer&#32;corresponding&#32;to&#32;the&#32;number&#32;of&#32;satellites&#32;per&#32;plane&#32;[4,&#32;10]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00589"/>00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;P2:&#32;integer&#32;corresponding&#32;to&#32;the&#32;number&#32;of&#32;planes&#32;[2,&#32;10]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00590"/>00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;F2:&#32;integer&#32;defining&#32;the&#32;phasing&#32;of&#32;the&#32;constellation&#32;[0,&#32;9]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00591"/>00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(100&#32;*&#32;&quot;-&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00592"/>00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;r1:&#32;index&#32;of&#32;rover&#32;1&#32;[0,&#32;99]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;r2:&#32;index&#32;of&#32;rover&#32;2&#32;[0,&#32;99]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00594"/>00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;r3:&#32;index&#32;of&#32;rover&#32;3&#32;[0,&#32;99]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00595"/>00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;r4:&#32;index&#32;of&#32;rover&#32;4&#32;[0,&#32;99]&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00596"/>00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(100&#32;*&#32;&quot;-&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00597"/>00597 
<anchor xml:id="_quantumcomm_8py_source_1l00598"/>00598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;[1.8,&#32;0.0,&#32;1.2,&#32;0.0,&#32;55.0]&#32;+&#32;[2.3,&#32;0.0,&#32;1.2,&#32;0.0,&#32;15.0]&#32;+&#32;[10,&#32;2,&#32;1]&#32;+&#32;[10,&#32;2,&#32;1]&#32;+&#32;[13,&#32;21,&#32;34,&#32;55]
<anchor xml:id="_quantumcomm_8py_source_1l00599"/>00599 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00600"/>00600 &#32;&#32;&#32;&#32;def&#32;compute_orbit_walker(self,&#32;walker,&#32;ep0,&#32;sma):
<anchor xml:id="_quantumcomm_8py_source_1l00601"/>00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Compute&#32;one&#32;full-orbit&#32;of&#32;the&#32;Walker&#32;constellation&#32;planes&#32;(for&#32;plots)
<anchor xml:id="_quantumcomm_8py_source_1l00602"/>00602 
<anchor xml:id="_quantumcomm_8py_source_1l00603"/>00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;walker&#32;(sgp4.SatrecArray):&#32;the&#32;array&#32;of&#32;Walker&#32;satellites&#32;to&#32;plot
<anchor xml:id="_quantumcomm_8py_source_1l00605"/>00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ep0&#32;(float):&#32;Julian&#32;date&#32;denoting&#32;starting&#32;epoch
<anchor xml:id="_quantumcomm_8py_source_1l00606"/>00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sma&#32;(float):&#32;semi-major&#32;axis&#32;of&#32;orbit
<anchor xml:id="_quantumcomm_8py_source_1l00607"/>00607 
<anchor xml:id="_quantumcomm_8py_source_1l00608"/>00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00609"/>00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;(numpy&#32;array,&#32;P&#32;x&#32;N&#32;x&#32;3):&#32;N&#32;orbital&#32;x,&#32;y,&#32;z&#32;positions&#32;for&#32;P&#32;planes
<anchor xml:id="_quantumcomm_8py_source_1l00610"/>00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00611"/>00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00612"/><link linkend="_classquantumcomm_1_1constellation__udp_1a055cad3b277eb52218b1926cf1730044">00612</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Extract&#32;mean&#32;motion
<anchor xml:id="_quantumcomm_8py_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean_motion&#32;=&#32;np.sqrt(pk.MU_EARTH&#32;/&#32;sma**3&#32;/&#32;pk.EARTH_RADIUS**3)&#32;*&#32;24&#32;*&#32;60&#32;*&#32;60&#32;/&#32;(2&#32;*&#32;np.pi)
<anchor xml:id="_quantumcomm_8py_source_1l00614"/>00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Compute&#32;time&#32;range&#32;for&#32;one&#32;full&#32;orbit
<anchor xml:id="_quantumcomm_8py_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jds&#32;=&#32;np.linspace(ep0,&#32;ep0&#32;+&#32;1&#32;/&#32;mean_motion,&#32;100)
<anchor xml:id="_quantumcomm_8py_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frs&#32;=&#32;jds&#32;*&#32;0.0
<anchor xml:id="_quantumcomm_8py_source_1l00617"/>00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Propagate&#32;using&#32;SGP4
<anchor xml:id="_quantumcomm_8py_source_1l00618"/>00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err,&#32;pos,&#32;_&#32;=&#32;walker.sgp4(jds,&#32;frs)
<anchor xml:id="_quantumcomm_8py_source_1l00619"/>00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;not&#32;np.all(err&#32;==&#32;0):
<anchor xml:id="_quantumcomm_8py_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise&#32;ValueError(&quot;The&#32;satellite&#32;cannot&#32;be&#32;propagated&#32;successfully&#32;on&#32;the&#32;defined&#32;time&#32;grid&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00621"/>00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00622"/>00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;pos
<anchor xml:id="_quantumcomm_8py_source_1l00623"/>00623 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00624"/>00624 &#32;&#32;&#32;&#32;def&#32;compute_orbit_motherships(self,&#32;ep0):
<anchor xml:id="_quantumcomm_8py_source_1l00625"/>00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Compute&#32;one&#32;full-orbit&#32;of&#32;the&#32;motherships&#32;from&#32;epoch&#32;ep0&#32;(for&#32;plots)
<anchor xml:id="_quantumcomm_8py_source_1l00626"/>00626 
<anchor xml:id="_quantumcomm_8py_source_1l00627"/>00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00628"/>00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ep0&#32;(float):&#32;Julian&#32;date&#32;denoting&#32;starting&#32;epoch
<anchor xml:id="_quantumcomm_8py_source_1l00629"/>00629 
<anchor xml:id="_quantumcomm_8py_source_1l00630"/>00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;orbits&#32;(numpy&#32;array,&#32;S&#32;x&#32;N&#32;x&#32;3):&#32;N&#32;orbital&#32;x,&#32;y,&#32;z&#32;positions&#32;for&#32;S&#32;satellites
<anchor xml:id="_quantumcomm_8py_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00633"/>00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00634"/><link linkend="_classquantumcomm_1_1constellation__udp_1a538e6e0a73831c10938e12e9ec73513c">00634</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Pre-allocate&#32;return&#32;array
<anchor xml:id="_quantumcomm_8py_source_1l00635"/>00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N&#32;=&#32;100&#32;#&#32;number&#32;of&#32;samples&#32;along&#32;orbit
<anchor xml:id="_quantumcomm_8py_source_1l00636"/>00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Get&#32;SGP4-ready&#32;motherships
<anchor xml:id="_quantumcomm_8py_source_1l00637"/>00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;motherships&#32;=&#32;get_mothership_satellites()
<anchor xml:id="_quantumcomm_8py_source_1l00638"/>00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;orbits&#32;=&#32;np.zeros((len(motherships),&#32;N,&#32;3))
<anchor xml:id="_quantumcomm_8py_source_1l00639"/>00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;i,&#32;usr&#32;in&#32;enumerate(motherships):
<anchor xml:id="_quantumcomm_8py_source_1l00640"/>00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Extract&#32;mean&#32;motion
<anchor xml:id="_quantumcomm_8py_source_1l00641"/>00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean_motion&#32;=&#32;usr.no_kozai&#32;*&#32;24&#32;*&#32;60&#32;/&#32;(2&#32;*&#32;np.pi)&#32;#&#32;revolutions&#32;per&#32;day
<anchor xml:id="_quantumcomm_8py_source_1l00642"/>00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Compute&#32;time&#32;range&#32;for&#32;one&#32;full&#32;orbit
<anchor xml:id="_quantumcomm_8py_source_1l00643"/>00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jds&#32;=&#32;np.linspace(ep0,&#32;ep0&#32;+&#32;1&#32;/&#32;mean_motion,&#32;N)
<anchor xml:id="_quantumcomm_8py_source_1l00644"/>00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frs&#32;=&#32;jds&#32;*&#32;0.0
<anchor xml:id="_quantumcomm_8py_source_1l00645"/>00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Propagate&#32;using&#32;SGP4
<anchor xml:id="_quantumcomm_8py_source_1l00646"/>00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err,&#32;pos,&#32;_&#32;=&#32;usr.sgp4_array(jds,&#32;frs)
<anchor xml:id="_quantumcomm_8py_source_1l00647"/>00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;not&#32;np.all(err&#32;==&#32;0):
<anchor xml:id="_quantumcomm_8py_source_1l00648"/>00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise&#32;ValueError(&quot;The&#32;satellite&#32;cannot&#32;be&#32;propagated&#32;successfully&#32;on&#32;the&#32;defined&#32;time&#32;grid&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00649"/>00649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;orbits[i]&#32;=&#32;pos
<anchor xml:id="_quantumcomm_8py_source_1l00650"/>00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00651"/>00651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;orbits
<anchor xml:id="_quantumcomm_8py_source_1l00652"/>00652 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00653"/>00653 &#32;&#32;&#32;&#32;def&#32;plot(self,&#32;x,&#32;src,&#32;dst,&#32;ep=1,&#32;lims=10000,&#32;ax=None,&#32;dark_mode=True):
<anchor xml:id="_quantumcomm_8py_source_1l00654"/>00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;Plot&#32;the&#32;full&#32;constellations&#32;with&#32;solution&#32;path&#32;and&#32;optional&#32;orbits
<anchor xml:id="_quantumcomm_8py_source_1l00655"/>00655 
<anchor xml:id="_quantumcomm_8py_source_1l00656"/>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:
<anchor xml:id="_quantumcomm_8py_source_1l00657"/>00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;(list):&#32;chromosome&#32;describing&#32;the&#32;communications&#32;network
<anchor xml:id="_quantumcomm_8py_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src&#32;(int):&#32;mothership&#32;index&#32;denoting&#32;path&#32;source
<anchor xml:id="_quantumcomm_8py_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst&#32;(int):&#32;rover&#32;index&#32;denoting&#32;path&#32;destination
<anchor xml:id="_quantumcomm_8py_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ep&#32;(int):&#32;index&#32;of&#32;the&#32;epoch&#32;in&#32;the&#32;predefined&#32;time&#32;grid
<anchor xml:id="_quantumcomm_8py_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lims&#32;(float,&#32;optional):&#32;plot&#32;limits.&#32;Defaults&#32;to&#32;10000.
<anchor xml:id="_quantumcomm_8py_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax&#32;(matplotlib&#32;3D&#32;axis,&#32;optional):&#32;plot&#32;axis.
<anchor xml:id="_quantumcomm_8py_source_1l00663"/>00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dark_mode&#32;(bool,&#32;optional):&#32;dark&#32;background&#32;for&#32;plot&#32;(recommended)
<anchor xml:id="_quantumcomm_8py_source_1l00664"/>00664 
<anchor xml:id="_quantumcomm_8py_source_1l00665"/>00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:
<anchor xml:id="_quantumcomm_8py_source_1l00666"/>00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matplotlib.axis:&#32;the&#32;3D&#32;plot&#32;axes
<anchor xml:id="_quantumcomm_8py_source_1l00667"/>00667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;list:&#32;indices&#32;of&#32;the&#32;graph&#32;nodes&#32;on&#32;the&#32;communications&#32;path&#32;(if&#32;one&#32;is&#32;found,&#32;otherwise&#32;[])
<anchor xml:id="_quantumcomm_8py_source_1l00668"/>00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00669"/>00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00670"/><link linkend="_classquantumcomm_1_1constellation__udp_1ae7806f788f8f22a8be936a007a8a3deb">00670</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Create&#32;the&#32;plotting&#32;axis&#32;if&#32;needed
<anchor xml:id="_quantumcomm_8py_source_1l00671"/>00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;ax&#32;is&#32;None:
<anchor xml:id="_quantumcomm_8py_source_1l00672"/>00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fig&#32;=&#32;plt.figure()
<anchor xml:id="_quantumcomm_8py_source_1l00673"/>00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax&#32;=&#32;fig.add_subplot(projection=&apos;3d&apos;)
<anchor xml:id="_quantumcomm_8py_source_1l00674"/>00674 
<anchor xml:id="_quantumcomm_8py_source_1l00675"/>00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Apply&#32;a&#32;dark&#32;background&#32;for&#32;better&#32;visualization
<anchor xml:id="_quantumcomm_8py_source_1l00676"/>00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;dark_mode:
<anchor xml:id="_quantumcomm_8py_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sns.set(style=&quot;darkgrid&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;plt.style.use(&quot;dark_background&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00679"/>00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00680"/>00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Construct&#32;the&#32;two&#32;Walker&#32;constellations&#32;from&#32;the&#32;specifications&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00681"/>00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;walker1,&#32;walker2&#32;=&#32;self.construct_walkers(x)
<anchor xml:id="_quantumcomm_8py_source_1l00682"/>00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Construct&#32;the&#32;rover&#32;positions
<anchor xml:id="_quantumcomm_8py_source_1l00683"/>00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rovers_idx&#32;=&#32;np.array(x[-4:]).astype(int)
<anchor xml:id="_quantumcomm_8py_source_1l00684"/>00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lambda0&#32;=&#32;self.lambdas[rovers_idx]
<anchor xml:id="_quantumcomm_8py_source_1l00685"/>00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;phi0&#32;=&#32;self.phis[rovers_idx]
<anchor xml:id="_quantumcomm_8py_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rovers&#32;=&#32;construct_rover_pos(lambda0,&#32;phi0,&#32;self.n_rovers,&#32;self.jds,&#32;self.R_p,&#32;self.w_p)
<anchor xml:id="_quantumcomm_8py_source_1l00687"/>00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Construct&#32;the&#32;Walker&#32;satellite&#32;positions
<anchor xml:id="_quantumcomm_8py_source_1l00688"/>00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;self.construct_pos(walker1,&#32;walker2,&#32;rovers)
<anchor xml:id="_quantumcomm_8py_source_1l00689"/>00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Compute&#32;and&#32;plot&#32;the&#32;orbits&#32;of&#32;the&#32;Walker&#32;and&#32;mothership&#32;satellites&#32;at&#32;the&#32;epoch&#32;ep
<anchor xml:id="_quantumcomm_8py_source_1l00690"/>00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Walker&#32;1
<anchor xml:id="_quantumcomm_8py_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N1&#32;=&#32;x[10]&#32;*&#32;x[11]
<anchor xml:id="_quantumcomm_8py_source_1l00692"/>00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w1_orb&#32;=&#32;self.compute_orbit_walker(walker1,&#32;self.jds[ep],&#32;x[0])
<anchor xml:id="_quantumcomm_8py_source_1l00693"/>00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;i&#32;in&#32;range(N1):
<anchor xml:id="_quantumcomm_8py_source_1l00694"/>00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.plot(w1_orb[i,&#32;:,&#32;0],&#32;w1_orb[i,&#32;:,&#32;1],&#32;w1_orb[i,&#32;:,&#32;2],&#32;&apos;r-&apos;,&#32;linewidth=0.5)
<anchor xml:id="_quantumcomm_8py_source_1l00695"/>00695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Walker&#32;2
<anchor xml:id="_quantumcomm_8py_source_1l00696"/>00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N2&#32;=&#32;x[13]&#32;*&#32;x[14]
<anchor xml:id="_quantumcomm_8py_source_1l00697"/>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;w2_orb&#32;=&#32;self.compute_orbit_walker(walker2,&#32;self.jds[ep],&#32;x[5])
<anchor xml:id="_quantumcomm_8py_source_1l00698"/>00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;i&#32;in&#32;range(N2):
<anchor xml:id="_quantumcomm_8py_source_1l00699"/>00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.plot(w2_orb[i,&#32;:,&#32;0],&#32;w2_orb[i,&#32;:,&#32;1],&#32;w2_orb[i,&#32;:,&#32;2],&#32;&apos;b-&apos;,&#32;linewidth=0.5)
<anchor xml:id="_quantumcomm_8py_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Motherships
<anchor xml:id="_quantumcomm_8py_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mothership_orb&#32;=&#32;self.compute_orbit_motherships(self.jds[ep])
<anchor xml:id="_quantumcomm_8py_source_1l00702"/>00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;i&#32;in&#32;range(len(mothership_orb)):
<anchor xml:id="_quantumcomm_8py_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.plot(mothership_orb[i,&#32;:,&#32;0],&#32;mothership_orb[i,&#32;:,&#32;1],&#32;mothership_orb[i,&#32;:,&#32;2],&#32;&apos;w-&apos;,&#32;linewidth=0.5)
<anchor xml:id="_quantumcomm_8py_source_1l00704"/>00704 
<anchor xml:id="_quantumcomm_8py_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Overlay&#32;the&#32;Walker&#32;satellite&#32;and&#32;mothership&#32;positions&#32;at&#32;epoch&#32;ep&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00706"/>00706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Walker1:&#32;red,&#32;Walker2:&#32;blue,&#32;motherships:&#32;white,&#32;rovers:&#32;yellow
<anchor xml:id="_quantumcomm_8py_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.scatter(pos[:len(walker1),ep,0],&#32;pos[:len(walker1),ep,1],&#32;pos[:len(walker1),ep,2],&#32;c=&apos;r&apos;,&#32;marker=&quot;1&quot;,&#32;s=200)
<anchor xml:id="_quantumcomm_8py_source_1l00708"/>00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.scatter(pos[len(walker1):-self.n_motherships-self.n_rovers,ep,0],&#32;pos[len(walker1):-self.n_motherships-self.n_rovers,ep,1],&#32;pos[len(walker1):-self.n_motherships-self.n_rovers,ep,2],&#32;c=&apos;b&apos;,&#32;marker=&quot;1&quot;,&#32;s=200)
<anchor xml:id="_quantumcomm_8py_source_1l00709"/>00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.scatter(pos[-self.n_motherships-self.n_rovers:-self.n_rovers,ep,0],&#32;pos[-self.n_motherships-self.n_rovers:-self.n_rovers,ep,1],&#32;pos[-self.n_motherships-self.n_rovers:-self.n_rovers,ep,2],&#32;c=&apos;w&apos;,&#32;marker=&quot;1&quot;,&#32;s=300)
<anchor xml:id="_quantumcomm_8py_source_1l00710"/>00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Annotate&#32;source&#32;nodes&#32;(motherships)
<anchor xml:id="_quantumcomm_8py_source_1l00711"/>00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;i&#32;in&#32;range(self.n_motherships):
<anchor xml:id="_quantumcomm_8py_source_1l00712"/>00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.text(pos[-self.n_motherships-self.n_rovers+i,ep,0],&#32;pos[-self.n_motherships-self.n_rovers+i,ep,1],&#32;pos[-self.n_motherships-self.n_rovers+i,ep,2],&#32;&#32;&apos;%s&apos;&#32;%&#32;(str(i+1)),&#32;size=20,&#32;zorder=1,&#32;&#32;color=&apos;w&apos;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Annotate&#32;destination&#32;nodes&#32;(rovers)
<anchor xml:id="_quantumcomm_8py_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.scatter(pos[-self.n_rovers:,ep,0],&#32;pos[-self.n_rovers:,ep,1],&#32;pos[-self.n_rovers:,ep,2],&#32;c=&apos;y&apos;,&#32;marker=&quot;^&quot;,&#32;s=200)
<anchor xml:id="_quantumcomm_8py_source_1l00716"/>00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;i&#32;in&#32;range(self.n_rovers):
<anchor xml:id="_quantumcomm_8py_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.text(pos[-self.n_rovers+i,ep,0],&#32;pos[-self.n_rovers+i,ep,1],&#32;pos[-self.n_rovers+i,ep,2],&#32;&#32;&apos;%s&apos;&#32;%&#32;(str(i+1)),&#32;size=20,&#32;zorder=1,&#32;&#32;color=&apos;y&apos;)&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00718"/>00718 
<anchor xml:id="_quantumcomm_8py_source_1l00719"/>00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Build&#32;the&#32;communications&#32;network
<anchor xml:id="_quantumcomm_8py_source_1l00720"/>00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path&#32;=&#32;[]
<anchor xml:id="_quantumcomm_8py_source_1l00721"/>00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eta1,&#32;eta2&#32;=&#32;x[4],&#32;x[9]
<anchor xml:id="_quantumcomm_8py_source_1l00722"/>00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G,&#32;_,&#32;_&#32;=&#32;self.build_graph(ep,&#32;pos,&#32;N1,&#32;(eta1,&#32;eta2))
<anchor xml:id="_quantumcomm_8py_source_1l00723"/>00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N&#32;=&#32;len(G)
<anchor xml:id="_quantumcomm_8py_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src_node&#32;=&#32;N1&#32;+&#32;N2&#32;+&#32;src&#32;-&#32;1
<anchor xml:id="_quantumcomm_8py_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst_node&#32;=&#32;N1&#32;+&#32;N2&#32;+&#32;self.n_motherships&#32;+&#32;dst&#32;-&#32;1
<anchor xml:id="_quantumcomm_8py_source_1l00726"/>00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Find&#32;the&#32;shortest&#32;path&#32;(if&#32;one&#32;exists)
<anchor xml:id="_quantumcomm_8py_source_1l00727"/>00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try:
<anchor xml:id="_quantumcomm_8py_source_1l00728"/>00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path&#32;=&#32;nx.shortest_path(G,&#32;src_node,&#32;dst_node,&#32;weight=&quot;weight&quot;,&#32;method=&quot;dijkstra&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;i,j&#32;in&#32;zip(path[:-1],&#32;path[1:]):
<anchor xml:id="_quantumcomm_8py_source_1l00730"/>00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.plot([pos[i,ep,0],&#32;pos[j,ep,0]],&#32;[pos[i,ep,1],&#32;pos[j,ep,1]],&#32;[pos[i,ep,2],&#32;pos[j,ep,2]],&#32;&apos;g-.&apos;,&#32;linewidth=3)
<anchor xml:id="_quantumcomm_8py_source_1l00731"/>00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;Mothership&#32;{}&#32;(node&#32;{})&#32;communicates&#32;with&#32;rover&#32;{}&#32;(node&#32;{})&#32;at&#32;epoch&#32;{}&#32;via:&#32;{}&quot;.format(\
<anchor xml:id="_quantumcomm_8py_source_1l00732"/>00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src,&#32;src_node,&#32;dst,&#32;&#32;dst_node,&#32;ep,&#32;path))
<anchor xml:id="_quantumcomm_8py_source_1l00733"/>00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;except&#32;nx.exception.NetworkXNoPath&#32;as&#32;e:
<anchor xml:id="_quantumcomm_8py_source_1l00734"/>00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(&quot;Mothership&#32;{}&#32;(node&#32;{})&#32;cannot&#32;reach&#32;rover&#32;{}&#32;(node&#32;{})&#32;at&#32;epoch&#32;{}&quot;.format(\
<anchor xml:id="_quantumcomm_8py_source_1l00735"/>00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src,&#32;src_node,&#32;dst,&#32;&#32;dst_node,&#32;ep))
<anchor xml:id="_quantumcomm_8py_source_1l00736"/>00736 
<anchor xml:id="_quantumcomm_8py_source_1l00737"/>00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;Plot&#32;the&#32;New&#32;Mars&#32;planet
<anchor xml:id="_quantumcomm_8py_source_1l00738"/>00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r&#32;=&#32;pk.EARTH_RADIUS/1000
<anchor xml:id="_quantumcomm_8py_source_1l00739"/>00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u,&#32;v&#32;=&#32;np.mgrid[0:2&#32;*&#32;np.pi:30j,&#32;0:np.pi:20j]
<anchor xml:id="_quantumcomm_8py_source_1l00740"/>00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;r&#32;*&#32;np.cos(u)&#32;*&#32;np.sin(v)
<anchor xml:id="_quantumcomm_8py_source_1l00741"/>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;r&#32;*&#32;np.sin(u)&#32;*&#32;np.sin(v)
<anchor xml:id="_quantumcomm_8py_source_1l00742"/>00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;z&#32;=&#32;r&#32;*&#32;np.cos(v)
<anchor xml:id="_quantumcomm_8py_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.plot_surface(x,&#32;y,&#32;z,&#32;alpha=0.3,&#32;color=&quot;purple&quot;,&#32;linewidth=0)
<anchor xml:id="_quantumcomm_8py_source_1l00744"/>00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.set_axis_off()
<anchor xml:id="_quantumcomm_8py_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.set_xlim(-lims,lims)
<anchor xml:id="_quantumcomm_8py_source_1l00746"/>00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.set_ylim(-lims,lims)
<anchor xml:id="_quantumcomm_8py_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.set_zlim(-lims,lims)
<anchor xml:id="_quantumcomm_8py_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ax.set_box_aspect([ub&#32;-&#32;lb&#32;for&#32;lb,&#32;ub&#32;in&#32;(getattr(ax,&#32;f&apos;get_{a}lim&apos;)()&#32;for&#32;a&#32;in&#32;&apos;xyz&apos;)])
<anchor xml:id="_quantumcomm_8py_source_1l00749"/>00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;ax,&#32;path
<anchor xml:id="_quantumcomm_8py_source_1l00750"/>00750 
<anchor xml:id="_quantumcomm_8py_source_1l00751"/>00751 def&#32;combine_scores(points):
<anchor xml:id="_quantumcomm_8py_source_1l00752"/>00752 &#32;&#32;&#32;&#32;&quot;&quot;&quot;&#32;Function&#32;for&#32;aggregating&#32;single&#32;solutions&#32;into&#32;one&#32;score&#32;using&#32;hypervolume&#32;indicator&#32;&quot;&quot;&quot;
<anchor xml:id="_quantumcomm_8py_source_1l00753"/>00753 
<anchor xml:id="_quantumcomm_8py_source_1l00754"/><link linkend="_namespacequantumcomm_1abfabcba615cdf83e8edf913c888034e0">00754</link> &#32;&#32;&#32;&#32;ref_point&#32;=&#32;np.array([1.2,&#32;1.4])
<anchor xml:id="_quantumcomm_8py_source_1l00755"/>00755 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00756"/>00756 &#32;&#32;&#32;&#32;#&#32;solutions&#32;that&#32;not&#32;dominate&#32;the&#32;reference&#32;point&#32;are&#32;excluded
<anchor xml:id="_quantumcomm_8py_source_1l00757"/>00757 &#32;&#32;&#32;&#32;filtered_points&#32;=&#32;[s[:2]&#32;for&#32;s&#32;in&#32;points&#32;if&#32;pg.pareto_dominance(s[:2],&#32;ref_point)]
<anchor xml:id="_quantumcomm_8py_source_1l00758"/>00758 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00759"/>00759 &#32;&#32;&#32;&#32;if&#32;len(filtered_points)&#32;==&#32;0:
<anchor xml:id="_quantumcomm_8py_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0.0
<anchor xml:id="_quantumcomm_8py_source_1l00761"/>00761 &#32;&#32;&#32;&#32;else:
<anchor xml:id="_quantumcomm_8py_source_1l00762"/>00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hv&#32;=&#32;pg.hypervolume(filtered_points)
<anchor xml:id="_quantumcomm_8py_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#return&#32;-hv.computborderse(ref_point)&#32;*&#32;10000
<anchor xml:id="_quantumcomm_8py_source_1l00764"/>00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;-hv.compute(ref_point)&#32;*&#32;10000
<anchor xml:id="_quantumcomm_8py_source_1l00765"/>00765 
<anchor xml:id="_quantumcomm_8py_source_1l00766"/>00766 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00767"/>00767 import&#32;warnings
<anchor xml:id="_quantumcomm_8py_source_1l00768"/>00768 warnings.filterwarnings(&quot;ignore&quot;)
<anchor xml:id="_quantumcomm_8py_source_1l00769"/>00769 
<anchor xml:id="_quantumcomm_8py_source_1l00770"/>00770 from&#32;fcmaes.optimizer&#32;import&#32;wrapper,&#32;dtime,&#32;Bite_cpp,&#32;De_cpp,&#32;Crfmnes_cpp
<anchor xml:id="_quantumcomm_8py_source_1l00771"/>00771 import&#32;fcmaes
<anchor xml:id="_quantumcomm_8py_source_1l00772"/>00772 from&#32;fcmaes&#32;import&#32;retry,&#32;mode,&#32;modecpp,&#32;moretry,&#32;mapelites,&#32;diversifier
<anchor xml:id="_quantumcomm_8py_source_1l00773"/>00773 from&#32;scipy.optimize&#32;import&#32;Bounds&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00774"/>00774 from&#32;os&#32;import&#32;walk
<anchor xml:id="_quantumcomm_8py_source_1l00775"/>00775 import&#32;multiprocessing&#32;as&#32;mp
<anchor xml:id="_quantumcomm_8py_source_1l00776"/>00776 import&#32;ctypes&#32;as&#32;ct
<anchor xml:id="_quantumcomm_8py_source_1l00777"/>00777 from&#32;functools&#32;import&#32;partial
<anchor xml:id="_quantumcomm_8py_source_1l00778"/>00778 from&#32;fcmaes&#32;import&#32;bitecpp
<anchor xml:id="_quantumcomm_8py_source_1l00779"/>00779 from&#32;multiprocessing&#32;import&#32;Manager
<anchor xml:id="_quantumcomm_8py_source_1l00780"/>00780 
<anchor xml:id="_quantumcomm_8py_source_1l00781"/>00781 udp&#32;=&#32;constellation_udp()&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00782"/>00782 nobj&#32;=&#32;2
<anchor xml:id="_quantumcomm_8py_source_1l00783"/><link linkend="_namespacequantumcomm_1aea96ab455c15aa9c4d6284bb868ac44c">00783</link> ncon&#32;=&#32;2
<anchor xml:id="_quantumcomm_8py_source_1l00784"/><link linkend="_namespacequantumcomm_1ae6a7b0e3b3363799da193a937082152c">00784</link> dim&#32;=&#32;20
<anchor xml:id="_quantumcomm_8py_source_1l00785"/><link linkend="_namespacequantumcomm_1a57cb5c03dd7f2016c85077510ec50fd4">00785</link> ref_point&#32;=&#32;np.array([1.2,&#32;1.4])
<anchor xml:id="_quantumcomm_8py_source_1l00786"/><link linkend="_namespacequantumcomm_1a38c14b3f964ffa67c7911f4e175f4784">00786</link> ubs&#32;=&#32;udp.get_bounds()
<anchor xml:id="_quantumcomm_8py_source_1l00787"/><link linkend="_namespacequantumcomm_1ab5b2a2b68abc9d15c1406cad0842982f">00787</link> bounds&#32;=&#32;Bounds(ubs[0],&#32;ubs[1])&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00788"/><link linkend="_namespacequantumcomm_1a7bea33c966401d0a25705d8371e83147">00788</link> &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00789"/><link linkend="_namespacequantumcomm_1adaca5954b72a118a0abc3f3b1d9d56ac">00789</link> def&#32;fitness(x):&#32;#&#32;fitness&#32;wrapper&#32;converting&#32;the&#32;last&#32;ten&#32;arguments&#32;into&#32;integer&#32;values
<anchor xml:id="_quantumcomm_8py_source_1l00790"/>00790 &#32;&#32;&#32;&#32;x[10:]&#32;=&#32;x[10:].astype(int)
<anchor xml:id="_quantumcomm_8py_source_1l00791"/><link linkend="_namespacequantumcomm_1af16dec207874c04d4e67e42e8832d851">00791</link> &#32;&#32;&#32;&#32;return&#32;np.array(udp.fitness(x))
<anchor xml:id="_quantumcomm_8py_source_1l00792"/>00792 
<anchor xml:id="_quantumcomm_8py_source_1l00793"/>00793 def&#32;select_valid(xs,&#32;ys):
<anchor xml:id="_quantumcomm_8py_source_1l00794"/>00794 &#32;&#32;&#32;&#32;cv&#32;=&#32;np.array([np.amax(y[nobj:],&#32;0)&#32;for&#32;y&#32;in&#32;ys])
<anchor xml:id="_quantumcomm_8py_source_1l00795"/><link linkend="_namespacequantumcomm_1ac0164d14577f24455b1c4cfd24a7a9fd">00795</link> &#32;&#32;&#32;&#32;valid&#32;=&#32;(cv&#32;&lt;=&#32;0)
<anchor xml:id="_quantumcomm_8py_source_1l00796"/>00796 &#32;&#32;&#32;&#32;ys&#32;=&#32;ys.T[:nobj].T
<anchor xml:id="_quantumcomm_8py_source_1l00797"/>00797 &#32;&#32;&#32;&#32;ys&#32;=&#32;ys[valid]
<anchor xml:id="_quantumcomm_8py_source_1l00798"/>00798 &#32;&#32;&#32;&#32;xs&#32;=&#32;xs[valid]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00799"/>00799 &#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;moretry.pareto(xs,&#32;ys)
<anchor xml:id="_quantumcomm_8py_source_1l00800"/>00800 &#32;&#32;&#32;&#32;return&#32;xs,&#32;ys
<anchor xml:id="_quantumcomm_8py_source_1l00801"/>00801 
<anchor xml:id="_quantumcomm_8py_source_1l00802"/>00802 def&#32;read_solution(fname):
<anchor xml:id="_quantumcomm_8py_source_1l00803"/>00803 &#32;&#32;&#32;&#32;with&#32;np.load(fname)&#32;as&#32;data:
<anchor xml:id="_quantumcomm_8py_source_1l00804"/><link linkend="_namespacequantumcomm_1a8419b7d865cb04abb4a75ee8457a301c">00804</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;data[&apos;xs&apos;]
<anchor xml:id="_quantumcomm_8py_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;=&#32;data[&apos;ys&apos;]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00806"/>00806 &#32;&#32;&#32;&#32;return&#32;xs,&#32;ys
<anchor xml:id="_quantumcomm_8py_source_1l00807"/>00807 
<anchor xml:id="_quantumcomm_8py_source_1l00808"/>00808 from&#32;fcmaes.evaluator&#32;import&#32;parallel_mo
<anchor xml:id="_quantumcomm_8py_source_1l00809"/>00809 
<anchor xml:id="_quantumcomm_8py_source_1l00810"/>00810 #+++++++&#32;Apply&#32;fcmaes&#32;multi&#32;objective&#32;optimization&#32;using&#32;NSGA-II&#32;population&#32;update&#32;++++++++++++++++++++++++
<anchor xml:id="_quantumcomm_8py_source_1l00811"/>00811 #&#32;Uses&#32;fcmaes&#32;multi&#32;objective&#32;optimization&#32;to&#32;optimize&#32;the&#32;pareto&#32;front
<anchor xml:id="_quantumcomm_8py_source_1l00812"/>00812 #&#32;Uses&#32;parallel&#32;function&#32;evaluation,&#32;but&#32;cannot&#32;pass&#32;score&#32;6400&#32;even&#32;when&#32;executed&#32;many&#32;times,&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00813"/>00813 #&#32;using&#32;a&#32;large&#32;number&#32;of&#32;iterations&#32;and&#32;a&#32;big&#32;population.&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00814"/>00814 #&#32;Which&#32;is&#32;the&#32;reason&#32;only&#32;one&#32;team&#32;-&#32;&quot;ML&#32;Actonauts&quot;&#32;achieved&#32;this&#32;goal&#32;during&#32;the&#32;GECCO&#32;competition&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00815"/>00815 #&#32;https://www.esa.int/gsp/ACT/projects/spoc-2023/&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00816"/>00816 
<anchor xml:id="_quantumcomm_8py_source_1l00817"/>00817 def&#32;mo_par():
<anchor xml:id="_quantumcomm_8py_source_1l00818"/>00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00819"/><link linkend="_namespacequantumcomm_1a84c6558e0b765a6d0b545850d3821a76">00819</link> &#32;&#32;&#32;&#32;guess&#32;=&#32;None
<anchor xml:id="_quantumcomm_8py_source_1l00820"/>00820 &#32;&#32;&#32;&#32;#guess,&#32;_&#32;=&#32;read_solution(&quot;res/quantcomm_1_100_6372134.npz&quot;)&#32;#&#32;inject&#32;an&#32;existing&#32;pareto&#32;front&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00821"/>00821 &#32;&#32;&#32;&#32;popsize&#32;=&#32;512
<anchor xml:id="_quantumcomm_8py_source_1l00822"/>00822 
<anchor xml:id="_quantumcomm_8py_source_1l00823"/>00823 &#32;&#32;&#32;&#32;es&#32;=&#32;mode.MODE(nobj,&#32;ncon,&#32;bounds,&#32;popsize&#32;=&#32;popsize,&#32;nsga_update=True)&#32;#&#32;Python&#32;MOO&#32;optimizer
<anchor xml:id="_quantumcomm_8py_source_1l00824"/>00824 &#32;&#32;&#32;&#32;#es&#32;=&#32;modecpp.MODE_C(nobj,&#32;ncon,&#32;bounds,&#32;popsize&#32;=&#32;popsize,&#32;nsga_update=True)&#32;#&#32;C++&#32;MOO&#32;optimizer
<anchor xml:id="_quantumcomm_8py_source_1l00825"/>00825 &#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00826"/>00826 &#32;&#32;&#32;&#32;fit&#32;=&#32;parallel_mo(fitness,&#32;nobj+ncon,&#32;workers&#32;=&#32;mp.cpu_count())
<anchor xml:id="_quantumcomm_8py_source_1l00827"/>00827 &#32;&#32;&#32;&#32;iters&#32;=&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l00828"/>00828 &#32;&#32;&#32;&#32;stop&#32;=&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l00829"/>00829 &#32;&#32;&#32;&#32;max_hv&#32;=&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l00830"/>00830 &#32;&#32;&#32;&#32;time_0&#32;=&#32;time.perf_counter()
<anchor xml:id="_quantumcomm_8py_source_1l00831"/>00831 &#32;&#32;&#32;&#32;if&#32;not&#32;guess&#32;is&#32;None:
<anchor xml:id="_quantumcomm_8py_source_1l00832"/>00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;es.set_guess(guess,&#32;fitness)
<anchor xml:id="_quantumcomm_8py_source_1l00833"/>00833 
<anchor xml:id="_quantumcomm_8py_source_1l00834"/>00834 &#32;&#32;&#32;&#32;while&#32;stop&#32;==&#32;0&#32;and&#32;iters&#32;&lt;&#32;100000:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00835"/>00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;es.ask()
<anchor xml:id="_quantumcomm_8py_source_1l00836"/>00836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;=&#32;fit(xs)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00837"/>00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;es.tell(ys)&#32;#&#32;tell&#32;evaluated&#32;x&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00838"/>00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iters&#32;+=&#32;1
<anchor xml:id="_quantumcomm_8py_source_1l00839"/>00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid&#32;=&#32;[y[:2]&#32;for&#32;y&#32;in&#32;ys&#32;if&#32;np.less_equal(y&#32;,&#32;np.array([1.2,&#32;1.4,&#32;0,&#32;0])).all()]
<anchor xml:id="_quantumcomm_8py_source_1l00840"/>00840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hv&#32;=&#32;pg.hypervolume(valid).compute(ref_point)
<anchor xml:id="_quantumcomm_8py_source_1l00841"/>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;hv&#32;&gt;&#32;max_hv:
<anchor xml:id="_quantumcomm_8py_source_1l00842"/>00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_hv&#32;=&#32;hv
<anchor xml:id="_quantumcomm_8py_source_1l00843"/>00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;hv&#32;&gt;&#32;0.9999*max_hv:&#32;#&#32;show&#32;stagnation
<anchor xml:id="_quantumcomm_8py_source_1l00844"/>00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logger.info(f&apos;time:&#32;{dtime(time_0)}&#32;iter:&#32;{iters}&#32;hv:&#32;{hv&#32;*&#32;10000}&apos;)
<anchor xml:id="_quantumcomm_8py_source_1l00845"/>00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;np.savez_compressed(&quot;quantcomm_&quot;&#32;+&#32;str(int(hv&#32;*&#32;1000000)),&#32;xs=xs,&#32;ys=ys)
<anchor xml:id="_quantumcomm_8py_source_1l00846"/>00846 &#32;&#32;&#32;&#32;fit.stop()
<anchor xml:id="_quantumcomm_8py_source_1l00847"/>00847 &#32;&#32;&#32;&#32;return&#32;xs,&#32;ys
<anchor xml:id="_quantumcomm_8py_source_1l00848"/>00848 
<anchor xml:id="_quantumcomm_8py_source_1l00849"/>00849 #+++++++&#32;Apply&#32;fcmaes&#32;diversifier&#32;quality&#32;diversity&#32;algorithm&#32;++++++++++++++++++++++++
<anchor xml:id="_quantumcomm_8py_source_1l00850"/>00850 #&#32;The&#32;initial&#32;archive&#32;is&#32;created&#32;using&#32;an&#32;existing&#32;pareto&#32;front.&#32;This&#32;way&#32;the&#32;QD-algorithm
<anchor xml:id="_quantumcomm_8py_source_1l00851"/>00851 #&#32;dosn&apos;t&#32;need&#32;to&#32;find&#32;this&#32;&quot;hard&#32;to&#32;reach&quot;&#32;area&#32;of&#32;the&#32;solution&#32;space&#32;by&#32;its&#32;own.&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00852"/>00852 
<anchor xml:id="_quantumcomm_8py_source_1l00853"/>00853 def&#32;mo_to_qd(y):
<anchor xml:id="_quantumcomm_8py_source_1l00854"/>00854 &#32;&#32;&#32;&#32;f1,&#32;f2,&#32;c1,&#32;c2&#32;=&#32;y
<anchor xml:id="_quantumcomm_8py_source_1l00855"/><link linkend="_namespacequantumcomm_1a685f20cc5ab4536617a667be7981d7e3">00855</link> &#32;&#32;&#32;&#32;#&#32;weight&#32;the&#32;objectives&#32;and&#32;constraints
<anchor xml:id="_quantumcomm_8py_source_1l00856"/>00856 &#32;&#32;&#32;&#32;return&#32;f1/0.5&#32;+&#32;f2/1.4&#32;+&#32;c1/3000&#32;+&#32;c2/50,&#32;\
<anchor xml:id="_quantumcomm_8py_source_1l00857"/>00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;np.minimum(ref_point,&#32;np.array([f1,&#32;f2]))&#32;#&#32;use&#32;the&#32;objectives&#32;as&#32;descriptive&#32;space
<anchor xml:id="_quantumcomm_8py_source_1l00858"/>00858 
<anchor xml:id="_quantumcomm_8py_source_1l00859"/>00859 def&#32;qd_fun(x):
<anchor xml:id="_quantumcomm_8py_source_1l00860"/>00860 &#32;&#32;&#32;&#32;return&#32;mo_to_qd(fitness(x))&#32;#&#32;convert&#32;the&#32;MO&#32;result&#32;into&#32;a&#32;QD&#32;result
<anchor xml:id="_quantumcomm_8py_source_1l00861"/><link linkend="_namespacequantumcomm_1a6b7a2382d55e8c0db17e1220d4cd7be3">00861</link> 
<anchor xml:id="_quantumcomm_8py_source_1l00862"/>00862 def&#32;get_arch(qd_bounds,&#32;niche_num,&#32;samples_per_niche):
<anchor xml:id="_quantumcomm_8py_source_1l00863"/>00863 &#32;&#32;&#32;&#32;xs,&#32;_&#32;=&#32;read_solution(&quot;res/quantcomm_1_100_6372134.npz&quot;)&#32;#&#32;inject&#32;an&#32;existing&#32;pareto&#32;front&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00864"/><link linkend="_namespacequantumcomm_1a9179fbf0ec29e945c2af91b0202b0e99">00864</link> &#32;&#32;&#32;&#32;arch&#32;=&#32;mapelites.empty_archive(dim,&#32;qd_bounds,&#32;niche_num,&#32;samples_per_niche)
<anchor xml:id="_quantumcomm_8py_source_1l00865"/>00865 &#32;&#32;&#32;&#32;mapelites.update_archive(arch,&#32;xs,&#32;qd_fun)
<anchor xml:id="_quantumcomm_8py_source_1l00866"/>00866 &#32;&#32;&#32;&#32;return&#32;arch
<anchor xml:id="_quantumcomm_8py_source_1l00867"/>00867 
<anchor xml:id="_quantumcomm_8py_source_1l00868"/>00868 def&#32;nd_par(niche_num&#32;=&#32;10000):
<anchor xml:id="_quantumcomm_8py_source_1l00869"/>00869 &#32;&#32;&#32;&#32;udp&#32;=&#32;constellation_udp()
<anchor xml:id="_quantumcomm_8py_source_1l00870"/><link linkend="_namespacequantumcomm_1a7b02c8bc9af9b7e849783b5a8cbfc014">00870</link> &#32;&#32;&#32;&#32;ubs&#32;=&#32;udp.get_bounds()
<anchor xml:id="_quantumcomm_8py_source_1l00871"/>00871 &#32;&#32;&#32;&#32;qd_bounds&#32;=&#32;Bounds([0.7,&#32;0.],&#32;[1.2,&#32;1.4])
<anchor xml:id="_quantumcomm_8py_source_1l00872"/>00872 &#32;&#32;&#32;&#32;samples_per_niche&#32;=&#32;20
<anchor xml:id="_quantumcomm_8py_source_1l00873"/>00873 &#32;&#32;&#32;&#32;arch&#32;=&#32;get_arch(qd_bounds,&#32;niche_num,&#32;samples_per_niche)
<anchor xml:id="_quantumcomm_8py_source_1l00874"/>00874 &#32;&#32;&#32;&#32;opt_params0&#32;=&#32;{&apos;solver&apos;:&apos;elites&apos;,&#32;&apos;popsize&apos;:100,&#32;&apos;use&apos;:2}
<anchor xml:id="_quantumcomm_8py_source_1l00875"/>00875 &#32;&#32;&#32;&#32;opt_params1&#32;=&#32;{&apos;solver&apos;:&apos;CRMFNES_CPP&apos;,&#32;&apos;max_evals&apos;:2000,&#32;&apos;popsize&apos;:32,&#32;&apos;stall_criterion&apos;:3}
<anchor xml:id="_quantumcomm_8py_source_1l00876"/>00876 &#32;&#32;&#32;&#32;archive&#32;=&#32;diversifier.minimize(
<anchor xml:id="_quantumcomm_8py_source_1l00877"/>00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapelites.wrapper(qd_fun,&#32;2,&#32;interval=10000,&#32;save_interval=100000),
<anchor xml:id="_quantumcomm_8py_source_1l00878"/>00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds,&#32;qd_bounds,
<anchor xml:id="_quantumcomm_8py_source_1l00879"/>00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers&#32;=&#32;32,&#32;opt_params=[opt_params0,&#32;opt_params1],&#32;archive&#32;=&#32;arch,
<anchor xml:id="_quantumcomm_8py_source_1l00880"/>00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;niche_num&#32;=&#32;niche_num,&#32;samples_per_niche&#32;=&#32;samples_per_niche,
<anchor xml:id="_quantumcomm_8py_source_1l00881"/>00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evals&#32;=&#32;1000000)
<anchor xml:id="_quantumcomm_8py_source_1l00882"/>00882 
<anchor xml:id="_quantumcomm_8py_source_1l00883"/>00883 &#32;&#32;&#32;&#32;print(&apos;final&#32;archive:&apos;,&#32;archive.info())
<anchor xml:id="_quantumcomm_8py_source_1l00884"/>00884 &#32;&#32;&#32;&#32;archive.save(&apos;final&#32;archive&apos;)
<anchor xml:id="_quantumcomm_8py_source_1l00885"/>00885 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00886"/>00886 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00887"/>00887 #++++++++++++++++++++++&#32;Apply&#32;BiteOpt&#32;Single-Objective&#32;Optimization&#32;++++++++++++++++++++++++++++++++++++++++
<anchor xml:id="_quantumcomm_8py_source_1l00888"/>00888 #&#32;Uses&#32;https://github.com/avaneev/biteopt&#32;applied&#32;to&#32;a&#32;fitness&#32;function&#32;maximizing&#32;the&#32;hypervolume
<anchor xml:id="_quantumcomm_8py_source_1l00889"/>00889 #&#32;to&#32;find&#32;the&#32;best&#32;target_num&#32;solutions&#32;maximizing&#32;the&#32;pareto&#32;front
<anchor xml:id="_quantumcomm_8py_source_1l00890"/>00890 #&#32;Easily&#32;surpasses&#32;score&#32;6400&#32;when&#32;given&#32;enough&#32;time.&#32;The&#32;final&#32;result&#32;needs&#32;to&#32;be&#32;reduced&#32;to&#32;100&#32;solutions.&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00891"/>00891 
<anchor xml:id="_quantumcomm_8py_source_1l00892"/>00892 def&#32;so_par():
<anchor xml:id="_quantumcomm_8py_source_1l00893"/>00893 
<anchor xml:id="_quantumcomm_8py_source_1l00894"/><link linkend="_namespacequantumcomm_1aeb3856600fe5caa9eff67e2ebb6f269a">00894</link> &#32;&#32;&#32;&#32;target_num&#32;=&#32;512&#32;#&#32;desired&#32;size&#32;of&#32;the&#32;pareto&#32;front&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00895"/>00895 
<anchor xml:id="_quantumcomm_8py_source_1l00896"/>00896 &#32;&#32;&#32;&#32;#&#32;hypervolume&#32;replacing&#32;one&#32;solution&#32;of&#32;the&#32;pareto&#32;front&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00897"/>00897 &#32;&#32;&#32;&#32;def&#32;fit_hyper(i,&#32;ys,&#32;x):
<anchor xml:id="_quantumcomm_8py_source_1l00898"/>00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;fitness(x)
<anchor xml:id="_quantumcomm_8py_source_1l00899"/>00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;sum([10000&#32;+&#32;c&#32;for&#32;c&#32;in&#32;y[2:]&#32;if&#32;c&#32;&gt;&#32;0])
<anchor xml:id="_quantumcomm_8py_source_1l00900"/>00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;c&#32;&gt;&#32;0:&#32;#&#32;constraint&#32;violation
<anchor xml:id="_quantumcomm_8py_source_1l00901"/>00901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;c
<anchor xml:id="_quantumcomm_8py_source_1l00902"/>00902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;pg.pareto_dominance(y[:2],&#32;ref_point):&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00903"/>00903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys[i]&#32;=&#32;y[:2]
<anchor xml:id="_quantumcomm_8py_source_1l00904"/>00904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;-pg.hypervolume(ys).compute(ref_point)&#32;*&#32;10000&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00905"/>00905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else:
<anchor xml:id="_quantumcomm_8py_source_1l00906"/>00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l00907"/>00907 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00908"/>00908 &#32;&#32;&#32;&#32;#&#32;parallel&#32;optimization&#32;of&#32;the&#32;whole&#32;pareto&#32;front&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00909"/>00909 &#32;&#32;&#32;&#32;class&#32;OptSo(object):
<anchor xml:id="_quantumcomm_8py_source_1l00910"/>00910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00911"/>00911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;__init__(self,&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00912"/>00912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evals,
<anchor xml:id="_quantumcomm_8py_source_1l00913"/>00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs,
<anchor xml:id="_quantumcomm_8py_source_1l00914"/>00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys
<anchor xml:id="_quantumcomm_8py_source_1l00915"/>00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;):&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00916"/>00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.max_evals&#32;=&#32;max_evals&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00917"/>00917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.manager&#32;=&#32;Manager()&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00918"/><link linkend="_namespacequantumcomm_1a4ae96be5bf50bd2b7bdbf8077fcbf992">00918</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.ys&#32;=&#32;self.manager.list(ys)
<anchor xml:id="_quantumcomm_8py_source_1l00919"/><link linkend="_namespacequantumcomm_1a10d52de9364caed740ad48fe34ecc151">00919</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.ys0&#32;=&#32;list(ys)
<anchor xml:id="_quantumcomm_8py_source_1l00920"/><link linkend="_namespacequantumcomm_1afa433f406099fb18e0906c1ca5fc7918">00920</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.xs&#32;=&#32;self.manager.list(xs)
<anchor xml:id="_quantumcomm_8py_source_1l00921"/><link linkend="_namespacequantumcomm_1a3e2a162310a02aff9e3e2129cfceaa2c">00921</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.min_ys&#32;=&#32;np.amin(ys,&#32;axis=0)
<anchor xml:id="_quantumcomm_8py_source_1l00922"/><link linkend="_namespacequantumcomm_1a009bae3131bf4f32ab41813e095bd545">00922</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.count&#32;=&#32;mp.RawValue(ct.c_int,&#32;0)&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00923"/><link linkend="_namespacequantumcomm_1a4df7798fa72740ab9b5adcadca862f58">00923</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.mutex&#32;=&#32;mp.Lock()&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00924"/><link linkend="_namespacequantumcomm_1a5b2fa9d0041f90fcf0b912c6de25020a">00924</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.n&#32;=&#32;len(ys)
<anchor xml:id="_quantumcomm_8py_source_1l00925"/><link linkend="_namespacequantumcomm_1a3a28fa8296e887be274b151c8429b985">00925</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00926"/><link linkend="_namespacequantumcomm_1ae18efb9ddb56b08da17e0a6c224e48fa">00926</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;incr(self):
<anchor xml:id="_quantumcomm_8py_source_1l00927"/>00927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;with&#32;self.mutex:
<anchor xml:id="_quantumcomm_8py_source_1l00928"/>00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next&#32;=&#32;self.count.value
<anchor xml:id="_quantumcomm_8py_source_1l00929"/>00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.count.value&#32;+=&#32;1
<anchor xml:id="_quantumcomm_8py_source_1l00930"/>00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;next
<anchor xml:id="_quantumcomm_8py_source_1l00931"/>00931 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00932"/>00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;eval(self,&#32;workers=mp.cpu_count()):
<anchor xml:id="_quantumcomm_8py_source_1l00933"/>00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proc=[mp.Process(target=self.eval_loop)&#32;for&#32;pid&#32;in&#32;range(workers)]
<anchor xml:id="_quantumcomm_8py_source_1l00934"/>00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[p.start()&#32;for&#32;p&#32;in&#32;proc]
<anchor xml:id="_quantumcomm_8py_source_1l00935"/>00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[p.join()&#32;for&#32;p&#32;in&#32;proc]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00936"/>00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;np.array(self.xs),&#32;np.array(self.ys)
<anchor xml:id="_quantumcomm_8py_source_1l00937"/>00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00938"/>00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;eval_loop(self):
<anchor xml:id="_quantumcomm_8py_source_1l00939"/>00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;while&#32;True:
<anchor xml:id="_quantumcomm_8py_source_1l00940"/>00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;self.incr()
<anchor xml:id="_quantumcomm_8py_source_1l00941"/>00941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;i&#32;&gt;=&#32;self.n:
<anchor xml:id="_quantumcomm_8py_source_1l00942"/>00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return
<anchor xml:id="_quantumcomm_8py_source_1l00943"/>00943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logger.info(f&apos;optimizing&#32;solution&#32;{i}&apos;)
<anchor xml:id="_quantumcomm_8py_source_1l00944"/>00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fit&#32;=&#32;wrapper(partial(fit_hyper,&#32;i,&#32;list(self.ys)))
<anchor xml:id="_quantumcomm_8py_source_1l00945"/>00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x0&#32;=&#32;self.xs[i]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00946"/>00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;bitecpp.minimize(fit,&#32;bounds,&#32;x0,&#32;max_evaluations&#32;=&#32;self.max_evals)
<anchor xml:id="_quantumcomm_8py_source_1l00947"/>00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;ret.fun&#32;&lt;&#32;0:&#32;#&#32;no&#32;constraint&#32;violation?
<anchor xml:id="_quantumcomm_8py_source_1l00948"/>00948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;fitness(ret.x)[:2]
<anchor xml:id="_quantumcomm_8py_source_1l00949"/>00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.ys[i]&#32;=&#32;y
<anchor xml:id="_quantumcomm_8py_source_1l00950"/>00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.xs[i]&#32;=&#32;ret.x
<anchor xml:id="_quantumcomm_8py_source_1l00951"/>00951 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00952"/>00952 &#32;&#32;&#32;&#32;def&#32;opt_so(max_evals,&#32;xs,&#32;ys,&#32;workers=mp.cpu_count()):
<anchor xml:id="_quantumcomm_8py_source_1l00953"/>00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eval&#32;=&#32;OptSo(max_evals,&#32;xs,&#32;ys)
<anchor xml:id="_quantumcomm_8py_source_1l00954"/>00954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;eval.eval(workers)
<anchor xml:id="_quantumcomm_8py_source_1l00955"/>00955 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00956"/>00956 &#32;&#32;&#32;&#32;max_evals&#32;=&#32;2000&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00957"/>00957 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00958"/>00958 &#32;&#32;&#32;&#32;#&#32;random&#32;initialization
<anchor xml:id="_quantumcomm_8py_source_1l00959"/>00959 &#32;&#32;&#32;&#32;#&#32;rg&#32;=&#32;Generator(MT19937())&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00960"/>00960 &#32;&#32;&#32;&#32;#&#32;xs&#32;=&#32;[rg.uniform(ubs[0],&#32;ubs[1])&#32;for&#32;_&#32;in&#32;range(target_num)]
<anchor xml:id="_quantumcomm_8py_source_1l00961"/>00961 &#32;&#32;&#32;&#32;#&#32;ys&#32;=&#32;[ref_point-0.000001&#32;for&#32;_&#32;in&#32;range(target_num)]
<anchor xml:id="_quantumcomm_8py_source_1l00962"/>00962 
<anchor xml:id="_quantumcomm_8py_source_1l00963"/>00963 &#32;&#32;&#32;&#32;#&#32;initialization&#32;with&#32;a&#32;given&#32;pareto&#32;front&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00964"/>00964 &#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;read_solution(&quot;res/quantcomm_1_100_6372134.npz&quot;)&#32;#&#32;inject&#32;an&#32;existing&#32;pareto&#32;front
<anchor xml:id="_quantumcomm_8py_source_1l00965"/>00965 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00966"/>00966 &#32;&#32;&#32;&#32;last_xs&#32;=&#32;[]
<anchor xml:id="_quantumcomm_8py_source_1l00967"/>00967 &#32;&#32;&#32;&#32;last_ys&#32;=&#32;[]
<anchor xml:id="_quantumcomm_8py_source_1l00968"/>00968 &#32;&#32;&#32;&#32;for&#32;i&#32;in&#32;range(1,&#32;1000):
<anchor xml:id="_quantumcomm_8py_source_1l00969"/>00969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;opt_so(max_evals,&#32;xs,&#32;ys)
<anchor xml:id="_quantumcomm_8py_source_1l00970"/>00970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;moretry.pareto(np.array(list(xs)&#32;+&#32;last_xs),&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00971"/>00971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;np.array(list(ys)&#32;+&#32;last_ys))
<anchor xml:id="_quantumcomm_8py_source_1l00972"/>00972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;len(ys)&#32;&gt;&#32;target_num:
<anchor xml:id="_quantumcomm_8py_source_1l00973"/>00973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;reduce(xs,&#32;ys,&#32;target_num)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00974"/>00974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hv&#32;=&#32;int(pg.hypervolume(ys).compute(ref_point)&#32;*&#32;10000000)&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00975"/>00975 
<anchor xml:id="_quantumcomm_8py_source_1l00976"/>00976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;np.savez_compressed(&quot;quantcomm_&quot;&#32;+&#32;str(i)&#32;+&#32;&quot;_&quot;&#32;+&#32;str(len(ys))&#32;+&#32;&quot;_&quot;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00977"/>00977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;str(max_evals)&#32;+&#32;&quot;_&quot;&#32;+&#32;str(hv),&#32;xs=xs,&#32;ys=ys)
<anchor xml:id="_quantumcomm_8py_source_1l00978"/>00978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last_xs&#32;=&#32;list(xs)
<anchor xml:id="_quantumcomm_8py_source_1l00979"/>00979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last_ys&#32;=&#32;list(ys)
<anchor xml:id="_quantumcomm_8py_source_1l00980"/>00980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00981"/>00981 &#32;&#32;&#32;&#32;return&#32;xs
<anchor xml:id="_quantumcomm_8py_source_1l00982"/>00982 
<anchor xml:id="_quantumcomm_8py_source_1l00983"/>00983 
<anchor xml:id="_quantumcomm_8py_source_1l00984"/>00984 #++++++++++++++++++++++&#32;Apply&#32;PYMOO&#32;NSGA-II&#32;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<anchor xml:id="_quantumcomm_8py_source_1l00985"/>00985 #&#32;Uses&#32;PYMOO&#32;and&#32;https://github.com/avaneev/biteopt&#32;to&#32;find&#32;the&#32;best&#32;target_num&#32;solutions
<anchor xml:id="_quantumcomm_8py_source_1l00986"/>00986 #&#32;maximizing&#32;the&#32;pareto&#32;front.
<anchor xml:id="_quantumcomm_8py_source_1l00987"/>00987 #&#32;Easily&#32;surpasses&#32;score&#32;6400&#32;when&#32;given&#32;enough&#32;time.&#32;The&#32;result&#32;is&#32;already&#32;reduced&#32;to&#32;100&#32;solutions.&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00988"/>00988 #&#32;Note&#32;that&#32;instead&#32;of&#32;relying&#32;on&#32;PYMOOs&#32;parallelization&#32;mechanisms&#32;(partial)&#32;optimization&#32;runs
<anchor xml:id="_quantumcomm_8py_source_1l00989"/>00989 #&#32;are&#32;executed&#32;in&#32;parallel&#32;achieving&#32;maximal&#32;scaling&#32;with&#32;the&#32;number&#32;of&#32;cores.&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00990"/>00990 #&#32;The&#32;fitness&#32;function&#32;is&#32;&quot;hijacked&quot;&#32;collecting&#32;solutions&#32;later&#32;joined&#32;for&#32;the&#32;resulting&#32;pareto&#32;front.
<anchor xml:id="_quantumcomm_8py_source_1l00991"/>00991 
<anchor xml:id="_quantumcomm_8py_source_1l00992"/>00992 def&#32;pymoo_par():
<anchor xml:id="_quantumcomm_8py_source_1l00993"/>00993 
<anchor xml:id="_quantumcomm_8py_source_1l00994"/><link linkend="_namespacequantumcomm_1a1b51de779f54455f301b965bca17467c">00994</link> &#32;&#32;&#32;&#32;from&#32;pymoo.core.problem&#32;import&#32;ElementwiseProblem&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00995"/>00995 &#32;&#32;&#32;&#32;from&#32;pymoo.algorithms.moo.nsga2&#32;import&#32;NSGA2&#32;
<anchor xml:id="_quantumcomm_8py_source_1l00996"/>00996 &#32;&#32;&#32;&#32;from&#32;pymoo.termination&#32;import&#32;get_termination
<anchor xml:id="_quantumcomm_8py_source_1l00997"/>00997 &#32;&#32;&#32;&#32;from&#32;pymoo.operators.crossover.sbx&#32;import&#32;SBX
<anchor xml:id="_quantumcomm_8py_source_1l00998"/>00998 &#32;&#32;&#32;&#32;from&#32;pymoo.operators.mutation.pm&#32;import&#32;PM
<anchor xml:id="_quantumcomm_8py_source_1l00999"/>00999 &#32;&#32;&#32;&#32;from&#32;pymoo.operators.sampling.rnd&#32;import&#32;FloatRandomSampling
<anchor xml:id="_quantumcomm_8py_source_1l01000"/>01000 &#32;&#32;&#32;&#32;from&#32;pymoo.constraints.eps&#32;import&#32;AdaptiveEpsilonConstraintHandling
<anchor xml:id="_quantumcomm_8py_source_1l01001"/>01001 &#32;&#32;&#32;&#32;from&#32;pymoo.optimize&#32;import&#32;minimize
<anchor xml:id="_quantumcomm_8py_source_1l01002"/>01002 &#32;&#32;&#32;&#32;from&#32;itertools&#32;import&#32;chain
<anchor xml:id="_quantumcomm_8py_source_1l01003"/>01003 
<anchor xml:id="_quantumcomm_8py_source_1l01004"/>01004 &#32;&#32;&#32;&#32;target_num&#32;=&#32;100&#32;#&#32;desired&#32;size&#32;of&#32;the&#32;pareto&#32;front&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01005"/>01005 &#32;&#32;&#32;&#32;n_eval&#32;=&#32;10000
<anchor xml:id="_quantumcomm_8py_source_1l01006"/>01006 &#32;&#32;&#32;&#32;popsize&#32;=&#32;300
<anchor xml:id="_quantumcomm_8py_source_1l01007"/>01007 &#32;&#32;&#32;&#32;time_0&#32;=&#32;time.perf_counter()
<anchor xml:id="_quantumcomm_8py_source_1l01008"/>01008 &#32;&#32;&#32;&#32;guess&#32;=&#32;None
<anchor xml:id="_quantumcomm_8py_source_1l01009"/>01009 &#32;&#32;&#32;&#32;guess,&#32;ys&#32;=&#32;read_solution(&quot;res/quantcomm_1_100_6372134.npz&quot;)&#32;#&#32;inject&#32;an&#32;existing&#32;pareto&#32;front
<anchor xml:id="_quantumcomm_8py_source_1l01010"/>01010 &#32;&#32;&#32;&#32;guess,&#32;ys&#32;=&#32;reduce(guess,&#32;ys,&#32;target_num)&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01011"/>01011 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01012"/>01012 &#32;&#32;&#32;&#32;class&#32;fitness_wrapper():
<anchor xml:id="_quantumcomm_8py_source_1l01013"/>01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01014"/>01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;__init__(self,&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01015"/>01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pid,
<anchor xml:id="_quantumcomm_8py_source_1l01016"/>01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs_out,
<anchor xml:id="_quantumcomm_8py_source_1l01017"/>01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys_out
<anchor xml:id="_quantumcomm_8py_source_1l01018"/>01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;):&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01019"/>01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.max_hv&#32;=&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l01020"/>01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.xs&#32;=&#32;[]
<anchor xml:id="_quantumcomm_8py_source_1l01021"/><link linkend="_namespacequantumcomm_1aad80073dce041cbb8ad4b99c5d39fc74">01021</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.ys&#32;=&#32;[]
<anchor xml:id="_quantumcomm_8py_source_1l01022"/>01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.count&#32;=&#32;1
<anchor xml:id="_quantumcomm_8py_source_1l01023"/>01023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.evals&#32;=&#32;0
<anchor xml:id="_quantumcomm_8py_source_1l01024"/>01024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.pid&#32;=&#32;pid
<anchor xml:id="_quantumcomm_8py_source_1l01025"/><link linkend="_namespacequantumcomm_1ae07ba0a2eed2514d1829c083ea9828b4">01025</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.xs_out&#32;=&#32;xs_out
<anchor xml:id="_quantumcomm_8py_source_1l01026"/><link linkend="_namespacequantumcomm_1a894d47aede87908d7383da852279e601">01026</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.ys_out&#32;=&#32;ys_out
<anchor xml:id="_quantumcomm_8py_source_1l01027"/><link linkend="_namespacequantumcomm_1acf793ce9680502af168bcaa54d2b161b">01027</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01028"/><link linkend="_namespacequantumcomm_1acb604547ddffa821c69c8ccbec065d4e">01028</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#&#32;fitness&#32;accumulates&#32;valid&#32;solutions&#32;and&#32;monitors&#32;their&#32;hypervolume
<anchor xml:id="_quantumcomm_8py_source_1l01029"/>01029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;__call__(self,&#32;x):
<anchor xml:id="_quantumcomm_8py_source_1l01030"/>01030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;fitness(x)
<anchor xml:id="_quantumcomm_8py_source_1l01031"/>01031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.evals&#32;+=&#32;1&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01032"/>01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;np.amax(y[2:])&#32;&lt;=&#32;0&#32;and&#32;np.less_equal(y[:2],&#32;ref_point).all()&#32;:&#32;#&#32;add&#32;only&#32;valid&#32;solutions
<anchor xml:id="_quantumcomm_8py_source_1l01033"/>01033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.ys.append(y[:2])&#32;#&#32;exclude&#32;constraint&#32;values&#32;because&#32;solution&#32;is&#32;valid
<anchor xml:id="_quantumcomm_8py_source_1l01034"/>01034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.xs.append(x)
<anchor xml:id="_quantumcomm_8py_source_1l01035"/>01035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;len(self.ys)&#32;&gt;=&#32;2*popsize:
<anchor xml:id="_quantumcomm_8py_source_1l01036"/>01036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.count&#32;+=&#32;1&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01037"/>01037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;moretry.pareto(np.array(self.xs),&#32;np.array(self.ys))&#32;#&#32;reduce&#32;to&#32;pareto&#32;front
<anchor xml:id="_quantumcomm_8py_source_1l01038"/>01038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.xs,&#32;self.ys&#32;=&#32;list(xs),&#32;list(ys)
<anchor xml:id="_quantumcomm_8py_source_1l01039"/>01039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hv&#32;=&#32;pg.hypervolume(self.ys).compute(ref_point)
<anchor xml:id="_quantumcomm_8py_source_1l01040"/>01040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;hv&#32;&gt;&#32;self.max_hv&#32;*&#32;1.0001:&#32;#&#32;significant&#32;improvement:&#32;register&#32;solutions&#32;at&#32;managed&#32;dicts
<anchor xml:id="_quantumcomm_8py_source_1l01041"/>01041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.max_hv&#32;=&#32;hv
<anchor xml:id="_quantumcomm_8py_source_1l01042"/>01042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.xs_out[self.pid]&#32;=&#32;self.xs
<anchor xml:id="_quantumcomm_8py_source_1l01043"/>01043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.ys_out[self.pid]&#32;=&#32;self.ys
<anchor xml:id="_quantumcomm_8py_source_1l01044"/>01044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logger.info(f&apos;time:&#32;{dtime(time_0)}&#32;ev:&#32;{self.evals}&#32;hv:&#32;{hv&#32;*&#32;10000}&#32;n:&#32;{len(ys)}&apos;)
<anchor xml:id="_quantumcomm_8py_source_1l01045"/>01045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;y&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01046"/>01046 &#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01047"/>01047 &#32;&#32;&#32;&#32;class&#32;OptPymoo(object):
<anchor xml:id="_quantumcomm_8py_source_1l01048"/>01048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01049"/>01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;eval_loop(self,&#32;workers=mp.cpu_count()):
<anchor xml:id="_quantumcomm_8py_source_1l01050"/>01050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;guess
<anchor xml:id="_quantumcomm_8py_source_1l01051"/>01051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;i&#32;in&#32;range(1,&#32;1000):
<anchor xml:id="_quantumcomm_8py_source_1l01052"/>01052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;self.eval(i,&#32;xs,&#32;workers)
<anchor xml:id="_quantumcomm_8py_source_1l01053"/>01053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;xs,&#32;ys
<anchor xml:id="_quantumcomm_8py_source_1l01054"/>01054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01055"/>01055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;eval(self,&#32;i,&#32;guess,&#32;workers):
<anchor xml:id="_quantumcomm_8py_source_1l01056"/>01056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;manager&#32;=&#32;Manager()
<anchor xml:id="_quantumcomm_8py_source_1l01057"/>01057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs_out&#32;=&#32;manager.dict()&#32;#&#32;for&#32;inter&#32;process&#32;communication
<anchor xml:id="_quantumcomm_8py_source_1l01058"/>01058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys_out&#32;=&#32;manager.dict()&#32;#&#32;collects&#32;solutions&#32;generated&#32;in&#32;the&#32;sub&#32;processes
<anchor xml:id="_quantumcomm_8py_source_1l01059"/>01059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fits&#32;=&#32;[fitness_wrapper(pid,&#32;xs_out,&#32;ys_out)&#32;for&#32;pid&#32;in&#32;range(workers)]
<anchor xml:id="_quantumcomm_8py_source_1l01060"/>01060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proc=[mp.Process(target=self.optimize,&#32;args=(guess,&#32;fits[pid],&#32;pid))&#32;for&#32;pid&#32;in&#32;range(workers)]
<anchor xml:id="_quantumcomm_8py_source_1l01061"/>01061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[p.start()&#32;for&#32;p&#32;in&#32;proc]&#32;#&#32;spawn&#32;NSGAII&#32;optimization&#32;workers
<anchor xml:id="_quantumcomm_8py_source_1l01062"/>01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[p.join()&#32;for&#32;p&#32;in&#32;proc]&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01063"/>01063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;np.array(list(chain.from_iterable(xs_out.values())))&#32;#&#32;join&#32;collected&#32;solutions
<anchor xml:id="_quantumcomm_8py_source_1l01064"/>01064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;=&#32;np.array(list(chain.from_iterable(ys_out.values())))&#32;#&#32;we&#32;ignore&#32;the&#32;pymoo&#32;optimization&#32;result
<anchor xml:id="_quantumcomm_8py_source_1l01065"/>01065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;moretry.pareto(xs,&#32;ys)
<anchor xml:id="_quantumcomm_8py_source_1l01066"/>01066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;len(ys)&#32;&gt;&#32;target_num:
<anchor xml:id="_quantumcomm_8py_source_1l01067"/>01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;reduce(xs,&#32;ys,&#32;target_num)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01068"/>01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hv&#32;=&#32;int(pg.hypervolume(ys).compute(ref_point)&#32;*&#32;10000000)&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01069"/>01069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;np.savez_compressed(&quot;quantcomm_&quot;&#32;+&#32;str(i)&#32;+&#32;&quot;_&quot;&#32;+&#32;str(len(ys))&#32;+&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01070"/>01070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;_&quot;&#32;+&#32;str(hv),&#32;xs=xs,&#32;ys=ys)&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01071"/>01071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;xs,&#32;ys
<anchor xml:id="_quantumcomm_8py_source_1l01072"/>01072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01073"/>01073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;optimize(self,&#32;guess,&#32;fit,&#32;pid):
<anchor xml:id="_quantumcomm_8py_source_1l01074"/>01074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01075"/>01075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;class&#32;MyProblem(ElementwiseProblem):
<anchor xml:id="_quantumcomm_8py_source_1l01076"/>01076 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01077"/>01077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;__init__(self,&#32;**kwargs
<anchor xml:id="_quantumcomm_8py_source_1l01078"/>01078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;super().__init__(n_var=dim,
<anchor xml:id="_quantumcomm_8py_source_1l01079"/>01079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_obj=nobj,
<anchor xml:id="_quantumcomm_8py_source_1l01080"/>01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_constr=ncon,
<anchor xml:id="_quantumcomm_8py_source_1l01081"/>01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xl=np.array(bounds.lb),
<anchor xml:id="_quantumcomm_8py_source_1l01082"/>01082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xu=np.array(bounds.ub),&#32;**kwargs)
<anchor xml:id="_quantumcomm_8py_source_1l01083"/>01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01084"/>01084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;def&#32;_evaluate(self,&#32;x,&#32;out,&#32;*args,&#32;**kwargs):&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01085"/>01085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;fit(x)
<anchor xml:id="_quantumcomm_8py_source_1l01086"/>01086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out[&quot;F&quot;]&#32;=&#32;y[:nobj]
<anchor xml:id="_quantumcomm_8py_source_1l01087"/>01087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out[&quot;G&quot;]&#32;=&#32;y[nobj:]
<anchor xml:id="_quantumcomm_8py_source_1l01088"/>01088 
<anchor xml:id="_quantumcomm_8py_source_1l01089"/>01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;problem&#32;=&#32;MyProblem()
<anchor xml:id="_quantumcomm_8py_source_1l01090"/>01090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;algorithm&#32;=&#32;NSGA2(
<anchor xml:id="_quantumcomm_8py_source_1l01091"/>01091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pop_size=popsize,
<anchor xml:id="_quantumcomm_8py_source_1l01092"/>01092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n_offsprings=10,
<anchor xml:id="_quantumcomm_8py_source_1l01093"/>01093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sampling=FloatRandomSampling()&#32;if&#32;guess&#32;is&#32;None&#32;else&#32;guess,
<anchor xml:id="_quantumcomm_8py_source_1l01094"/>01094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crossover=SBX(prob=0.9,&#32;eta=15),&#32;#&#32;simulated&#32;binary&#32;crossover
<anchor xml:id="_quantumcomm_8py_source_1l01095"/>01095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mutation=PM(eta=20),&#32;#&#32;polynomial&#32;mutation&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01096"/>01096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eliminate_duplicates=True,
<anchor xml:id="_quantumcomm_8py_source_1l01097"/>01097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01098"/>01098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;algorithm&#32;=&#32;AdaptiveEpsilonConstraintHandling(algorithm,&#32;perc_eps_until=0.5)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01099"/>01099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minimize(problem,&#32;algorithm,&#32;get_termination(&quot;n_eval&quot;,&#32;n_eval),&#32;verbose=False,&#32;seed=pid*677)
<anchor xml:id="_quantumcomm_8py_source_1l01100"/>01100 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01101"/>01101 &#32;&#32;&#32;&#32;opt&#32;=&#32;OptPymoo()
<anchor xml:id="_quantumcomm_8py_source_1l01102"/>01102 &#32;&#32;&#32;&#32;return&#32;opt.eval_loop()
<anchor xml:id="_quantumcomm_8py_source_1l01103"/>01103 
<anchor xml:id="_quantumcomm_8py_source_1l01104"/>01104 #++++++++++++++++++++++&#32;Reduction&#32;to&#32;100&#32;solutions&#32;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<anchor xml:id="_quantumcomm_8py_source_1l01105"/>01105 #&#32;Uses&#32;https://github.com/avaneev/biteopt&#32;/&#32;parallel&#32;optimization&#32;to&#32;find&#32;the&#32;best&#32;num&#32;solutions
<anchor xml:id="_quantumcomm_8py_source_1l01106"/>01106 #&#32;maximizing&#32;the&#32;pareto&#32;front
<anchor xml:id="_quantumcomm_8py_source_1l01107"/>01107 &#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01108"/>01108 def&#32;reduce(xs,&#32;ys,&#32;num,&#32;evals&#32;=&#32;50000,&#32;retries&#32;=&#32;mp.cpu_count()):&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01109"/>01109 &#32;&#32;&#32;&#32;if&#32;len(ys)&#32;&lt;=&#32;num:
<anchor xml:id="_quantumcomm_8py_source_1l01110"/><link linkend="_namespacequantumcomm_1a29b16ceed23f94c44a426cf51cb2670d">01110</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;xs,&#32;ys
<anchor xml:id="_quantumcomm_8py_source_1l01111"/>01111 &#32;&#32;&#32;&#32;bounds&#32;=&#32;Bounds([0]*num,&#32;[len(ys)-1E-9]*num)&#32;#&#32;select&#32;best&#32;num&#32;from&#32;xs,&#32;ys
<anchor xml:id="_quantumcomm_8py_source_1l01112"/>01112 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01113"/>01113 &#32;&#32;&#32;&#32;def&#32;fit(x):&#32;#&#32;selects&#32;100&#32;solutions&#32;and&#32;returns&#32;the&#32;negated&#32;pareto&#32;front&#32;of&#32;this&#32;selection
<anchor xml:id="_quantumcomm_8py_source_1l01114"/>01114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;selected&#32;=&#32;x.astype(int)&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01115"/>01115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys_sel&#32;=&#32;ys[selected]&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01116"/>01116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hv&#32;=&#32;pg.hypervolume(ys_sel)
<anchor xml:id="_quantumcomm_8py_source_1l01117"/>01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;-hv.compute(ref_point)&#32;*&#32;10000
<anchor xml:id="_quantumcomm_8py_source_1l01118"/>01118 
<anchor xml:id="_quantumcomm_8py_source_1l01119"/>01119 &#32;&#32;&#32;&#32;res&#32;=&#32;fcmaes.retry.minimize(wrapper(fit),&#32;#&#32;parallel&#32;optimization&#32;restart&#32;/&#32;retry
<anchor xml:id="_quantumcomm_8py_source_1l01120"/>01120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds,&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01121"/>01121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optimizer=Bite_cpp(evals),&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01122"/>01122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries=retries)
<anchor xml:id="_quantumcomm_8py_source_1l01123"/>01123 &#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01124"/>01124 &#32;&#32;&#32;&#32;selected&#32;=&#32;res.x.astype(int)
<anchor xml:id="_quantumcomm_8py_source_1l01125"/>01125 &#32;&#32;&#32;&#32;return&#32;xs[selected],&#32;ys[selected]
<anchor xml:id="_quantumcomm_8py_source_1l01126"/>01126 &#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01127"/>01127 if&#32;__name__&#32;==&#32;&apos;__main__&apos;:
<anchor xml:id="_quantumcomm_8py_source_1l01128"/>01128 
<anchor xml:id="_quantumcomm_8py_source_1l01129"/>01129 &#32;&#32;&#32;&#32;#pymoo_par()
<anchor xml:id="_quantumcomm_8py_source_1l01130"/>01130 &#32;&#32;&#32;&#32;#so_par()&#32;&#32;&#32;&#32;
<anchor xml:id="_quantumcomm_8py_source_1l01131"/>01131 &#32;&#32;&#32;&#32;mo_par()
<anchor xml:id="_quantumcomm_8py_source_1l01132"/>01132 &#32;&#32;&#32;&#32;#nd_par()
<anchor xml:id="_quantumcomm_8py_source_1l01133"/>01133 
</programlisting></section>
