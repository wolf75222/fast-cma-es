<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Class List</title>
Here are the classes, structs, unions and interfaces with brief descriptions:<link linkend="_classfcmaes_1_1evaluator_1_1__fitness">fcmaes.evaluator._fitness</link>
<para>Represents a fitness evaluation system for optimization problems </para>
<link linkend="_classfcmaes_1_1testfun_1_1__testfun">fcmaes.testfun._testfun</link>
<para>Represents a test function, its name, functional implementation, and bounds </para>
<link linkend="_classexamples_1_1rover_1_1_a_a_boxes">examples.rover.AABoxes</link><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c">fcmaes.cmaescpp.ACMA_C</link>
<para>Implementation of the ACMA-C algorithm for optimization </para>
<link linkend="_classacmaes_1_1_acmaes_optimizer">acmaes::AcmaesOptimizer</link><link linkend="_classpgpe_1_1_a_d_a_m">pgpe::ADAM</link><link linkend="_classexamples_1_1rover_1_1_additive_costs">examples.rover.AdditiveCosts</link><link linkend="_classanpcp_1_1_a_n_p_c_p">anpcp.ANPCP</link><link linkend="_classanpcpc_1_1_a_n_p_c_p_c">anpcpc.ANPCPC</link><link linkend="_classfcmaes_1_1mapelites_1_1_archive">fcmaes.mapelites.Archive</link>
<para>Handles the storage, organization, and management of solutions in a multi-dimensional archive for Quality-Diversity optimization </para>
<link linkend="_classfcmaes_1_1astro_1_1_astrofun">fcmaes.astro.Astrofun</link>
<para>Represents an astronomical function with associated properties and constraints </para>
<link linkend="_classexamples_1_1robot_1_1b2_world_interface">examples.robot.b2WorldInterface</link><link linkend="_classfcmaes_1_1journal_1_1_base__message">fcmaes.journal.Base_message</link>
<para>Represents the base structure of a message </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_basin__hopping">fcmaes.optimizer.Basin_hopping</link>
<para>Optimization class implementing the basin hopping algorithm from SciPy </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">fcmaes.optimizer.Bite_cpp</link><link linkend="_classbiteopt_1_1_bite_optimizer">biteopt::BiteOptimizer</link><link linkend="_classblocking__queue">blocking_queue&lt; T &gt;</link><link linkend="_classexamples_1_1siemens_1_1_buffer">examples.siemens.Buffer</link><link linkend="_classfcmaes_1_1evaluator_1_1callback">fcmaes.evaluator.callback</link>
<para>Represents a callable object to evaluate a function with input processing </para>
<link linkend="_classfcmaes_1_1evaluator_1_1callback__mo">fcmaes.evaluator.callback_mo</link>
<para>Callable object for multi-objective optimization </para>
<link linkend="_classfcmaes_1_1evaluator_1_1callback__par">fcmaes.evaluator.callback_par</link>
<para>Wrapper class for callable objects with functionality to process populations of data using provided functions </para>
<link linkend="_classfcmaes_1_1evaluator_1_1callback__so">fcmaes.evaluator.callback_so</link>
<para>Handles callback functionality for single-objective optimization purposes </para>
<link linkend="_classfcmaes_1_1astro_1_1_cassini1">fcmaes.astro.Cassini1</link>
<para><link linkend="_classfcmaes_1_1astro_1_1_cassini1">Cassini1</link> class that represents a specific astronomical function configuration </para>
<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo">examples.moexamples.cassini1_mo</link><link linkend="_classfcmaes_1_1astro_1_1_cassini1minlp">fcmaes.astro.Cassini1minlp</link>
<para>Represents the <link linkend="_classfcmaes_1_1astro_1_1_cassini1">Cassini1</link> MINLP (Mixed-Integer Nonlinear Programming) problem </para>
<link linkend="_classfcmaes_1_1astro_1_1_cassini1multi">fcmaes.astro.Cassini1multi</link>
<para>Represents a mathematical optimization model for the <link linkend="_classfcmaes_1_1astro_1_1_cassini1">Cassini1</link> multi-objective problem </para>
<link linkend="_classfcmaes_1_1astro_1_1_cassini2">fcmaes.astro.Cassini2</link>
<para>Represents the <link linkend="_classfcmaes_1_1astro_1_1_cassini2">Cassini2</link> optimization problem </para>
<link linkend="_classexamples_1_1elitescass2_1_1_cassini2__me">examples.elitescass2.Cassini2_me</link>
<para>Map-Elites wrapper for the ESA <link linkend="_classfcmaes_1_1astro_1_1_cassini2">Cassini2</link> benchmark problem </para>
<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo">examples.moexamples.cassini2_mo</link><link linkend="_classexamples_1_1cassini2__minlp_1_1_cassini_multi">examples.cassini2_minlp.CassiniMulti</link>
<para>See <link xlink:href="https://www.esa.int/gsp/ACT/projects/gtop/cassini2/">https://www.esa.int/gsp/ACT/projects/gtop/cassini2/</link> </para>
<link linkend="_class_c_bite_opt">CBiteOpt</link><link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; ptype &gt;</link><link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link><link linkend="_class_c_bite_opt_interface">CBiteOptInterface</link><link linkend="_class_c_bite_opt_minimize">CBiteOptMinimize</link><link linkend="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap">CBiteOptDeep::CBiteOptWrap</link><link linkend="_class_c_bite_ort">CBiteOrt</link><link linkend="_class_c_bite_par_pops">CBiteParPops&lt; ptype &gt;</link><link linkend="_class_c_bite_pop">CBitePop&lt; ptype &gt;</link><link linkend="_class_c_bite_rnd">CBiteRnd</link><link linkend="_class_c_bite_sel">CBiteSel&lt; tCount &gt;</link><link linkend="_class_c_bite_sel_base">CBiteSelBase</link><link linkend="_class_c_d_e_opt">CDEOpt</link><link linkend="_classfcmaes_1_1optimizer_1_1_check_bounds">fcmaes.optimizer.CheckBounds</link>
<para>Validates whether a given set of values falls within specified bounds </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_choice">fcmaes.optimizer.Choice</link>
<para>A class representing a choice-based optimizer </para>
<link linkend="_classfcmaes_1_1testfun_1_1_cigar">fcmaes.testfun.Cigar</link><link linkend="_classfcmaes_1_1optimizer_1_1_cma__ask__tell">fcmaes.optimizer.Cma_ask_tell</link>
<para>CMA-ES Ask-Tell based optimizer </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_cma__awm">fcmaes.optimizer.Cma_awm</link><link linkend="_classfcmaes_1_1optimizer_1_1_cma__cpp">fcmaes.optimizer.Cma_cpp</link>
<para>This class implements the CMA-ES optimization algorithm with customization options </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_cma__lw">fcmaes.optimizer.Cma_lw</link>
<para>CMA-ES lightweight optimizer implementation </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_cma__orig">fcmaes.optimizer.Cma_orig</link><link linkend="_classexamples_1_1benchmark__gtop__pygmo_1_1_cma__pyg">examples.benchmark_gtop_pygmo.Cma_pyg</link>
<para>CMA_ES pagmo implementation </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_cma__python">fcmaes.optimizer.Cma_python</link>
<para><link linkend="_classfcmaes_1_1optimizer_1_1_cma__python">Cma_python</link> optimizer class </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_cma__sep">fcmaes.optimizer.Cma_sep</link><link linkend="_classfcmaes_1_1cmaes_1_1_cmaes">fcmaes.cmaes.Cmaes</link>
<para>Optimization solver implementing the Covariance Matrix Adaptation Evolution Strategy (CMA-ES) </para>
<link linkend="_class_c_n_m_seq_opt">CNMSeqOpt</link><link linkend="_classexamples_1_1rover_1_1_constant_offset_fn">examples.rover.ConstantOffsetFn</link><link linkend="_classexamples_1_1rover_1_1_const_cost">examples.rover.ConstCost</link><link linkend="_classquantumcomm_1_1constellation__udp">quantumcomm.constellation_udp</link>
<para>A Pygmo compatible UDP (User Defined Problem) representing the constellation design problem for SpOC 2023 </para>
<link linkend="_classexamples_1_1rover_1_1_const_obstacle_cost">examples.rover.ConstObstacleCost</link><link linkend="_class_c_bite_opt_1_1_c_par_opt">CBiteOpt::CParOpt&lt; T &gt;</link><link linkend="_classfcmaes_1_1optimizer_1_1_crfmnes">fcmaes.optimizer.Crfmnes</link>
<para>Implements the CR-FM-NES (Covariance Matrix Adaptation Evolution Strategy with Full Matrix) optimization algorithm </para>
<link linkend="_classfcmaes_1_1crfmnescpp_1_1_c_r_f_m_n_e_s___c">fcmaes.crfmnescpp.CRFMNES_C</link>
<para>Minimization of a scalar function of one or more variables using a C++ CR-FM-NES implementation, interfaced via Python using ctypes </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_crfmnes__cpp">fcmaes.optimizer.Crfmnes_cpp</link><link linkend="_classcrmfnes_1_1_crfmnes_optimizer">crmfnes::CrfmnesOptimizer</link><link linkend="_class_c_s_m_a_e_s_opt">CSMAESOpt</link><link linkend="_class_c_spher_opt">CSpherOpt</link><link linkend="_classexamples_1_1house_1_1cv__problem">examples.house.cv_problem</link><link linkend="_classfcmaes_1_1optimizer_1_1_da__cpp">fcmaes.optimizer.Da_cpp</link>
<para>Represents the <link linkend="_classfcmaes_1_1optimizer_1_1_da__cpp">Da_cpp</link> optimization algorithm, a variant of the <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">Optimizer</link> class </para>
<link linkend="_struct_damp">Damp</link><link linkend="_classdual__annealing_1_1_d_a_runner">dual_annealing::DARunner</link><link linkend="_classfcmaes_1_1de_1_1_d_e">fcmaes.de.DE</link>
<para>A Differential Evolution (<link linkend="_classfcmaes_1_1de_1_1_d_e">DE</link>) optimization algorithm </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_de__ask__tell">fcmaes.optimizer.De_ask_tell</link>
<para>Differential Evolution optimizer for numerical optimization tasks </para>
<link linkend="_classfcmaes_1_1decpp_1_1_d_e___c">fcmaes.decpp.DE_C</link>
<para>A class to perform Differential Evolution (DE) algorithm using a C implementation backend </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_de__cpp">fcmaes.optimizer.De_cpp</link>
<para>Differential Evolution optimizer using C++ backend </para>
<link linkend="_classexamples_1_1benchmark__gtop__pygmo_1_1_de__pyg">examples.benchmark_gtop_pygmo.De_pyg</link>
<para>Differential Evolution pagmo implementation </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_de__python">fcmaes.optimizer.De_python</link>
<para>Differential Evolution (DE) optimizer implemented in Python </para>
<link linkend="_classdifferential__evolution_1_1_de_optimizer">differential_evolution::DeOptimizer</link><link linkend="_classfcmaes_1_1optimizer_1_1_differential__evolution">fcmaes.optimizer.Differential_evolution</link>
<para>A class for performing optimization using the Differential Evolution algorithm </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_dual__annealing">fcmaes.optimizer.Dual_annealing</link>
<para>Dual annealing optimization algorithm implementation </para>
<link linkend="_classfcmaes_1_1testfun_1_1_eggholder">fcmaes.testfun.Eggholder</link>
<para>Represents the <link linkend="_classfcmaes_1_1testfun_1_1_eggholder">Eggholder</link> optimization function </para>
<link linkend="_classfcmaes_1_1testfun_1_1_elli">fcmaes.testfun.Elli</link>
<para>Represents an <link linkend="_classfcmaes_1_1testfun_1_1_elli">Elli</link> object </para>
<link linkend="_classexamples_1_1robot_1_1end__effector">examples.robot.end_effector</link><link linkend="_classdual__annealing_1_1_energy_state">dual_annealing::EnergyState</link><link linkend="_classfcmaes_1_1evaluator_1_1_evaluator">fcmaes.evaluator.Evaluator</link>
<para><link linkend="_classfcmaes_1_1evaluator_1_1_evaluator">Evaluator</link> class to manage the parallel evaluation of a function across multiple workers </para>
<link linkend="_classevaluator">evaluator</link><link linkend="_classevaluator_1_1evaluator__job">evaluator::evaluator_job</link><link linkend="_struct_f8">F8</link><link linkend="_classexamples_1_1f8_1_1f8__problem">examples.f8.f8_problem</link><link linkend="_classfbcover_1_1fb__graph">fbcover.fb_graph</link><link linkend="_classexamples_1_1maxcut_1_1fcmaes___optimizer">examples.maxcut.fcmaes_Optimizer</link><link linkend="_classexamples_1_1maxcut_1_1fcmaes___s_p_s_a">examples.maxcut.fcmaes_SPSA</link><link linkend="_classexamples_1_1filter_1_1filter">examples.filter.filter</link><link linkend="_classdual__annealing_1_1_fitness">dual_annealing::Fitness</link><link linkend="_classexamples_1_1quant_1_1_fitness">examples.quant.Fitness</link><link linkend="_class_fitness">Fitness</link><link linkend="_classexamples_1_1arm_1_1fitness">examples.arm.fitness</link><link linkend="_classexamples_1_1crypto_1_1fitness">examples.crypto.fitness</link><link linkend="_classexamples_1_1damp_1_1fitness">examples.damp.fitness</link><link linkend="_classexamples_1_1harvesting_1_1fitness">examples.harvesting.fitness</link><link linkend="_classexamples_1_1jobshop_1_1fitness">examples.jobshop.fitness</link><link linkend="_classexamples_1_1scheduling_1_1fitness">examples.scheduling.fitness</link><link linkend="_classexamples_1_1subset_1_1fitness">examples.subset.fitness</link><link linkend="_classexamples_1_1subset__mo_1_1fitness">examples.subset_mo.fitness</link><link linkend="_classexamples_1_1trappist__delivery_1_1fitness">examples.trappist_delivery.fitness</link><link linkend="_classexamples_1_1moexamples_1_1fonseca">examples.moexamples.fonseca</link><link linkend="_classexamples_1_1rover_1_1_g_m_cost">examples.rover.GMCost</link><link linkend="_classedgecover_1_1graph">edgecover.graph</link><link linkend="_classfcmaes_1_1astro_1_1_gtoc1">fcmaes.astro.Gtoc1</link>
<para>Represents the GTOC1 class, which is a specialized subclass of <link linkend="_classfcmaes_1_1astro_1_1_astrofun">Astrofun</link> </para>
<link linkend="_classexamples_1_1robot_1_1gui_world">examples.robot.guiWorld</link><link linkend="_classhbv_1_1hbv">hbv.hbv</link><link linkend="_classfcmaes_1_1mapelites_1_1in__niche__filter">fcmaes.mapelites.in_niche_filter</link>
<para>Filters and evaluates data based on niche and fitness criteria </para>
<link linkend="_struct_index_val">IndexVal</link><link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry">examples.interferometry_udp.Interferometry</link><link linkend="_classfcmaes_1_1journal_1_1_journal">fcmaes.journal.Journal</link>
<para>Handles logging of study, trial, parameter, and value information to a file </para>
<link linkend="_classfcmaes_1_1journal_1_1journal__wrapper">fcmaes.journal.journal_wrapper</link><link linkend="_classexamples_1_1kepler_1_1kepler_1_1_kepler">examples.kepler.kepler.Kepler</link>
<para>Keplerian orbit represented by keplerian elements </para>
<link linkend="_classexamples_1_1kepler_1_1lambert_1_1lambert__problem__multirev">examples.kepler.lambert.lambert_problem_multirev</link>
<para>This class converts a lambert_problem instance - a number of solutions to a multi revolution Lambert problem to an instance representing only &quot;the best&quot; solution </para>
<link linkend="_classexamples_1_1kepler_1_1lambert_1_1lambert__problem__multirev__ga">examples.kepler.lambert.lambert_problem_multirev_ga</link><link linkend="_classexamples_1_1kepler_1_1lambert_1_1lambert__problem__stochastic">examples.kepler.lambert.lambert_problem_stochastic</link><link linkend="_class_l_b_f_g_spp_1_1_l_b_f_g_s_b_solver">LBFGSpp::LBFGSBSolver&lt; Scalar, LineSearch &gt;</link><link linkend="_classdual__annealing_1_1_l_b_f_g_s_func">dual_annealing::LBFGSFunc</link><link linkend="_class_l_b_f_g_spp_1_1_l_b_f_g_s_solver">LBFGSpp::LBFGSSolver&lt; Scalar, LineSearch &gt;</link><link linkend="_classlrgv_1_1lrgv">lrgv.lrgv</link><link linkend="_classexamples_1_1siemens_1_1_machine">examples.siemens.Machine</link><link linkend="_classfcmaes_1_1astro_1_1_messenger">fcmaes.astro.Messenger</link>
<para><link linkend="_classfcmaes_1_1astro_1_1_messenger">Messenger</link> class initialization and management </para>
<link linkend="_classfcmaes_1_1astro_1_1_mess_full">fcmaes.astro.MessFull</link>
<para>Represents a specific type of &apos;messenger full&apos; configuration </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_minimize">fcmaes.optimizer.Minimize</link>
<para>Optimization utilizing the scipy minimize function </para>
<link linkend="_classmmkp_1_1_m_m_k_p">mmkp.MMKP</link><link linkend="_classfcmaes_1_1moretry_1_1mo__wrapper">fcmaes.moretry.mo_wrapper</link>
<para>Wraps a multi-objective evaluation function with additional functionality </para>
<link linkend="_classfcmaes_1_1mode_1_1_m_o_d_e">fcmaes.mode.MODE</link>
<para>Multi-Objective Differential Evolution (<link linkend="_classfcmaes_1_1mode_1_1_m_o_d_e">MODE</link>) optimization algorithm </para>
<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c">fcmaes.modecpp.MODE_C</link>
<para>A class for managing the MODE-C optimization algorithm </para>
<link linkend="_classmode__optimizer_1_1_mo_de_optimizer">mode_optimizer::MoDeOptimizer</link><link linkend="_classfcmaes_1_1multiretry_1_1multiretry">fcmaes.multiretry.multiretry</link><link linkend="_classdual__annealing_1_1nanexception">dual_annealing::nanexception</link><link linkend="_classexamples_1_1rover_1_1_neg_geom">examples.rover.NegGeom</link><link linkend="_classfcmaes_1_1optimizer_1_1_n_lopt">fcmaes.optimizer.NLopt</link>
<para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">Optimizer</link> class utilizing <link linkend="_classfcmaes_1_1optimizer_1_1_n_lopt">NLopt</link> algorithms for optimization tasks </para>
<link linkend="_classexamples_1_1rover_1_1_normalized_input_fn">examples.rover.NormalizedInputFn</link><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">fcmaes.optimizer.Optimizer</link>
<para>Provides functionalities for optimization tasks </para>
<link linkend="_classfcmaes_1_1evaluator_1_1parallel">fcmaes.evaluator.parallel</link>
<para>Executes functions in parallel using a multi-worker setup </para>
<link linkend="_classfcmaes_1_1evaluator_1_1parallel__mo">fcmaes.evaluator.parallel_mo</link>
<para>Manages parallel multi-objective evaluations </para>
<link linkend="_classfcmaes_1_1pgpecpp_1_1_p_g_p_e___c">fcmaes.pgpecpp.PGPE_C</link>
<para>Optimization class using a C++ CR-FM-NES implementation via <computeroutput>ctypes</computeroutput> </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_pgpe__cpp">fcmaes.optimizer.Pgpe_cpp</link><link linkend="_classpgpe_1_1_p_g_p_e_optimizer">pgpe::PGPEOptimizer</link><link linkend="_classexamples_1_1siemens_1_1_plant">examples.siemens.Plant</link><link linkend="_classexamples_1_1rover_1_1_point_b_spline">examples.rover.PointBSpline</link><link linkend="_classexamples_1_1moexamples_1_1poloni">examples.moexamples.poloni</link><link linkend="_classexamples_1_1powerplant_1_1_power_plant">examples.powerplant.PowerPlant</link><link linkend="_classedgecover_1_1problem">edgecover.problem</link><link linkend="_classexamples_1_1employee_1_1problem">examples.employee.problem</link><link linkend="_classfbcover_1_1problem__fb">fbcover.problem_fb</link><link linkend="_classfcmaes_1_1multiretry_1_1problem__stats">fcmaes.multiretry.problem_stats</link>
<para>Represents statistics and operational parameters for a specific problem </para>
<link linkend="_classexamples_1_1robot_1_1_push_reward">examples.robot.PushReward</link><link linkend="_struct_p_v_thrust">PVThrust</link><link linkend="_struct_p_v_twaste">PVTwaste</link><link linkend="_classexamples_1_1benchmark__gtop__pygmo_1_1pygmo__udp">examples.benchmark_gtop_pygmo.pygmo_udp</link>
<para>Wraps a fcmaes fitness function as pygmo udp </para>
<link linkend="_classfcmaes_1_1astro_1_1python__fun">fcmaes.astro.python_fun</link>
<para>Represents a callable Python function object that interfaces with external C functions and enforces boundary restrictions on the input </para>
<link linkend="_classfcmaes_1_1optimizer_1_1random__search">fcmaes.optimizer.random_search</link>
<para>A class for performing optimization using a random search strategy </para>
<link linkend="_classfcmaes_1_1testfun_1_1_rastrigin">fcmaes.testfun.Rastrigin</link>
<para>Represents the <link linkend="_classfcmaes_1_1testfun_1_1_rastrigin">Rastrigin</link> function commonly used in optimization problems </para>
<link linkend="_classfcmaes_1_1testfun_1_1_rastrigin_mean">fcmaes.testfun.RastriginMean</link>
<para>Represents a <link linkend="_classfcmaes_1_1testfun_1_1_rastrigin">Rastrigin</link> mean test function </para>
<link linkend="_classexamples_1_1repython_1_1_r_e1">examples.repython.RE1</link>
<para>Four bar truss design </para>
<link linkend="_classexamples_1_1repython_1_1_r_e1__pymoo">examples.repython.RE1_pymoo</link><link linkend="_classexamples_1_1repython_1_1_r_e2">examples.repython.RE2</link>
<para>Reinforced concrete beam design </para>
<link linkend="_classexamples_1_1repython_1_1_r_e3">examples.repython.RE3</link>
<para>Hatch cover design </para>
<link linkend="_classexamples_1_1repython_1_1_r_e4">examples.repython.RE4</link>
<para>Welded beam design </para>
<link linkend="_classexamples_1_1repython_1_1_r_e4__pymoo">examples.repython.RE4_pymoo</link><link linkend="_classexamples_1_1repython_1_1_r_e5">examples.repython.RE5</link>
<para>Disc brake design </para>
<link linkend="_classexamples_1_1repython_1_1_r_e5__pymoo">examples.repython.RE5_pymoo</link><link linkend="_classexamples_1_1repython_1_1_r_e6">examples.repython.RE6</link>
<para>Gear train design </para>
<link linkend="_classexamples_1_1repython_1_1_r_e6__pymoo">examples.repython.RE6_pymoo</link><link linkend="_classexamples_1_1repython_1_1_r_e7">examples.repython.RE7</link>
<para>Rocket injector design </para>
<link linkend="_classexamples_1_1reproblem_1_1re__problem">examples.reproblem.re_problem</link><link linkend="_classexamples_1_1kepler_1_1resonance_1_1resonance">examples.kepler.resonance.resonance</link>
<para>Determines the best &quot;fitting&quot; resonance orbit </para>
<link linkend="_classfcmaes_1_1testfun_1_1_rosen">fcmaes.testfun.Rosen</link><link linkend="_classfcmaes_1_1astro_1_1_rosetta">fcmaes.astro.Rosetta</link>
<para>Represents the <link linkend="_classfcmaes_1_1astro_1_1_rosetta">Rosetta</link> class </para>
<link linkend="_classexamples_1_1routing_1_1_routing">examples.routing.Routing</link><link linkend="_classexamples_1_1rover_1_1_rover_domain">examples.rover.RoverDomain</link>
<para>Rover domain defined on R^d cost_fn vectorized function giving a scalar cost to states start a start state for the rover goal a goal state traj a parameterized trajectory object offering an interface to interpolate point on the trajectory s_range the min and max of the state with s_range[0] in R^d are the mins and s_range[1] in R^d are the maxs </para>
<link linkend="_classexamples_1_1kepler_1_1rvt_1_1rvt">examples.kepler.rvt.rvt</link>
<para>Keplerian orbit represented by radius, velocity, time and mu </para>
<link linkend="_classfcmaes_1_1astro_1_1_sagas">fcmaes.astro.Sagas</link><link linkend="_classexamples_1_1moexamples_1_1schaffer">examples.moexamples.schaffer</link><link linkend="_classfcmaes_1_1optimizer_1_1_sequence">fcmaes.optimizer.Sequence</link>
<para>A class for sequentially combining multiple optimizers </para>
<link linkend="_classfcmaes_1_1retry_1_1_shared2d">fcmaes.retry.Shared2d</link>
<para>A 2D shared memory array wrapper </para>
<link linkend="_classfcmaes_1_1optimizer_1_1_shgo">fcmaes.optimizer.Shgo</link>
<para><link linkend="_classfcmaes_1_1optimizer_1_1_shgo">Shgo</link> optimizer for mathematical function minimization </para>
<link linkend="_classfcmaes_1_1optimizer_1_1single__objective">fcmaes.optimizer.single_objective</link>
<para>Represents a wrapper for a single-objective optimization problem </para>
<link linkend="_classdual__annealing_1_1sizeexception">dual_annealing::sizeexception</link><link linkend="_classexamples_1_1solo__mgar__udp_1_1solo__mgar__udp">examples.solo_mgar_udp.solo_mgar_udp</link>
<para>Write Me </para>
<link linkend="_classfcmaes_1_1testfun_1_1_sphere">fcmaes.testfun.Sphere</link>
<para>Represents a <link linkend="_classfcmaes_1_1testfun_1_1_sphere">Sphere</link> object </para>
<link linkend="_classfcmaes_1_1advretry_1_1_store">fcmaes.advretry.Store</link>
<para>Manages the storing, evaluation, and tracking of data in an optimization problem </para>
<link linkend="_classfcmaes_1_1retry_1_1_store">fcmaes.retry.Store</link><link linkend="_classfcmaes_1_1mode_1_1store">fcmaes.mode.store</link>
<para>Handles the management of shared data storage and processing for multi-objective optimization </para>
<link linkend="_classdual__annealing_1_1_strategy_chain">dual_annealing::StrategyChain</link><link linkend="_classfcmaes_1_1journal_1_1_study__start">fcmaes.journal.Study_start</link>
<para>Represents the initial message to start a study </para>
<link linkend="_classfcmaes_1_1astro_1_1_tandem">fcmaes.astro.Tandem</link>
<para>Represents a <link linkend="_classfcmaes_1_1astro_1_1_tandem">Tandem</link> configuration with specific bounds, sequences, and functionalities </para>
<link linkend="_classfcmaes_1_1astro_1_1_tandem__minlp">fcmaes.astro.Tandem_minlp</link>
<para>Encapsulates a <link linkend="_classfcmaes_1_1astro_1_1_tandem">Tandem</link> optimization problem in the form of a mixed-integer nonlinear programming (MINLP) task </para>
<link linkend="_classexamples_1_1moexamples_1_1tandem__mo">examples.moexamples.tandem_mo</link><link linkend="_classexamples_1_1rover_1_1_trajectory">examples.rover.Trajectory</link><link linkend="_classexamples_1_1subset_1_1transaction__value">examples.subset.transaction_value</link><link linkend="_classexamples_1_1subset__mo_1_1transaction__value">examples.subset_mo.transaction_value</link><link linkend="_classgtoc12_1_1_transfers">gtoc12.Transfers</link><link linkend="_classexamples_1_1trappist__delivery_1_1trappist__schedule">examples.trappist_delivery.trappist_schedule</link>
<para>UDP (User-Defined Problem) for the Trappist-1 scheduling optimisation problem </para>
<link linkend="_classfcmaes_1_1journal_1_1_trial__param">fcmaes.journal.Trial_param</link>
<para>Represents the parameters associated with a specific trial </para>
<link linkend="_classfcmaes_1_1journal_1_1_trial__start">fcmaes.journal.Trial_start</link>
<para>Represents the start of a trial within a specific study </para>
<link linkend="_classfcmaes_1_1journal_1_1_trial__value">fcmaes.journal.Trial_value</link>
<para>Represents the value of a single trial in an experiment </para>
<link linkend="_classexamples_1_1noisy__tsp_1_1_t_s_p">examples.noisy_tsp.TSP</link><link linkend="_classexamples_1_1top__trumps_1_1tt__problem">examples.top_trumps.tt_problem</link><link linkend="_classexamples_1_1rover_1_1_union_geom">examples.rover.UnionGeom</link><link linkend="_structvec__id">vec_id</link><link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator">examples.vilar.VilarOscillator</link><link linkend="_classdual__annealing_1_1_visiting_distribution">dual_annealing::VisitingDistribution</link><link linkend="_classvrptw_1_1_v_r_p_t_w">vrptw.VRPTW</link><link linkend="_classfcmaes_1_1testfun_1_1_wrapper">fcmaes.testfun.Wrapper</link>
<para><link linkend="_classfcmaes_1_1testfun_1_1_wrapper">Wrapper</link> for parallel computation with shared state </para>
<link linkend="_classfcmaes_1_1mapelites_1_1wrapper">fcmaes.mapelites.wrapper</link>
<para>A callable class designed to fit and evaluate a function with given inputs </para>
<link linkend="_classfcmaes_1_1mode_1_1wrapper">fcmaes.mode.wrapper</link>
<para>A wrapper class to manage function calls with additional features such as tracking progress, logging results, and storing or plotting outcomes </para>
<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">fcmaes.optimizer.wrapper</link>
<para>Wrapper for optimization evaluation and logging </para>
<link linkend="_classexamples_1_1moexamples_1_1zdt1">examples.moexamples.zdt1</link></section>
