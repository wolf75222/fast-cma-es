<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_vilar_8py_source" xml:lang="en-US">
<title>vilar.py</title>
<indexterm><primary>examples/vilar.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_vilar_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1vilar">00001</link> <emphasis role="stringliteral">&apos;&apos;&apos;</emphasis>
<anchor xml:id="_vilar_8py_source_1l00002"/>00002 <emphasis role="stringliteral">Derived&#32;from&#32;</emphasis>
<anchor xml:id="_vilar_8py_source_1l00003"/>00003 <emphasis role="stringliteral">https://github.com/StochSS/GillesPy2/blob/main/examples/StartingModels/VilarOscillator/VilarOscillator.py</emphasis>
<anchor xml:id="_vilar_8py_source_1l00004"/>00004 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_vilar_8py_source_1l00005"/>00005 <emphasis role="stringliteral">Optimization&#32;driven&#32;parameter&#32;sweeping</emphasis>
<anchor xml:id="_vilar_8py_source_1l00006"/>00006 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_vilar_8py_source_1l00007"/>00007 <emphasis role="stringliteral">do&#32;&apos;python3&#32;-m&#32;pip&#32;install&#32;gillespy2&#32;--user&#32;--upgrade&apos;&#32;</emphasis>
<anchor xml:id="_vilar_8py_source_1l00008"/>00008 <emphasis role="stringliteral">before&#32;running&#32;this&#32;example</emphasis>
<anchor xml:id="_vilar_8py_source_1l00009"/>00009 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_vilar_8py_source_1l00010"/>00010 <emphasis role="stringliteral">See&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Sweep.adoc&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_vilar_8py_source_1l00011"/>00011 <emphasis role="stringliteral">See&#32;also&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Diversity.adoc</emphasis>
<anchor xml:id="_vilar_8py_source_1l00012"/>00012 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_vilar_8py_source_1l00013"/>00013 <emphasis role="stringliteral">&apos;&apos;&apos;</emphasis>
<anchor xml:id="_vilar_8py_source_1l00014"/>00014 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.</emphasis>
<anchor xml:id="_vilar_8py_source_1l00015"/>00015 
<anchor xml:id="_vilar_8py_source_1l00016"/>00016 <emphasis role="keyword">import</emphasis>&#32;gillespy2
<anchor xml:id="_vilar_8py_source_1l00017"/>00017 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_vilar_8py_source_1l00018"/>00018 <emphasis role="keyword">from</emphasis>&#32;scipy.signal&#32;<emphasis role="keyword">import</emphasis>&#32;argrelextrema
<anchor xml:id="_vilar_8py_source_1l00019"/>00019 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;mode,&#32;&#32;moretry
<anchor xml:id="_vilar_8py_source_1l00020"/>00020 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds
<anchor xml:id="_vilar_8py_source_1l00021"/>00021 <emphasis role="keyword">import</emphasis>&#32;matplotlib.pyplot&#32;<emphasis role="keyword">as</emphasis>&#32;plt&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00022"/>00022 <emphasis role="keyword">import</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">as</emphasis>&#32;mp
<anchor xml:id="_vilar_8py_source_1l00023"/>00023 <emphasis role="keyword">import</emphasis>&#32;matplotlib.pyplot&#32;<emphasis role="keyword">as</emphasis>&#32;plt
<anchor xml:id="_vilar_8py_source_1l00024"/>00024 
<anchor xml:id="_vilar_8py_source_1l00025"/>00025 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_vilar_8py_source_1l00026"/>00026 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_vilar_8py_source_1l00027"/>00027 
<anchor xml:id="_vilar_8py_source_1l00028"/>00028 logger.remove()
<anchor xml:id="_vilar_8py_source_1l00029"/><link linkend="_namespaceexamples_1_1vilar_1aad73b7db1620620898ced5c06b28f735">00029</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00030"/>00030 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00031"/>00031 
<anchor xml:id="_vilar_8py_source_1l00032"/><link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator">00032</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator">VilarOscillator</link>(gillespy2.Model):
<anchor xml:id="_vilar_8py_source_1l00033"/><link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator_1a16955e8171bdf642ba294cbdb889a922">00033</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator_1a16955e8171bdf642ba294cbdb889a922">__init__</link>(self,&#32;parameter_values=None):
<anchor xml:id="_vilar_8py_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gillespy2.Model.__init__(self,&#32;name=<emphasis role="stringliteral">&quot;VilarOscillator&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00035"/><link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator_1af1285c9a655de3f27743c45e764e1cd9">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator_1af1285c9a655de3f27743c45e764e1cd9">volume</link>&#32;=&#32;1
<anchor xml:id="_vilar_8py_source_1l00036"/>00036 
<anchor xml:id="_vilar_8py_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Parameters</emphasis>
<anchor xml:id="_vilar_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alphaA&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;alphaA&quot;</emphasis>,&#32;expression=50)
<anchor xml:id="_vilar_8py_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alphaA_prime&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;alphaA_prime&quot;</emphasis>,&#32;expression=500)
<anchor xml:id="_vilar_8py_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alphaR&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;alphaR&quot;</emphasis>,&#32;expression=0.01)
<anchor xml:id="_vilar_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alphaR_prime&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;alphaR_prime&quot;</emphasis>,&#32;expression=50)
<anchor xml:id="_vilar_8py_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;betaA&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;betaA&quot;</emphasis>,&#32;expression=50)
<anchor xml:id="_vilar_8py_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;betaR&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;betaR&quot;</emphasis>,&#32;expression=5)
<anchor xml:id="_vilar_8py_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaMA&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;deltaMA&quot;</emphasis>,&#32;expression=10)
<anchor xml:id="_vilar_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaMR&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;deltaMR&quot;</emphasis>,&#32;expression=0.5)
<anchor xml:id="_vilar_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaA&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;deltaA&quot;</emphasis>,&#32;expression=1)
<anchor xml:id="_vilar_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaR&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;deltaR&quot;</emphasis>,&#32;expression=0.2)
<anchor xml:id="_vilar_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gammaA&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;gammaA&quot;</emphasis>,&#32;expression=1)
<anchor xml:id="_vilar_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gammaR&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;gammaR&quot;</emphasis>,&#32;expression=1)
<anchor xml:id="_vilar_8py_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gammaC&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;gammaC&quot;</emphasis>,&#32;expression=2)
<anchor xml:id="_vilar_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thetaA&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;thetaA&quot;</emphasis>,&#32;expression=50)
<anchor xml:id="_vilar_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thetaR&#32;=&#32;gillespy2.Parameter(name=<emphasis role="stringliteral">&quot;thetaR&quot;</emphasis>,&#32;expression=100)
<anchor xml:id="_vilar_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.add_parameter([alphaA,&#32;alphaA_prime,&#32;alphaR,&#32;alphaR_prime,&#32;betaA,&#32;betaR,
<anchor xml:id="_vilar_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deltaMA,&#32;deltaMR,&#32;deltaA,&#32;deltaR,&#32;gammaA,&#32;gammaR,&#32;gammaC,
<anchor xml:id="_vilar_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thetaA,&#32;thetaR])
<anchor xml:id="_vilar_8py_source_1l00057"/>00057 
<anchor xml:id="_vilar_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Species</emphasis>
<anchor xml:id="_vilar_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Da&#32;=&#32;gillespy2.Species(name=<emphasis role="stringliteral">&quot;Da&quot;</emphasis>,&#32;initial_value=1,&#32;mode=<emphasis role="stringliteral">&quot;discrete&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Da_prime&#32;=&#32;gillespy2.Species(name=<emphasis role="stringliteral">&quot;Da_prime&quot;</emphasis>,&#32;initial_value=0,&#32;mode=<emphasis role="stringliteral">&quot;discrete&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ma&#32;=&#32;gillespy2.Species(name=<emphasis role="stringliteral">&quot;Ma&quot;</emphasis>,&#32;initial_value=0,&#32;mode=<emphasis role="stringliteral">&quot;discrete&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Dr&#32;=&#32;gillespy2.Species(name=<emphasis role="stringliteral">&quot;Dr&quot;</emphasis>,&#32;initial_value=1,&#32;mode=<emphasis role="stringliteral">&quot;discrete&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Dr_prime&#32;=&#32;gillespy2.Species(name=<emphasis role="stringliteral">&quot;Dr_prime&quot;</emphasis>,&#32;initial_value=0,&#32;mode=<emphasis role="stringliteral">&quot;discrete&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Mr&#32;=&#32;gillespy2.Species(name=<emphasis role="stringliteral">&quot;Mr&quot;</emphasis>,&#32;initial_value=0,&#32;mode=<emphasis role="stringliteral">&quot;discrete&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;C&#32;=&#32;gillespy2.Species(name=<emphasis role="stringliteral">&quot;C&quot;</emphasis>,&#32;initial_value=0,&#32;mode=<emphasis role="stringliteral">&quot;discrete&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;A&#32;=&#32;gillespy2.Species(name=<emphasis role="stringliteral">&quot;A&quot;</emphasis>,&#32;initial_value=0,&#32;mode=<emphasis role="stringliteral">&quot;discrete&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;R&#32;=&#32;gillespy2.Species(name=<emphasis role="stringliteral">&quot;R&quot;</emphasis>,&#32;initial_value=0,&#32;mode=<emphasis role="stringliteral">&quot;discrete&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.add_species([Da,&#32;Da_prime,&#32;Ma,&#32;Dr,&#32;Dr_prime,&#32;Mr,&#32;C,&#32;A,&#32;R])
<anchor xml:id="_vilar_8py_source_1l00070"/>00070 
<anchor xml:id="_vilar_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Reactions</emphasis>
<anchor xml:id="_vilar_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r1&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r1&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;A&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;R&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;C&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;gammaC&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r2&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r2&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;A&apos;</emphasis>:&#32;1},&#32;products={},&#32;rate=<emphasis role="stringliteral">&quot;deltaA&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r3&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r3&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;C&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;R&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;deltaA&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r4&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r4&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;R&apos;</emphasis>:&#32;1},&#32;products={},&#32;rate=<emphasis role="stringliteral">&quot;deltaR&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r5&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r5&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;A&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;Da&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;Da_prime&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;gammaA&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r6&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r6&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Da_prime&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;A&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;Da&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;thetaA&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r7&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r7&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Da&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;Da&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;Ma&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;alphaA&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r8&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r8&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Da_prime&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;Da_prime&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;Ma&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;alphaA_prime&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r9&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r9&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Ma&apos;</emphasis>:&#32;1},&#32;products={},&#32;rate=<emphasis role="stringliteral">&quot;deltaMA&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r10&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r10&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Ma&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;A&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;Ma&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;betaA&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r11&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r11&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;A&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;Dr&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;Dr_prime&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;gammaR&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r12&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r12&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Dr_prime&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;A&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;Dr&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;thetaR&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r13&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r13&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Dr&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;Dr&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;Mr&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;alphaR&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r14&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r14&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Dr_prime&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;Dr_prime&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;Mr&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;alphaR_prime&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r15&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r15&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Mr&apos;</emphasis>:&#32;1},&#32;products={},&#32;rate=<emphasis role="stringliteral">&quot;deltaMR&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r16&#32;=&#32;gillespy2.Reaction(name=<emphasis role="stringliteral">&quot;r16&quot;</emphasis>,&#32;reactants={<emphasis role="stringliteral">&apos;Mr&apos;</emphasis>:&#32;1},&#32;products={<emphasis role="stringliteral">&apos;Mr&apos;</emphasis>:&#32;1,&#32;<emphasis role="stringliteral">&apos;R&apos;</emphasis>:&#32;1},&#32;rate=<emphasis role="stringliteral">&quot;betaR&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.add_reaction([r1,&#32;r2,&#32;r3,&#32;r4,&#32;r5,&#32;r6,&#32;r7,&#32;r8,&#32;r9,
<anchor xml:id="_vilar_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r10,&#32;r11,&#32;r12,&#32;r13,&#32;r14,&#32;r15,&#32;r16])
<anchor xml:id="_vilar_8py_source_1l00091"/>00091 
<anchor xml:id="_vilar_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Timespan</emphasis>
<anchor xml:id="_vilar_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.timespan(np.linspace(0,400,401))
<anchor xml:id="_vilar_8py_source_1l00094"/>00094 
<anchor xml:id="_vilar_8py_source_1l00095"/><link linkend="_namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf">00095</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf">get_bounds</link>(model,&#32;scale):
<anchor xml:id="_vilar_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;lower&#32;=&#32;[]
<anchor xml:id="_vilar_8py_source_1l00097"/>00097 &#32;&#32;&#32;&#32;upper&#32;=&#32;[]
<anchor xml:id="_vilar_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;_,&#32;param&#32;<emphasis role="keywordflow">in</emphasis>&#32;model.listOfParameters.items():
<anchor xml:id="_vilar_8py_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lower.append(param.value/scale)
<anchor xml:id="_vilar_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;upper.append(param.value*scale)&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Bounds(lower,&#32;upper)
<anchor xml:id="_vilar_8py_source_1l00102"/>00102 
<anchor xml:id="_vilar_8py_source_1l00103"/><link linkend="_namespaceexamples_1_1vilar_1afe27928528b9221976a31a064e46d2df">00103</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1vilar_1afe27928528b9221976a31a064e46d2df">set_params</link>(model,&#32;x):
<anchor xml:id="_vilar_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i,&#32;(_,&#32;param)&#32;<emphasis role="keywordflow">in</emphasis>&#32;enumerate(model.listOfParameters.items()):
<anchor xml:id="_vilar_8py_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;param.value&#32;=&#32;x[i]
<anchor xml:id="_vilar_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00107"/><link linkend="_namespaceexamples_1_1vilar_1a406bfa725b5b16f4bf940f31d8e95ff0">00107</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1vilar_1a406bfa725b5b16f4bf940f31d8e95ff0">sweep_params</link>():
<anchor xml:id="_vilar_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;multi&#32;processing&#32;result&#32;list</emphasis>
<anchor xml:id="_vilar_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;results&#32;=&#32;mp.Manager().list()&#32;
<anchor xml:id="_vilar_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>fcmaes_problem():
<anchor xml:id="_vilar_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>__init__(self):
<anchor xml:id="_vilar_8py_source_1l00115"/><link linkend="_namespaceexamples_1_1vilar_1af83d5ed6a2595273703d4fb8c81639e9">00115</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.bounds&#32;=&#32;<link linkend="_namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf">get_bounds</link>(<link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator">VilarOscillator</link>(),&#32;100)
<anchor xml:id="_vilar_8py_source_1l00116"/><link linkend="_namespaceexamples_1_1vilar_1a457693183463e22e50c189f101ba34b9">00116</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.dim&#32;=&#32;len(self.bounds.ub)
<anchor xml:id="_vilar_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>fitness(self,&#32;x):
<anchor xml:id="_vilar_8py_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;<link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator">VilarOscillator</link>()
<anchor xml:id="_vilar_8py_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1vilar_1afe27928528b9221976a31a064e46d2df">set_params</link>(model,&#32;x)
<anchor xml:id="_vilar_8py_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;model.run(algorithm&#32;=&#32;<emphasis role="stringliteral">&quot;SSA&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;store&#32;params,&#32;result&#32;tuple</emphasis>
<anchor xml:id="_vilar_8py_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.append((x,&#32;res))
<anchor xml:id="_vilar_8py_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;R&#32;=&#32;res[<emphasis role="stringliteral">&apos;R&apos;</emphasis>]&#32;<emphasis role="comment">#&#32;time&#32;series&#32;for&#32;R</emphasis>
<anchor xml:id="_vilar_8py_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r_mean&#32;=&#32;np.mean(R)
<anchor xml:id="_vilar_8py_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r_over&#32;=&#32;np.array(np.fromiter((r&#32;<emphasis role="keywordflow">for</emphasis>&#32;r&#32;<emphasis role="keywordflow">in</emphasis>&#32;R&#32;<emphasis role="keywordflow">if</emphasis>&#32;r&#32;&gt;&#32;r_mean),&#32;dtype=float))
<anchor xml:id="_vilar_8py_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ilocs_max&#32;=&#32;argrelextrema(r_over,&#32;np.greater_equal,&#32;order=3)[0]
<anchor xml:id="_vilar_8py_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;freq&#32;=&#32;len(ilocs_max)&#32;/&#32;len(R)
<anchor xml:id="_vilar_8py_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;peak_dists&#32;=&#32;np.array(np.fromiter((ilocs_max[i]&#32;-&#32;ilocs_max[i-1]&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(1,&#32;len(ilocs_max))),&#32;dtype=float))
<anchor xml:id="_vilar_8py_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sdev_peak_dist&#32;=&#32;np.std(peak_dists)
<anchor xml:id="_vilar_8py_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;peaks&#32;=&#32;(r_over&#32;-&#32;r_mean)[ilocs_max]
<anchor xml:id="_vilar_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sdev_amp&#32;=&#32;np.std(peaks)
<anchor xml:id="_vilar_8py_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;maximize&#32;sdev_peak_dist&#32;and&#32;sdev_amp</emphasis>
<anchor xml:id="_vilar_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[-sdev_peak_dist,&#32;-sdev_amp,&#32;freq]
<anchor xml:id="_vilar_8py_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00136"/>00136 &#32;&#32;&#32;&#32;problem&#32;=&#32;fcmaes_problem()&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00137"/>00137 &#32;&#32;&#32;&#32;popsize&#32;=&#32;64&#32;<emphasis role="comment">#&#32;population&#32;size&#32;of&#32;the&#32;evolutionary&#32;algorithm</emphasis>
<anchor xml:id="_vilar_8py_source_1l00138"/>00138 &#32;&#32;&#32;&#32;max_evaluations&#32;=&#32;popsize*16&#32;<emphasis role="comment">#&#32;maximum&#32;number&#32;of&#32;evaluation</emphasis>
<anchor xml:id="_vilar_8py_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;popsize&#32;=&#32;256&#32;#&#32;population&#32;size&#32;of&#32;the&#32;evolutionary&#32;algorithm</emphasis>
<anchor xml:id="_vilar_8py_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;max_evaluations&#32;=&#32;popsize*96&#32;#&#32;maximum&#32;number&#32;of&#32;evaluation</emphasis>
<anchor xml:id="_vilar_8py_source_1l00141"/>00141 &#32;&#32;&#32;&#32;nobj&#32;=&#32;3&#32;<emphasis role="comment">#&#32;number&#32;of&#32;objectives</emphasis>
<anchor xml:id="_vilar_8py_source_1l00142"/>00142 &#32;&#32;&#32;&#32;ncon&#32;=&#32;0&#32;<emphasis role="comment">#&#32;number&#32;of&#32;constraints</emphasis>
<anchor xml:id="_vilar_8py_source_1l00143"/>00143 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;stores&#32;all&#32;values;&#32;if&#32;capacity&#32;is&#32;reached,&#32;content&#32;is&#32;replaced&#32;by&#32;the&#32;pareto&#32;front&#32;</emphasis>
<anchor xml:id="_vilar_8py_source_1l00144"/>00144 &#32;&#32;&#32;&#32;store&#32;=&#32;<link linkend="_classfcmaes_1_1mode_1_1store">mode.store</link>(problem.dim,&#32;nobj,&#32;capacity=max_evaluations)&#32;
<anchor xml:id="_vilar_8py_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;perform&#32;the&#32;parameter&#32;sweep&#32;by&#32;multi&#32;objective&#32;optimization</emphasis>
<anchor xml:id="_vilar_8py_source_1l00146"/>00146 &#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;mode.minimize(<link linkend="_classfcmaes_1_1mode_1_1wrapper">mode.wrapper</link>(problem.fitness,&#32;3,&#32;interval=64,&#32;store=store),&#32;
<anchor xml:id="_vilar_8py_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nobj,&#32;ncon,
<anchor xml:id="_vilar_8py_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;problem.bounds,&#32;popsize&#32;=&#32;popsize,&#32;
<anchor xml:id="_vilar_8py_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;=&#32;max_evaluations,&#32;
<anchor xml:id="_vilar_8py_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update=<emphasis role="keyword">False</emphasis>,&#32;workers=min(popsize,&#32;mp.cpu_count()))
<anchor xml:id="_vilar_8py_source_1l00151"/>00151 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;save&#32;last&#32;population&#32;of&#32;the&#32;evolutionary&#32;algorithm</emphasis>
<anchor xml:id="_vilar_8py_source_1l00152"/>00152 &#32;&#32;&#32;&#32;np.savez_compressed(<emphasis role="stringliteral">&quot;sweep&quot;</emphasis>,&#32;xs=xs,&#32;ys=ys)&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00153"/>00153 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;save&#32;all&#32;evaluations</emphasis>
<anchor xml:id="_vilar_8py_source_1l00154"/>00154 &#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;store.get_xs(),&#32;store.get_ys()
<anchor xml:id="_vilar_8py_source_1l00155"/>00155 &#32;&#32;&#32;&#32;np.savez_compressed(<emphasis role="stringliteral">&quot;sweep_all&quot;</emphasis>,&#32;xs=xs,&#32;ys=ys)&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;show&#32;results</emphasis>
<anchor xml:id="_vilar_8py_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;x,&#32;res&#32;<emphasis role="keywordflow">in</emphasis>&#32;results[:10]:
<anchor xml:id="_vilar_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(list(x),&#32;list(res[<emphasis role="stringliteral">&apos;R&apos;</emphasis>]))
<anchor xml:id="_vilar_8py_source_1l00159"/>00159 &#32;&#32;&#32;&#32;moretry.plot(<emphasis role="stringliteral">&quot;sweep_all&quot;</emphasis>,&#32;ncon,&#32;xs,&#32;ys)&#32;<emphasis role="comment">#&#32;plot&#32;2d</emphasis>
<anchor xml:id="_vilar_8py_source_1l00160"/>00160 &#32;&#32;&#32;&#32;plot3d(xs,&#32;ys,&#32;<emphasis role="stringliteral">&quot;sweep_3d&quot;</emphasis>)&#32;<emphasis role="comment">#&#32;plot&#32;3d</emphasis>
<anchor xml:id="_vilar_8py_source_1l00161"/>00161 
<anchor xml:id="_vilar_8py_source_1l00162"/>00162 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;diversifier,&#32;mapelites
<anchor xml:id="_vilar_8py_source_1l00163"/>00163 <emphasis role="keyword">import</emphasis>&#32;threadpoolctl
<anchor xml:id="_vilar_8py_source_1l00164"/>00164 <emphasis role="keyword">from</emphasis>&#32;elitescass2&#32;<emphasis role="keyword">import</emphasis>&#32;plot3d
<anchor xml:id="_vilar_8py_source_1l00165"/>00165 
<anchor xml:id="_vilar_8py_source_1l00166"/><link linkend="_namespaceexamples_1_1vilar_1aa344a3b9ba46bca39ce6fa792ed087fe">00166</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1vilar_1aa344a3b9ba46bca39ce6fa792ed087fe">run_diversifier</link>():
<anchor xml:id="_vilar_8py_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>nd_problem():
<anchor xml:id="_vilar_8py_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>__init__(self):
<anchor xml:id="_vilar_8py_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.bounds&#32;=&#32;<link linkend="_namespaceexamples_1_1vilar_1a2145fd085b8dc079889e8e1be899f4bf">get_bounds</link>(<link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator">VilarOscillator</link>(),&#32;100)
<anchor xml:id="_vilar_8py_source_1l00172"/><link linkend="_namespaceexamples_1_1vilar_1af1105e84bbb60a73eac7d2d069ecc277">00172</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.qd_bounds&#32;=&#32;Bounds([0,&#32;30,&#32;.035],&#32;[3,&#32;300,&#32;.050])
<anchor xml:id="_vilar_8py_source_1l00173"/><link linkend="_namespaceexamples_1_1vilar_1a041f65838a6fa4cb34cab04427474409">00173</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.qd_dim&#32;=&#32;3
<anchor xml:id="_vilar_8py_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.dim&#32;=&#32;len(self.bounds.ub)
<anchor xml:id="_vilar_8py_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>fitness(self,&#32;x):
<anchor xml:id="_vilar_8py_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;threadpoolctl.threadpool_limits(limits=1,&#32;user_api=<emphasis role="stringliteral">&quot;blas&quot;</emphasis>):
<anchor xml:id="_vilar_8py_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;<link linkend="_classexamples_1_1vilar_1_1_vilar_oscillator">VilarOscillator</link>()
<anchor xml:id="_vilar_8py_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1vilar_1afe27928528b9221976a31a064e46d2df">set_params</link>(model,&#32;x)
<anchor xml:id="_vilar_8py_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;model.run(algorithm&#32;=&#32;<emphasis role="stringliteral">&quot;SSA&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;R&#32;=&#32;res[<emphasis role="stringliteral">&apos;R&apos;</emphasis>]&#32;<emphasis role="comment">#&#32;time&#32;series&#32;for&#32;R</emphasis>
<anchor xml:id="_vilar_8py_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r_mean&#32;=&#32;np.mean(R)
<anchor xml:id="_vilar_8py_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r_over&#32;=&#32;np.array(np.fromiter((r&#32;<emphasis role="keywordflow">for</emphasis>&#32;r&#32;<emphasis role="keywordflow">in</emphasis>&#32;R&#32;<emphasis role="keywordflow">if</emphasis>&#32;r&#32;&gt;&#32;r_mean),&#32;dtype=float))
<anchor xml:id="_vilar_8py_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ilocs_max&#32;=&#32;argrelextrema(r_over,&#32;np.greater_equal,&#32;order=3)[0]
<anchor xml:id="_vilar_8py_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;freq&#32;=&#32;len(ilocs_max)&#32;/&#32;len(R)
<anchor xml:id="_vilar_8py_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;peak_dists&#32;=&#32;np.array(np.fromiter((ilocs_max[i]&#32;-&#32;ilocs_max[i-1]&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(1,&#32;len(ilocs_max))),&#32;dtype=float))
<anchor xml:id="_vilar_8py_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sdev_peak_dist&#32;=&#32;np.std(peak_dists)
<anchor xml:id="_vilar_8py_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;peaks&#32;=&#32;(r_over&#32;-&#32;r_mean)[ilocs_max]
<anchor xml:id="_vilar_8py_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sdev_amp&#32;=&#32;np.std(peaks)
<anchor xml:id="_vilar_8py_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ws&#32;=&#32;sdev_peak_dist/3.0&#32;+&#32;sdev_amp/300.0&#32;<emphasis role="comment">#&#32;weighted&#32;sum&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_vilar_8py_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#ws&#32;=&#32;2&#32;-&#32;(sdev_peak_dist/3.0&#32;+&#32;sdev_amp/300.0)&#32;#&#32;maximize&#32;sdev&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_vilar_8py_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ws,&#32;np.array([sdev_peak_dist,&#32;sdev_amp,&#32;freq])
<anchor xml:id="_vilar_8py_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00194"/>00194 &#32;&#32;&#32;&#32;problem&#32;=&#32;nd_problem()&#32;
<anchor xml:id="_vilar_8py_source_1l00195"/>00195 
<anchor xml:id="_vilar_8py_source_1l00196"/>00196 &#32;&#32;&#32;&#32;opt_params0&#32;=&#32;{<emphasis role="stringliteral">&apos;solver&apos;</emphasis>:<emphasis role="stringliteral">&apos;elites&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;popsize&apos;</emphasis>:8}
<anchor xml:id="_vilar_8py_source_1l00197"/>00197 &#32;&#32;&#32;&#32;opt_params1&#32;=&#32;{<emphasis role="stringliteral">&apos;solver&apos;</emphasis>:<emphasis role="stringliteral">&apos;CRMFNES_CPP&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;max_evals&apos;</emphasis>:200,&#32;<emphasis role="stringliteral">&apos;popsize&apos;</emphasis>:16,&#32;<emphasis role="stringliteral">&apos;stall_criterion&apos;</emphasis>:3}
<anchor xml:id="_vilar_8py_source_1l00198"/>00198 &#32;&#32;&#32;&#32;archive&#32;=&#32;diversifier.minimize(
<anchor xml:id="_vilar_8py_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfcmaes_1_1mapelites_1_1wrapper">mapelites.wrapper</link>(problem.fitness,&#32;problem.qd_dim,&#32;interval=100,&#32;save_interval=4000),&#32;
<anchor xml:id="_vilar_8py_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;problem.bounds,&#32;problem.qd_bounds,&#32;opt_params=[opt_params0,&#32;opt_params1],&#32;max_evals=12800)
<anchor xml:id="_vilar_8py_source_1l00201"/>00201 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;final&#32;archive:&#32;&quot;</emphasis>&#32;+&#32;archive.info())
<anchor xml:id="_vilar_8py_source_1l00202"/>00202 &#32;&#32;&#32;&#32;archive.save(<emphasis role="stringliteral">&quot;vilar_qd&quot;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00203"/>00203 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1vilar_1a6e6d663720ddae410f7f5f2db391cc23">plot_archive</link>(archive)
<anchor xml:id="_vilar_8py_source_1l00204"/>00204 &#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00205"/><link linkend="_namespaceexamples_1_1vilar_1a6e6d663720ddae410f7f5f2db391cc23">00205</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1vilar_1a6e6d663720ddae410f7f5f2db391cc23">plot_archive</link>(archive):
<anchor xml:id="_vilar_8py_source_1l00206"/>00206 &#32;&#32;&#32;&#32;cs&#32;=&#32;archive.get_cs()
<anchor xml:id="_vilar_8py_source_1l00207"/>00207 &#32;&#32;&#32;&#32;ds&#32;=&#32;archive.get_ds()
<anchor xml:id="_vilar_8py_source_1l00208"/>00208 &#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00209"/>00209 &#32;&#32;&#32;&#32;si&#32;=&#32;archive.argsort()
<anchor xml:id="_vilar_8py_source_1l00210"/>00210 &#32;&#32;&#32;&#32;ysp&#32;=&#32;[]
<anchor xml:id="_vilar_8py_source_1l00211"/>00211 &#32;&#32;&#32;&#32;descriptions&#32;=&#32;archive.get_ds()[si]
<anchor xml:id="_vilar_8py_source_1l00212"/>00212 &#32;&#32;&#32;&#32;ys&#32;=&#32;archive.get_ys()[si]
<anchor xml:id="_vilar_8py_source_1l00213"/>00213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(si)):
<anchor xml:id="_vilar_8py_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;desc&#32;=&#32;descriptions[i]
<anchor xml:id="_vilar_8py_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ysp.append([desc[0],&#32;desc[1],&#32;desc[2]])
<anchor xml:id="_vilar_8py_source_1l00216"/>00216 
<anchor xml:id="_vilar_8py_source_1l00217"/>00217 &#32;&#32;&#32;&#32;ysp&#32;=&#32;np.array(ysp)
<anchor xml:id="_vilar_8py_source_1l00218"/>00218 &#32;&#32;&#32;&#32;print(len(ysp))
<anchor xml:id="_vilar_8py_source_1l00219"/>00219 &#32;&#32;&#32;&#32;print(ysp)
<anchor xml:id="_vilar_8py_source_1l00220"/>00220 &#32;&#32;&#32;&#32;plot3d(ysp,&#32;<emphasis role="stringliteral">&quot;vilar_qd&quot;</emphasis>,&#32;<emphasis role="stringliteral">&apos;sdev&#32;peak&#32;distance&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;sdev&#32;amplitude&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;frequency&apos;</emphasis>)
<anchor xml:id="_vilar_8py_source_1l00221"/>00221 
<anchor xml:id="_vilar_8py_source_1l00222"/>00222 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_vilar_8py_source_1l00223"/>00223 &#32;&#32;&#32;&#32;<emphasis role="comment">#sweep_params()</emphasis>
<anchor xml:id="_vilar_8py_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1vilar_1aa344a3b9ba46bca39ce6fa792ed087fe">run_diversifier</link>()
<anchor xml:id="_vilar_8py_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="comment">#plot()</emphasis>
<anchor xml:id="_vilar_8py_source_1l00226"/>00226 &#32;&#32;&#32;&#32;
<anchor xml:id="_vilar_8py_source_1l00227"/>00227 &#32;&#32;&#32;&#32;
</programlisting></section>
