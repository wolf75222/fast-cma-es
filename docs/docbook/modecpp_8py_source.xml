<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_modecpp_8py_source" xml:lang="en-US">
<title>modecpp.py</title>
<indexterm><primary>fcmaes/modecpp.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_modecpp_8py_source_1l00001"/><link linkend="_namespacefcmaes_1_1modecpp">00001</link> <emphasis role="comment">#&#32;-*-&#32;coding:&#32;utf-8&#32;-*-</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00002"/>00002 <emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00003"/>00003 <emphasis role="stringliteral">=============================================================================</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00004"/>00004 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00005"/>00005 <emphasis role="stringliteral">&#32;Fast&#32;CMA-ES&#32;-&#32;version&#32;1.6.11</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00006"/>00006 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00007"/>00007 <emphasis role="stringliteral">&#32;(c)&#32;2025&#32;–&#32;Dietmar&#32;Wolz</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00008"/>00008 <emphasis role="stringliteral">&#32;(c)&#32;2025&#32;–&#32;Latitude</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00009"/>00009 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00010"/>00010 <emphasis role="stringliteral">&#32;License:&#32;MIT</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00011"/>00011 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00012"/>00012 <emphasis role="stringliteral">&#32;File:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00013"/>00013 <emphasis role="stringliteral">&#32;&#32;-&#32;modecpp.py</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00014"/>00014 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00015"/>00015 <emphasis role="stringliteral">&#32;Description:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00016"/>00016 <emphasis role="stringliteral">&#32;&#32;-&#32;Eigen&#32;based&#32;implementation&#32;of&#32;multi&#32;objective</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00017"/>00017 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Differential&#32;Evolution&#32;using&#32;the&#32;DE/pareto/1&#32;strategy.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00018"/>00018 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Derived&#32;and&#32;adapted&#32;for&#32;MO&#32;from&#32;its&#32;C++&#32;counterpart</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00019"/>00019 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;[2]</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00020"/>00020 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00021"/>00021 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Can&#32;switch&#32;to&#32;NSGA-II&#32;like&#32;population&#32;update&#32;via&#32;parameter&#32;&apos;nsga_update&apos;.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00022"/>00022 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Then&#32;it&#32;works&#32;essentially&#32;like&#32;NSGA-II&#32;but&#32;instead&#32;of&#32;the&#32;tournament&#32;selection</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00023"/>00023 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;the&#32;whole&#32;population&#32;is&#32;sorted&#32;and&#32;the&#32;best&#32;individuals&#32;survive.&#32;To&#32;do&#32;this</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00024"/>00024 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;efficiently&#32;the&#32;crowd&#32;distance&#32;ordering&#32;is&#32;slightly&#32;inaccurate.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00025"/>00025 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00026"/>00026 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Supports&#32;parallel&#32;fitness&#32;function&#32;evaluation.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00027"/>00027 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00028"/>00028 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Features&#32;enhanced&#32;multiple&#32;constraint&#32;ranking&#32;[3]</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00029"/>00029 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;improving&#32;its&#32;performance&#32;in&#32;handling&#32;constraints&#32;for&#32;engineering&#32;design&#32;optimization.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00030"/>00030 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00031"/>00031 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Enables&#32;the&#32;comparison&#32;of&#32;DE&#32;and&#32;NSGA-II&#32;population&#32;update&#32;mechanism&#32;with&#32;everything&#32;else</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00032"/>00032 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;kept&#32;completely&#32;identical.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00033"/>00033 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00034"/>00034 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Requires&#32;python&#32;3.5&#32;or&#32;higher.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00035"/>00035 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00036"/>00036 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Uses&#32;the&#32;following&#32;deviation&#32;from&#32;the&#32;standard&#32;DE&#32;algorithm:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00037"/>00037 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;a)&#32;oscillating&#32;CR/F&#32;parameters.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00038"/>00038 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00039"/>00039 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;You&#32;may&#32;keep&#32;parameters&#32;F&#32;and&#32;CR&#32;at&#32;their&#32;defaults&#32;since&#32;this&#32;implementation&#32;works&#32;well&#32;with&#32;the&#32;given&#32;settings&#32;for&#32;most&#32;problems,</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00040"/>00040 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;since&#32;the&#32;algorithm&#32;oscillates&#32;between&#32;different&#32;F&#32;and&#32;CR&#32;settings.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00041"/>00041 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00042"/>00042 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;For&#32;expensive&#32;objective&#32;functions&#32;(e.g.&#32;machine&#32;learning&#32;parameter&#32;optimization)&#32;use&#32;the&#32;workers</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00043"/>00043 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;parameter&#32;to&#32;parallelize&#32;objective&#32;function&#32;evaluation.&#32;This&#32;causes&#32;delayed&#32;population&#32;update.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00044"/>00044 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;It&#32;is&#32;usually&#32;preferrable&#32;if&#32;popsize&#32;&gt;&#32;workers&#32;and&#32;workers&#32;=&#32;mp.cpu_count()&#32;to&#32;improve&#32;CPU&#32;utilization.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00045"/>00045 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00046"/>00046 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;The&#32;ints&#32;parameter&#32;is&#32;a&#32;boolean&#32;array&#32;indicating&#32;which&#32;parameters&#32;are&#32;discrete&#32;integer&#32;values.&#32;This</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00047"/>00047 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;parameter&#32;was&#32;introduced&#32;after&#32;observing&#32;non&#32;optimal&#32;DE-results&#32;for&#32;the&#32;ESP2&#32;benchmark&#32;problem:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00048"/>00048 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;[4]</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00049"/>00049 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;If&#32;defined&#32;it&#32;causes&#32;a&#32;&quot;special&#32;treatment&quot;&#32;for&#32;discrete&#32;variables:&#32;They&#32;are&#32;rounded&#32;to&#32;the&#32;next&#32;integer&#32;value&#32;and</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00050"/>00050 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;there&#32;is&#32;an&#32;additional&#32;mutation&#32;to&#32;avoid&#32;getting&#32;stuck&#32;to&#32;local&#32;minima.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00051"/>00051 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00052"/>00052 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;See&#32;[5]&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00053"/>00053 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00054"/>00054 <emphasis role="stringliteral">&#32;Authors:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00055"/>00055 <emphasis role="stringliteral">&#32;&#32;-&#32;Dietmar&#32;Wolz</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00056"/>00056 <emphasis role="stringliteral">&#32;&#32;-&#32;romain.despoullains@latitude.eu</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00057"/>00057 <emphasis role="stringliteral">&#32;&#32;-&#32;corentin.generet@latitude.eu</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00058"/>00058 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00059"/>00059 <emphasis role="stringliteral">&#32;References:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00060"/>00060 <emphasis role="stringliteral">&#32;&#32;-&#32;[1]&#32;https://github.com/dietmarwo/fast-cma-es</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00061"/>00061 <emphasis role="stringliteral">&#32;&#32;-&#32;[2]&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/_fcmaescpp/deoptimizer.cpp</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00062"/>00062 <emphasis role="stringliteral">&#32;&#32;-&#32;[3]&#32;https://www.jstage.jst.go.jp/article/tjpnsec/11/2/11_18/_article/-char/en/</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00063"/>00063 <emphasis role="stringliteral">&#32;&#32;-&#32;[4]&#32;https://github.com/AlgTUDelft/ExpensiveOptimBenchmark/blob/master/expensiveoptimbenchmark/problems/DockerCFDBenchmark.py</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00064"/>00064 <emphasis role="stringliteral">&#32;&#32;-&#32;[5]&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/MODE.adoc</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00065"/>00065 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00066"/>00066 <emphasis role="stringliteral">&#32;Documentation:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00067"/>00067 <emphasis role="stringliteral">&#32;&#32;-</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00068"/>00068 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00069"/>00069 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00070"/>00070 <emphasis role="stringliteral">=============================================================================</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00071"/>00071 <emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00072"/>00072 
<anchor xml:id="_modecpp_8py_source_1l00073"/>00073 <emphasis role="keyword">import</emphasis>&#32;os
<anchor xml:id="_modecpp_8py_source_1l00074"/>00074 <emphasis role="keyword">import</emphasis>&#32;time
<anchor xml:id="_modecpp_8py_source_1l00075"/>00075 <emphasis role="keyword">import</emphasis>&#32;threadpoolctl
<anchor xml:id="_modecpp_8py_source_1l00076"/>00076 <emphasis role="keyword">import</emphasis>&#32;ctypes&#32;<emphasis role="keyword">as</emphasis>&#32;ct
<anchor xml:id="_modecpp_8py_source_1l00077"/>00077 <emphasis role="keyword">import</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">as</emphasis>&#32;mp&#32;
<anchor xml:id="_modecpp_8py_source_1l00078"/>00078 <emphasis role="keyword">from</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">import</emphasis>&#32;Process
<anchor xml:id="_modecpp_8py_source_1l00079"/>00079 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_modecpp_8py_source_1l00080"/>00080 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds
<anchor xml:id="_modecpp_8py_source_1l00081"/>00081 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;mode,&#32;moretry
<anchor xml:id="_modecpp_8py_source_1l00082"/>00082 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1mode">fcmaes.mode</link>&#32;<emphasis role="keyword">import</emphasis>&#32;_filter,&#32;store
<anchor xml:id="_modecpp_8py_source_1l00083"/>00083 <emphasis role="keyword">from</emphasis>&#32;numpy.random&#32;<emphasis role="keyword">import</emphasis>&#32;Generator,&#32;PCG64DXSM,&#32;SeedSequence
<anchor xml:id="_modecpp_8py_source_1l00084"/>00084 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;dtime
<anchor xml:id="_modecpp_8py_source_1l00085"/>00085 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1evaluator">fcmaes.evaluator</link>&#32;<emphasis role="keyword">import</emphasis>&#32;mo_call_back_type,&#32;callback_mo,&#32;parallel_mo,&#32;libcmalib
<anchor xml:id="_modecpp_8py_source_1l00086"/>00086 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1de">fcmaes.de</link>&#32;<emphasis role="keyword">import</emphasis>&#32;_check_bounds
<anchor xml:id="_modecpp_8py_source_1l00087"/>00087 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1evaluator">fcmaes.evaluator</link>&#32;<emphasis role="keyword">import</emphasis>&#32;is_debug_active
<anchor xml:id="_modecpp_8py_source_1l00088"/>00088 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_modecpp_8py_source_1l00089"/>00089 <emphasis role="keyword">from</emphasis>&#32;typing&#32;<emphasis role="keyword">import</emphasis>&#32;Optional,&#32;Callable,&#32;Tuple
<anchor xml:id="_modecpp_8py_source_1l00090"/>00090 <emphasis role="keyword">from</emphasis>&#32;numpy.typing&#32;<emphasis role="keyword">import</emphasis>&#32;ArrayLike
<anchor xml:id="_modecpp_8py_source_1l00091"/>00091 
<anchor xml:id="_modecpp_8py_source_1l00092"/>00092 os.environ[<emphasis role="stringliteral">&apos;MKL_DEBUG_CPU_TYPE&apos;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&apos;5&apos;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00093"/>00093 
<anchor xml:id="_modecpp_8py_source_1l00094"/>00094 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacefcmaes_1_1modecpp_1a1fc7328d1bfb4cc8c339722697ea5429">minimize</link>(mofun:&#32;Callable[[ArrayLike],&#32;ArrayLike],
<anchor xml:id="_modecpp_8py_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nobj:&#32;int,
<anchor xml:id="_modecpp_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ncon:&#32;int,
<anchor xml:id="_modecpp_8py_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds:&#32;Bounds,
<anchor xml:id="_modecpp_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess:&#32;Optional[np.ndarray]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize:&#32;Optional[int]&#32;=&#32;64,
<anchor xml:id="_modecpp_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations:&#32;Optional[int]&#32;=&#32;100000,
<anchor xml:id="_modecpp_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers:&#32;Optional[int]&#32;=&#32;1,
<anchor xml:id="_modecpp_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f:&#32;Optional[float]&#32;=&#32;0.5,
<anchor xml:id="_modecpp_8py_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cr:&#32;Optional[float]&#32;=&#32;0.9,
<anchor xml:id="_modecpp_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pro_c:&#32;Optional[float]&#32;=&#32;0.5,
<anchor xml:id="_modecpp_8py_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dis_c:&#32;Optional[float]&#32;=&#32;15.0,
<anchor xml:id="_modecpp_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pro_m:&#32;Optional[float]&#32;=&#32;0.9,
<anchor xml:id="_modecpp_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dis_m:&#32;Optional[float]&#32;=&#32;20.0,
<anchor xml:id="_modecpp_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update:&#32;Optional[bool]&#32;=&#32;<emphasis role="keyword">True</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pareto_update:&#32;Optional[int]&#32;=&#32;0,
<anchor xml:id="_modecpp_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints:&#32;Optional[ArrayLike]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_mutate:&#32;Optional[float]&#32;=&#32;0.1,
<anchor xml:id="_modecpp_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_mutate:&#32;Optional[float]&#32;=&#32;0.5,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg:&#32;Optional[Generator]&#32;=&#32;Generator(PCG64DXSM()),
<anchor xml:id="_modecpp_8py_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store:&#32;Optional[store]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;runid:&#32;Optional[int]&#32;=&#32;0)&#32;-&gt;&#32;Tuple[np.ndarray,&#32;np.ndarray]:
<anchor xml:id="_modecpp_8py_source_1l00116"/>00116 
<anchor xml:id="_modecpp_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00118"/>00118 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Minimizes&#32;a&#32;multi-objective&#32;optimization&#32;problem&#32;using&#32;evolutionary&#32;strategies.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00119"/>00119 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00120"/>00120 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;This&#32;function&#32;implements&#32;a&#32;multi-objective&#32;optimization&#32;routine&#32;that&#32;supports</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00121"/>00121 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;various&#32;configurations&#32;such&#32;as&#32;population&#32;size,&#32;mutation&#32;and&#32;crossover&#32;probabilities,</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00122"/>00122 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;and&#32;constraints.&#32;It&#32;provides&#32;options&#32;for&#32;parallel&#32;computation&#32;and&#32;supports&#32;custom</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00123"/>00123 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;random&#32;number&#32;generation.&#32;Additionally,&#32;results&#32;can&#32;be&#32;stored&#32;in&#32;the&#32;provided&#32;storage</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00124"/>00124 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;object&#32;if&#32;specified.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00125"/>00125 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00126"/>00126 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00127"/>00127 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mofun&#32;(Callable[[ArrayLike],&#32;ArrayLike]):&#32;The&#32;objective&#32;function&#32;to&#32;be&#32;minimized.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00128"/>00128 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;It&#32;must&#32;accept&#32;a&#32;single&#32;numpy&#32;array&#32;as&#32;input&#32;and&#32;return&#32;an&#32;array&#32;of&#32;objective</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00129"/>00129 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00130"/>00130 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nobj&#32;(int):&#32;The&#32;number&#32;of&#32;objectives&#32;in&#32;the&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00131"/>00131 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ncon&#32;(int):&#32;The&#32;number&#32;of&#32;constraints&#32;in&#32;the&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00132"/>00132 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds&#32;(Bounds):&#32;The&#32;bounds&#32;for&#32;the&#32;decision&#32;variables.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00133"/>00133 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess&#32;(Optional[np.ndarray]):&#32;Optional&#32;initial&#32;guess&#32;for&#32;the&#32;decision&#32;variables.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00134"/>00134 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;(Optional[int]):&#32;Size&#32;of&#32;the&#32;population.&#32;Defaults&#32;to&#32;64.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00135"/>00135 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;(Optional[int]):&#32;Maximum&#32;number&#32;of&#32;function&#32;evaluations&#32;allowed.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00136"/>00136 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Defaults&#32;to&#32;100,000.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00137"/>00137 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers&#32;(Optional[int]):&#32;Number&#32;of&#32;workers&#32;for&#32;parallel&#32;computation.&#32;Defaults&#32;to&#32;1&#32;(serial).</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00138"/>00138 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f&#32;(Optional[float]):&#32;Differential&#32;weight&#32;used&#32;in&#32;mutation&#32;step.&#32;Defaults&#32;to&#32;0.5.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00139"/>00139 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cr&#32;(Optional[float]):&#32;Crossover&#32;probability.&#32;Defaults&#32;to&#32;0.9.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00140"/>00140 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pro_c&#32;(Optional[float]):&#32;Probability&#32;of&#32;crossover&#32;operation.&#32;Defaults&#32;to&#32;0.5.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00141"/>00141 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dis_c&#32;(Optional[float]):&#32;Distribution&#32;index&#32;for&#32;crossover.&#32;Defaults&#32;to&#32;15.0.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00142"/>00142 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pro_m&#32;(Optional[float]):&#32;Probability&#32;of&#32;mutation.&#32;Defaults&#32;to&#32;0.9.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00143"/>00143 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dis_m&#32;(Optional[float]):&#32;Distribution&#32;index&#32;for&#32;mutation.&#32;Defaults&#32;to&#32;20.0.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00144"/>00144 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update&#32;(Optional[bool]):&#32;Whether&#32;to&#32;apply&#32;NSGA-II&#32;updates.&#32;Defaults&#32;to&#32;True.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00145"/>00145 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pareto_update&#32;(Optional[int]):&#32;Interval&#32;for&#32;Pareto&#32;front&#32;updates.&#32;Defaults&#32;to&#32;0.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00146"/>00146 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints&#32;(Optional[ArrayLike]):&#32;Specifies&#32;which&#32;decision&#32;variables&#32;are&#32;integer-valued.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00147"/>00147 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Defaults&#32;to&#32;None.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00148"/><link linkend="_namespacefcmaes_1_1modecpp_1a1fc7328d1bfb4cc8c339722697ea5429">00148</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_mutate&#32;(Optional[float]):&#32;Minimum&#32;mutation&#32;step&#32;size&#32;as&#32;fraction&#32;of&#32;variable&#32;range.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00149"/>00149 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Defaults&#32;to&#32;0.1.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00150"/>00150 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_mutate&#32;(Optional[float]):&#32;Maximum&#32;mutation&#32;step&#32;size&#32;as&#32;fraction&#32;of&#32;variable&#32;range.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00151"/>00151 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Defaults&#32;to&#32;0.5.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00152"/>00152 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg&#32;(Optional[Generator]):&#32;Random&#32;number&#32;generator.&#32;Defaults&#32;to&#32;`Generator(PCG64DXSM())`.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00153"/>00153 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store&#32;(Optional[store]):&#32;Storage&#32;object&#32;to&#32;store&#32;results&#32;if&#32;specified.&#32;Defaults&#32;to&#32;None.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00154"/>00154 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;runid&#32;(Optional[int]):&#32;Identifier&#32;for&#32;the&#32;run.&#32;Can&#32;be&#32;used&#32;for&#32;logging&#32;or&#32;tracking.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00155"/>00155 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Defaults&#32;to&#32;0.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00156"/>00156 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00157"/>00157 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00158"/>00158 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tuple[np.ndarray,&#32;np.ndarray]:&#32;A&#32;tuple&#32;containing&#32;the&#32;population&#32;of&#32;solutions</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00159"/>00159 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(decision&#32;variable&#32;values)&#32;and&#32;their&#32;objective&#32;function&#32;values.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00160"/>00160 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00161"/>00161 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Raises:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00162"/>00162 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Exception:&#32;If&#32;any&#32;error&#32;occurs&#32;during&#32;the&#32;optimization&#32;process.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00163"/>00163 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00164"/>00164 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00165"/>00165 &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mode&#32;=&#32;<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c">MODE_C</link>(nobj,&#32;ncon,&#32;bounds,&#32;popsize,&#32;f,&#32;cr,&#32;pro_c,&#32;dis_c,&#32;pro_m,&#32;dis_m,&#32;
<anchor xml:id="_modecpp_8py_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update,&#32;pareto_update,&#32;ints,&#32;min_mutate,&#32;max_mutate,&#32;rg,&#32;runid)
<anchor xml:id="_modecpp_8py_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mode.set_guess(guess,&#32;mofun,&#32;rg)&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;workers&#32;&lt;=&#32;1:
<anchor xml:id="_modecpp_8py_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x,&#32;y&#32;=&#32;mode.minimize_ser(mofun,&#32;max_evaluations)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x,&#32;y&#32;=&#32;mode.minimize_par(mofun,&#32;max_evaluations,&#32;workers)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;store&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store.create_views()
<anchor xml:id="_modecpp_8py_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store.add_results(x,&#32;y)
<anchor xml:id="_modecpp_8py_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x,&#32;y
<anchor xml:id="_modecpp_8py_source_1l00178"/>00178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_modecpp_8py_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(str(ex))&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>,&#32;<emphasis role="keywordtype">None</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00181"/>00181 &#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00182"/>00182 <emphasis role="keyword">def&#32;</emphasis>retry(mofun:&#32;Callable[[ArrayLike],&#32;ArrayLike],&#32;
<anchor xml:id="_modecpp_8py_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nobj:&#32;int,
<anchor xml:id="_modecpp_8py_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ncon:&#32;int,&#32;
<anchor xml:id="_modecpp_8py_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds:&#32;Bounds,
<anchor xml:id="_modecpp_8py_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess:&#32;Optional[np.ndarray]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries:&#32;Optional[int]&#32;=&#32;64,
<anchor xml:id="_modecpp_8py_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize:&#32;Optional[int]&#32;=&#32;64,&#32;
<anchor xml:id="_modecpp_8py_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations:&#32;Optional[int]&#32;=&#32;100000,&#32;
<anchor xml:id="_modecpp_8py_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers:&#32;Optional[int]&#32;=&#32;mp.cpu_count(),
<anchor xml:id="_modecpp_8py_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update:&#32;Optional[bool]&#32;=&#32;<emphasis role="keyword">False</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pareto_update:&#32;Optional[int]&#32;=&#32;0,
<anchor xml:id="_modecpp_8py_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints:&#32;Optional[ArrayLike]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;capacity:&#32;Optional[int]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>):
<anchor xml:id="_modecpp_8py_source_1l00195"/>00195 
<anchor xml:id="_modecpp_8py_source_1l00196"/>00196 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00197"/>00197 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Retries&#32;a&#32;multi-objective&#32;optimization&#32;process&#32;in&#32;parallel&#32;to&#32;optimize&#32;given</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00198"/>00198 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;objective&#32;functions&#32;and&#32;constraints.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00199"/>00199 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00200"/>00200 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;This&#32;function&#32;orchestrates&#32;the&#32;process&#32;of&#32;executing&#32;an&#32;optimization&#32;task</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00201"/>00201 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;multiple&#32;times&#32;across&#32;multiple&#32;workers,&#32;each&#32;working&#32;with&#32;different&#32;random</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00202"/>00202 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;seeds.&#32;It&#32;uses&#32;a&#32;population-based&#32;approach&#32;to&#32;iteratively&#32;search&#32;for&#32;optimal</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00203"/>00203 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;solutions&#32;for&#32;a&#32;given&#32;multi-objective&#32;problem,&#32;leveraging&#32;parallel&#32;computing</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00204"/>00204 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;to&#32;efficiently&#32;handle&#32;large&#32;workloads.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00205"/>00205 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00206"/>00206 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00207"/>00207 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mofun&#32;(Callable[[ArrayLike],&#32;ArrayLike]):&#32;The&#32;objective&#32;function&#32;to&#32;optimize,</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00208"/>00208 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapping&#32;input&#32;parameters&#32;to&#32;objective&#32;and&#32;constraint&#32;values.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00209"/>00209 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nobj&#32;(int):&#32;Number&#32;of&#32;objective&#32;functions&#32;in&#32;the&#32;optimization&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00210"/>00210 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ncon&#32;(int):&#32;Number&#32;of&#32;constraints&#32;in&#32;the&#32;optimization&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00211"/>00211 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds&#32;(Bounds):&#32;The&#32;bounds&#32;for&#32;the&#32;decision&#32;variables.&#32;This&#32;defines&#32;the</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00212"/>00212 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lower&#32;and&#32;upper&#32;bounds&#32;for&#32;optimization.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00213"/>00213 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess&#32;(Optional[np.ndarray]):&#32;Initial&#32;guess&#32;for&#32;the&#32;input&#32;variables.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00214"/>00214 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Default&#32;is&#32;None.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00215"/>00215 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries&#32;(Optional[int]):&#32;Number&#32;of&#32;retries&#32;allowed&#32;for&#32;each&#32;worker.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00216"/>00216 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Default&#32;is&#32;64.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00217"/>00217 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;(Optional[int]):&#32;The&#32;population&#32;size&#32;for&#32;the&#32;optimization&#32;algorithm.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00218"/>00218 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Default&#32;is&#32;64.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00219"/>00219 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;(Optional[int]):&#32;Maximum&#32;number&#32;of&#32;function&#32;evaluations</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00220"/>00220 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allowed.&#32;Default&#32;is&#32;100000.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00221"/>00221 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers&#32;(Optional[int]):&#32;Number&#32;of&#32;workers&#32;to&#32;run&#32;in&#32;parallel.&#32;If&#32;not</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00222"/>00222 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;specified,&#32;it&#32;defaults&#32;to&#32;the&#32;number&#32;of&#32;CPUs&#32;available&#32;on&#32;the&#32;machine.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00223"/>00223 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update&#32;(Optional[bool]):&#32;If&#32;True,&#32;enables&#32;an&#32;additional&#32;NSGA&#32;update</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00224"/>00224 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;step&#32;in&#32;the&#32;optimization.&#32;Default&#32;is&#32;False.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00225"/>00225 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pareto_update&#32;(Optional[int]):&#32;Frequency&#32;of&#32;updating&#32;the&#32;Pareto&#32;front</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00226"/>00226 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;during&#32;optimization.&#32;Default&#32;is&#32;0&#32;(no&#32;updates).</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00227"/>00227 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints&#32;(Optional[ArrayLike]):&#32;Indices&#32;of&#32;decision&#32;variables&#32;that&#32;are&#32;integers.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00228"/>00228 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Default&#32;is&#32;None.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00229"/>00229 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;capacity&#32;(Optional[int]):&#32;Capacity&#32;of&#32;the&#32;storage&#32;system&#32;for&#32;maintaining</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00230"/>00230 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results&#32;during&#32;optimization.&#32;If&#32;not&#32;provided,&#32;it&#32;defaults&#32;to</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00231"/>00231 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2048&#32;times&#32;the&#32;population&#32;size.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00232"/>00232 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00233"/>00233 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00234"/>00234 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tuple[np.ndarray,&#32;np.ndarray]:&#32;A&#32;tuple&#32;containing:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00235"/>00235 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;xs:&#32;The&#32;input&#32;configurations&#32;corresponding&#32;to&#32;the&#32;Pareto-optimal&#32;solutions.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00236"/>00236 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;ys:&#32;The&#32;objective&#32;and&#32;constraint&#32;evaluation&#32;results&#32;for&#32;the</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00237"/><link linkend="_namespacefcmaes_1_1modecpp_1aecf03e3039759695759cbf7f028546d6">00237</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Pareto-optimal&#32;solutions.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00238"/>00238 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00239"/>00239 &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00240"/>00240 &#32;&#32;&#32;&#32;dim,&#32;_,&#32;_&#32;=&#32;_check_bounds(bounds,&#32;<emphasis role="keywordtype">None</emphasis>)
<anchor xml:id="_modecpp_8py_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;capacity&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;capacity&#32;=&#32;2048*popsize
<anchor xml:id="_modecpp_8py_source_1l00243"/>00243 &#32;&#32;&#32;&#32;store&#32;=&#32;<link linkend="_classfcmaes_1_1mode_1_1store">mode.store</link>(dim,&#32;nobj&#32;+&#32;ncon,&#32;capacity)
<anchor xml:id="_modecpp_8py_source_1l00244"/>00244 &#32;&#32;&#32;&#32;sg&#32;=&#32;SeedSequence()
<anchor xml:id="_modecpp_8py_source_1l00245"/>00245 &#32;&#32;&#32;&#32;rgs&#32;=&#32;[Generator(PCG64DXSM(s))&#32;<emphasis role="keywordflow">for</emphasis>&#32;s&#32;<emphasis role="keywordflow">in</emphasis>&#32;sg.spawn(workers)]
<anchor xml:id="_modecpp_8py_source_1l00246"/>00246 &#32;&#32;&#32;&#32;proc=[Process(target=_retry_loop,
<anchor xml:id="_modecpp_8py_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;args=(num_retries,&#32;pid,&#32;rgs,&#32;mofun,&#32;nobj,&#32;ncon,&#32;bounds,&#32;guess,&#32;popsize,&#32;
<anchor xml:id="_modecpp_8py_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations,&#32;workers,&#32;nsga_update,&#32;pareto_update,&#32;
<anchor xml:id="_modecpp_8py_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store,&#32;ints))
<anchor xml:id="_modecpp_8py_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;pid&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(workers)]
<anchor xml:id="_modecpp_8py_source_1l00251"/>00251 &#32;&#32;&#32;&#32;[p.start()&#32;<emphasis role="keywordflow">for</emphasis>&#32;p&#32;<emphasis role="keywordflow">in</emphasis>&#32;proc]
<anchor xml:id="_modecpp_8py_source_1l00252"/>00252 &#32;&#32;&#32;&#32;[p.join()&#32;<emphasis role="keywordflow">for</emphasis>&#32;p&#32;<emphasis role="keywordflow">in</emphasis>&#32;proc]
<anchor xml:id="_modecpp_8py_source_1l00253"/>00253 &#32;&#32;&#32;&#32;xs,&#32;ys&#32;=&#32;store.get_front()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xs,&#32;ys
<anchor xml:id="_modecpp_8py_source_1l00255"/>00255 
<anchor xml:id="_modecpp_8py_source_1l00256"/>00256 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacefcmaes_1_1modecpp_1ae779b2337bd3227701e148a6a6997a0a">_retry_loop</link>(num_retries,&#32;pid,&#32;rgs,&#32;mofun,&#32;nobj,&#32;ncon,&#32;bounds,&#32;guess,&#32;popsize,&#32;
<anchor xml:id="_modecpp_8py_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations,&#32;workers,&#32;nsga_update,&#32;pareto_update,&#32;
<anchor xml:id="_modecpp_8py_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store,&#32;ints):
<anchor xml:id="_modecpp_8py_source_1l00259"/>00259 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00260"/>00260 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Executes&#32;a&#32;retry&#32;loop&#32;for&#32;parallel&#32;optimization&#32;tasks,&#32;ensuring&#32;multiple</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00261"/>00261 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;minimization&#32;attempts&#32;are&#32;conducted&#32;until&#32;a&#32;sufficient&#32;number&#32;of&#32;results&#32;are</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00262"/>00262 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;added&#32;to&#32;the&#32;storage.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00263"/>00263 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00264"/>00264 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00265"/>00265 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries:&#32;Number&#32;of&#32;retry&#32;attempts&#32;for&#32;the&#32;optimization&#32;loop.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00266"/>00266 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pid:&#32;Process&#32;identifier&#32;used&#32;for&#32;dealing&#32;with&#32;random&#32;generators.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00267"/>00267 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rgs:&#32;List&#32;of&#32;random&#32;number&#32;generators&#32;for&#32;each&#32;process.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00268"/>00268 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mofun:&#32;Multi-objective&#32;function&#32;to&#32;be&#32;minimized.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00269"/>00269 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nobj:&#32;Number&#32;of&#32;objectives&#32;in&#32;the&#32;optimization&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00270"/>00270 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ncon:&#32;Number&#32;of&#32;constraints&#32;in&#32;the&#32;optimization&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00271"/>00271 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds:&#32;Boundaries&#32;for&#32;the&#32;decision&#32;variables&#32;in&#32;the&#32;optimization&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00272"/>00272 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess:&#32;Initial&#32;guess&#32;values&#32;for&#32;the&#32;optimization&#32;variables.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00273"/>00273 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize:&#32;Population&#32;size&#32;for&#32;the&#32;optimization&#32;algorithm.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00274"/>00274 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations:&#32;Maximum&#32;number&#32;of&#32;evaluations&#32;for&#32;each&#32;optimization&#32;attempt.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00275"/>00275 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers:&#32;Number&#32;of&#32;worker&#32;processes&#32;available&#32;for&#32;parallelization.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00276"/>00276 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update:&#32;Callback&#32;or&#32;function&#32;for&#32;handling&#32;NSGA&#32;updates&#32;during&#32;optimization.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00277"/>00277 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pareto_update:&#32;Callback&#32;or&#32;function&#32;for&#32;managing&#32;Pareto&#32;updates.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00278"/>00278 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store:&#32;Storage&#32;object&#32;for&#32;managing&#32;results&#32;and&#32;tracking&#32;progress.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00279"/>00279 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints:&#32;Indices&#32;of&#32;decision&#32;variables&#32;that&#32;are&#32;integer-constrained.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00280"/>00280 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00281"/>00281 &#32;&#32;&#32;&#32;store.create_views()
<anchor xml:id="_modecpp_8py_source_1l00282"/>00282 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter()
<anchor xml:id="_modecpp_8py_source_1l00283"/>00283 &#32;&#32;&#32;&#32;num&#32;=&#32;max(1,&#32;num_retries&#32;-&#32;workers)
<anchor xml:id="_modecpp_8py_source_1l00284"/>00284 &#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;threadpoolctl.threadpool_limits(limits=1,&#32;user_api=<emphasis role="stringliteral">&quot;blas&quot;</emphasis>):
<anchor xml:id="_modecpp_8py_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;store.num_added.value&#32;&lt;&#32;num:&#32;
<anchor xml:id="_modecpp_8py_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacefcmaes_1_1modecpp_1a1fc7328d1bfb4cc8c339722697ea5429">minimize</link>(mofun,&#32;nobj,&#32;ncon,&#32;bounds,&#32;guess,&#32;popsize,
<anchor xml:id="_modecpp_8py_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;=&#32;max_evaluations,&#32;
<anchor xml:id="_modecpp_8py_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update=nsga_update,&#32;pareto_update=pareto_update,
<anchor xml:id="_modecpp_8py_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg&#32;=&#32;rgs[pid],&#32;store&#32;=&#32;store,&#32;ints=ints)&#32;
<anchor xml:id="_modecpp_8py_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;is_debug_active():
<anchor xml:id="_modecpp_8py_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logger.debug(<emphasis role="stringliteral">&quot;retries&#32;=&#32;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;i&#32;=&#32;{2}&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00292"/><link linkend="_namespacefcmaes_1_1modecpp_1ae779b2337bd3227701e148a6a6997a0a">00292</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.format(store.num_added.value,&#32;dtime(t0),&#32;store.num_stored.value))
<anchor xml:id="_modecpp_8py_source_1l00293"/>00293 
<anchor xml:id="_modecpp_8py_source_1l00294"/>00294 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c">MODE_C</link>:
<anchor xml:id="_modecpp_8py_source_1l00295"/>00295 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00296"/>00296 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;A&#32;class&#32;for&#32;managing&#32;the&#32;MODE-C&#32;optimization&#32;algorithm.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00297"/>00297 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00298"/>00298 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;This&#32;class&#32;provides&#32;an&#32;interface&#32;for&#32;the&#32;multi-objective&#32;differential&#32;evolution</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00299"/>00299 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;(MODE)&#32;algorithm&#32;and&#32;supports&#32;handling&#32;of&#32;objective&#32;functions,&#32;constraints,&#32;parallel</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00300"/>00300 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;evaluation,&#32;and&#32;population&#32;management.&#32;It&#32;is&#32;designed&#32;to&#32;work&#32;with&#32;scenarios&#32;that</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00301"/>00301 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;require&#32;solving&#32;optimization&#32;problems&#32;with&#32;multiple&#32;competing&#32;objectives,&#32;bounded</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00302"/>00302 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;variables,&#32;and&#32;potentially&#32;integer-constrained&#32;decision&#32;variables.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00303"/>00303 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00304"/>00304 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Attributes:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00305"/>00305 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;(int):&#32;The&#32;size&#32;of&#32;the&#32;population&#32;used&#32;in&#32;the&#32;optimization&#32;process.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00306"/>00306 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim&#32;(int):&#32;The&#32;dimensionality&#32;of&#32;the&#32;decision&#32;variable&#32;space.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00307"/>00307 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nobj&#32;(int):&#32;The&#32;number&#32;of&#32;objective&#32;functions.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00308"/>00308 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ncon&#32;(int):&#32;The&#32;number&#32;of&#32;constraints&#32;in&#32;the&#32;optimization&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00309"/>00309 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds&#32;(Bounds):&#32;The&#32;bounds&#32;on&#32;variables,&#32;specified&#32;as&#32;a&#32;sequence&#32;of&#32;(min,&#32;max)&#32;bounds&#32;or</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00310"/>00310 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;the&#32;`scipy.optimize.Bounds`&#32;class.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00311"/>00311 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00312"/>00312 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>__init__(self,
<anchor xml:id="_modecpp_8py_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nobj:&#32;int,
<anchor xml:id="_modecpp_8py_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ncon:&#32;int,&#32;
<anchor xml:id="_modecpp_8py_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds:&#32;Bounds,
<anchor xml:id="_modecpp_8py_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize:&#32;Optional[int]&#32;=&#32;64,&#32;
<anchor xml:id="_modecpp_8py_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f:&#32;Optional[float]&#32;=&#32;0.5,&#32;
<anchor xml:id="_modecpp_8py_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cr:&#32;Optional[float]&#32;=&#32;0.9,&#32;
<anchor xml:id="_modecpp_8py_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pro_c:&#32;Optional[float]&#32;=&#32;0.5,
<anchor xml:id="_modecpp_8py_source_1l00320"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c">00320</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dis_c:&#32;Optional[float]&#32;=&#32;15.0,
<anchor xml:id="_modecpp_8py_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pro_m:&#32;Optional[float]&#32;=&#32;0.9,
<anchor xml:id="_modecpp_8py_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dis_m:&#32;Optional[float]&#32;=&#32;20.0,
<anchor xml:id="_modecpp_8py_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update:&#32;Optional[bool]&#32;=&#32;<emphasis role="keyword">True</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pareto_update:&#32;Optional[int]&#32;=&#32;0,
<anchor xml:id="_modecpp_8py_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints:&#32;Optional[ArrayLike]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_mutate:&#32;Optional[float]&#32;=&#32;0.1,
<anchor xml:id="_modecpp_8py_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_mutate:&#32;Optional[float]&#32;=&#32;0.5,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg:&#32;Optional[Generator]&#32;=&#32;Generator(PCG64DXSM()),
<anchor xml:id="_modecpp_8py_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;runid:&#32;Optional[int]&#32;=&#32;0):
<anchor xml:id="_modecpp_8py_source_1l00330"/>00330 
<anchor xml:id="_modecpp_8py_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00332"/>00332 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Initializes&#32;an&#32;instance&#32;of&#32;the&#32;optimization&#32;problem&#32;using&#32;the&#32;specified&#32;parameters.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00333"/>00333 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00334"/>00334 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;constructor&#32;sets&#32;up&#32;the&#32;necessary&#32;parameters&#32;for&#32;a&#32;multi-objective&#32;differential</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00335"/>00335 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evolution&#32;(MODE)&#32;algorithm,&#32;with&#32;options&#32;for&#32;NSGA-II-inspired&#32;updates&#32;and&#32;Pareto</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00336"/>00336 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;front&#32;approximations.&#32;It&#32;handles&#32;checks&#32;on&#32;bounds,&#32;dimensions,&#32;and&#32;population&#32;size,</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00337"/>00337 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;initializes&#32;the&#32;required&#32;internal&#32;structures&#32;for&#32;the&#32;optimization&#32;process.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00338"/>00338 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00339"/>00339 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00340"/>00340 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nobj&#32;(int):&#32;Number&#32;of&#32;objectives&#32;in&#32;the&#32;optimization&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00341"/>00341 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ncon&#32;(int):&#32;Number&#32;of&#32;constraints&#32;in&#32;the&#32;optimization&#32;problem.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00342"/>00342 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds&#32;(Bounds):&#32;Object&#32;defining&#32;the&#32;lower&#32;and&#32;upper&#32;bounds&#32;for&#32;the&#32;decision&#32;variables.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00343"/>00343 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;(Optional[int]):&#32;Size&#32;of&#32;the&#32;population.&#32;Defaults&#32;to&#32;64.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00344"/>00344 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f&#32;(Optional[float]):&#32;Differential&#32;weight&#32;utilized&#32;in&#32;mutation.&#32;Defaults&#32;to&#32;0.5.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00345"/>00345 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cr&#32;(Optional[float]):&#32;Crossover&#32;probability.&#32;Defaults&#32;to&#32;0.9.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00346"/>00346 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pro_c&#32;(Optional[float]):&#32;Probability&#32;of&#32;crossover&#32;used&#32;in&#32;simulated&#32;binary&#32;crossover.&#32;Defaults&#32;to&#32;0.5.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00347"/>00347 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dis_c&#32;(Optional[float]):&#32;Distribution&#32;index&#32;for&#32;crossover.&#32;Defaults&#32;to&#32;15.0.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00348"/>00348 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pro_m&#32;(Optional[float]):&#32;Probability&#32;of&#32;mutation.&#32;Defaults&#32;to&#32;0.9.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00349"/>00349 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dis_m&#32;(Optional[float]):&#32;Distribution&#32;index&#32;for&#32;mutation.&#32;Defaults&#32;to&#32;20.0.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00350"/>00350 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update&#32;(Optional[bool]):&#32;Flag&#32;to&#32;enable&#32;NSGA-II-inspired&#32;update&#32;rules.&#32;Defaults&#32;to&#32;True.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00351"/>00351 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pareto_update&#32;(Optional[int]):&#32;Mode&#32;for&#32;Pareto&#32;front&#32;update.&#32;Defaults&#32;to&#32;0.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00352"/>00352 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints&#32;(Optional[ArrayLike]):&#32;Binary&#32;array&#32;denoting&#32;whether&#32;each&#32;variable&#32;is&#32;an&#32;integer&#32;(True)&#32;or&#32;continuous&#32;(False).</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00353"/>00353 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Defaults&#32;to&#32;None.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00354"/>00354 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_mutate&#32;(Optional[float]):&#32;Minimum&#32;mutation&#32;rate&#32;for&#32;adaptive&#32;mutation.&#32;Defaults&#32;to&#32;0.1.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00355"/>00355 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_mutate&#32;(Optional[float]):&#32;Maximum&#32;mutation&#32;rate&#32;for&#32;adaptive&#32;mutation.&#32;Defaults&#32;to&#32;0.5.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00356"/>00356 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg&#32;(Optional[Generator]):&#32;Random&#32;number&#32;generator&#32;instance.&#32;Defaults&#32;to&#32;Generator(PCG64DXSM()).</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00357"/>00357 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;runid&#32;(Optional[int]):&#32;Unique&#32;identifier&#32;for&#32;the&#32;model&#32;run.&#32;Defaults&#32;to&#32;0.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00358"/>00358 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00359"/>00359 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00360"/>00360 
<anchor xml:id="_modecpp_8py_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim,&#32;lower,&#32;upper&#32;=&#32;_check_bounds(bounds,&#32;<emphasis role="keywordtype">None</emphasis>)
<anchor xml:id="_modecpp_8py_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;popsize&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;=&#32;64
<anchor xml:id="_modecpp_8py_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;popsize&#32;%&#32;2&#32;==&#32;1&#32;<emphasis role="keywordflow">and</emphasis>&#32;nsga_update:&#32;<emphasis role="comment">#&#32;nsga&#32;update&#32;requires&#32;even&#32;popsize</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00365"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac8edb933a20c41ff33f74d59f9a7f486">00365</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;+=&#32;1
<anchor xml:id="_modecpp_8py_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;lower&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lower&#32;=&#32;[0]*dim
<anchor xml:id="_modecpp_8py_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;upper&#32;=&#32;[0]*dim&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;ints&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">or</emphasis>&#32;nsga_update:&#32;<emphasis role="comment">#&#32;nsga&#32;update&#32;doesn&apos;t&#32;support&#32;mixed&#32;integer</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints&#32;=&#32;[<emphasis role="keyword">False</emphasis>]*dim&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type&#32;=&#32;ct.c_double&#32;*&#32;dim&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bool_array_type&#32;=&#32;ct.c_bool&#32;*&#32;dim&#32;
<anchor xml:id="_modecpp_8py_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seed&#32;=&#32;int(rg.uniform(0,&#32;2**32&#32;-&#32;1))
<anchor xml:id="_modecpp_8py_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09">ptr</link>&#32;=&#32;<link linkend="_namespacefcmaes_1_1modecpp_1a7983baf5cae97002769592e7d8e8643b">initMODE_C</link>(runid,&#32;dim,&#32;nobj,&#32;ncon,&#32;seed,
<anchor xml:id="_modecpp_8py_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type(*lower),&#32;array_type(*upper),&#32;bool_array_type(*ints),&#32;
<anchor xml:id="_modecpp_8py_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize,&#32;f,&#32;cr,&#32;
<anchor xml:id="_modecpp_8py_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pro_c,&#32;dis_c,&#32;pro_m,&#32;dis_m,
<anchor xml:id="_modecpp_8py_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update,&#32;pareto_update,&#32;min_mutate,&#32;max_mutate)
<anchor xml:id="_modecpp_8py_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582">popsize</link>&#32;=&#32;popsize
<anchor xml:id="_modecpp_8py_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1af4ebfa8da5f83635f078bc8f543a3243">dim</link>&#32;=&#32;dim&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a6c3952de5a26ec3374f08723eecf3b2e">nobj</link>&#32;=&#32;nobj&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa461c8e27adc9620ba6f4ed42b6e04cc">ncon</link>&#32;=&#32;ncon
<anchor xml:id="_modecpp_8py_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ab5837c03082fdd02b53bb829e538a094">bounds</link>&#32;=&#32;bounds&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_modecpp_8py_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(str(ex))
<anchor xml:id="_modecpp_8py_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00389"/>00389 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a580bb3d8baef2a338186cac64df0ea45">__del__</link>(self):
<anchor xml:id="_modecpp_8py_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00391"/>00391 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handles&#32;the&#32;cleanup&#32;and&#32;destruction&#32;of&#32;resources&#32;managed&#32;by&#32;an&#32;instance&#32;of&#32;this&#32;class.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00392"/>00392 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00393"/>00393 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;is&#32;automatically&#32;called&#32;when&#32;the&#32;instance&#32;is&#32;about&#32;to&#32;be&#32;destroyed.&#32;It&#32;ensures</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00394"/>00394 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;that&#32;any&#32;resources&#32;tied&#32;to&#32;the&#32;instance&#32;are&#32;released&#32;properly&#32;to&#32;avoid&#32;memory&#32;leaks&#32;or</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00395"/>00395 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resource&#32;contention.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00396"/>00396 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00397"/>00397 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Raises:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00398"/>00398 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Exception:&#32;If&#32;the&#32;clean-up&#32;or&#32;destruction&#32;process&#32;encounters&#32;an&#32;error.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00399"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09">00399</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacefcmaes_1_1modecpp_1a8667a04257d49d4eabd9d64d0e8301a4">destroyMODE_C</link>(self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09">ptr</link>)
<anchor xml:id="_modecpp_8py_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00402"/>00402 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3267cafa8c068a367179034c3f5a562d">set_guess</link>(self,&#32;guess,&#32;mofun,&#32;rg&#32;=&#32;None):
<anchor xml:id="_modecpp_8py_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00404"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582">00404</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Set&#32;the&#32;initial&#32;guess&#32;values&#32;for&#32;optimization&#32;along&#32;with</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00405"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1af4ebfa8da5f83635f078bc8f543a3243">00405</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;corresponding&#32;function&#32;evaluations.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00406"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a6c3952de5a26ec3374f08723eecf3b2e">00406</link> <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00407"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa461c8e27adc9620ba6f4ed42b6e04cc">00407</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;function&#32;initializes&#32;guesses&#32;and&#32;their&#32;associated&#32;computed&#32;values&#32;based</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00408"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ab5837c03082fdd02b53bb829e538a094">00408</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;on&#32;the&#32;input&#32;guess&#32;and&#32;the&#32;provided&#32;function&#32;evaluator.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00409"/>00409 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00410"/>00410 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;a&#32;random&#32;generator&#32;is&#32;not&#32;provided,&#32;a&#32;default&#32;PCG64DXSM-based&#32;generator</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00411"/>00411 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is&#32;created&#32;and&#32;used&#32;to&#32;randomly&#32;select&#32;a&#32;subset&#32;of&#32;guesses&#32;and&#32;evaluations.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00412"/>00412 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00413"/>00413 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00414"/>00414 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess&#32;(Union[np.ndarray,&#32;Tuple[np.ndarray,&#32;np.ndarray]]):&#32;Initial&#32;guesses</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00415"/>00415 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;the&#32;optimization&#32;process.&#32;It&#32;can&#32;either&#32;be&#32;a&#32;numpy&#32;array&#32;of</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00416"/>00416 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guesses,&#32;or&#32;a&#32;tuple&#32;containing&#32;both&#32;the&#32;guesses&#32;and&#32;their</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00417"/>00417 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pre-computed&#32;evaluations.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00418"/>00418 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mofun&#32;(Callable):&#32;A&#32;callable&#32;function&#32;used&#32;to&#32;compute&#32;the&#32;output&#32;of</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00419"/>00419 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;each&#32;guess&#32;value.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00420"/>00420 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg&#32;(Optional[Generator]):&#32;A&#32;numpy&#32;random&#32;generator&#32;for&#32;sampling.&#32;Defaults</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00421"/>00421 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;None,&#32;in&#32;which&#32;case&#32;a&#32;new&#32;generator&#32;instance&#32;is&#32;created.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00422"/>00422 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00423"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a580bb3d8baef2a338186cac64df0ea45">00423</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;guess&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;isinstance(guess,&#32;np.ndarray):
<anchor xml:id="_modecpp_8py_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;=&#32;np.array([mofun(x)&#32;<emphasis role="keywordflow">for</emphasis>&#32;x&#32;<emphasis role="keywordflow">in</emphasis>&#32;guess])
<anchor xml:id="_modecpp_8py_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess,&#32;ys&#32;=&#32;guess
<anchor xml:id="_modecpp_8py_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;rg&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg&#32;=&#32;Generator(PCG64DXSM())
<anchor xml:id="_modecpp_8py_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;choice&#32;=&#32;rg.choice(len(ys),&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582">popsize</link>,&#32;
<anchor xml:id="_modecpp_8py_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;replace&#32;=&#32;(len(ys)&#32;&lt;&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582">popsize</link>))
<anchor xml:id="_modecpp_8py_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07">tell</link>(ys[choice],&#32;guess[choice])
<anchor xml:id="_modecpp_8py_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00434"/>00434 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1">ask</link>(self)&#32;-&gt;&#32;np.ndarray:
<anchor xml:id="_modecpp_8py_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00436"/>00436 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generates&#32;and&#32;retrieves&#32;a&#32;new&#32;population&#32;of&#32;candidate&#32;solutions.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00437"/>00437 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00438"/>00438 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;function&#32;interacts&#32;with&#32;a&#32;C&#32;library&#32;to&#32;generate&#32;a&#32;new&#32;population&#32;of</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00439"/>00439 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solutions&#32;for&#32;an&#32;optimization&#32;task.&#32;It&#32;ensures&#32;that&#32;the&#32;results&#32;are</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00440"/>00440 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retrieved&#32;and&#32;formatted&#32;appropriately&#32;in&#32;a&#32;NumPy&#32;array&#32;for&#32;further</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00441"/>00441 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;processing&#32;or&#32;evaluation.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00442"/>00442 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00443"/>00443 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00444"/>00444 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;np.ndarray:&#32;A&#32;2D&#32;NumPy&#32;array&#32;containing&#32;the&#32;generated&#32;population&#32;of</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00445"/>00445 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solutions.&#32;Each&#32;row&#32;corresponds&#32;to&#32;a&#32;candidate&#32;solution,&#32;and&#32;each</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00446"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3267cafa8c068a367179034c3f5a562d">00446</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;column&#32;corresponds&#32;to&#32;a&#32;dimension&#32;in&#32;the&#32;solution&#32;space.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00447"/>00447 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582">popsize</link>
<anchor xml:id="_modecpp_8py_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1af4ebfa8da5f83635f078bc8f543a3243">dim</link>
<anchor xml:id="_modecpp_8py_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;np.empty(popsize*n)
<anchor xml:id="_modecpp_8py_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res_p&#32;=&#32;res.ctypes.data_as(ct.POINTER(ct.c_double))
<anchor xml:id="_modecpp_8py_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacefcmaes_1_1modecpp_1a44851bd7f89116b8d2704123ae52b295">askMODE_C</link>(self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09">ptr</link>,&#32;res_p)
<anchor xml:id="_modecpp_8py_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;np.empty((popsize,&#32;n))
<anchor xml:id="_modecpp_8py_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;p&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(popsize):
<anchor xml:id="_modecpp_8py_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs[p,:]&#32;=&#32;res[p*n&#32;:&#32;(p+1)*n]
<anchor xml:id="_modecpp_8py_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xs
<anchor xml:id="_modecpp_8py_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_modecpp_8py_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(str(ex))
<anchor xml:id="_modecpp_8py_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00461"/>00461 
<anchor xml:id="_modecpp_8py_source_1l00462"/>00462 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07">tell</link>(self,&#32;ys:&#32;np.ndarray,&#32;xs:&#32;Optional[np.ndarray]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>)&#32;-&gt;&#32;int:
<anchor xml:id="_modecpp_8py_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00464"/>00464 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Submits&#32;new&#32;candidate&#32;solutions&#32;and&#32;their&#32;corresponding&#32;function&#32;values&#32;to&#32;the&#32;optimizer.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00465"/>00465 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00466"/>00466 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;function&#32;allows&#32;reporting&#32;of&#32;new&#32;solution&#32;candidates&#32;(`xs`)&#32;along&#32;with&#32;their&#32;associated</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00467"/>00467 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;function&#32;values&#32;(`ys`)&#32;to&#32;the&#32;optimization&#32;process.&#32;The&#32;optimizer&#32;will&#32;use&#32;this&#32;information</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00468"/>00468 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;update&#32;its&#32;state&#32;and&#32;proceed&#32;with&#32;optimization.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00469"/>00469 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00470"/>00470 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00471"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1">00471</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;(np.ndarray):&#32;A&#32;NumPy&#32;array&#32;of&#32;the&#32;function&#32;values&#32;corresponding&#32;to&#32;the&#32;given&#32;candidate</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00472"/>00472 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solutions.&#32;This&#32;must&#32;be&#32;a&#32;one-dimensional&#32;array&#32;or&#32;will&#32;be&#32;flattened&#32;internally.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00473"/>00473 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;(Optional[np.ndarray]):&#32;A&#32;NumPy&#32;array&#32;of&#32;candidate&#32;solutions.&#32;This&#32;must&#32;be&#32;a</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00474"/>00474 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;two-dimensional&#32;array&#32;with&#32;each&#32;row&#32;representing&#32;a&#32;candidate&#32;solution.&#32;If&#32;not&#32;provided,</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00475"/>00475 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;only&#32;the&#32;function&#32;values&#32;(`ys`)&#32;are&#32;reported.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00476"/>00476 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00477"/>00477 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00478"/>00478 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int:&#32;A&#32;status&#32;code.&#32;The&#32;status&#32;code&#32;indicates&#32;successful&#32;reporting&#32;of&#32;the&#32;solutions&#32;(e.g.,</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00479"/>00479 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;positive&#32;values)&#32;or&#32;failure&#32;due&#32;to&#32;an&#32;exception&#32;encountered&#32;during&#32;processing&#32;(negative</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00480"/>00480 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values&#32;like&#32;-1).</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00481"/>00481 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00482"/>00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flat_ys&#32;=&#32;ys.flatten()
<anchor xml:id="_modecpp_8py_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type_ys&#32;=&#32;ct.c_double&#32;*&#32;len(flat_ys)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;xs&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacefcmaes_1_1modecpp_1a3f5c0d6338d68c18374d7fbcaeba9930">tellMODE_C</link>(self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09">ptr</link>,&#32;array_type_ys(*flat_ys))
<anchor xml:id="_modecpp_8py_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flat_xs&#32;=&#32;xs.flatten()
<anchor xml:id="_modecpp_8py_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type_xs&#32;=&#32;ct.c_double&#32;*&#32;len(flat_xs)
<anchor xml:id="_modecpp_8py_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacefcmaes_1_1modecpp_1ad27774b75048f71df3a93ace96ffadf7">setPopulationMODE_C</link>(self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09">ptr</link>,&#32;len(ys),&#32;
<anchor xml:id="_modecpp_8py_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type_xs(*flat_xs),&#32;array_type_ys(*flat_ys))
<anchor xml:id="_modecpp_8py_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_modecpp_8py_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(str(ex))
<anchor xml:id="_modecpp_8py_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00495"/>00495 &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00496"/>00496 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a92426eb6d5a2f38b3a1218fd9479a1bc">tell_switch</link>(self,&#32;ys:&#32;np.ndarray,&#32;
<anchor xml:id="_modecpp_8py_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update:&#32;Optional[bool]&#32;=&#32;<emphasis role="keyword">True</emphasis>,
<anchor xml:id="_modecpp_8py_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pareto_update:&#32;Optional[int]&#32;=&#32;0)&#32;-&gt;&#32;int:
<anchor xml:id="_modecpp_8py_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00500"/>00500 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Updates&#32;information&#32;to&#32;a&#32;switching&#32;mechanism&#32;based&#32;on&#32;the&#32;input&#32;array.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00501"/>00501 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00502"/>00502 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;function&#32;performs&#32;an&#32;operation&#32;to&#32;update&#32;internal&#32;mechanisms&#32;using&#32;the&#32;provided</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00503"/>00503 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.&#32;It&#32;interacts&#32;with&#32;an&#32;external&#32;library&#32;or&#32;module&#32;through&#32;a&#32;C&#32;function&#32;call,</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00504"/>00504 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;processing&#32;the&#32;input&#32;array&#32;into&#32;a&#32;flattened&#32;format&#32;before&#32;submission.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00505"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07">00505</link> <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00506"/>00506 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00507"/>00507 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;(np.ndarray):&#32;A&#32;NumPy&#32;array&#32;containing&#32;input&#32;data.&#32;The&#32;array&#32;will&#32;be&#32;flattened</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00508"/>00508 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;before&#32;use.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00509"/>00509 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nsga_update&#32;(Optional[bool]):&#32;Indicates&#32;whether&#32;an&#32;NSGA&#32;update&#32;mechanism&#32;is&#32;enabled.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00510"/>00510 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Default&#32;is&#32;True.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00511"/>00511 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pareto_update&#32;(Optional[int]):&#32;Specifies&#32;whether&#32;a&#32;Pareto-based&#32;update&#32;mechanism</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00512"/>00512 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is&#32;triggered.&#32;Default&#32;is&#32;0.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00513"/>00513 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00514"/>00514 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00515"/>00515 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int:&#32;The&#32;result&#32;of&#32;the&#32;external&#32;function&#32;call.&#32;On&#32;successful&#32;operation,&#32;it</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00516"/>00516 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;will&#32;likely&#32;be&#32;a&#32;status&#32;code&#32;or&#32;effect-based&#32;response.&#32;In&#32;case&#32;of&#32;an&#32;error,</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00517"/>00517 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;returns&#32;-1.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00518"/>00518 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flat_ys&#32;=&#32;ys.flatten()
<anchor xml:id="_modecpp_8py_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type_ys&#32;=&#32;ct.c_double&#32;*&#32;len(flat_ys)
<anchor xml:id="_modecpp_8py_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacefcmaes_1_1modecpp_1a754aecb7c3cb6174c472f001c7b24e1f">tellMODE_switchC</link>(self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09">ptr</link>,&#32;array_type_ys(*flat_ys),&#32;nsga_update,&#32;pareto_update)
<anchor xml:id="_modecpp_8py_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_modecpp_8py_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(ex)
<anchor xml:id="_modecpp_8py_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00526"/>00526 &#32;
<anchor xml:id="_modecpp_8py_source_1l00527"/>00527 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3433826fba507128212dc6dd455a7227">population</link>(self)&#32;-&gt;&#32;np.ndarray:
<anchor xml:id="_modecpp_8py_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00529"/>00529 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generates&#32;and&#32;retrieves&#32;the&#32;current&#32;population&#32;of&#32;individuals&#32;in&#32;a&#32;population-based</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00530"/>00530 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;algorithm.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00531"/>00531 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00532"/>00532 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;computes&#32;the&#32;population&#32;from&#32;an&#32;internal&#32;representation&#32;and</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00533"/>00533 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;returns&#32;it&#32;as&#32;a&#32;numpy&#32;array.&#32;The&#32;population&#32;matrix&#32;is&#32;reconstructed</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00534"/>00534 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;by&#32;splitting&#32;and&#32;reshaping&#32;raw&#32;flat&#32;data&#32;fetched&#32;from&#32;an&#32;external&#32;C&#32;function.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00535"/>00535 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00536"/>00536 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00537"/>00537 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;np.ndarray:&#32;A&#32;2D&#32;numpy&#32;array&#32;where&#32;each&#32;row&#32;represents&#32;an&#32;individual</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00538"/>00538 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in&#32;the&#32;population&#32;and&#32;columns&#32;represent&#32;their&#32;feature&#32;values.&#32;If&#32;an&#32;error</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00539"/>00539 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;occurs&#32;during&#32;processing,&#32;the&#32;method&#32;returns&#32;None.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00540"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a92426eb6d5a2f38b3a1218fd9479a1bc">00540</link> <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00541"/>00541 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Raises:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00542"/>00542 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Exception:&#32;If&#32;an&#32;internal&#32;error&#32;occurs&#32;during&#32;computation&#32;or&#32;interfacing</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00543"/>00543 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;with&#32;external&#32;C&#32;functions,&#32;an&#32;exception&#32;is&#32;raised&#32;and&#32;error&#32;information</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00544"/>00544 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is&#32;printed&#32;to&#32;standard&#32;output.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00545"/>00545 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_modecpp_8py_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582">popsize</link>
<anchor xml:id="_modecpp_8py_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1af4ebfa8da5f83635f078bc8f543a3243">dim</link>
<anchor xml:id="_modecpp_8py_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;np.empty(popsize*n)
<anchor xml:id="_modecpp_8py_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res_p&#32;=&#32;res.ctypes.data_as(ct.POINTER(ct.c_double))
<anchor xml:id="_modecpp_8py_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacefcmaes_1_1modecpp_1ae6223aa5cb7a9c8f005870cb8f3c4d58">populationMODE_C</link>(self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a082166f4b177fc11e1aba67824f04e09">ptr</link>,&#32;res_p)
<anchor xml:id="_modecpp_8py_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;np.empty((popsize,&#32;n))
<anchor xml:id="_modecpp_8py_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;p&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(popsize):
<anchor xml:id="_modecpp_8py_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs[p,:]&#32;=&#32;res[p*n&#32;:&#32;(p+1)*n]
<anchor xml:id="_modecpp_8py_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xs
<anchor xml:id="_modecpp_8py_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_modecpp_8py_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(str(ex))
<anchor xml:id="_modecpp_8py_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00559"/>00559 
<anchor xml:id="_modecpp_8py_source_1l00560"/>00560 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa4a7a3e4f9a3fc84dc37faf820025306">minimize_ser</link>(self,&#32;
<anchor xml:id="_modecpp_8py_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun:&#32;Callable[[ArrayLike],&#32;ArrayLike],&#32;
<anchor xml:id="_modecpp_8py_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations:&#32;Optional[int]&#32;=&#32;100000)&#32;-&gt;&#32;Tuple[np.ndarray,&#32;np.ndarray]:
<anchor xml:id="_modecpp_8py_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00564"/>00564 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Minimizes&#32;the&#32;given&#32;scalar&#32;function&#32;using&#32;a&#32;serial&#32;optimization&#32;method.&#32;The&#32;function</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00565"/>00565 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iteratively&#32;evaluates&#32;the&#32;objective&#32;function&#32;on&#32;the&#32;candidate&#32;solutions,&#32;updates&#32;the</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00566"/>00566 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;internal&#32;state&#32;of&#32;the&#32;optimizer,&#32;and&#32;stops&#32;when&#32;the&#32;termination&#32;criterion&#32;is&#32;met&#32;or&#32;the</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00567"/>00567 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maximum&#32;number&#32;of&#32;evaluations&#32;is&#32;reached.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00568"/>00568 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00569"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a3433826fba507128212dc6dd455a7227">00569</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00570"/>00570 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun&#32;(Callable[[ArrayLike],&#32;ArrayLike]):&#32;The&#32;objective&#32;function&#32;to&#32;be&#32;minimized.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00571"/>00571 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;It&#32;should&#32;take&#32;an&#32;input&#32;of&#32;type&#32;ArrayLike&#32;and&#32;return&#32;a&#32;value&#32;of&#32;type&#32;ArrayLike.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00572"/>00572 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;(Optional[int]):&#32;The&#32;maximum&#32;number&#32;of&#32;function&#32;evaluations&#32;allowed.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00573"/>00573 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Defaults&#32;to&#32;100000.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00574"/>00574 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00575"/>00575 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00576"/>00576 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tuple[np.ndarray,&#32;np.ndarray]:&#32;A&#32;tuple&#32;containing&#32;the&#32;final&#32;candidate&#32;solutions&#32;as&#32;a</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00577"/>00577 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numpy&#32;array&#32;and&#32;their&#32;corresponding&#32;evaluated&#32;objective&#32;function&#32;values&#32;as&#32;a&#32;numpy&#32;array.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00578"/>00578 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals&#32;=&#32;0
<anchor xml:id="_modecpp_8py_source_1l00580"/>00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop&#32;=&#32;0
<anchor xml:id="_modecpp_8py_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;stop&#32;==&#32;0&#32;<emphasis role="keywordflow">and</emphasis>&#32;evals&#32;&lt;&#32;max_evaluations:
<anchor xml:id="_modecpp_8py_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1">ask</link>()
<anchor xml:id="_modecpp_8py_source_1l00583"/>00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;=&#32;np.array([fun(x)&#32;<emphasis role="keywordflow">for</emphasis>&#32;x&#32;<emphasis role="keywordflow">in</emphasis>&#32;xs])
<anchor xml:id="_modecpp_8py_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop&#32;=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07">tell</link>(ys)
<anchor xml:id="_modecpp_8py_source_1l00585"/>00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals&#32;+=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582">popsize</link>
<anchor xml:id="_modecpp_8py_source_1l00586"/>00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xs,&#32;ys
<anchor xml:id="_modecpp_8py_source_1l00587"/>00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00588"/>00588 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a672b403a7e745d9e69532454f32d2b62">minimize_par</link>(self,&#32;
<anchor xml:id="_modecpp_8py_source_1l00589"/>00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun:&#32;Callable[[ArrayLike],&#32;ArrayLike],&#32;
<anchor xml:id="_modecpp_8py_source_1l00590"/>00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations:&#32;Optional[int]&#32;=&#32;100000,&#32;
<anchor xml:id="_modecpp_8py_source_1l00591"/>00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers:&#32;Optional[int]&#32;=&#32;mp.cpu_count())&#32;-&gt;&#32;Tuple[np.ndarray,&#32;np.ndarray]:
<anchor xml:id="_modecpp_8py_source_1l00592"/>00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00593"/>00593 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Run&#32;a&#32;parallel&#32;multi-objective&#32;optimization&#32;process.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00594"/>00594 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00595"/>00595 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;leverages&#32;parallel&#32;processing&#32;to&#32;perform&#32;multi-objective</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00596"/>00596 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optimizations&#32;using&#32;a&#32;given&#32;objective&#32;function.&#32;It&#32;runs&#32;multiple&#32;iterations</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00597"/>00597 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;until&#32;the&#32;stopping&#32;criteria&#32;are&#32;met&#32;or&#32;the&#32;specified&#32;maximum&#32;evaluations&#32;are</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00598"/>00598 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reached.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00599"/>00599 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00600"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa4a7a3e4f9a3fc84dc37faf820025306">00600</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00601"/>00601 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun&#32;(Callable[[ArrayLike],&#32;ArrayLike]):&#32;Objective&#32;function&#32;to&#32;minimize.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00602"/>00602 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;(Optional[int]):&#32;Maximum&#32;number&#32;of&#32;evaluations&#32;allowed.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00603"/>00603 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Defaults&#32;to&#32;100000.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00604"/>00604 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers&#32;(Optional[int]):&#32;Number&#32;of&#32;parallel&#32;workers&#32;to&#32;use.&#32;Defaults&#32;to</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00605"/>00605 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;number&#32;of&#32;CPU&#32;cores.</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00606"/>00606 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00607"/>00607 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00608"/>00608 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tuple[np.ndarray,&#32;np.ndarray]:&#32;A&#32;tuple&#32;containing&#32;the&#32;array&#32;of&#32;evaluated</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00609"/>00609 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;solutions&#32;(`xs`)&#32;and&#32;their&#32;corresponding&#32;objective&#32;values&#32;(`ys`).</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00610"/>00610 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_modecpp_8py_source_1l00611"/>00611 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_modecpp_8py_source_1l00612"/>00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fit&#32;=&#32;<link linkend="_classfcmaes_1_1evaluator_1_1parallel__mo">parallel_mo</link>(fun,&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a6c3952de5a26ec3374f08723eecf3b2e">nobj</link>&#32;+&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1aa461c8e27adc9620ba6f4ed42b6e04cc">ncon</link>,&#32;workers)
<anchor xml:id="_modecpp_8py_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals&#32;=&#32;0
<anchor xml:id="_modecpp_8py_source_1l00614"/>00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop&#32;=&#32;0
<anchor xml:id="_modecpp_8py_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;stop&#32;==&#32;0&#32;<emphasis role="keywordflow">and</emphasis>&#32;evals&#32;&lt;&#32;max_evaluations:
<anchor xml:id="_modecpp_8py_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ae42863ed67ebbb8f39a488a9caecebc1">ask</link>()
<anchor xml:id="_modecpp_8py_source_1l00617"/>00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;=&#32;fit(xs)
<anchor xml:id="_modecpp_8py_source_1l00618"/>00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop&#32;=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1adff2bdf2d7fa9dd5d8aabf4962471e07">tell</link>(ys)
<anchor xml:id="_modecpp_8py_source_1l00619"/>00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals&#32;+=&#32;self.<link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1ac85826131061fe5596f9420ff628f582">popsize</link>
<anchor xml:id="_modecpp_8py_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fit.stop()
<anchor xml:id="_modecpp_8py_source_1l00621"/>00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xs,&#32;ys
<anchor xml:id="_modecpp_8py_source_1l00622"/>00622 &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00623"/>00623 <emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;libcmalib&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:&#32;
<anchor xml:id="_modecpp_8py_source_1l00624"/>00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00625"/>00625 &#32;&#32;&#32;&#32;initMODE_C&#32;=&#32;libcmalib.initMODE_C
<anchor xml:id="_modecpp_8py_source_1l00626"/>00626 &#32;&#32;&#32;&#32;initMODE_C.argtypes&#32;=&#32;[ct.c_long,&#32;ct.c_int,&#32;ct.c_int,&#32;\
<anchor xml:id="_modecpp_8py_source_1l00627"/>00627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.c_int,&#32;ct.c_int,&#32;ct.POINTER(ct.c_double),&#32;ct.POINTER(ct.c_double),&#32;ct.POINTER(ct.c_bool),&#32;\
<anchor xml:id="_modecpp_8py_source_1l00628"/>00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.c_int,&#32;ct.c_double,&#32;ct.c_double,&#32;ct.c_double,&#32;ct.c_double,&#32;ct.c_double,&#32;ct.c_double,&#32;
<anchor xml:id="_modecpp_8py_source_1l00629"/>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.c_bool,&#32;ct.c_double,&#32;ct.c_double,&#32;ct.c_double]
<anchor xml:id="_modecpp_8py_source_1l00630"/>00630 &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00631"/>00631 &#32;&#32;&#32;&#32;initMODE_C.restype&#32;=&#32;ct.c_void_p&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00632"/><link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c_1a672b403a7e745d9e69532454f32d2b62">00632</link> &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00633"/>00633 &#32;&#32;&#32;&#32;destroyMODE_C&#32;=&#32;libcmalib.destroyMODE_C
<anchor xml:id="_modecpp_8py_source_1l00634"/>00634 &#32;&#32;&#32;&#32;destroyMODE_C.argtypes&#32;=&#32;[ct.c_void_p]
<anchor xml:id="_modecpp_8py_source_1l00635"/>00635 &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00636"/>00636 &#32;&#32;&#32;&#32;askMODE_C&#32;=&#32;libcmalib.askMODE_C
<anchor xml:id="_modecpp_8py_source_1l00637"/>00637 &#32;&#32;&#32;&#32;askMODE_C.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.POINTER(ct.c_double)]
<anchor xml:id="_modecpp_8py_source_1l00638"/>00638 &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00639"/>00639 &#32;&#32;&#32;&#32;tellMODE_C&#32;=&#32;libcmalib.tellMODE_C
<anchor xml:id="_modecpp_8py_source_1l00640"/>00640 &#32;&#32;&#32;&#32;tellMODE_C.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.POINTER(ct.c_double)]
<anchor xml:id="_modecpp_8py_source_1l00641"/>00641 &#32;&#32;&#32;&#32;tellMODE_C.restype&#32;=&#32;ct.c_int
<anchor xml:id="_modecpp_8py_source_1l00642"/>00642 &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00643"/>00643 &#32;&#32;&#32;&#32;tellMODE_switchC&#32;=&#32;libcmalib.tellMODE_switchC
<anchor xml:id="_modecpp_8py_source_1l00644"/>00644 &#32;&#32;&#32;&#32;tellMODE_switchC.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.POINTER(ct.c_double),&#32;ct.c_bool,&#32;ct.c_double]
<anchor xml:id="_modecpp_8py_source_1l00645"/>00645 &#32;&#32;&#32;&#32;tellMODE_switchC.restype&#32;=&#32;ct.c_int
<anchor xml:id="_modecpp_8py_source_1l00646"/>00646 &#32;&#32;&#32;&#32;
<anchor xml:id="_modecpp_8py_source_1l00647"/>00647 &#32;&#32;&#32;&#32;populationMODE_C&#32;=&#32;libcmalib.populationMODE_C
<anchor xml:id="_modecpp_8py_source_1l00648"/>00648 &#32;&#32;&#32;&#32;populationMODE_C.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.POINTER(ct.c_double)]
<anchor xml:id="_modecpp_8py_source_1l00649"/><link linkend="_namespacefcmaes_1_1modecpp_1a7983baf5cae97002769592e7d8e8643b">00649</link> 
<anchor xml:id="_modecpp_8py_source_1l00650"/><link linkend="_namespacefcmaes_1_1modecpp_1aa26b72a8ba02fae562ed03e63087522b">00650</link> &#32;&#32;&#32;&#32;setPopulationMODE_C&#32;=&#32;libcmalib.setPopulationMODE_C
<anchor xml:id="_modecpp_8py_source_1l00651"/>00651 &#32;&#32;&#32;&#32;setPopulationMODE_C.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.c_int,&#32;ct.POINTER(ct.c_double),&#32;ct.POINTER(ct.c_double)]
<anchor xml:id="_modecpp_8py_source_1l00652"/>00652 &#32;&#32;&#32;&#32;setPopulationMODE_C.restype&#32;=&#32;ct.c_int
<anchor xml:id="_modecpp_8py_source_1l00653"/>00653 
</programlisting></section>
