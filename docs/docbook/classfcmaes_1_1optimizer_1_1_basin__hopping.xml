<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classfcmaes_1_1optimizer_1_1_basin__hopping" xml:lang="en-US">
<title>fcmaes.optimizer.Basin_hopping Class Reference</title>
<indexterm><primary>fcmaes.optimizer.Basin_hopping</primary></indexterm>
<para>

<para>Optimization class implementing the basin hopping algorithm from SciPy. </para>
 
</para>
Inheritance diagram for fcmaes.optimizer.Basin_hopping:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classfcmaes_1_1optimizer_1_1_basin__hopping__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for fcmaes.optimizer.Basin_hopping:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classfcmaes_1_1optimizer_1_1_basin__hopping__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_basin__hopping_1adc078d65d34197f8aef544ebe27fde81">__init__</link> (self, <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6">max_evaluations</link>=50000, store=None)</para>

<para>Initializes the optimizer, which employs the SciPy basin-hopping algorithm to perform optimization. </para>
</listitem>
            <listitem><para>Tuple[np.ndarray, float, int] <link linkend="_classfcmaes_1_1optimizer_1_1_basin__hopping_1ab665db39cdee947aae4959f7d2f7b13c">minimize</link> (self, Callable[[ArrayLike], float] fun, Optional[Bounds] bounds, Optional[ArrayLike] guess=None, Optional[float] sdevs=None, rg=Generator(PCG64DXSM()), store=None)</para>

<para>Minimizes a given objective function using the basinhopping optimization algorithm with local search. </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">fcmaes.optimizer.Optimizer</link>        <itemizedlist>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1a51efe265d8e041b095d8210878d7d7c1">__init__</link> (self, Optional[int] <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6">max_evaluations</link>=50000, Optional[str] <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1ae0423ec54db7b25862e01d7863ab4708">name</link>=&apos;&apos;)</para>

<para>Initializes the class with specific parameters including the maximum number of evaluations and the name. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a">max_eval_num</link> (self, store=None)</para>

<para>Evaluates and returns the maximum number of evaluations based on the provided store or the object&apos;s default value. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1acf09b9b314cc4faf25c9935e76ae1821">get_count_runs</link> (self, store=None)</para>

<para>Gets the count of runs from the provided store. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Public Attributes inherited from <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">fcmaes.optimizer.Optimizer</link>        <itemizedlist>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6">max_evaluations</link> = max_evaluations</para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1ae0423ec54db7b25862e01d7863ab4708">name</link> = name</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Optimization class implementing the basin hopping algorithm from SciPy. </para>



<para>This class is used to solve optimization problems using the basin hopping algorithm, which is a global optimization technique. It combines random perturbation of the input parameters with local optimization, making it suitable for finding global minimums in problems with multiple local minima. The optimizer stops after a maximum number of evaluations or when a suitable solution is found. </para>
<para>
Definition at line <link linkend="_optimizer_8py_source_1l02923">2923</link> of file <link linkend="_optimizer_8py_source">optimizer.py</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classfcmaes_1_1optimizer_1_1_basin__hopping_1adc078d65d34197f8aef544ebe27fde81"/><section>
    <title>__init__()</title>
<indexterm><primary>__init__</primary><secondary>fcmaes.optimizer.Basin_hopping</secondary></indexterm>
<indexterm><primary>fcmaes.optimizer.Basin_hopping</primary><secondary>__init__</secondary></indexterm>
<para><computeroutput>fcmaes.optimizer.Basin_hopping.__init__ ( self,  max_evaluations = <computeroutput>50000</computeroutput>
,  store = <computeroutput>None</computeroutput>
)</computeroutput></para><para>

<para>Initializes the optimizer, which employs the SciPy basin-hopping algorithm to perform optimization. </para>
</para>

<para><literallayout><computeroutput>   This constructor sets up the optimizer with the maximum allowable evaluations and an optional storage system
   for retaining optimization state or results. The optimization process employs a global optimization algorithm
   that effectively navigates through a rough landscape to find the global minimum.
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>max_evaluations</entry><entry>
<para>int The maximum number of iterations or evaluations the optimizer is allowed to perform.</para>
</entry>
                            </row>
                            <row>
<entry>store</entry><entry>
<para>Optional An optional storage mechanism to save or track the state/results of the optimization process. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_optimizer_8py_source_1l02948">2948</link> of file <link linkend="_optimizer_8py_source">optimizer.py</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classfcmaes_1_1optimizer_1_1_basin__hopping_1ab665db39cdee947aae4959f7d2f7b13c"/><section>
    <title>minimize()</title>
<indexterm><primary>minimize</primary><secondary>fcmaes.optimizer.Basin_hopping</secondary></indexterm>
<indexterm><primary>fcmaes.optimizer.Basin_hopping</primary><secondary>minimize</secondary></indexterm>
<para><computeroutput> Tuple[np.ndarray, float, int] fcmaes.optimizer.Basin_hopping.minimize ( self, Callable[[ArrayLike], float] fun, Optional[Bounds] bounds, Optional[ArrayLike]  guess = <computeroutput>None</computeroutput>
, Optional[float]  sdevs = <computeroutput>None</computeroutput>
,  rg = <computeroutput>Generator(PCG64DXSM())</computeroutput>
,  store = <computeroutput>None</computeroutput>
)</computeroutput></para><para>

<para>Minimizes a given objective function using the basinhopping optimization algorithm with local search. </para>
</para>

<para>This method performs optimization by generating random starting points within the specified bounds and repeatedly applies local search algorithms to find the minimum of the function.</para>

<para><literallayout><computeroutput>       fun (Callable[[ArrayLike], float]): The objective function to minimize.
           It must accept an input array and return a scalar value as output.
</computeroutput></literallayout> 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>bounds</entry><entry>
<para>The bounds or constraints on the optimization problem. This should define the lower and upper limits for each dimension of the input. </para>
</entry>
                            </row>
                            <row>
<entry>guess</entry><entry>
<para>The optional initial guess for the starting point of the optimization. If not provided, a uniform random starting point within the bounds is generated. </para>
</entry>
                            </row>
                            <row>
<entry>sdevs</entry><entry>
<para>Ignored parameter for compatibility purposes. </para>
</entry>
                            </row>
                            <row>
<entry>rg</entry><entry>
<para>A random number generator for providing random points within the bounds during the optimization process. </para>
</entry>
                            </row>
                            <row>
<entry>store</entry><entry>
<para>Additional storage object or parameter, used for handling the maximum allowable evaluations during the optimization.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Tuple[np.ndarray, float, int]: Returns a tuple containing:<itemizedlist>
<listitem>
<para>The array of input values (<computeroutput>np.ndarray</computeroutput>) that minimize the objective </para>
</listitem></itemizedlist>
</para>

<para>function.<itemizedlist>
<listitem>
<para>The minimum objective value (<computeroutput>float</computeroutput>).</para>
</listitem><listitem>
<para>The number of function evaluations performed (<computeroutput>int</computeroutput>). </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_optimizer_8py_source_1l02981">2981</link> of file <link linkend="_optimizer_8py_source">optimizer.py</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classfcmaes_1_1optimizer_1_1_basin__hopping_ab665db39cdee947aae4959f7d2f7b13c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
fcmaes/<link linkend="_optimizer_8py">optimizer.py</link></section>
</section>
