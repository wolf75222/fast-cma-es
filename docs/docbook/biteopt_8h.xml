<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_biteopt_8h" xml:lang="en-US">
<title>_fcmaescpp/include/biteopt.h File Reference</title>
<indexterm><primary>_fcmaescpp/include/biteopt.h</primary></indexterm>
<para>

<para>The inclusion file for the <link linkend="_class_c_bite_opt">CBiteOpt</link> and <link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link> classes. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;spheropt.h&quot;<?linebreak?>#include &quot;nmsopt.h&quot;<?linebreak?></programlisting>Include dependency graph for biteopt.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="biteopt_8h__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="biteopt_8h__dep__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_c_bite_opt">CBiteOpt</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_c_bite_opt_1_1_c_par_opt">CBiteOpt::CParOpt&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap">CBiteOptDeep::CBiteOptWrap</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_c_bite_opt_minimize">CBiteOptMinimize</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_biteopt_8h_1a4c9ff8e4010099151e3ac1397a2161d8">BITEOPT_VERSION</link>&#160;&#160;&#160;&quot;2023.6&quot;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef double(* <link linkend="_biteopt_8h_1a308db87d0932931afd67e135ae6c35a1">biteopt_func</link>) (int N, const double *x, void *func_data)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_biteopt_8h_1a80c74350b3bde46bf211afee2d02ddd5">biteopt_minimize</link> (const int N, <link linkend="_biteopt_8h_1a308db87d0932931afd67e135ae6c35a1">biteopt_func</link> f, void *data, const double *lb, const double *ub, double *x, double *minf, const int iter, const int M=1, const int attc=10, const int stopc=0, <link linkend="_biteaux_8h_1a4522f40aac41a9fcbd22f042fea916a5">biteopt_rng</link> rf=0, void *rdata=0, double *f_minp=0)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>The inclusion file for the <link linkend="_class_c_bite_opt">CBiteOpt</link> and <link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link> classes. </para>
<section xml:id="_spheropt_8h_1license">
<title>License</title>
<para>Copyright (c) 2016-2023 Aleksey Vaneev</para>

<para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</para>

<para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</para>

<para>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </para>
</section>
<para>
Definition in file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_biteopt_8h_1a4c9ff8e4010099151e3ac1397a2161d8"/><section>
    <title>BITEOPT_VERSION</title>
<indexterm><primary>BITEOPT_VERSION</primary><secondary>biteopt.h</secondary></indexterm>
<indexterm><primary>biteopt.h</primary><secondary>BITEOPT_VERSION</secondary></indexterm>
<para><computeroutput>#define BITEOPT_VERSION&#160;&#160;&#160;&quot;2023.6&quot;</computeroutput></para><para>
Definition at line <link linkend="_biteopt_8h_source_1l00034">34</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_biteopt_8h_1a308db87d0932931afd67e135ae6c35a1"/><section>
    <title>biteopt_func</title>
<indexterm><primary>biteopt_func</primary><secondary>biteopt.h</secondary></indexterm>
<indexterm><primary>biteopt.h</primary><secondary>biteopt_func</secondary></indexterm>
<para><computeroutput>typedef double(* biteopt_func) (int N, const double *x, void *func_data)</computeroutput></para>
<para>Objective function. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01674">1674</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_biteopt_8h_1a80c74350b3bde46bf211afee2d02ddd5"/><section>
    <title>biteopt_minimize()</title>
<indexterm><primary>biteopt_minimize</primary><secondary>biteopt.h</secondary></indexterm>
<indexterm><primary>biteopt.h</primary><secondary>biteopt_minimize</secondary></indexterm>
<para><computeroutput>int biteopt_minimize (const int N, <link linkend="_biteopt_8h_1a308db87d0932931afd67e135ae6c35a1">biteopt_func</link> f, void * data, const double * lb, const double * ub, double * x, double * minf, const int iter, const int M = <computeroutput>1</computeroutput>
, const int attc = <computeroutput>10</computeroutput>
, const int stopc = <computeroutput>0</computeroutput>
, <link linkend="_biteaux_8h_1a4522f40aac41a9fcbd22f042fea916a5">biteopt_rng</link> rf = <computeroutput>0</computeroutput>
, void * rdata = <computeroutput>0</computeroutput>
, double * f_minp = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function performs minimization using the <link linkend="_class_c_bite_opt">CBiteOpt</link> or <link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link> algorithm.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry><entry>N</entry><entry>
<para>The number of parameters in an objective function. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>f</entry><entry>
<para>Objective function. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>data</entry><entry>
<para>Objective function&apos;s data. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>lb</entry><entry>
<para>Lower bounds of obj function parameters, should not be infinite. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>ub</entry><entry>
<para>Upper bounds of obj function parameters, should not be infinite. </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>x</entry><entry>
<para>Minimizer. </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>minf</entry><entry>
<para>Minimizer&apos;s value. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>iter</entry><entry>
<para>The number of iterations to perform in a single attempt. Corresponds to the number of obj function evaluations that are performed. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>M</entry><entry>
<para>Depth to use, 1 for plain <link linkend="_class_c_bite_opt">CBiteOpt</link> algorithm, &gt;1 for <link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link> algorithm. Expected range is [1; 36]. Internally multiplies &quot;iter&quot; by sqrt(M). </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>attc</entry><entry>
<para>The number of optimization attempts to perform. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>stopc</entry><entry>
<para>Stopping criteria (convergence check). 0: off, 1: 128*N, 2: 256*N. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>rf</entry><entry>
<para>Random number generator function; 0: use the default BiteOpt PRNG. Note that the external RNG should be seeded externally. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>rdata</entry><entry>
<para>Data pointer to pass to the &quot;rf&quot; function. </para>
</entry>
                            </row>
                            <row>
<entry></entry><entry>f_minp</entry><entry>
<para>If non-zero, a pointer to the stopping value: optimization will stop when this objective value is reached. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The total number of function evaluations performed; useful if the &quot;stopc&quot; and/or &quot;*f_minp&quot; were used. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01733">1733</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="biteopt_8h_a80c74350b3bde46bf211afee2d02ddd5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
