<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classfcmaes_1_1optimizer_1_1_dual__annealing" xml:lang="en-US">
<title>fcmaes.optimizer.Dual_annealing Class Reference</title>
<indexterm><primary>fcmaes.optimizer.Dual_annealing</primary></indexterm>
<para>

<para>Dual annealing optimization algorithm implementation. </para>
 
</para>
Inheritance diagram for fcmaes.optimizer.Dual_annealing:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classfcmaes_1_1optimizer_1_1_dual__annealing__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for fcmaes.optimizer.Dual_annealing:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classfcmaes_1_1optimizer_1_1_dual__annealing__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_dual__annealing_1ae4f414368932eac040e7431fec8fd6bc">__init__</link> (self, Optional[int] <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6">max_evaluations</link>=50000, Optional[bool] use_local_search=True)</para>

<para>Initializes an optimizer instance that uses the scipy differential annealing algorithm. </para>
</listitem>
            <listitem><para>Tuple[np.ndarray, float, int] <link linkend="_classfcmaes_1_1optimizer_1_1_dual__annealing_1aae221326dd0bd3d5b646badbf6a59133">minimize</link> (self, Callable[[ArrayLike], float] fun, Optional[Bounds] bounds, Optional[ArrayLike] guess=None, Optional[float] sdevs=None, rg=Generator(PCG64DXSM()), store=None)</para>

<para>Minimizes a scalar function of one or more variables using the Dual Annealing optimization method. </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">fcmaes.optimizer.Optimizer</link>        <itemizedlist>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1a51efe265d8e041b095d8210878d7d7c1">__init__</link> (self, Optional[int] <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6">max_evaluations</link>=50000, Optional[str] <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1ae0423ec54db7b25862e01d7863ab4708">name</link>=&apos;&apos;)</para>

<para>Initializes the class with specific parameters including the maximum number of evaluations and the name. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1adfc4b7f5b36503f186c68d521a9ede8a">max_eval_num</link> (self, store=None)</para>

<para>Evaluates and returns the maximum number of evaluations based on the provided store or the object&apos;s default value. </para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1acf09b9b314cc4faf25c9935e76ae1821">get_count_runs</link> (self, store=None)</para>

<para>Gets the count of runs from the provided store. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_dual__annealing_1a9b9402e2a5a598d792164d460b82056d">no_local_search</link> = not use_local_search</para>

<para>A flag indicating whether local search is disabled. </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Attributes inherited from <link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">fcmaes.optimizer.Optimizer</link>        <itemizedlist>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1a434f96f307e1bf0b0196933945d518e6">max_evaluations</link> = max_evaluations</para>
</listitem>
            <listitem><para><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer_1ae0423ec54db7b25862e01d7863ab4708">name</link> = name</para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>

<para>Dual annealing optimization algorithm implementation. </para>



<para>This class facilitates performing optimization using the dual-annealing algorithm, as implemented in SciPy. It provides functionality for finding the global minimum of a function within given bounds. Local search can also be enabled or disabled for refinement after the global optimization phase.</para>

<para><literallayout><computeroutput>       If True, local search is not applied.
</computeroutput></literallayout> </para>
<para>
Definition at line <link linkend="_optimizer_8py_source_1l02720">2720</link> of file <link linkend="_optimizer_8py_source">optimizer.py</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classfcmaes_1_1optimizer_1_1_dual__annealing_1ae4f414368932eac040e7431fec8fd6bc"/><section>
    <title>__init__()</title>
<indexterm><primary>__init__</primary><secondary>fcmaes.optimizer.Dual_annealing</secondary></indexterm>
<indexterm><primary>fcmaes.optimizer.Dual_annealing</primary><secondary>__init__</secondary></indexterm>
<para><computeroutput>fcmaes.optimizer.Dual_annealing.__init__ ( self, Optional[int]  max_evaluations = <computeroutput>50000</computeroutput>
, Optional[bool]  use_local_search = <computeroutput>True</computeroutput>
)</computeroutput></para><para>

<para>Initializes an optimizer instance that uses the scipy differential annealing algorithm. </para>
</para>

<para>This class inherits from the base <computeroutput><link linkend="_classfcmaes_1_1optimizer_1_1_optimizer">Optimizer</link></computeroutput> class.</para>

<para>It allows customization of the maximum number of evaluations and whether local search should be employed as part of the optimization process.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>max_evaluations</entry><entry>
<para>Optional; maximum number of evaluations allowed during optimization. Defaults to 50000 if not provided. </para>
</entry>
                            </row>
                            <row>
<entry>use_local_search</entry><entry>
<para>Optional; flag indicating whether to use local search during optimization. Defaults to True if not provided. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_optimizer_8py_source_1l02743">2743</link> of file <link linkend="_optimizer_8py_source">optimizer.py</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classfcmaes_1_1optimizer_1_1_dual__annealing_1aae221326dd0bd3d5b646badbf6a59133"/><section>
    <title>minimize()</title>
<indexterm><primary>minimize</primary><secondary>fcmaes.optimizer.Dual_annealing</secondary></indexterm>
<indexterm><primary>fcmaes.optimizer.Dual_annealing</primary><secondary>minimize</secondary></indexterm>
<para><computeroutput> Tuple[np.ndarray, float, int] fcmaes.optimizer.Dual_annealing.minimize ( self, Callable[[ArrayLike], float] fun, Optional[Bounds] bounds, Optional[ArrayLike]  guess = <computeroutput>None</computeroutput>
, Optional[float]  sdevs = <computeroutput>None</computeroutput>
,  rg = <computeroutput>Generator(PCG64DXSM())</computeroutput>
,  store = <computeroutput>None</computeroutput>
)</computeroutput></para><para>

<para>Minimizes a scalar function of one or more variables using the Dual Annealing optimization method. </para>
</para>

<para>This method minimizes an objective function over a domain defined by bounds and an optional initial guess. It allows specifying a random number generator and provides an option for storing intermediate results. The optimization is done using the Dual Annealing algorithm, which is particularly effective for global optimization problems.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>fun</entry><entry>
<para>Callable function to minimize. It must accept a single argument, which is the optimization variable(s), and return a scalar value. </para>
</entry>
                            </row>
                            <row>
<entry>bounds</entry><entry>
<para>Bounds object defining the lower and upper limits for each optimization variable. The bounds must be specified for all dimensions. </para>
</entry>
                            </row>
                            <row>
<entry>guess</entry><entry>
<para>Optional initial guess for the optimization variables. It provides a starting point for the optimization algorithm. </para>
</entry>
                            </row>
                            <row>
<entry>sdevs</entry><entry>
<para>Optional float intended for standard deviations. This parameter is currently ignored in the implementation. </para>
</entry>
                            </row>
                            <row>
<entry>rg</entry><entry>
<para>Random number generator instance used for seeding the optimization process to ensure reproducibility. </para>
</entry>
                            </row>
                            <row>
<entry>store</entry><entry>
<para>Optional storage used to manage intermediate results or post-process optimization details. If provided, results may be customized based on storage behavior.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Tuple containing:<itemizedlist>
<listitem>
<para>The optimized variable(s) <computeroutput>np.ndarray</computeroutput>, representing the location of the minimum.</para>
</listitem><listitem>
<para>The scalar value of the objective function at the minimum.</para>
</listitem><listitem>
<para>The total number of function evaluations performed during optimization. </para>
</listitem></itemizedlist>
</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_optimizer_8py_source_1l02781">2781</link> of file <link linkend="_optimizer_8py_source">optimizer.py</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classfcmaes_1_1optimizer_1_1_dual__annealing_aae221326dd0bd3d5b646badbf6a59133_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classfcmaes_1_1optimizer_1_1_dual__annealing_1a9b9402e2a5a598d792164d460b82056d"/><section>
    <title>no_local_search</title>
<indexterm><primary>no_local_search</primary><secondary>fcmaes.optimizer.Dual_annealing</secondary></indexterm>
<indexterm><primary>fcmaes.optimizer.Dual_annealing</primary><secondary>no_local_search</secondary></indexterm>
<para><computeroutput>fcmaes.optimizer.Dual_annealing.no_local_search = not use_local_search</computeroutput></para><para>

<para>A flag indicating whether local search is disabled. </para>
</para>
<para>
Definition at line <link linkend="_optimizer_8py_source_1l02747">2747</link> of file <link linkend="_optimizer_8py_source">optimizer.py</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
fcmaes/<link linkend="_optimizer_8py">optimizer.py</link></section>
</section>
