<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_modecpp_8py" xml:lang="en-US">
<title>fcmaes/modecpp.py File Reference</title>
<indexterm><primary>fcmaes/modecpp.py</primary></indexterm>
<para>

<para>============================================================================= </para>
 
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classfcmaes_1_1modecpp_1_1_m_o_d_e___c">fcmaes.modecpp.MODE_C</link></para>

<para>A class for managing the MODE-C optimization algorithm. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacefcmaes">fcmaes</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacefcmaes_1_1modecpp">fcmaes.modecpp</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>Tuple[np.ndarray, np.ndarray] <link linkend="_namespacefcmaes_1_1modecpp_1a1fc7328d1bfb4cc8c339722697ea5429">fcmaes.modecpp.minimize</link> (Callable[[ArrayLike], ArrayLike] mofun, int nobj, int ncon, Bounds bounds, Optional[np.ndarray] guess=None, Optional[int] popsize=64, Optional[int] max_evaluations=100000, Optional[int] workers=1, Optional[float] f=0.5, Optional[float] cr=0.9, Optional[float] pro_c=0.5, Optional[float] dis_c=15.0, Optional[float] pro_m=0.9, Optional[float] dis_m=20.0, Optional[bool] nsga_update=True, Optional[int] pareto_update=0, Optional[ArrayLike] ints=None, Optional[float] min_mutate=0.1, Optional[float] max_mutate=0.5, Optional[Generator] rg=Generator(PCG64DXSM()), Optional[<link linkend="_classfcmaes_1_1mode_1_1store">store</link>] <link linkend="_classfcmaes_1_1mode_1_1store">store</link>=None, Optional[int] runid=0)</para>

<para>Minimizes a multi-objective optimization problem using evolutionary strategies. </para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1aecf03e3039759695759cbf7f028546d6">fcmaes.modecpp.retry</link> (Callable[[ArrayLike], ArrayLike] mofun, int nobj, int ncon, Bounds bounds, Optional[np.ndarray] guess=None, Optional[int] num_retries=64, Optional[int] popsize=64, Optional[int] max_evaluations=100000, Optional[int] workers=mp.cpu_count(), Optional[bool] nsga_update=False, Optional[int] pareto_update=0, Optional[ArrayLike] ints=None, Optional[int] capacity=None)</para>

<para>Retries a multi-objective optimization process in parallel to optimize given objective functions and constraints. </para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1ae779b2337bd3227701e148a6a6997a0a">fcmaes.modecpp._retry_loop</link> (num_retries, pid, rgs, mofun, nobj, ncon, bounds, guess, popsize, max_evaluations, workers, nsga_update, pareto_update, <link linkend="_classfcmaes_1_1mode_1_1store">store</link>, ints)</para>

<para>Executes a retry loop for parallel optimization tasks, ensuring multiple minimization attempts are conducted until a sufficient number of results are added to the storage. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1a7983baf5cae97002769592e7d8e8643b">fcmaes.modecpp.initMODE_C</link> = libcmalib.initMODE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1aa26b72a8ba02fae562ed03e63087522b">fcmaes.modecpp.argtypes</link></para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1a23ec54ef3fec9755ffc5d870d9d73c7a">fcmaes.modecpp.restype</link></para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1a8667a04257d49d4eabd9d64d0e8301a4">fcmaes.modecpp.destroyMODE_C</link> = libcmalib.destroyMODE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1a44851bd7f89116b8d2704123ae52b295">fcmaes.modecpp.askMODE_C</link> = libcmalib.askMODE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1a3f5c0d6338d68c18374d7fbcaeba9930">fcmaes.modecpp.tellMODE_C</link> = libcmalib.tellMODE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1a754aecb7c3cb6174c472f001c7b24e1f">fcmaes.modecpp.tellMODE_switchC</link> = libcmalib.tellMODE_switchC</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1ae6223aa5cb7a9c8f005870cb8f3c4d58">fcmaes.modecpp.populationMODE_C</link> = libcmalib.populationMODE_C</para>
</listitem>
            <listitem><para><link linkend="_namespacefcmaes_1_1modecpp_1ad27774b75048f71df3a93ace96ffadf7">fcmaes.modecpp.setPopulationMODE_C</link> = libcmalib.setPopulationMODE_C</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>============================================================================= </para>

<para>Fast version 1.6.11</para>

<para>(c) 2025 – Dietmar Wolz (c) 2025 – Latitude</para>

<para>License MIT</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_modecpp_8py">modecpp.py</link></para>
</listitem></itemizedlist>
</para>

<para><formalpara>
<title>Description</title>
<para><itemizedlist>
<listitem>
<para>Eigen based implementation of multi objective Differential Evolution using the DE/pareto/1 strategy. Derived and adapted for MO from its C++ counterpart <literallayout><computeroutput>&#32;&#32;&#32;[2]
<emphasis role="preprocessor">@par</emphasis>
</computeroutput></literallayout> Can switch to NSGA-II like population update via parameter &apos;nsga_update&apos;. Then it works essentially like NSGA-II but instead of the tournament selection the whole population is sorted and the best individuals survive. To do this efficiently the crowd distance ordering is slightly inaccurate. </para>
</listitem></itemizedlist>
</para>
</formalpara>
<para>

<para>Supports parallel fitness function evaluation. </para>
</para>
<para>

<para>Features enhanced multiple constraint ranking [3] improving its performance in handling constraints for engineering design optimization. </para>
</para>
<para>

<para>Enables the comparison of DE and NSGA-II population update mechanism with everything else kept completely identical. </para>
</para>
<para>

<para>Requires python 3.5 or higher. </para>
</para>
<para>

<para>Uses the following deviation from the standard DE algorithm: a) oscillating CR/F parameters. </para>
</para>
<para>

<para>You may keep parameters F and CR at their defaults since this implementation works well with the given settings for most problems, since the algorithm oscillates between different F and CR settings. </para>
</para>
<para>

<para>For expensive objective functions (e.g. machine learning parameter optimization) use the workers parameter to parallelize objective function evaluation. This causes delayed population update. It is usually preferrable if popsize &gt; workers and workers = mp.cpu_count() to improve CPU utilization. </para>
</para>
<para>

<para>The ints parameter is a boolean array indicating which parameters are discrete integer values. This parameter was introduced after observing non optimal DE-results for the ESP2 benchmark problem: <literallayout><computeroutput>[4]
</computeroutput></literallayout> If defined it causes a &quot;special treatment&quot; for discrete variables: They are rounded to the next integer value and there is an additional mutation to avoid getting stuck to local minima. </para>
</para>
<para>

<para>See [5] for a detailed description.</para>
</para>
<formalpara><title>Author</title>

<para>:<itemizedlist>
<listitem>
<para>Dietmar Wolz <literallayout><computeroutput>-&#32;romain.despoullains<emphasis role="preprocessor">@latitude.eu</emphasis>
-&#32;corentin.generet<emphasis role="preprocessor">@latitude.eu</emphasis>
</computeroutput></literallayout></para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara>
<title>References</title>
<para><itemizedlist>
<listitem>
<para>[1] <link xlink:href="https://github.com/dietmarwo/fast-cma-es">https://github.com/dietmarwo/fast-cma-es</link></para>
</listitem><listitem>
<para>[2] <link xlink:href="https://github.com/dietmarwo/fast-cma-es/blob/master/_fcmaescpp/deoptimizer.cpp">https://github.com/dietmarwo/fast-cma-es/blob/master/_fcmaescpp/deoptimizer.cpp</link></para>
</listitem><listitem>
<para>[3] <link xlink:href="https://www.jstage.jst.go.jp/article/tjpnsec/11/2/11_18/_article/-char/en/">https://www.jstage.jst.go.jp/article/tjpnsec/11/2/11_18/_article/-char/en/</link></para>
</listitem><listitem>
<para>[4] <link xlink:href="https://github.com/AlgTUDelft/ExpensiveOptimBenchmark/blob/master/expensiveoptimbenchmark/problems/DockerCFDBenchmark.py">https://github.com/AlgTUDelft/ExpensiveOptimBenchmark/blob/master/expensiveoptimbenchmark/problems/DockerCFDBenchmark.py</link></para>
</listitem><listitem>
<para>[5] <link xlink:href="https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/MODE.adoc">https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/MODE.adoc</link></para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara>
<title>Documentation</title>
<para><itemizedlist>
<listitem></listitem></itemizedlist>
</para>
</formalpara>
<informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
 </para>
<para>
Definition in file <link linkend="_modecpp_8py_source">modecpp.py</link>.</para>
</section>
</section>
