<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tutorial_8py_source" xml:lang="en-US">
<title>tutorial.py</title>
<indexterm><primary>examples/tutorial.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_tutorial_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1tutorial">00001</link> <emphasis role="comment">#&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00002"/>00002 <emphasis role="comment">#</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00005"/>00005 
<anchor xml:id="_tutorial_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;See&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Tutorials.adoc&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00007"/>00007 
<anchor xml:id="_tutorial_8py_source_1l00008"/>00008 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00009"/>00009 
<anchor xml:id="_tutorial_8py_source_1l00010"/>00010 <emphasis role="keyword">import</emphasis>&#32;math
<anchor xml:id="_tutorial_8py_source_1l00011"/>00011 <emphasis role="keyword">import</emphasis>&#32;time
<anchor xml:id="_tutorial_8py_source_1l00012"/>00012 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_tutorial_8py_source_1l00013"/>00013 <emphasis role="keyword">import</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">as</emphasis>&#32;mp
<anchor xml:id="_tutorial_8py_source_1l00014"/>00014 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;minimize,&#32;differential_evolution,&#32;dual_annealing
<anchor xml:id="_tutorial_8py_source_1l00015"/>00015 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;astro,&#32;advretry,&#32;retry,&#32;cmaes,&#32;cmaescpp
<anchor xml:id="_tutorial_8py_source_1l00016"/>00016 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;dtime,&#32;random_x,&#32;Cma_python,&#32;wrapper
<anchor xml:id="_tutorial_8py_source_1l00017"/>00017 
<anchor xml:id="_tutorial_8py_source_1l00018"/>00018 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_tutorial_8py_source_1l00019"/>00019 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_tutorial_8py_source_1l00020"/>00020 
<anchor xml:id="_tutorial_8py_source_1l00021"/>00021 logger.remove()
<anchor xml:id="_tutorial_8py_source_1l00022"/><link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">00022</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_tutorial_8py_source_1l00023"/>00023 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_tutorial_8py_source_1l00024"/>00024 
<anchor xml:id="_tutorial_8py_source_1l00025"/><link linkend="_namespaceexamples_1_1tutorial_1a9c88d425b049fc145296367957b2ae3c">00025</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1a9c88d425b049fc145296367957b2ae3c">test_advretry</link>(problem,&#32;value_limit,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00026"/>00026 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00027"/>00027 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();&#32;&#32;&#32;&#32;
<anchor xml:id="_tutorial_8py_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;advretry.minimize(problem.fun,&#32;bounds&#32;=&#32;problem.bounds,&#32;num_retries&#32;=&#32;4000,&#32;
<anchor xml:id="_tutorial_8py_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_limit&#32;=&#32;value_limit,&#32;statistic_num=5000)
<anchor xml:id="_tutorial_8py_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00034"/>00034 
<anchor xml:id="_tutorial_8py_source_1l00035"/><link linkend="_namespaceexamples_1_1tutorial_1af03d69ad52b8a379a9397c1310172b92">00035</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1af03d69ad52b8a379a9397c1310172b92">test_advretry_cma_python</link>(problem,&#32;value_limit,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00036"/>00036 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00037"/>00037 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();&#32;&#32;&#32;&#32;
<anchor xml:id="_tutorial_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;advretry.minimize(problem.fun,&#32;bounds&#32;=&#32;problem.bounds,&#32;num_retries&#32;=&#32;4000,&#32;
<anchor xml:id="_tutorial_8py_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optimizer&#32;=&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_cma__python">Cma_python</link>(2000),&#32;value_limit&#32;=&#32;value_limit,
<anchor xml:id="_tutorial_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;statistic_num=5000)
<anchor xml:id="_tutorial_8py_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00045"/>00045 
<anchor xml:id="_tutorial_8py_source_1l00046"/><link linkend="_namespaceexamples_1_1tutorial_1a86d9de974dfa0ae3145e459d3c32f066">00046</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1a86d9de974dfa0ae3145e459d3c32f066">test_retry</link>(problem,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();&#32;&#32;&#32;&#32;
<anchor xml:id="_tutorial_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;retry.minimize(problem.fun,&#32;bounds&#32;=&#32;problem.bounds,&#32;
<anchor xml:id="_tutorial_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries&#32;=&#32;2000,&#32;max_evaluations&#32;=&#32;100000,&#32;
<anchor xml:id="_tutorial_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;statistic_num=5000)
<anchor xml:id="_tutorial_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00056"/>00056 
<anchor xml:id="_tutorial_8py_source_1l00057"/><link linkend="_namespaceexamples_1_1tutorial_1a8253dc379a78438f0d0295b16e19451f">00057</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1a8253dc379a78438f0d0295b16e19451f">test_retry_cma_python</link>(problem,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();&#32;&#32;&#32;&#32;
<anchor xml:id="_tutorial_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;retry.minimize(problem.fun,&#32;bounds&#32;=&#32;problem.bounds,&#32;
<anchor xml:id="_tutorial_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries&#32;=&#32;2000,&#32;optimizer&#32;=&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_cma__python">Cma_python</link>(100000),
<anchor xml:id="_tutorial_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;statistic_num=5000)
<anchor xml:id="_tutorial_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00067"/>00067 
<anchor xml:id="_tutorial_8py_source_1l00068"/><link linkend="_namespaceexamples_1_1tutorial_1aafe9c1a1371c8d452cc44618c6b66af3">00068</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1aafe9c1a1371c8d452cc44618c6b66af3">test_cma_python</link>(problem,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00069"/>00069 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();
<anchor xml:id="_tutorial_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;cmaes.minimize(problem.fun,&#32;max_evaluations&#32;=&#32;100000,&#32;bounds&#32;=&#32;problem.bounds)
<anchor xml:id="_tutorial_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;best&#32;&gt;&#32;ret.fun&#32;<emphasis role="keywordflow">or</emphasis>&#32;i&#32;%&#32;100&#32;==&#32;99:
<anchor xml:id="_tutorial_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00077"/>00077 
<anchor xml:id="_tutorial_8py_source_1l00078"/><link linkend="_namespaceexamples_1_1tutorial_1a90f9c1bb7d36f83fdca74a3327138806">00078</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1a90f9c1bb7d36f83fdca74a3327138806">test_cma_cpp</link>(problem,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();
<anchor xml:id="_tutorial_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;cmaescpp.minimize(problem.fun,&#32;max_evaluations&#32;=&#32;100000,&#32;bounds&#32;=&#32;problem.bounds)
<anchor xml:id="_tutorial_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;best&#32;&gt;&#32;ret.fun&#32;<emphasis role="keywordflow">or</emphasis>&#32;i&#32;%&#32;100&#32;==&#32;99:
<anchor xml:id="_tutorial_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_tutorial_8py_source_1l00088"/><link linkend="_namespaceexamples_1_1tutorial_1a39d164367ec41f19eb0630be5f15e379">00088</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1a39d164367ec41f19eb0630be5f15e379">test_ask_tell</link>(problem,&#32;num):&#32;&#32;&#32;&#32;
<anchor xml:id="_tutorial_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();
<anchor xml:id="_tutorial_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;es&#32;=&#32;<link linkend="_classfcmaes_1_1cmaes_1_1_cmaes">cmaes.Cmaes</link>(bounds&#32;=&#32;problem.bounds)
<anchor xml:id="_tutorial_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iters&#32;=&#32;3000
<anchor xml:id="_tutorial_8py_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;_&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(iters):
<anchor xml:id="_tutorial_8py_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;es.ask()
<anchor xml:id="_tutorial_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;=&#32;[problem.fun(x)&#32;<emphasis role="keywordflow">for</emphasis>&#32;x&#32;<emphasis role="keywordflow">in</emphasis>&#32;xs]
<anchor xml:id="_tutorial_8py_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop&#32;=&#32;es.tell(ys)
<anchor xml:id="_tutorial_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;stop&#32;!=&#32;0:
<anchor xml:id="_tutorial_8py_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>&#32;
<anchor xml:id="_tutorial_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(es.best_value,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;es.best_value))
<anchor xml:id="_tutorial_8py_source_1l00103"/>00103 
<anchor xml:id="_tutorial_8py_source_1l00104"/><link linkend="_namespaceexamples_1_1tutorial_1a45eb0de7a5694eacaa1d6fd23be5bfa6">00104</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1a45eb0de7a5694eacaa1d6fd23be5bfa6">test_cma_parallel</link>(problem,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00105"/>00105 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();
<anchor xml:id="_tutorial_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;cmaes.minimize(<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">wrapper</link>(problem.fun),&#32;bounds&#32;=&#32;problem.bounds,&#32;workers&#32;=&#32;mp.cpu_count())
<anchor xml:id="_tutorial_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;best&#32;&gt;&#32;ret.fun&#32;<emphasis role="keywordflow">or</emphasis>&#32;i&#32;%&#32;100&#32;==&#32;99:
<anchor xml:id="_tutorial_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00113"/>00113 
<anchor xml:id="_tutorial_8py_source_1l00114"/><link linkend="_namespaceexamples_1_1tutorial_1adfff9f66cbc8b67315072f2f788a06ce">00114</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1adfff9f66cbc8b67315072f2f788a06ce">test_differential_evolution</link>(problem,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();
<anchor xml:id="_tutorial_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;<link linkend="_namespacedifferential__evolution">differential_evolution</link>(<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">wrapper</link>(problem.fun),&#32;bounds&#32;=&#32;problem.bounds)
<anchor xml:id="_tutorial_8py_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;best&#32;&gt;&#32;ret.fun&#32;<emphasis role="keywordflow">or</emphasis>&#32;i&#32;%&#32;100&#32;==&#32;99:
<anchor xml:id="_tutorial_8py_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00123"/>00123 
<anchor xml:id="_tutorial_8py_source_1l00124"/><link linkend="_namespaceexamples_1_1tutorial_1a72ebe625829f6382a4dab5eb255468f2">00124</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1a72ebe625829f6382a4dab5eb255468f2">test_dual_annealing</link>(problem,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00125"/>00125 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00126"/>00126 &#32;&#32;&#32;&#32;lb&#32;=&#32;problem.bounds.lb
<anchor xml:id="_tutorial_8py_source_1l00127"/>00127 &#32;&#32;&#32;&#32;ub&#32;=&#32;problem.bounds.ub
<anchor xml:id="_tutorial_8py_source_1l00128"/>00128 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();
<anchor xml:id="_tutorial_8py_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;<link linkend="_namespacedual__annealing">dual_annealing</link>(<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">wrapper</link>(problem.fun),&#32;bounds&#32;=&#32;list(zip(lb,&#32;ub)))
<anchor xml:id="_tutorial_8py_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;best&#32;&gt;&#32;ret.fun&#32;<emphasis role="keywordflow">or</emphasis>&#32;i&#32;%&#32;100&#32;==&#32;99:
<anchor xml:id="_tutorial_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00135"/>00135 
<anchor xml:id="_tutorial_8py_source_1l00136"/><link linkend="_namespaceexamples_1_1tutorial_1a3c73252012add36920a4b8801996ad94">00136</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1tutorial_1a3c73252012add36920a4b8801996ad94">test_scipy_minimize</link>(problem,&#32;num):
<anchor xml:id="_tutorial_8py_source_1l00137"/>00137 &#32;&#32;&#32;&#32;best&#32;=&#32;np.inf
<anchor xml:id="_tutorial_8py_source_1l00138"/>00138 &#32;&#32;&#32;&#32;t0&#32;=&#32;time.perf_counter();
<anchor xml:id="_tutorial_8py_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num):
<anchor xml:id="_tutorial_8py_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess&#32;=&#32;random_x(<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">wrapper</link>(problem.bounds.lb),&#32;problem.bounds.ub)
<anchor xml:id="_tutorial_8py_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;minimize(problem.fun,&#32;x0&#32;=&#32;guess,&#32;bounds&#32;=&#32;problem.bounds)
<anchor xml:id="_tutorial_8py_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;best&#32;&gt;&#32;ret.fun&#32;<emphasis role="keywordflow">or</emphasis>&#32;i&#32;%&#32;20000&#32;==&#32;19999:
<anchor xml:id="_tutorial_8py_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;{0}:&#32;time&#32;=&#32;{1:.1f}&#32;best&#32;=&#32;{2:.1f}&#32;f(xmin)&#32;=&#32;{3:.1f}&quot;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="_namespaceexamples_1_1tutorial_1a2b09dd6f2c499b02132cc297845df828">format</link>(i+1,&#32;dtime(t0),&#32;best,&#32;ret.fun))
<anchor xml:id="_tutorial_8py_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;best&#32;=&#32;min(ret.fun,&#32;best)
<anchor xml:id="_tutorial_8py_source_1l00146"/>00146 
<anchor xml:id="_tutorial_8py_source_1l00147"/>00147 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_tutorial_8py_source_1l00148"/>00148 
<anchor xml:id="_tutorial_8py_source_1l00149"/><link linkend="_namespaceexamples_1_1tutorial_1a1b931a53bcd8caf3de0e12fd39eb6a8d">00149</link> &#32;&#32;&#32;&#32;problem&#32;=&#32;<link linkend="_classfcmaes_1_1astro_1_1_gtoc1">astro.Gtoc1</link>()
<anchor xml:id="_tutorial_8py_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;problem&#32;=&#32;astro.Cassini1()</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00151"/>00151 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;problem&#32;=&#32;astro.Cassini2()</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00152"/>00152 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;problem&#32;=&#32;astro.Rosetta()</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00153"/>00153 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;problem&#32;=&#32;astro.Messenger()</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;problem&#32;=&#32;astro.MessFull()</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00155"/>00155 
<anchor xml:id="_tutorial_8py_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1tutorial_1a9c88d425b049fc145296367957b2ae3c">test_advretry</link>(problem,&#32;20.0,&#32;10)
<anchor xml:id="_tutorial_8py_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_advretry_cma_python(problem,&#32;20.0,&#32;10)</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_retry(problem,&#32;10)</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00159"/>00159 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_retry_cma_python(problem,&#32;10)&#32;</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_cma_python(problem,&#32;1000)</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_cma_cpp(problem,&#32;1000)</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_ask_tell(problem,&#32;10000)</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_cma_parallel(problem,&#32;1000)</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_differential_evolution(problem,&#32;1000)</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_dual_annealing(problem,&#32;1000)</emphasis>
<anchor xml:id="_tutorial_8py_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;test_scipy_minimize(problem,&#32;200000)</emphasis>
</programlisting></section>
