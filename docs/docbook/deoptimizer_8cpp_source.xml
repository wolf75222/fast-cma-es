<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_deoptimizer_8cpp_source" xml:lang="en-US">
<title>deoptimizer.cpp</title>
<indexterm><primary>_fcmaescpp/deoptimizer.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_deoptimizer_8cpp_source_1l00001"/>00001 <emphasis role="comment">//&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00002"/>00002 <emphasis role="comment">//</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00004"/>00004 <emphasis role="comment">//&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00005"/>00005 
<anchor xml:id="_deoptimizer_8cpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;Eigen&#32;based&#32;implementation&#32;of&#32;differential&#32;evolution&#32;using&#32;on&#32;the&#32;DE/best/1&#32;strategy.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00007"/>00007 <emphasis role="comment">//&#32;Uses&#32;two&#32;deviations&#32;from&#32;the&#32;standard&#32;DE&#32;algorithm:</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00008"/>00008 <emphasis role="comment">//&#32;a)&#32;temporal&#32;locality&#32;introduced&#32;in&#32;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00009"/>00009 <emphasis role="comment">//&#32;https://www.researchgate.net/publication/309179699_Differential_evolution_for_protein_folding_optimization_based_on_a_three-dimensional_AB_off-lattice_model</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00010"/>00010 <emphasis role="comment">//&#32;b)&#32;reinitialization&#32;of&#32;individuals&#32;based&#32;on&#32;their&#32;age.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00011"/>00011 <emphasis role="comment">//</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00012"/>00012 <emphasis role="comment">//&#32;Requires&#32;Eigen&#32;version&#32;&gt;=&#32;3.4&#32;because&#32;new&#32;slicing&#32;capabilities&#32;are&#32;used,&#32;see</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00013"/>00013 <emphasis role="comment">//&#32;https://eigen.tuxfamily.org/dox-devel/group__TutorialSlicingIndexing.html</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00014"/>00014 <emphasis role="comment">//&#32;requires&#32;https://github.com/bab2min/EigenRand&#32;for&#32;random&#32;number&#32;generation.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00015"/>00015 <emphasis role="comment">//</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00016"/>00016 <emphasis role="comment">//&#32;Supports&#32;parallel&#32;fitness&#32;function&#32;evaluation.&#32;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00017"/>00017 <emphasis role="comment">//&#32;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00018"/>00018 <emphasis role="comment">//&#32;You&#32;may&#32;keep&#32;parameters&#32;F&#32;and&#32;CR&#32;at&#32;their&#32;defaults&#32;since&#32;this&#32;implementation&#32;works&#32;well&#32;with&#32;the&#32;given&#32;settings&#32;for&#32;most&#32;problems,</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00019"/>00019 <emphasis role="comment">//&#32;since&#32;the&#32;algorithm&#32;oscillates&#32;between&#32;different&#32;F&#32;and&#32;CR&#32;settings.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00020"/>00020 <emphasis role="comment">//</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00021"/>00021 <emphasis role="comment">//&#32;For&#32;expensive&#32;objective&#32;functions&#32;(e.g.&#32;machine&#32;learning&#32;parameter&#32;optimization)&#32;use&#32;the&#32;workers</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00022"/>00022 <emphasis role="comment">//&#32;parameter&#32;to&#32;parallelize&#32;objective&#32;function&#32;evaluation.&#32;The&#32;workers&#32;parameter&#32;is&#32;limited&#32;by&#32;the</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00023"/>00023 <emphasis role="comment">//&#32;population&#32;size.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00024"/>00024 <emphasis role="comment">//</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00025"/>00025 <emphasis role="comment">//&#32;The&#32;ints&#32;parameter&#32;is&#32;a&#32;boolean&#32;array&#32;indicating&#32;which&#32;parameters&#32;are&#32;discrete&#32;integer&#32;values.&#32;This</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00026"/>00026 <emphasis role="comment">//&#32;parameter&#32;was&#32;introduced&#32;after&#32;observing&#32;non&#32;optimal&#32;DE-results&#32;for&#32;the&#32;ESP2&#32;benchmark&#32;problem:</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00027"/>00027 <emphasis role="comment">//&#32;https://github.com/AlgTUDelft/ExpensiveOptimBenchmark/blob/master/expensiveoptimbenchmark/problems/DockerCFDBenchmark.py</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00028"/>00028 <emphasis role="comment">//&#32;If&#32;defined&#32;it&#32;causes&#32;a&#32;&quot;special&#32;treatment&quot;&#32;for&#32;discrete&#32;variables:&#32;They&#32;are&#32;rounded&#32;to&#32;the&#32;next&#32;integer&#32;value&#32;and</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00029"/>00029 <emphasis role="comment">//&#32;there&#32;is&#32;an&#32;additional&#32;mutation&#32;to&#32;avoid&#32;getting&#32;stuck&#32;at&#32;local&#32;minima.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00030"/>00030 
<anchor xml:id="_deoptimizer_8cpp_source_1l00031"/>00031 
<anchor xml:id="_deoptimizer_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#include&#32;&lt;Eigen/Core&gt;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00033"/>00033 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#include&#32;&lt;float.h&gt;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00035"/>00035 <emphasis role="preprocessor">#include&#32;&lt;stdint.h&gt;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00036"/>00036 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#include&#32;&lt;random&gt;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#include&#32;&lt;queue&gt;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_evaluator_8h">evaluator.h</link>&quot;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00041"/>00041 
<anchor xml:id="_deoptimizer_8cpp_source_1l00042"/>00042 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="_deoptimizer_8cpp_source_1l00043"/>00043 
<anchor xml:id="_deoptimizer_8cpp_source_1l00044"/><link linkend="_namespacedifferential__evolution">00044</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedifferential__evolution">differential_evolution</link>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00045"/>00045 
<anchor xml:id="_deoptimizer_8cpp_source_1l00046"/><link linkend="_classdifferential__evolution_1_1_de_optimizer">00046</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a88f53bfd99efb252ac0e6d53b1457edf">DeOptimizer</link>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00047"/>00047 
<anchor xml:id="_deoptimizer_8cpp_source_1l00048"/>00048 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_deoptimizer_8cpp_source_1l00049"/>00049 
<anchor xml:id="_deoptimizer_8cpp_source_1l00050"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a88f53bfd99efb252ac0e6d53b1457edf">00050</link> &#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a88f53bfd99efb252ac0e6d53b1457edf">DeOptimizer</link>(<emphasis role="keywordtype">long</emphasis>&#32;runid_,&#32;<link linkend="_class_fitness">Fitness</link>&#32;*fitfun_,&#32;<emphasis role="keywordtype">int</emphasis>&#32;dim_,&#32;<emphasis role="keywordtype">int</emphasis>&#32;seed_,
<anchor xml:id="_deoptimizer_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;popsize_,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxEvaluations_,&#32;<emphasis role="keywordtype">double</emphasis>&#32;keep_,
<anchor xml:id="_deoptimizer_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;stopfitness_,&#32;<emphasis role="keywordtype">double</emphasis>&#32;F_,&#32;<emphasis role="keywordtype">double</emphasis>&#32;CR_,
<anchor xml:id="_deoptimizer_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;min_mutate_,&#32;<emphasis role="keywordtype">double</emphasis>&#32;max_mutate_,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;*isInt_,&#32;
<anchor xml:id="_deoptimizer_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;guess_,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;inputSigma_,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minSigma_)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;runid&#32;used&#32;to&#32;identify&#32;a&#32;specific&#32;run</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a1b66dc0c337d6bab9b3235c7eeeb49af">runid</link>&#32;=&#32;runid_;
<anchor xml:id="_deoptimizer_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fitness&#32;function&#32;to&#32;minimize</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>&#32;=&#32;fitfun_;
<anchor xml:id="_deoptimizer_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;objective&#32;variables/problem&#32;dimension</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>&#32;=&#32;dim_;
<anchor xml:id="_deoptimizer_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Population&#32;size</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>&#32;=&#32;popsize_&#32;&gt;&#32;0&#32;?&#32;popsize_&#32;:&#32;15&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;maximal&#32;number&#32;of&#32;evaluations&#32;allowed.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2">maxEvaluations</link>&#32;=&#32;maxEvaluations_&#32;&gt;&#32;0&#32;?&#32;maxEvaluations_&#32;:&#32;50000;
<anchor xml:id="_deoptimizer_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;keep&#32;best&#32;young&#32;after&#32;each&#32;iteration.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8">keep</link>&#32;=&#32;keep_&#32;&gt;&#32;0&#32;?&#32;keep_&#32;:&#32;30;
<anchor xml:id="_deoptimizer_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Limit&#32;for&#32;fitness&#32;value.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13">stopfitness</link>&#32;=&#32;stopfitness_;
<anchor xml:id="_deoptimizer_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4">F</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd">F0</link>&#32;=&#32;F_&#32;&gt;&#32;0&#32;?&#32;F_&#32;:&#32;0.5;
<anchor xml:id="_deoptimizer_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab">CR</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078">CR0</link>&#32;=&#32;CR_&#32;&gt;&#32;0&#32;?&#32;CR_&#32;:&#32;0.9;
<anchor xml:id="_deoptimizer_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;iterations&#32;already&#32;performed.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;=&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>&#32;=&#32;DBL_MAX;
<anchor xml:id="_deoptimizer_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stop&#32;criteria</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99">stop</link>&#32;=&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2">pos</link>&#32;=&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">rs</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;pcg64(seed_);
<anchor xml:id="_deoptimizer_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Indicating&#32;which&#32;parameters&#32;are&#32;discrete&#32;integer&#32;values.&#32;If&#32;defined&#32;these&#32;parameters&#32;will&#32;be</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;rounded&#32;to&#32;the&#32;next&#32;integer&#32;and&#32;some&#32;additional&#32;mutation&#32;of&#32;discrete&#32;parameters&#32;are&#32;performed.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50">isInt</link>&#32;=&#32;isInt_;
<anchor xml:id="_deoptimizer_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DE&#32;population&#32;update&#32;parameter&#32;used&#32;in&#32;connection&#32;with&#32;isInt.&#32;Determines</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;mutation&#32;rate&#32;for&#32;discrete&#32;parameters.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7">min_mutate</link>&#32;=&#32;min_mutate_&#32;&gt;&#32;0&#32;?&#32;min_mutate_&#32;:&#32;0.1;
<anchor xml:id="_deoptimizer_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3dae73ea54686df165fc76d29be7aa58">max_mutate</link>&#32;=&#32;max_mutate_&#32;&gt;&#32;0&#32;?&#32;max_mutate_&#32;:&#32;0.5;
<anchor xml:id="_deoptimizer_8cpp_source_1l00085"/>00085 
<anchor xml:id="_deoptimizer_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc">useNormal</link>&#32;=&#32;guess_.size()&#32;&gt;&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d">mean</link>&#32;=&#32;guess_;
<anchor xml:id="_deoptimizer_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">sigma</link>&#32;=&#32;inputSigma_;
<anchor xml:id="_deoptimizer_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b">minSigmaVal</link>&#32;=&#32;minSigma_;
<anchor xml:id="_deoptimizer_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4a4034e862bdd75aead3dd069ec36583">init</link>();
<anchor xml:id="_deoptimizer_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00092"/>00092 
<anchor xml:id="_deoptimizer_8cpp_source_1l00093"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33d01cb4aa66ec253c8505a466298e4c">00093</link> &#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33d01cb4aa66ec253c8505a466298e4c">~DeOptimizer</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">rs</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00096"/>00096 
<anchor xml:id="_deoptimizer_8cpp_source_1l00097"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b">00097</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b">rnd01</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142">distr_01</link>(*<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">rs</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00100"/>00100 
<anchor xml:id="_deoptimizer_8cpp_source_1l00101"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69">00101</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69">rndInt</link>(<emphasis role="keywordtype">int</emphasis>&#32;max)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;(max&#32;*&#32;<link linkend="_evaluator_8h_1a287b4a368f58519084aafdb8b9ff2142">distr_01</link>(*<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">rs</link>));
<anchor xml:id="_deoptimizer_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00104"/>00104 
<anchor xml:id="_deoptimizer_8cpp_source_1l00105"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf">00105</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf">sample</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc">useNormal</link>)
<anchor xml:id="_deoptimizer_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;getClosestFeasible(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d">mean</link>&#32;+&#32;(<link linkend="_evaluator_8h_1a5b652df2286e1f0c4dae7d4dd841bb8f">normalVec</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>,&#32;*<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">rs</link>).array()&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">sigma</link>.array()).matrix());
<anchor xml:id="_deoptimizer_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;sample(*<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">rs</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00111"/>00111 
<anchor xml:id="_deoptimizer_8cpp_source_1l00112"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a427ae953a5503dc4369da1bbb338fe67">00112</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a427ae953a5503dc4369da1bbb338fe67">sample_i</link>(<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc">useNormal</link>)
<anchor xml:id="_deoptimizer_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;getClosestFeasible_i(i,&#32;<link linkend="_evaluator_8h_1aa3d770d0f4bda035e2cc8c6f5c1b0aee">normreal</link>(*<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">rs</link>,&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d">mean</link>[i],&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">sigma</link>[i]));
<anchor xml:id="_deoptimizer_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;sample_i(i,&#32;*<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">rs</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00118"/>00118 
<anchor xml:id="_deoptimizer_8cpp_source_1l00119"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac2c05bd08ebf41841869016986381905">00119</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac2c05bd08ebf41841869016986381905">update_mean</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc">useNormal</link>)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d">meanHist</link>.col(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148">meanHistIndex</link>)&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148">meanHistIndex</link>&#32;=&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148">meanHistIndex</link>&#32;+&#32;1)&#32;%&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d">meanHist</link>.cols();
<anchor xml:id="_deoptimizer_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;delta&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d">meanHist</link>.rowwise().maxCoeff()&#32;-&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d">meanHist</link>.rowwise().minCoeff();
<anchor xml:id="_deoptimizer_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;sigma_new&#32;=&#32;delta.cwiseMin(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a10983927cb3fb32ef29b0e00d648cdc9">maxSigma</link>).cwiseMax(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac59ec7255ba605669b82e5f06acfe580">minSigma</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">sigma</link>&#32;=&#32;sigma_new.mean()&#32;&gt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">sigma</link>.mean()&#32;?&#32;sigma_new&#32;:&#32;&#32;0.9&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">sigma</link>&#32;+&#32;0.1&#32;*&#32;sigma_new;
<anchor xml:id="_deoptimizer_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d">mean</link>&#32;=&#32;0.9&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d">mean</link>&#32;+&#32;0.1&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00129"/>00129 
<anchor xml:id="_deoptimizer_8cpp_source_1l00130"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8babf7e82f12af63653d0d26df11e8b0">00130</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8babf7e82f12af63653d0d26df11e8b0">nextX</link>(<emphasis role="keywordtype">int</emphasis>&#32;p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;xp,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;xb)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;==&#32;0)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>++;
<anchor xml:id="_deoptimizer_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab">CR</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;%&#32;2&#32;==&#32;0&#32;?&#32;0.5&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078">CR0</link>&#32;:&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078">CR0</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4">F</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;%&#32;2&#32;==&#32;0&#32;?&#32;0.5&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd">F0</link>&#32;:&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd">F0</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;&gt;&#32;2)
<anchor xml:id="_deoptimizer_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac2c05bd08ebf41841869016986381905">update_mean</link>();
<anchor xml:id="_deoptimizer_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r1,&#32;r2;
<anchor xml:id="_deoptimizer_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r1&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69">rndInt</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(r1&#32;==&#32;p&#32;||&#32;r1&#32;==&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r2&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69">rndInt</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(r2&#32;==&#32;p&#32;||&#32;r2&#32;==&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>&#32;||&#32;r2&#32;==&#32;r1);
<anchor xml:id="_deoptimizer_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x1&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(r1);
<anchor xml:id="_deoptimizer_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x2&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(r2);
<anchor xml:id="_deoptimizer_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x&#32;=&#32;xb&#32;+&#32;(x1&#32;-&#32;x2)&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4">F</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69">rndInt</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>;&#32;j++)
<anchor xml:id="_deoptimizer_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;!=&#32;r&#32;&amp;&amp;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b">rnd01</link>()&#32;&gt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab">CR</link>)
<anchor xml:id="_deoptimizer_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x[j]&#32;=&#32;xp[j];
<anchor xml:id="_deoptimizer_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;nextx&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;getClosestFeasible(x);
<anchor xml:id="_deoptimizer_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9">modify</link>(nextx);
<anchor xml:id="_deoptimizer_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nextx;
<anchor xml:id="_deoptimizer_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00156"/>00156 
<anchor xml:id="_deoptimizer_8cpp_source_1l00157"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1aff18de19791b75f799d4aa5e9c60b5fa">00157</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aff18de19791b75f799d4aa5e9c60b5fa">next_improve</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;xb,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;x,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;xi)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;nextx&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;getClosestFeasible(xb&#32;+&#32;((x&#32;-&#32;xi)&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd">F0</link>));
<anchor xml:id="_deoptimizer_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9">modify</link>(nextx);
<anchor xml:id="_deoptimizer_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nextx;
<anchor xml:id="_deoptimizer_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00162"/>00162 
<anchor xml:id="_deoptimizer_8cpp_source_1l00163"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9">00163</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9">modify</link>(<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;x)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50">isInt</link>&#32;==&#32;NULL)
<anchor xml:id="_deoptimizer_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;n_ints&#32;=&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>;&#32;i++)
<anchor xml:id="_deoptimizer_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50">isInt</link>[i])&#32;n_ints++;
<anchor xml:id="_deoptimizer_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;to_mutate&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7">min_mutate</link>&#32;+&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b">rnd01</link>()*(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3dae73ea54686df165fc76d29be7aa58">max_mutate</link>&#32;-&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7">min_mutate</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>;&#32;i++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50">isInt</link>[i])&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b">rnd01</link>()&#32;&lt;&#32;to_mutate/n_ints)
<anchor xml:id="_deoptimizer_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x[i]&#32;=&#32;(int)<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a427ae953a5503dc4369da1bbb338fe67">sample_i</link>(i);&#32;<emphasis role="comment">//&#32;resample</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00177"/>00177 
<anchor xml:id="_deoptimizer_8cpp_source_1l00178"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6">00178</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6">ask</link>(<emphasis role="keywordtype">int</emphasis>&#32;&amp;p)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ask&#32;for&#32;one&#32;new&#32;argument&#32;vector.</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af">improvesX</link>.empty())&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2">pos</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8babf7e82f12af63653d0d26df11e8b0">nextX</link>(p,&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(p),&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>));
<anchor xml:id="_deoptimizer_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2">pos</link>&#32;=&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2">pos</link>&#32;+&#32;1)&#32;%&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
<anchor xml:id="_deoptimizer_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a">improvesP</link>.front();
<anchor xml:id="_deoptimizer_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af">improvesX</link>.front();
<anchor xml:id="_deoptimizer_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a">improvesP</link>.pop();
<anchor xml:id="_deoptimizer_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af">improvesX</link>.pop();
<anchor xml:id="_deoptimizer_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
<anchor xml:id="_deoptimizer_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00193"/>00193 
<anchor xml:id="_deoptimizer_8cpp_source_1l00194"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1accf9be34ac5d30b9a2df15dba24f4dce">00194</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1accf9be34ac5d30b9a2df15dba24f4dce">tell</link>(<emphasis role="keywordtype">double</emphasis>&#32;y,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;p)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//tell&#32;function&#32;value&#32;for&#32;a&#32;argument&#32;list&#32;retrieved&#32;by&#32;ask_one().</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isfinite(y)&#32;&amp;&amp;&#32;y&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>[p])&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;&gt;&#32;1)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;temporal&#32;locality</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a">improvesP</link>.push(p);
<anchor xml:id="_deoptimizer_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af">improvesX</link>.push(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aff18de19791b75f799d4aa5e9c60b5fa">next_improve</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>),&#32;x,&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09">popX0</link>.col(p)));
<anchor xml:id="_deoptimizer_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09">popX0</link>.col(p)&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(p);
<anchor xml:id="_deoptimizer_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(p)&#32;=&#32;x;
<anchor xml:id="_deoptimizer_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>[p]&#32;=&#32;y;
<anchor xml:id="_deoptimizer_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc">popIter</link>[p]&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>[<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>])&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>&#32;=&#32;p;
<anchor xml:id="_deoptimizer_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>&#32;=&#32;y;
<anchor xml:id="_deoptimizer_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33">bestX</link>&#32;=&#32;x;
<anchor xml:id="_deoptimizer_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isfinite(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13">stopfitness</link>)&#32;&amp;&amp;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13">stopfitness</link>)
<anchor xml:id="_deoptimizer_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99">stop</link>&#32;=&#32;1;
<anchor xml:id="_deoptimizer_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reinitialize&#32;individual</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8">keep</link>&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b">rnd01</link>()&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;-&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc">popIter</link>[p])&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(p)&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf">sample</link>();
<anchor xml:id="_deoptimizer_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>[p]&#32;=&#32;DBL_MAX;
<anchor xml:id="_deoptimizer_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99">stop</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00224"/>00224 
<anchor xml:id="_deoptimizer_8cpp_source_1l00225"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0dcd44cbcddd9e0dde1ccd2ea5fbf96d">00225</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0dcd44cbcddd9e0dde1ccd2ea5fbf96d">askAll</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>;)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;p;
<anchor xml:id="_deoptimizer_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6">ask</link>(p);
<anchor xml:id="_deoptimizer_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4">askedP</link>[i]&#32;=&#32;p;
<anchor xml:id="_deoptimizer_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa">askedX</link>.col(i)&#32;=&#32;x;
<anchor xml:id="_deoptimizer_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="_deoptimizer_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa">askedX</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00235"/>00235 
<anchor xml:id="_deoptimizer_8cpp_source_1l00236"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa1d0f0d9ddbb192cb30b470d8c3c1af0">00236</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa1d0f0d9ddbb192cb30b470d8c3c1af0">tellAll</link>(<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;&amp;ys)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>;&#32;i++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1accf9be34ac5d30b9a2df15dba24f4dce">tell</link>(ys[i],&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa">askedX</link>.col(i),&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4">askedP</link>[i]);
<anchor xml:id="_deoptimizer_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::cout&#32;&lt;&lt;&#32;fitfun-&gt;evaluations()&#32;&lt;&lt;&#32;&quot;&#32;y&#32;&quot;&#32;&lt;&lt;&#32;ys.transpose()&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99">stop</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00243"/>00243 
<anchor xml:id="_deoptimizer_8cpp_source_1l00244"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a18f5c0a1c724443666e4827126716315">00244</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a18f5c0a1c724443666e4827126716315">doOptimize</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00245"/>00245 
<anchor xml:id="_deoptimizer_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;--------------------&#32;Generation&#32;Loop&#32;--------------------------------</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;=&#32;1;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;evaluations()&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2">maxEvaluations</link>
<anchor xml:id="_deoptimizer_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;terminate();&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00249"/>00249 
<anchor xml:id="_deoptimizer_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;&gt;&#32;2)
<anchor xml:id="_deoptimizer_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac2c05bd08ebf41841869016986381905">update_mean</link>();
<anchor xml:id="_deoptimizer_8cpp_source_1l00252"/>00252 
<anchor xml:id="_deoptimizer_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab">CR</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;%&#32;2&#32;==&#32;0&#32;?&#32;0.5&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078">CR0</link>&#32;:&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078">CR0</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4">F</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;%&#32;2&#32;==&#32;0&#32;?&#32;0.5&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd">F0</link>&#32;:&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd">F0</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00255"/>00255 
<anchor xml:id="_deoptimizer_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;p&#32;=&#32;0;&#32;p&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>;&#32;p++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;xp&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(p);
<anchor xml:id="_deoptimizer_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;xb&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r1,&#32;r2;
<anchor xml:id="_deoptimizer_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r1&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69">rndInt</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(r1&#32;==&#32;p&#32;||&#32;r1&#32;==&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r2&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69">rndInt</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(r2&#32;==&#32;p&#32;||&#32;r2&#32;==&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>&#32;||&#32;r2&#32;==&#32;r1);
<anchor xml:id="_deoptimizer_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x1&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(r1);
<anchor xml:id="_deoptimizer_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x2&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(r2);
<anchor xml:id="_deoptimizer_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad1842fb1469f6b2e9f341afbe3b26d69">rndInt</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x&#32;=&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>(xp);
<anchor xml:id="_deoptimizer_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>;&#32;j++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;==&#32;r&#32;||&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b">rnd01</link>()&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab">CR</link>)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x[j]&#32;=&#32;xb[j]&#32;+&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4">F</link>&#32;*&#32;(x1[j]&#32;-&#32;x2[j]);
<anchor xml:id="_deoptimizer_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;feasible(j,&#32;x[j]))
<anchor xml:id="_deoptimizer_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x[j]&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a427ae953a5503dc4369da1bbb338fe67">sample_i</link>(j);
<anchor xml:id="_deoptimizer_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f8d2654bcad80c32d9358faa62cebd9">modify</link>(x);
<anchor xml:id="_deoptimizer_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;y&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;eval(x)(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isfinite(y)&#32;&amp;&amp;&#32;y&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>[p])&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;temporal&#32;locality</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x2&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aff18de19791b75f799d4aa5e9c60b5fa">next_improve</link>(xb,&#32;x,&#32;xp);
<anchor xml:id="_deoptimizer_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;y2&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;eval(x2)(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isfinite(y2)&#32;&amp;&amp;&#32;y2&#32;&lt;&#32;y)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;y2;
<anchor xml:id="_deoptimizer_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;x2;
<anchor xml:id="_deoptimizer_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(p)&#32;=&#32;x;
<anchor xml:id="_deoptimizer_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>(p)&#32;=&#32;y;
<anchor xml:id="_deoptimizer_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc">popIter</link>[p]&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>[<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>])&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>&#32;=&#32;p;
<anchor xml:id="_deoptimizer_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>&#32;=&#32;y;
<anchor xml:id="_deoptimizer_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33">bestX</link>&#32;=&#32;x;
<anchor xml:id="_deoptimizer_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isfinite(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13">stopfitness</link>)&#32;&amp;&amp;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13">stopfitness</link>)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99">stop</link>&#32;=&#32;1;
<anchor xml:id="_deoptimizer_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reinitialize&#32;individual</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8">keep</link>&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a922dfb6a6903d18311a87e2fe553c78b">rnd01</link>()&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;-&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc">popIter</link>[p])&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(p)&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf">sample</link>();
<anchor xml:id="_deoptimizer_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>[p]&#32;=&#32;DBL_MAX;
<anchor xml:id="_deoptimizer_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00311"/>00311 
<anchor xml:id="_deoptimizer_8cpp_source_1l00312"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0af3433f0f60f99f8a9fbf9f10f36360">00312</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0af3433f0f60f99f8a9fbf9f10f36360">do_optimize_delayed_update</link>(<emphasis role="keywordtype">int</emphasis>&#32;workers)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>&#32;=&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;resetEvaluations();
<anchor xml:id="_deoptimizer_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers&#32;=&#32;std::min(workers,&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);&#32;<emphasis role="comment">//&#32;workers&#32;&lt;=&#32;popsize</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classevaluator">evaluator</link>&#32;eval(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>,&#32;1,&#32;workers);
<anchor xml:id="_deoptimizer_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;evals_size&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>*10;
<anchor xml:id="_deoptimizer_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;evals_x[evals_size];
<anchor xml:id="_deoptimizer_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;evals_p[evals_size];
<anchor xml:id="_deoptimizer_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cp&#32;=&#32;0;&#32;
<anchor xml:id="_deoptimizer_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_deoptimizer_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fill&#32;eval&#32;queue&#32;with&#32;initial&#32;population</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;workers;&#32;i++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;p;
<anchor xml:id="_deoptimizer_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6">ask</link>(p);
<anchor xml:id="_deoptimizer_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eval.<link linkend="_classevaluator_1a62e9fb557b5a2ecfabc49a01eb7f59d5">evaluate</link>(x,&#32;cp);
<anchor xml:id="_deoptimizer_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals_x[cp]&#32;=&#32;x;
<anchor xml:id="_deoptimizer_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals_p[cp]&#32;=&#32;p;
<anchor xml:id="_deoptimizer_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp&#32;=&#32;(cp&#32;+&#32;1)&#32;%&#32;evals_size;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_deoptimizer_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;evaluations()&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2">maxEvaluations</link>&#32;&amp;&amp;&#32;!<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;terminate())&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structvec__id">vec_id</link>*&#32;vid&#32;=&#32;eval.<link linkend="_classevaluator_1a71fc6fd970c9d9f19af8202500c51b05">result</link>();
<anchor xml:id="_deoptimizer_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;y&#32;=&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>(vid-&gt;<link linkend="_structvec__id_1af5bf436ff9f915e145a897a73e4cdac9">_v</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>&#32;=&#32;vid-&gt;<link linkend="_structvec__id_1a126c3cb731d047e25c08742f735f0f13">_id</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;vid;
<anchor xml:id="_deoptimizer_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x&#32;=&#32;evals_x[id];
<anchor xml:id="_deoptimizer_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;p&#32;=&#32;evals_p[id];
<anchor xml:id="_deoptimizer_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1accf9be34ac5d30b9a2df15dba24f4dce">tell</link>(y(0),&#32;x,&#32;p);&#32;<emphasis role="comment">//&#32;tell&#32;evaluated&#32;x</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isfinite(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13">stopfitness</link>)&#32;&amp;&amp;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13">stopfitness</link>)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99">stop</link>&#32;=&#32;1;
<anchor xml:id="_deoptimizer_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>-&gt;evaluations()&#32;&gt;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2">maxEvaluations</link>)
<anchor xml:id="_deoptimizer_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1af7935d4c0d376a000470f2b943aadbd6">ask</link>(p);
<anchor xml:id="_deoptimizer_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eval.<link linkend="_classevaluator_1a62e9fb557b5a2ecfabc49a01eb7f59d5">evaluate</link>(x,&#32;cp);
<anchor xml:id="_deoptimizer_8cpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals_x[cp]&#32;=&#32;x;
<anchor xml:id="_deoptimizer_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals_p[cp]&#32;=&#32;p;
<anchor xml:id="_deoptimizer_8cpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp&#32;=&#32;(cp&#32;+&#32;1)&#32;%&#32;evals_size;&#32;
<anchor xml:id="_deoptimizer_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00352"/>00352 
<anchor xml:id="_deoptimizer_8cpp_source_1l00353"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4a4034e862bdd75aead3dd069ec36583">00353</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4a4034e862bdd75aead3dd069ec36583">init</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>&#32;=&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>,&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09">popX0</link>&#32;=&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>,&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>&#32;=&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d">meanHist</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d">mean</link>.replicate(1,10);
<anchor xml:id="_deoptimizer_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148">meanHistIndex</link>&#32;=&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a10983927cb3fb32ef29b0e00d648cdc9">maxSigma</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">sigma</link>&#32;/&#32;(.1&#32;+&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b">minSigmaVal</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac59ec7255ba605669b82e5f06acfe580">minSigma</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b">minSigmaVal</link>&#32;*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">sigma</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;p&#32;=&#32;0;&#32;p&#32;&lt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>;&#32;p++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09">popX0</link>.col(p)&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(p)&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a750fb2ff0c0981be30414916d8c872bf">sample</link>();
<anchor xml:id="_deoptimizer_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>[p]&#32;=&#32;DBL_MAX;&#32;
<anchor xml:id="_deoptimizer_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>&#32;=&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33">bestX</link>&#32;=&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>.col(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc">popIter</link>&#32;=&#32;<link linkend="_evaluator_8h_1a909812174fa9829bc49f6e00edb00b90">zeros</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa">askedX</link>&#32;=&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>,&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4">askedP</link>&#32;=&#32;<link linkend="_daoptimizer_8cpp_1aa45a218a6a9d424e78898121d21f082d">ivec</link>(<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>);
<anchor xml:id="_deoptimizer_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00371"/>00371 
<anchor xml:id="_deoptimizer_8cpp_source_1l00372"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1af3cb231427f53598ae45ba8c320b1231">00372</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1af3cb231427f53598ae45ba8c320b1231">getBestX</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33">bestX</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00375"/>00375 
<anchor xml:id="_deoptimizer_8cpp_source_1l00376"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9588f30973550e4b1083fd67641dadbb">00376</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9588f30973550e4b1083fd67641dadbb">getBestValue</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00379"/>00379 
<anchor xml:id="_deoptimizer_8cpp_source_1l00380"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab8e8cfb1d04f3cd8dd5c82978f425eb1">00380</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab8e8cfb1d04f3cd8dd5c82978f425eb1">getIterations</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00383"/>00383 
<anchor xml:id="_deoptimizer_8cpp_source_1l00384"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab5aa75486c266ec520613a4e00c2ad52">00384</link> &#32;&#32;&#32;&#32;<link linkend="_class_fitness">Fitness</link>*&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab5aa75486c266ec520613a4e00c2ad52">getFitfun</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00387"/>00387 
<anchor xml:id="_deoptimizer_8cpp_source_1l00388"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa3653941bc72f8c6e32688f1e09ba76b">00388</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa3653941bc72f8c6e32688f1e09ba76b">getDim</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00391"/>00391 
<anchor xml:id="_deoptimizer_8cpp_source_1l00392"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4842f3a4aae6868fbe69fdc154032ca5">00392</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4842f3a4aae6868fbe69fdc154032ca5">getPopulation</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa">askedX</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00395"/>00395 
<anchor xml:id="_deoptimizer_8cpp_source_1l00396"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4cf73cd0c13cf54880eb91edb58db9a9">00396</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4cf73cd0c13cf54880eb91edb58db9a9">getStop</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99">stop</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00399"/>00399 
<anchor xml:id="_deoptimizer_8cpp_source_1l00400"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7c4a14f47ad8a07a84cad2132661b004">00400</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7c4a14f47ad8a07a84cad2132661b004">getPopsize</link>()&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00402"/>00402 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00403"/>00403 
<anchor xml:id="_deoptimizer_8cpp_source_1l00404"/>00404 
<anchor xml:id="_deoptimizer_8cpp_source_1l00405"/>00405 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_deoptimizer_8cpp_source_1l00406"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a1b66dc0c337d6bab9b3235c7eeeb49af">00406</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a1b66dc0c337d6bab9b3235c7eeeb49af">runid</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00407"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">00407</link> &#32;&#32;&#32;&#32;<link linkend="_class_fitness">Fitness</link>&#32;*<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5224214768edd53cecbf3272d501f463">fitfun</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00408"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">00408</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a2d3f9b551728af32ae3535ccd8fe191e">popsize</link>;&#32;<emphasis role="comment">//&#32;population&#32;size</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00409"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">00409</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a33fe24d499544386815402a4406ea791">dim</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00410"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2">00410</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a4c5093a5bde2ba68233dcaf789fe69f2">maxEvaluations</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00411"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8">00411</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a232a3e2545baae1701e76f0a2c6eeec8">keep</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00412"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13">00412</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a657515bc56ba9827a222186364996c13">stopfitness</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00413"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">00413</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa98729ab4bc1be4fa22a3a7340a1ea3f">iterations</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00414"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">00414</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9fa4859d97afa85e9c3f8452cc0d6b65">bestY</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00415"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33">00415</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7576298bacac75697507e4f90fc59c33">bestX</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00416"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">00416</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac23f0d4e38b52955528bf2cbe349992f">bestI</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00417"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99">00417</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3ee567dd0543a9e7cbd7735746ac3f99">stop</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00418"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd">00418</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ae0a4dcecee1e26d0e8e87b783e324fcd">F0</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00419"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078">00419</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a8b2f3c51406460c57cfa59bc406d8078">CR0</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00420"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4">00420</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f332b775ee1241daa8d431e21d415e4">F</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00421"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab">00421</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5422a64ca391813662eeddb2c8cc02ab">CR</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00422"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">00422</link> &#32;&#32;&#32;&#32;pcg64&#32;*<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a9f02b77e27171b51fefa32b5141ae248">rs</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00423"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">00423</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a765bf8a43ae4db32b8de45ef4282b2a1">popX</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00424"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09">00424</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1aa20f437a2e42ae30421404788d2d3f09">popX0</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00425"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa">00425</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1abbc98f32e02cab03f4bc226fa732dcfa">askedX</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00426"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4">00426</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aa45a218a6a9d424e78898121d21f082d">ivec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a5227e652d09cf3cf711eefba448a06f4">askedP</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00427"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">00427</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a6a1b6520ac72b27ee3a574beb03800af">popY</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00428"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc">00428</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a0fbfaa180253cf0a90ca9130199f53bc">popIter</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00429"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af">00429</link> &#32;&#32;&#32;&#32;queue&lt;vec&gt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a487e97cae40baef80b638c79338880af">improvesX</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00430"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a">00430</link> &#32;&#32;&#32;&#32;queue&lt;int&gt;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58da822d0a571d1c5fc502f0de64dc7a">improvesP</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00431"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2">00431</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a942e3699e1766ab34111b48281792ed2">pos</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00432"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7">00432</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a37f47b61da3d427b3c999546203eafc7">min_mutate</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00433"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3dae73ea54686df165fc76d29be7aa58">00433</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a3dae73ea54686df165fc76d29be7aa58">max_mutate</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00434"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50">00434</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;*<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a22b7150d5c13e282b696140e6c97af50">isInt</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00435"/>00435 
<anchor xml:id="_deoptimizer_8cpp_source_1l00436"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc">00436</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a47d96cda10236c7e0cea6e50bec7d7dc">useNormal</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00437"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">00437</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ab770253e46d1dc717520ceddcf0c9a90">sigma</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00438"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d">00438</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a58ba93e54c9364339defb2c2cfe3ec4d">mean</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00439"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a10983927cb3fb32ef29b0e00d648cdc9">00439</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a10983927cb3fb32ef29b0e00d648cdc9">maxSigma</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00440"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac59ec7255ba605669b82e5f06acfe580">00440</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ac59ec7255ba605669b82e5f06acfe580">minSigma</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00441"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b">00441</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a56b8f5ae70f5f635c9eb2981238f0e6b">minSigmaVal</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00442"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d">00442</link> &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1ad74151d3e6bcde089f6bf162f4033b0d">meanHist</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00443"/><link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148">00443</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer_1a7a9d221e815553826c0f1cb6b1585148">meanHistIndex</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00444"/>00444 };
<anchor xml:id="_deoptimizer_8cpp_source_1l00445"/>00445 
<anchor xml:id="_deoptimizer_8cpp_source_1l00446"/>00446 }
<anchor xml:id="_deoptimizer_8cpp_source_1l00447"/>00447 
<anchor xml:id="_deoptimizer_8cpp_source_1l00448"/>00448 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespacedifferential__evolution">differential_evolution</link>;
<anchor xml:id="_deoptimizer_8cpp_source_1l00449"/>00449 
<anchor xml:id="_deoptimizer_8cpp_source_1l00450"/>00450 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00451"/><link linkend="_deoptimizer_8cpp_1aa394124712525387121d6045a579b805">00451</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_deoptimizer_8cpp_1aa394124712525387121d6045a579b805">optimizeDE_C</link>(<emphasis role="keywordtype">long</emphasis>&#32;runid,&#32;<link linkend="_evaluator_8h_1af419da391481d5e767cbe038009da309">callback_type</link>&#32;func,&#32;<emphasis role="keywordtype">int</emphasis>&#32;dim,&#32;<emphasis role="keywordtype">int</emphasis>&#32;seed,
<anchor xml:id="_deoptimizer_8cpp_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;*lower,&#32;<emphasis role="keywordtype">double</emphasis>&#32;*upper,&#32;
<anchor xml:id="_deoptimizer_8cpp_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;*init,&#32;<emphasis role="keywordtype">double</emphasis>&#32;*sigma,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minSigma,
<anchor xml:id="_deoptimizer_8cpp_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;*ints,
<anchor xml:id="_deoptimizer_8cpp_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxEvals,&#32;<emphasis role="keywordtype">double</emphasis>&#32;keep,
<anchor xml:id="_deoptimizer_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;stopfitness,&#32;<emphasis role="keywordtype">int</emphasis>&#32;popsize,&#32;<emphasis role="keywordtype">double</emphasis>&#32;F,&#32;<emphasis role="keywordtype">double</emphasis>&#32;CR,
<anchor xml:id="_deoptimizer_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;min_mutate,&#32;<emphasis role="keywordtype">double</emphasis>&#32;max_mutate,
<anchor xml:id="_deoptimizer_8cpp_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;workers,&#32;<emphasis role="keywordtype">double</emphasis>*&#32;res)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00459"/>00459 
<anchor xml:id="_deoptimizer_8cpp_source_1l00460"/>00460 &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;guess(dim),&#32;lower_limit(dim),&#32;upper_limit(dim),&#32;inputSigma(dim);
<anchor xml:id="_deoptimizer_8cpp_source_1l00461"/>00461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(init&#32;!=&#32;NULL&#32;and&#32;sigma&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;dim;&#32;i++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess[i]&#32;=&#32;init[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputSigma[i]&#32;=&#32;sigma[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00466"/>00466 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess.resize(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputSigma.resize(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minSigma&#32;=&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00470"/>00470 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00471"/>00471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lower&#32;!=&#32;NULL&#32;&amp;&amp;&#32;upper&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;dim;&#32;i++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lower_limit[i]&#32;=&#32;lower[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;upper_limit[i]&#32;=&#32;upper[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00476"/>00476 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lower_limit.resize(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;upper_limit.resize(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00479"/>00479 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00480"/>00480 
<anchor xml:id="_deoptimizer_8cpp_source_1l00481"/>00481 &#32;&#32;&#32;&#32;<link linkend="_class_fitness">Fitness</link>&#32;fitfun(func,&#32;<link linkend="_evaluator_8h_1ac05c49788a31e5f7cb8efbe8ca3b548e">noop_callback_par</link>,&#32;dim,&#32;1,&#32;lower_limit,&#32;upper_limit);
<anchor xml:id="_deoptimizer_8cpp_source_1l00482"/>00482 &#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>&#32;opt(runid,&#32;&amp;fitfun,&#32;dim,&#32;seed,&#32;popsize,&#32;maxEvals,&#32;keep,
<anchor xml:id="_deoptimizer_8cpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stopfitness,&#32;F,&#32;CR,&#32;min_mutate,&#32;max_mutate,
<anchor xml:id="_deoptimizer_8cpp_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints,&#32;guess,&#32;inputSigma,&#32;minSigma);
<anchor xml:id="_deoptimizer_8cpp_source_1l00485"/>00485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(workers&#32;&lt;=&#32;1)
<anchor xml:id="_deoptimizer_8cpp_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opt.doOptimize();
<anchor xml:id="_deoptimizer_8cpp_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_deoptimizer_8cpp_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opt.do_optimize_delayed_update(workers);
<anchor xml:id="_deoptimizer_8cpp_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;bestX&#32;=&#32;opt.getBestX();
<anchor xml:id="_deoptimizer_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;bestY&#32;=&#32;opt.getBestValue();
<anchor xml:id="_deoptimizer_8cpp_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;dim;&#32;i++)
<anchor xml:id="_deoptimizer_8cpp_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res[i]&#32;=&#32;bestX[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res[dim]&#32;=&#32;bestY;
<anchor xml:id="_deoptimizer_8cpp_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res[dim&#32;+&#32;1]&#32;=&#32;fitfun.<link linkend="_class_fitness_1aba60038eac4e0e15d995e57f4ba079e1">evaluations</link>();
<anchor xml:id="_deoptimizer_8cpp_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res[dim&#32;+&#32;2]&#32;=&#32;opt.getIterations();
<anchor xml:id="_deoptimizer_8cpp_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res[dim&#32;+&#32;3]&#32;=&#32;opt.getStop();
<anchor xml:id="_deoptimizer_8cpp_source_1l00498"/>00498 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(std::exception&#32;&amp;e)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cout&#32;&lt;&lt;&#32;e.what()&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_deoptimizer_8cpp_source_1l00500"/>00500 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00501"/>00501 }
<anchor xml:id="_deoptimizer_8cpp_source_1l00502"/>00502 
<anchor xml:id="_deoptimizer_8cpp_source_1l00503"/><link linkend="_deoptimizer_8cpp_1a8af4088f11fb8bc902b5a17f4b3c67f4">00503</link> uintptr_t&#32;<link linkend="_deoptimizer_8cpp_1a8af4088f11fb8bc902b5a17f4b3c67f4">initDE_C</link>(<emphasis role="keywordtype">long</emphasis>&#32;runid,&#32;<emphasis role="keywordtype">int</emphasis>&#32;dim,&#32;<emphasis role="keywordtype">int</emphasis>&#32;seed,
<anchor xml:id="_deoptimizer_8cpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;*lower,&#32;<emphasis role="keywordtype">double</emphasis>&#32;*upper,&#32;
<anchor xml:id="_deoptimizer_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;*init,&#32;<emphasis role="keywordtype">double</emphasis>&#32;*sigma,&#32;<emphasis role="keywordtype">double</emphasis>&#32;minSigma,
<anchor xml:id="_deoptimizer_8cpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;*ints,
<anchor xml:id="_deoptimizer_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;keep,&#32;<emphasis role="keywordtype">int</emphasis>&#32;popsize,&#32;<emphasis role="keywordtype">double</emphasis>&#32;F,&#32;<emphasis role="keywordtype">double</emphasis>&#32;CR,
<anchor xml:id="_deoptimizer_8cpp_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;min_mutate,&#32;<emphasis role="keywordtype">double</emphasis>&#32;max_mutate)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00509"/>00509 
<anchor xml:id="_deoptimizer_8cpp_source_1l00510"/>00510 &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;guess(dim),&#32;lower_limit(dim),&#32;upper_limit(dim),&#32;inputSigma(dim);
<anchor xml:id="_deoptimizer_8cpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(init&#32;!=&#32;NULL&#32;and&#32;sigma&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;dim;&#32;i++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess[i]&#32;=&#32;init[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputSigma[i]&#32;=&#32;sigma[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guess.resize(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inputSigma.resize(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minSigma&#32;=&#32;0;
<anchor xml:id="_deoptimizer_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lower&#32;!=&#32;NULL&#32;&amp;&amp;&#32;upper&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;dim;&#32;i++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lower_limit[i]&#32;=&#32;lower[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;upper_limit[i]&#32;=&#32;upper[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00526"/>00526 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lower_limit.resize(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;upper_limit.resize(0);
<anchor xml:id="_deoptimizer_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00530"/>00530 
<anchor xml:id="_deoptimizer_8cpp_source_1l00531"/>00531 &#32;&#32;&#32;&#32;<link linkend="_class_fitness">Fitness</link>*&#32;fitfun&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_fitness">Fitness</link>(<link linkend="_evaluator_8h_1ad0943ebd623281f526e5aee2aa818895">noop_callback</link>,&#32;<link linkend="_evaluator_8h_1ac05c49788a31e5f7cb8efbe8ca3b548e">noop_callback_par</link>,&#32;dim,&#32;1,&#32;
<anchor xml:id="_deoptimizer_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lower_limit,&#32;upper_limit);
<anchor xml:id="_deoptimizer_8cpp_source_1l00533"/>00533 &#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>*&#32;opt&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>(runid,&#32;fitfun,&#32;dim,&#32;seed,&#32;popsize,&#32;0,&#32;keep,
<anchor xml:id="_deoptimizer_8cpp_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-DBL_MAX,&#32;F,&#32;CR,&#32;min_mutate,&#32;max_mutate,
<anchor xml:id="_deoptimizer_8cpp_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ints,&#32;guess,&#32;inputSigma,&#32;minSigma);
<anchor xml:id="_deoptimizer_8cpp_source_1l00536"/>00536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uintptr_t)&#32;opt;
<anchor xml:id="_deoptimizer_8cpp_source_1l00537"/>00537 }
<anchor xml:id="_deoptimizer_8cpp_source_1l00538"/>00538 
<anchor xml:id="_deoptimizer_8cpp_source_1l00539"/><link linkend="_deoptimizer_8cpp_1ab3fd3d1530a822a0b7a020d2b68a0406">00539</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_deoptimizer_8cpp_1ab3fd3d1530a822a0b7a020d2b68a0406">destroyDE_C</link>(uintptr_t&#32;ptr)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00540"/>00540 &#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>*&#32;opt&#32;=&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>*)ptr;
<anchor xml:id="_deoptimizer_8cpp_source_1l00541"/>00541 &#32;&#32;&#32;&#32;<link linkend="_class_fitness">Fitness</link>*&#32;fitfun&#32;=&#32;opt-&gt;getFitfun();
<anchor xml:id="_deoptimizer_8cpp_source_1l00542"/>00542 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;fitfun;
<anchor xml:id="_deoptimizer_8cpp_source_1l00543"/>00543 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;opt;
<anchor xml:id="_deoptimizer_8cpp_source_1l00544"/>00544 }
<anchor xml:id="_deoptimizer_8cpp_source_1l00545"/>00545 
<anchor xml:id="_deoptimizer_8cpp_source_1l00546"/><link linkend="_deoptimizer_8cpp_1af3c55844c8d3850d96ddf517996fca30">00546</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_deoptimizer_8cpp_1af3c55844c8d3850d96ddf517996fca30">askDE_C</link>(uintptr_t&#32;ptr,&#32;<emphasis role="keywordtype">double</emphasis>*&#32;xs)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00547"/>00547 &#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>&#32;*opt&#32;=&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>*)&#32;ptr;
<anchor xml:id="_deoptimizer_8cpp_source_1l00548"/>00548 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;opt-&gt;getDim();
<anchor xml:id="_deoptimizer_8cpp_source_1l00549"/>00549 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lamb&#32;=&#32;opt-&gt;getPopsize();
<anchor xml:id="_deoptimizer_8cpp_source_1l00550"/>00550 &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>&#32;popX&#32;=&#32;opt-&gt;askAll();
<anchor xml:id="_deoptimizer_8cpp_source_1l00551"/>00551 &#32;&#32;&#32;&#32;<link linkend="_class_fitness">Fitness</link>*&#32;fitfun&#32;=&#32;opt-&gt;getFitfun();
<anchor xml:id="_deoptimizer_8cpp_source_1l00552"/>00552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;p&#32;=&#32;0;&#32;p&#32;&lt;&#32;lamb;&#32;p++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x&#32;=&#32;popX.col(p);
<anchor xml:id="_deoptimizer_8cpp_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;i++)
<anchor xml:id="_deoptimizer_8cpp_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs[p&#32;*&#32;n&#32;+&#32;i]&#32;=&#32;x[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00556"/>00556 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00557"/>00557 }
<anchor xml:id="_deoptimizer_8cpp_source_1l00558"/>00558 
<anchor xml:id="_deoptimizer_8cpp_source_1l00559"/><link linkend="_deoptimizer_8cpp_1a913e842ff9af1d5b517e26a27696ab26">00559</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_deoptimizer_8cpp_1a913e842ff9af1d5b517e26a27696ab26">tellDE_C</link>(uintptr_t&#32;ptr,&#32;<emphasis role="keywordtype">double</emphasis>*&#32;ys)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00560"/>00560 &#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>&#32;*opt&#32;=&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>*)&#32;ptr;
<anchor xml:id="_deoptimizer_8cpp_source_1l00561"/>00561 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lamb&#32;=&#32;opt-&gt;getPopsize();
<anchor xml:id="_deoptimizer_8cpp_source_1l00562"/>00562 &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;vals(lamb);
<anchor xml:id="_deoptimizer_8cpp_source_1l00563"/>00563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;lamb;&#32;i++)
<anchor xml:id="_deoptimizer_8cpp_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vals[i]&#32;=&#32;ys[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00565"/>00565 &#32;&#32;&#32;&#32;opt-&gt;tellAll(vals);
<anchor xml:id="_deoptimizer_8cpp_source_1l00566"/>00566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt-&gt;getStop();
<anchor xml:id="_deoptimizer_8cpp_source_1l00567"/>00567 }
<anchor xml:id="_deoptimizer_8cpp_source_1l00568"/>00568 
<anchor xml:id="_deoptimizer_8cpp_source_1l00569"/><link linkend="_deoptimizer_8cpp_1af52980108e82b3df67f48b2efbda2755">00569</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_deoptimizer_8cpp_1af52980108e82b3df67f48b2efbda2755">populationDE_C</link>(uintptr_t&#32;ptr,&#32;<emphasis role="keywordtype">double</emphasis>*&#32;xs)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00570"/>00570 &#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>&#32;*opt&#32;=&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>*)&#32;ptr;
<anchor xml:id="_deoptimizer_8cpp_source_1l00571"/>00571 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;dim&#32;=&#32;opt-&gt;getDim();
<anchor xml:id="_deoptimizer_8cpp_source_1l00572"/>00572 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;lamb&#32;=&#32;opt-&gt;getPopsize();
<anchor xml:id="_deoptimizer_8cpp_source_1l00573"/>00573 &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1af0f7533253586ad2aba962e9537d90bc">mat</link>&#32;popX&#32;=&#32;opt-&gt;getPopulation();
<anchor xml:id="_deoptimizer_8cpp_source_1l00574"/>00574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;p&#32;=&#32;0;&#32;p&#32;&lt;&#32;lamb;&#32;p++)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;x&#32;=&#32;popX.col(p);
<anchor xml:id="_deoptimizer_8cpp_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;dim;&#32;i++)
<anchor xml:id="_deoptimizer_8cpp_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x[i]&#32;=&#32;xs[p&#32;*&#32;dim&#32;+&#32;i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00578"/>00578 &#32;&#32;&#32;&#32;}
<anchor xml:id="_deoptimizer_8cpp_source_1l00579"/>00579 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt-&gt;getStop();
<anchor xml:id="_deoptimizer_8cpp_source_1l00580"/>00580 }
<anchor xml:id="_deoptimizer_8cpp_source_1l00581"/>00581 
<anchor xml:id="_deoptimizer_8cpp_source_1l00582"/><link linkend="_deoptimizer_8cpp_1a57cc84b1da95b58421bcd567fb01f67b">00582</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_deoptimizer_8cpp_1a57cc84b1da95b58421bcd567fb01f67b">resultDE_C</link>(uintptr_t&#32;ptr,&#32;<emphasis role="keywordtype">double</emphasis>*&#32;res)&#32;{
<anchor xml:id="_deoptimizer_8cpp_source_1l00583"/>00583 &#32;&#32;&#32;&#32;<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>&#32;*opt&#32;=&#32;(<link linkend="_classdifferential__evolution_1_1_de_optimizer">DeOptimizer</link>*)&#32;ptr;
<anchor xml:id="_deoptimizer_8cpp_source_1l00584"/>00584 &#32;&#32;&#32;&#32;<link linkend="_daoptimizer_8cpp_1aeb2fc0d8c764908dd0b77ed5ab437c3f">vec</link>&#32;bestX&#32;=&#32;opt-&gt;getBestX();
<anchor xml:id="_deoptimizer_8cpp_source_1l00585"/>00585 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;bestY&#32;=&#32;opt-&gt;getBestValue();
<anchor xml:id="_deoptimizer_8cpp_source_1l00586"/>00586 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;bestX.size();
<anchor xml:id="_deoptimizer_8cpp_source_1l00587"/>00587 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;bestX.size();&#32;i++)
<anchor xml:id="_deoptimizer_8cpp_source_1l00588"/>00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res[i]&#32;=&#32;bestX[i];
<anchor xml:id="_deoptimizer_8cpp_source_1l00589"/>00589 &#32;&#32;&#32;&#32;res[n]&#32;=&#32;bestY;
<anchor xml:id="_deoptimizer_8cpp_source_1l00590"/>00590 &#32;&#32;&#32;&#32;<link linkend="_class_fitness">Fitness</link>*&#32;fitfun&#32;=&#32;opt-&gt;getFitfun();
<anchor xml:id="_deoptimizer_8cpp_source_1l00591"/>00591 &#32;&#32;&#32;&#32;res[n&#32;+&#32;1]&#32;=&#32;fitfun-&gt;<link linkend="_class_fitness_1aba60038eac4e0e15d995e57f4ba079e1">evaluations</link>();
<anchor xml:id="_deoptimizer_8cpp_source_1l00592"/>00592 &#32;&#32;&#32;&#32;res[n&#32;+&#32;2]&#32;=&#32;opt-&gt;getIterations();
<anchor xml:id="_deoptimizer_8cpp_source_1l00593"/>00593 &#32;&#32;&#32;&#32;res[n&#32;+&#32;3]&#32;=&#32;opt-&gt;getStop();
<anchor xml:id="_deoptimizer_8cpp_source_1l00594"/>00594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt-&gt;getStop();
<anchor xml:id="_deoptimizer_8cpp_source_1l00595"/>00595 }
<anchor xml:id="_deoptimizer_8cpp_source_1l00596"/>00596 }
<anchor xml:id="_deoptimizer_8cpp_source_1l00597"/>00597 
</programlisting></section>
