<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_c_bite_pop" xml:lang="en-US">
<title>CBitePop&lt; ptype &gt; Class Template Reference</title>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;biteaux.h&gt;</computeroutput>
</para>
Inheritance diagram for CBitePop&lt; ptype &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for CBitePop&lt; ptype &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop_1ad427518ed1d47fbe3c2222b3a11badb7">CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop_1a73402384f4b75abf6d956dc086ccf36e">CBitePop</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_pop_1ac386e4638d6fc6bd5370eeae895347c3">~CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_pop_1ab18cf322db6ab186db1e19b53e34c232">operator=</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_pop_1a7488531e6b12accb61f068bbe654f580">initBuffers</link> (const int aParamCount, const int aPopSize, const int aCnsCount=0, const int aObjCount=1)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a3fc2d887ae91be62fd9fc3100268e53c">copy</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a7850902dad276dcecea68559eaccc168">updateCentroid</link> ()</para>
</listitem>
            <listitem><para>const ptype * <link linkend="_class_c_bite_pop_1a5e6ccebb178353b084084f841b09042d">getCentroid</link> () const</para>
</listitem>
            <listitem><para>const ptype * <link linkend="_class_c_bite_pop_1aaa8e3f180accfedf21218cbed8ffbb79">getParamsOrdered</link> (const int i) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad38d886687357797479e69098759476a">getCnsPtr</link> (ptype *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad6cbe6cfbf9954dcb6f8a223a5e1f36b">getObjPtr</link> (ptype *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1aa4f3255c9607f72eff280f8c3c09143f">getRankPtr</link> (ptype *const pp) const</para>
</listitem>
            <listitem><para>const ptype ** <link linkend="_class_c_bite_pop_1ac2a01e9eb6b884a0b318e4b914273acf">getPopParams</link> () const</para>
</listitem>
            <listitem><para>ptype * <link linkend="_class_c_bite_pop_1a0053ae41c70babe967c5931f491ea865">getCurParams</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a5aef425d751172e1fff38a455cb51d34">getCurPopSize</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a7e1fbb7f7e9aaf8f73eb865fa4610185">getCurPopPos</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a767519aa2fcc2667dc135a131bc9fd85">resetCurPopPos</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a48d6ede5c82534c973e0458726e820dd">incrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a4656171c63f1944ae045d6f222d9d33a">decrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aad999ddc8a2ed72ffaee0db7732c9f76">updatePop</link> (double UpdCost, const ptype *const UpdParams, const bool DoUpdateCentroid, const bool CanRejectCost=true)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_c_bite_pop_1a47de1dedd30171e9fc9ae9475998d51d">deleteBuffers</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a0d5ab322641bb1a091df91ff7ee630c4">zeroParams</link> (ptype *const dst) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a24130fea35014433f142e3b9ed0f8929">copyParams</link> (ptype *const dst, const ptype *const src) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a57e751582761922bbabff1ddb7af277b">copyValues</link> (double *const dst, const double *const src) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>static ptype <link linkend="_class_c_bite_pop_1a3b7e8d2276455475bd761e29c8c72ac6">wrapParam</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const ptype v)</para>
</listitem>
            <listitem><para>static ptype <link linkend="_class_c_bite_pop_1aecaac61269e65bda93cb2dc1a3a26091">getGaussianInt</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double sd, const ptype meanInt)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1ad4e3a3c5b7a25ad02ef0231bd3fe8388">calcLP1Coeff</link> (const double Count)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0dc6f7b3a19db513e349e68c3471f9fa">ParamCount</link></para>

<para>The total number of internal parameter values in use. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1a884c9ad4c0327aaa0110a23a89f5697a">ParamCountI</link></para>

<para>= 1.0 / ParamCount. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a58e3bf5abc2fb4b1e173aa6cb3477bfb">PopSize</link></para>

<para>The size of population in use (maximal). </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0b64743a84d5af143d44e7f6e9f02ada">PopSize1</link></para>

<para>= PopSize - 1. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1adc98fbdebc2671ef0826245d8c472cc5">CurPopSize</link></para>

<para>Current population size. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a26b81c70200085e410cf83258e139f9b">CurPopSize1</link></para>

<para>= CurPopSize - 1. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1aa5105ca75379f9a760dc9f0b9ea30ea7">CurPopSizeI</link></para>

<para>= 1.0 / CurPopSize. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aa7c87b9148768d6104f8d3dfb5abebce">CurPopPos</link></para>

<para>update. This variable should be initialized by the optimizer. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2bf725291723a8dcaa215496e3175471">CnsCount</link></para>

<para>The number of constraints per solution. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2f7c6a4707e23c21197ab32b71d900c7">ObjCount</link></para>

<para>The number of objectives per solution. </para>
</listitem>
            <listitem><para>uint8_t * <link linkend="_class_c_bite_pop_1ac69b014720b11a472509b22588eaf6c3">PopParamsBuf</link></para>

<para>Buffer for all PopParams vectors. </para>
</listitem>
            <listitem><para>ptype ** <link linkend="_class_c_bite_pop_1a0c41790e473b70c5ec37986d0fb1f9a2">PopParams</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a6d4a3479ca9e60de6cf4667d5b2937a5">PopCnsOffs</link></para>

<para>a population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a98e2af75120c4184b271c14d22acf9d4">PopObjOffs</link></para>

<para>population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3ecc4ffcf1c6f3f9b4e4e5a873c481fe">PopRankOffs</link></para>

<para>item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3cdac0ad2cf5c8403f1f7676171f4e76">PopItemSize</link></para>

<para>Size in bytes of population item. </para>
</listitem>
            <listitem><para>ptype * <link linkend="_class_c_bite_pop_1ac31d95bc1f383828e72bcf1eb499e949">CentParams</link></para>

<para>Centroid of the parameter vectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_pop_1a41f29468becc588bea6ff3f842db93ea">NeedCentUpdate</link></para>

<para>&quot;True&quot; if centroid update is needed. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1ab6dec63b0ee3955563c2a3f815614f31">CentLPC</link></para>

<para>Centroid averaging filter coefficient. </para>
</listitem>
            <listitem><para>ptype * <link linkend="_class_c_bite_pop_1acae90e3584dca8b6c08c70d7bd317729">TmpParams</link></para>

<para>element of the PopParams array. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76">IntOverBits</link> = ( sizeof( ptype ) &gt; 4 ? 5 : 3 )</para>
</listitem>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8">IntMantBits</link> = sizeof( ptype ) * 8 - 1 - <link linkend="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76">IntOverBits</link></para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link> = 1LL &lt;&lt; <link linkend="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8">IntMantBits</link></para>

<para>multiplier. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1aeba03d86b17ed01a97dc8225c5598b2d">IntMantMultM</link> = -<link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link></para>

<para>IntMantMult. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a8c64d2e83f225b034df818b06b09ecd2">IntMantMult2</link> = ( <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link> &lt;&lt; 1 )</para>

<para>IntMantMult * 2. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a27448c9be1bed517e4a48aa656ca4f76">IntMantMask</link> = <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link> - 1</para>

<para>corresponds to mantissa. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename ptype&gt;<?linebreak?>class CBitePop&lt; ptype &gt;</title></simplesect>

<para>Class implements storage of population parameter vectors, costs, centroid, and ordering. Note that the derived classes should delete allocated buffers in their destructors, not relying on a single <link linkend="_class_c_bite_pop_1a47de1dedd30171e9fc9ae9475998d51d">deleteBuffers()</link> call.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ptype</entry><entry>
<para>Parameter value storage type. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00669">669</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_c_bite_pop_1ad427518ed1d47fbe3c2222b3a11badb7"/><section>
    <title>CBitePop()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>CBitePop</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>CBitePop</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput><link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;<link linkend="_class_c_bite_pop">::CBitePop</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteaux_8h_source_1l00672">672</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_ad427518ed1d47fbe3c2222b3a11badb7_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a73402384f4b75abf6d956dc086ccf36e"/><section>
    <title>CBitePop()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>CBitePop</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>CBitePop</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput><link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;<link linkend="_class_c_bite_pop">::CBitePop</link> (const <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt; &amp; s)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteaux_8h_source_1l00683">683</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a73402384f4b75abf6d956dc086ccf36e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1ac386e4638d6fc6bd5370eeae895347c3"/><section>
    <title>~CBitePop()</title>
<indexterm><primary>~CBitePop</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>~CBitePop</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::~<link linkend="_class_c_bite_pop">CBitePop</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteaux_8h_source_1l00692">692</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_ac386e4638d6fc6bd5370eeae895347c3_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_c_bite_pop_1ad4e3a3c5b7a25ad02ef0231bd3fe8388"/><section>
    <title>calcLP1Coeff()</title>
<indexterm><primary>calcLP1Coeff</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>calcLP1Coeff</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>static double <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::calcLP1Coeff (const double Count)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function calculates averaging coefficient of a &quot;leaky integrator&quot; 1st order low-pass filter.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Count</entry><entry>
<para>An approximate number of samples to average. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01339">1339</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_ad4e3a3c5b7a25ad02ef0231bd3fe8388_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a3fc2d887ae91be62fd9fc3100268e53c"/><section>
    <title>copy()</title>
<indexterm><primary>copy</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>copy</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::copy (const <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt; &amp; s)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function copies population from the specified source population. If *this population has a different size, or is uninitialized, it will be initialized to source&apos;s population size.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>s</entry><entry>
<para>Source population to copy. Should be initalized. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00760">760</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a3fc2d887ae91be62fd9fc3100268e53c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a3fc2d887ae91be62fd9fc3100268e53c_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a24130fea35014433f142e3b9ed0f8929"/><section>
    <title>copyParams()</title>
<indexterm><primary>copyParams</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>copyParams</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::copyParams (ptype *const dst, const ptype *const src) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>An aux function that copies a parameter vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>out</entry><entry>dst</entry><entry>
<para>Destination vector. </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>src</entry><entry>
<para>Source vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01229">1229</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a24130fea35014433f142e3b9ed0f8929_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a57e751582761922bbabff1ddb7af277b"/><section>
    <title>copyValues()</title>
<indexterm><primary>copyValues</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>copyValues</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::copyValues (double *const dst, const double *const src) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>An aux function that copies a real solution vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>out</entry><entry>dst</entry><entry>
<para>Destination vector. </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>src</entry><entry>
<para>Source vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01241">1241</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a57e751582761922bbabff1ddb7af277b_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a4656171c63f1944ae045d6f222d9d33a"/><section>
    <title>decrCurPopSize()</title>
<indexterm><primary>decrCurPopSize</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>decrCurPopSize</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::decrCurPopSize ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function decreases current population size, and updates the required variables. This function can only be called if CurPopSize is greater than 1, and the whole population was filled. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01013">1013</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a4656171c63f1944ae045d6f222d9d33a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a47de1dedd30171e9fc9ae9475998d51d"/><section>
    <title>deleteBuffers()</title>
<indexterm><primary>deleteBuffers</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>deleteBuffers</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>virtual void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::deleteBuffers ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Function deletes buffers previously allocated via the <link linkend="_class_c_bite_pop_1a7488531e6b12accb61f068bbe654f580">initBuffers()</link> function. Derived classes should call this function of the base class. </para>
<para>
Reimplemented in <link linkend="_class_c_bite_opt_base_1aed59421f7102fb6921e4af39acfb8369">CBiteOptBase&lt; ptype &gt;</link>, <link linkend="_class_c_bite_opt_base_1aed59421f7102fb6921e4af39acfb8369">CBiteOptBase&lt; double &gt;</link>, <link linkend="_class_c_bite_opt_base_1aed59421f7102fb6921e4af39acfb8369">CBiteOptBase&lt; int64_t &gt;</link>, <link linkend="_class_c_bite_ort_1a34a09edcccffb93ecb83ad4f8cd8365d">CBiteOrt</link>, <link linkend="_class_c_n_m_seq_opt_1a76ae39736ff317e9aa048d24872e7084">CNMSeqOpt</link>, and <link linkend="_class_c_spher_opt_1a6491915dd708c2791682a529005c035e">CSpherOpt</link>.</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01204">1204</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a47de1dedd30171e9fc9ae9475998d51d_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a5e6ccebb178353b084084f841b09042d"/><section>
    <title>getCentroid()</title>
<indexterm><primary>getCentroid</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getCentroid</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const ptype * <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getCentroid ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns pointer to the centroid vector. The NeedUpdateCent should be checked and and if it is equal to &quot;true&quot;, the <link linkend="_class_c_bite_pop_1a7850902dad276dcecea68559eaccc168">updateCentroid()</link> function called. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00881">881</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a5e6ccebb178353b084084f841b09042d_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1ad38d886687357797479e69098759476a"/><section>
    <title>getCnsPtr()</title>
<indexterm><primary>getCnsPtr</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getCnsPtr</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double * <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getCnsPtr (ptype *const pp) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns pointer to constraint values sub-array within the specified population vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pp</entry><entry>
<para>Population vector pointer (usually within PopParams). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00905">905</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a0053ae41c70babe967c5931f491ea865"/><section>
    <title>getCurParams()</title>
<indexterm><primary>getCurParams</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getCurParams</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>ptype * <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getCurParams ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns pointer to the next available parameter vector, at the initialization stage. When the population was filled, the function returns pointer to a temporary vector. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00950">950</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a7e1fbb7f7e9aaf8f73eb865fa4610185"/><section>
    <title>getCurPopPos()</title>
<indexterm><primary>getCurPopPos</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getCurPopPos</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getCurPopPos ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns current population position. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00968">968</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a5aef425d751172e1fff38a455cb51d34"/><section>
    <title>getCurPopSize()</title>
<indexterm><primary>getCurPopSize</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getCurPopSize</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getCurPopSize ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns current population size. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00959">959</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a5aef425d751172e1fff38a455cb51d34_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1aecaac61269e65bda93cb2dc1a3a26091"/><section>
    <title>getGaussianInt()</title>
<indexterm><primary>getGaussianInt</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getGaussianInt</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>static ptype <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getGaussianInt (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, const double sd, const ptype meanInt)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function generates a Gaussian-distributed pseudo-random number, in integer scale, with the specified mean and std.dev.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rnd</entry><entry>
<para>Uniform PRNG. </para>
</entry>
                            </row>
                            <row>
<entry>sd</entry><entry>
<para>Standard deviation multiplier. </para>
</entry>
                            </row>
                            <row>
<entry>meanInt</entry><entry>
<para>Mean value, in integer scale. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01318">1318</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_aecaac61269e65bda93cb2dc1a3a26091_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1ad6cbe6cfbf9954dcb6f8a223a5e1f36b"/><section>
    <title>getObjPtr()</title>
<indexterm><primary>getObjPtr</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getObjPtr</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double * <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getObjPtr (ptype *const pp) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns pointer to objective values sub-array within the specified population vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pp</entry><entry>
<para>Population vector pointer (usually within PopParams). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00917">917</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_ad6cbe6cfbf9954dcb6f8a223a5e1f36b_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1aaa8e3f180accfedf21218cbed8ffbb79"/><section>
    <title>getParamsOrdered()</title>
<indexterm><primary>getParamsOrdered</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getParamsOrdered</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const ptype * <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getParamsOrdered (const int i) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns population&apos;s parameter vector by the specified index from the ordered list.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>i</entry><entry>
<para>Parameter vector index. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00893">893</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_aaa8e3f180accfedf21218cbed8ffbb79_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1ac2a01e9eb6b884a0b318e4b914273acf"/><section>
    <title>getPopParams()</title>
<indexterm><primary>getPopParams</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getPopParams</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const ptype ** <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getPopParams ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns a pointer to array of population vector pointers, which are sorted in the ascending cost order. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00939">939</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_ac2a01e9eb6b884a0b318e4b914273acf_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1aa4f3255c9607f72eff280f8c3c09143f"/><section>
    <title>getRankPtr()</title>
<indexterm><primary>getRankPtr</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>getRankPtr</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double * <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::getRankPtr (ptype *const pp) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns pointer to the rank value sub-array within the specified population vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pp</entry><entry>
<para>Population vector pointer (usually within PopParams). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00929">929</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_aa4f3255c9607f72eff280f8c3c09143f_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a48d6ede5c82534c973e0458726e820dd"/><section>
    <title>incrCurPopSize()</title>
<indexterm><primary>incrCurPopSize</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>incrCurPopSize</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::incrCurPopSize ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function increases current population size, and updates the required variables. This function can only be called if CurPopSize is less than PopSize, and previously the whole population was filled. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00998">998</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a48d6ede5c82534c973e0458726e820dd_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a7488531e6b12accb61f068bbe654f580"/><section>
    <title>initBuffers()</title>
<indexterm><primary>initBuffers</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>initBuffers</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>virtual void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::initBuffers (const int aParamCount, const int aPopSize, const int aCnsCount = <computeroutput>0</computeroutput>
, const int aObjCount = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Function initializes all common buffers, and &quot;PopSize&quot; variables. This function should be called when population&apos;s dimensions were changed. This function calls the <link linkend="_class_c_bite_pop_1a47de1dedd30171e9fc9ae9475998d51d">deleteBuffers()</link> function to release any derived classes&apos; allocated buffers. Allocates an additional vector for temporary use, which is at the same the last vector in the PopParams array. Derived classes should call this function of the base class.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aParamCount</entry><entry>
<para>New parameter count. </para>
</entry>
                            </row>
                            <row>
<entry>aPopSize</entry><entry>
<para>New population size. If &lt;= 0, population buffers will not be allocated. </para>
</entry>
                            </row>
                            <row>
<entry>aCnsCount</entry><entry>
<para>New constraint value count. </para>
</entry>
                            </row>
                            <row>
<entry>aObjCount</entry><entry>
<para>New objective value count. If equals 0, a rank element will not be auto-added. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented in <link linkend="_class_c_bite_opt_base_1a5c53a8eb3a4269a746d990282452d71e">CBiteOptBase&lt; ptype &gt;</link>, <link linkend="_class_c_bite_opt_base_1a5c53a8eb3a4269a746d990282452d71e">CBiteOptBase&lt; double &gt;</link>, <link linkend="_class_c_bite_opt_base_1a5c53a8eb3a4269a746d990282452d71e">CBiteOptBase&lt; int64_t &gt;</link>, <link linkend="_class_c_bite_ort_1a7f99eac373be63d512a4660ea9eaf040">CBiteOrt</link>, <link linkend="_class_c_n_m_seq_opt_1a523bc7d383b7a2cfeef8d2a4edc12b5f">CNMSeqOpt</link>, and <link linkend="_class_c_spher_opt_1a00c0facb71cb0ef24498e77ce68e6c04">CSpherOpt</link>.</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00719">719</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a7488531e6b12accb61f068bbe654f580_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a7488531e6b12accb61f068bbe654f580_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1ab18cf322db6ab186db1e19b53e34c232"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::operator= (const <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt; &amp; s)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteaux_8h_source_1l00697">697</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_ab18cf322db6ab186db1e19b53e34c232_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a767519aa2fcc2667dc135a131bc9fd85"/><section>
    <title>resetCurPopPos()</title>
<indexterm><primary>resetCurPopPos</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>resetCurPopPos</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::resetCurPopPos ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function resets the current population position to zero, and sets CurPopSize to PopSize. This function is usually called when the population needs to be completely changed. This function should be called before any updates to *this population (usually during optimizer&apos;s initialization). </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00981">981</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a767519aa2fcc2667dc135a131bc9fd85_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a767519aa2fcc2667dc135a131bc9fd85_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a7850902dad276dcecea68559eaccc168"/><section>
    <title>updateCentroid()</title>
<indexterm><primary>updateCentroid</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>updateCentroid</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::updateCentroid ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function recalculates centroid based on the current population size. The NeedCentUpdate variable can be checked if centroid update is needed. This function resets the NeedCentUpdate to &quot;false&quot;. This function should only be called after the population is filled. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l00795">795</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a7850902dad276dcecea68559eaccc168_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1aad999ddc8a2ed72ffaee0db7732c9f76"/><section>
    <title>updatePop()</title>
<indexterm><primary>updatePop</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>updatePop</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::updatePop (double UpdCost, const ptype *const UpdParams, const bool DoUpdateCentroid, const bool CanRejectCost = <computeroutput>true</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function replaces the highest-cost previous solution, updates centroid. This function considers the value of the CurPopPos variable - if it is smaller than the PopSize, the new solution will be added to population without any checks.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>UpdCost</entry><entry>
<para>Cost of the new solution. </para>
</entry>
                            </row>
                            <row>
<entry>UpdParams</entry><entry>
<para>New parameter values. </para>
</entry>
                            </row>
                            <row>
<entry>DoUpdateCentroid</entry><entry>
<para>&quot;True&quot; if centroid should be updated using running sum. This update is done for parallel populations. </para>
</entry>
                            </row>
                            <row>
<entry>CanRejectCost</entry><entry>
<para>If &quot;true&quot;, solution with a duplicate cost will be rejected; this may provide a performance improvement. Solutions can only be rejected when the whole population was filled. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Insertion position, &quot;&gt;=CurPopSize&quot; if the cost constraint was not met. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01039">1039</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_aad999ddc8a2ed72ffaee0db7732c9f76_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a3b7e8d2276455475bd761e29c8c72ac6"/><section>
    <title>wrapParam()</title>
<indexterm><primary>wrapParam</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>wrapParam</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>static ptype <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::wrapParam (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, const ptype v)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function wraps the specified parameter value so that it stays in the [0.0; 1.0] range (including in integer range), by wrapping it over the boundaries using random operator. This operation improves convergence in comparison to clamping.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>Parameter value to wrap. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Wrapped parameter value. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01256">1256</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_pop_a3b7e8d2276455475bd761e29c8c72ac6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a0d5ab322641bb1a091df91ff7ee630c4"/><section>
    <title>zeroParams()</title>
<indexterm><primary>zeroParams</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>zeroParams</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::zeroParams (ptype *const dst) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>An aux function that resets a parameter vector to zero values.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>out</entry><entry>dst</entry><entry>
<para>Destination vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01217">1217</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_c_bite_pop_1ab6dec63b0ee3955563c2a3f815614f31"/><section>
    <title>CentLPC</title>
<indexterm><primary>CentLPC</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>CentLPC</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::CentLPC<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Centroid averaging filter coefficient. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01195">1195</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1ac31d95bc1f383828e72bcf1eb499e949"/><section>
    <title>CentParams</title>
<indexterm><primary>CentParams</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>CentParams</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>ptype* <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::CentParams<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Centroid of the parameter vectors. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01193">1193</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a2bf725291723a8dcaa215496e3175471"/><section>
    <title>CnsCount</title>
<indexterm><primary>CnsCount</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>CnsCount</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::CnsCount<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>The number of constraints per solution. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01179">1179</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1aa7c87b9148768d6104f8d3dfb5abebce"/><section>
    <title>CurPopPos</title>
<indexterm><primary>CurPopPos</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>CurPopPos</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::CurPopPos<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>update. This variable should be initialized by the optimizer. </para>
</para>

<para>Current population position, for initial population </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01177">1177</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1adc98fbdebc2671ef0826245d8c472cc5"/><section>
    <title>CurPopSize</title>
<indexterm><primary>CurPopSize</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>CurPopSize</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::CurPopSize<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Current population size. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01174">1174</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a26b81c70200085e410cf83258e139f9b"/><section>
    <title>CurPopSize1</title>
<indexterm><primary>CurPopSize1</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>CurPopSize1</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::CurPopSize1<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>= CurPopSize - 1. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01175">1175</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1aa5105ca75379f9a760dc9f0b9ea30ea7"/><section>
    <title>CurPopSizeI</title>
<indexterm><primary>CurPopSizeI</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>CurPopSizeI</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::CurPopSizeI<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>= 1.0 / CurPopSize. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01176">1176</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8"/><section>
    <title>IntMantBits</title>
<indexterm><primary>IntMantBits</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>IntMantBits</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::IntMantBits = sizeof( ptype ) * 8 - 1 - <link linkend="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76">IntOverBits</link><computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Mantissa size of the integer parameter values (higher by 1 bit in practice for real value 1.0). Accounts for a sign bit, and possible accumulation overflows. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01157">1157</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a27448c9be1bed517e4a48aa656ca4f76"/><section>
    <title>IntMantMask</title>
<indexterm><primary>IntMantMask</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>IntMantMask</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const int64_t <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::IntMantMask = <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link> - 1<computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>corresponds to mantissa. </para>
</para>

<para>Mask that </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01167">1167</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092"/><section>
    <title>IntMantMult</title>
<indexterm><primary>IntMantMult</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>IntMantMult</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const int64_t <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::IntMantMult = 1LL &lt;&lt; <link linkend="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8">IntMantBits</link><computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>multiplier. </para>
</para>

<para>Mantissa </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01161">1161</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a8c64d2e83f225b034df818b06b09ecd2"/><section>
    <title>IntMantMult2</title>
<indexterm><primary>IntMantMult2</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>IntMantMult2</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const int64_t <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::IntMantMult2 = ( <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link> &lt;&lt; 1 )<computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>IntMantMult * 2. </para>
</para>

<para>= </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01165">1165</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1aeba03d86b17ed01a97dc8225c5598b2d"/><section>
    <title>IntMantMultM</title>
<indexterm><primary>IntMantMultM</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>IntMantMultM</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const int64_t <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::IntMantMultM = -<link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link><computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>IntMantMult. </para>
</para>

<para>Negative </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01163">1163</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76"/><section>
    <title>IntOverBits</title>
<indexterm><primary>IntOverBits</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>IntOverBits</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::IntOverBits = ( sizeof( ptype ) &gt; 4 ? 5 : 3 )<computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>The number of bits of precision required for integer centroid calculation and overflows. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01154">1154</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a41f29468becc588bea6ff3f842db93ea"/><section>
    <title>NeedCentUpdate</title>
<indexterm><primary>NeedCentUpdate</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>NeedCentUpdate</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::NeedCentUpdate<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>&quot;True&quot; if centroid update is needed. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01194">1194</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a2f7c6a4707e23c21197ab32b71d900c7"/><section>
    <title>ObjCount</title>
<indexterm><primary>ObjCount</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>ObjCount</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::ObjCount<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>The number of objectives per solution. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01180">1180</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a0dc6f7b3a19db513e349e68c3471f9fa"/><section>
    <title>ParamCount</title>
<indexterm><primary>ParamCount</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>ParamCount</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::ParamCount<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>The total number of internal parameter values in use. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01170">1170</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a884c9ad4c0327aaa0110a23a89f5697a"/><section>
    <title>ParamCountI</title>
<indexterm><primary>ParamCountI</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>ParamCountI</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::ParamCountI<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>= 1.0 / ParamCount. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01171">1171</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a6d4a3479ca9e60de6cf4667d5b2937a5"/><section>
    <title>PopCnsOffs</title>
<indexterm><primary>PopCnsOffs</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>PopCnsOffs</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>size_t <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::PopCnsOffs<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>a population item. </para>
</para>

<para>Byte offset to the constraint values within </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01186">1186</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a3cdac0ad2cf5c8403f1f7676171f4e76"/><section>
    <title>PopItemSize</title>
<indexterm><primary>PopItemSize</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>PopItemSize</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>size_t <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::PopItemSize<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Size in bytes of population item. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01192">1192</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a98e2af75120c4184b271c14d22acf9d4"/><section>
    <title>PopObjOffs</title>
<indexterm><primary>PopObjOffs</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>PopObjOffs</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>size_t <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::PopObjOffs<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>population item. </para>
</para>

<para>Byte offset to the objective values within a </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01188">1188</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a0c41790e473b70c5ec37986d0fb1f9a2"/><section>
    <title>PopParams</title>
<indexterm><primary>PopParams</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>PopParams</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>ptype** <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::PopParams<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Population parameter vectors. Always kept sorted in ascending cost order. Each vector represents a complex item, with additional data stored after parameter values (see Offs constants). </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01182">1182</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1ac69b014720b11a472509b22588eaf6c3"/><section>
    <title>PopParamsBuf</title>
<indexterm><primary>PopParamsBuf</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>PopParamsBuf</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>uint8_t* <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::PopParamsBuf<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Buffer for all PopParams vectors. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01181">1181</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a3ecc4ffcf1c6f3f9b4e4e5a873c481fe"/><section>
    <title>PopRankOffs</title>
<indexterm><primary>PopRankOffs</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>PopRankOffs</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>size_t <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::PopRankOffs<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>item. </para>
</para>

<para>Byte offset to the rank value within a population </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01190">1190</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a58e3bf5abc2fb4b1e173aa6cb3477bfb"/><section>
    <title>PopSize</title>
<indexterm><primary>PopSize</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>PopSize</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::PopSize<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>The size of population in use (maximal). </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01172">1172</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1a0b64743a84d5af143d44e7f6e9f02ada"/><section>
    <title>PopSize1</title>
<indexterm><primary>PopSize1</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>PopSize1</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::PopSize1<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>= PopSize - 1. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01173">1173</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_pop_1acae90e3584dca8b6c08c70d7bd317729"/><section>
    <title>TmpParams</title>
<indexterm><primary>TmpParams</primary><secondary>CBitePop&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBitePop&lt; ptype &gt;</primary><secondary>TmpParams</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>ptype* <link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt;::TmpParams<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>element of the PopParams array. </para>
</para>

<para>Temporary parameter vector, points to the last </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01196">1196</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
_fcmaescpp/include/<link linkend="_biteaux_8h">biteaux.h</link></section>
</section>
