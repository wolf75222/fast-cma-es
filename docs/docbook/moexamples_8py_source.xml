<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_moexamples_8py_source" xml:lang="en-US">
<title>moexamples.py</title>
<indexterm><primary>examples/moexamples.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_moexamples_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1moexamples">00001</link> <emphasis role="comment">#&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00002"/>00002 <emphasis role="comment">#</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00005"/>00005 
<anchor xml:id="_moexamples_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;multi&#32;objective&#32;optimization&#32;experiments</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00007"/>00007 <emphasis role="comment">#&#32;See&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/MultiObjective.adoc&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00008"/>00008 
<anchor xml:id="_moexamples_8py_source_1l00009"/>00009 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00010"/>00010 
<anchor xml:id="_moexamples_8py_source_1l00011"/>00011 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_moexamples_8py_source_1l00012"/>00012 <emphasis role="keyword">import</emphasis>&#32;random
<anchor xml:id="_moexamples_8py_source_1l00013"/>00013 <emphasis role="keyword">import</emphasis>&#32;math
<anchor xml:id="_moexamples_8py_source_1l00014"/>00014 <emphasis role="keyword">import</emphasis>&#32;time
<anchor xml:id="_moexamples_8py_source_1l00015"/>00015 <emphasis role="keyword">import</emphasis>&#32;glob
<anchor xml:id="_moexamples_8py_source_1l00016"/>00016 <emphasis role="keyword">import</emphasis>&#32;sys
<anchor xml:id="_moexamples_8py_source_1l00017"/>00017 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds
<anchor xml:id="_moexamples_8py_source_1l00018"/>00018 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;de_cma,&#32;Bite_cpp,&#32;random_search,&#32;dtime
<anchor xml:id="_moexamples_8py_source_1l00019"/>00019 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;moretry,&#32;retry,&#32;mode,&#32;modecpp
<anchor xml:id="_moexamples_8py_source_1l00020"/>00020 <emphasis role="keyword">from</emphasis>&#32;deap&#32;<emphasis role="keyword">import</emphasis>&#32;base
<anchor xml:id="_moexamples_8py_source_1l00021"/>00021 <emphasis role="keyword">from</emphasis>&#32;deap&#32;<emphasis role="keyword">import</emphasis>&#32;creator
<anchor xml:id="_moexamples_8py_source_1l00022"/>00022 <emphasis role="keyword">from</emphasis>&#32;deap&#32;<emphasis role="keyword">import</emphasis>&#32;tools
<anchor xml:id="_moexamples_8py_source_1l00023"/>00023 <emphasis role="keyword">import</emphasis>&#32;array
<anchor xml:id="_moexamples_8py_source_1l00024"/>00024 <emphasis role="keyword">import</emphasis>&#32;deap.benchmarks&#32;<emphasis role="keyword">as</emphasis>&#32;db
<anchor xml:id="_moexamples_8py_source_1l00025"/>00025 
<anchor xml:id="_moexamples_8py_source_1l00026"/>00026 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_moexamples_8py_source_1l00027"/>00027 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_moexamples_8py_source_1l00028"/>00028 
<anchor xml:id="_moexamples_8py_source_1l00029"/>00029 logger.remove()
<anchor xml:id="_moexamples_8py_source_1l00030"/><link linkend="_namespaceexamples_1_1moexamples_1ac2c1d97b582d9e0b4c897fb5aaf9bcbc">00030</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00031"/>00031 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00032"/>00032 
<anchor xml:id="_moexamples_8py_source_1l00033"/>00033 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1astro">fcmaes.astro</link>&#32;<emphasis role="keyword">import</emphasis>&#32;Cassini1,&#32;Cassini2,&#32;Tandem
<anchor xml:id="_moexamples_8py_source_1l00034"/>00034 
<anchor xml:id="_moexamples_8py_source_1l00035"/><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo">00035</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo">cassini1_mo</link>:&#32;
<anchor xml:id="_moexamples_8py_source_1l00036"/>00036 
<anchor xml:id="_moexamples_8py_source_1l00037"/><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1a48594e2a63cc5e90b2829c7da972f21a">00037</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1a48594e2a63cc5e90b2829c7da972f21a">__init__</link>(self):
<anchor xml:id="_moexamples_8py_source_1l00038"/><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1a62350500c8f1ce1a6a5bcfcb749292ae">00038</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1a62350500c8f1ce1a6a5bcfcb749292ae">base</link>&#32;=&#32;<link linkend="_classfcmaes_1_1astro_1_1_cassini1">Cassini1</link>()
<anchor xml:id="_moexamples_8py_source_1l00039"/><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1ac044cf434bb0cd96230187c42f3a7317">00039</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1ac044cf434bb0cd96230187c42f3a7317">bounds</link>&#32;=&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1a62350500c8f1ce1a6a5bcfcb749292ae">base</link>.bounds
<anchor xml:id="_moexamples_8py_source_1l00040"/><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1a1feaa53a39042df9fa82f4036f014cb4">00040</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1a1feaa53a39042df9fa82f4036f014cb4">weight_bounds</link>&#32;=&#32;Bounds([1,&#32;0.01],&#32;[100,&#32;1])&#32;<emphasis role="comment">#&#32;weighting&#32;of&#32;objectives</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00041"/><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1af1ceafd8b7678eae55a98fca89e6cc7d">00041</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1af1ceafd8b7678eae55a98fca89e6cc7d">name</link>&#32;=&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1a62350500c8f1ce1a6a5bcfcb749292ae">base</link>.name
<anchor xml:id="_moexamples_8py_source_1l00042"/>00042 &#32;
<anchor xml:id="_moexamples_8py_source_1l00043"/><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1adbd0b49e9aab0124da2dfa38b30c60d8">00043</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1adbd0b49e9aab0124da2dfa38b30c60d8">fun</link>(self,&#32;x):
<anchor xml:id="_moexamples_8py_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dv&#32;=&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1a62350500c8f1ce1a6a5bcfcb749292ae">base</link>.<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo_1adbd0b49e9aab0124da2dfa38b30c60d8">fun</link>(np.array(x))&#32;<emphasis role="comment">#&#32;delta&#32;velocity,&#32;original&#32;objective&#32;(km/s)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mission_time&#32;=&#32;sum(x[1:])&#32;<emphasis role="comment">#&#32;mission&#32;time&#32;(days)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;np.empty(2)
<anchor xml:id="_moexamples_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y[0]&#32;=&#32;dv&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y[1]&#32;=&#32;mission_time
<anchor xml:id="_moexamples_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y
<anchor xml:id="_moexamples_8py_source_1l00050"/>00050 
<anchor xml:id="_moexamples_8py_source_1l00051"/><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo">00051</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo">cassini2_mo</link>:&#32;
<anchor xml:id="_moexamples_8py_source_1l00052"/>00052 
<anchor xml:id="_moexamples_8py_source_1l00053"/><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a19efcdbf3abf19b7d8a9ef137ea568d1">00053</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a19efcdbf3abf19b7d8a9ef137ea568d1">__init__</link>(self):
<anchor xml:id="_moexamples_8py_source_1l00054"/><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a49461f4cddd036d9842f2b3e1f9744ea">00054</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a49461f4cddd036d9842f2b3e1f9744ea">base</link>&#32;=&#32;<link linkend="_classfcmaes_1_1astro_1_1_cassini2">Cassini2</link>()
<anchor xml:id="_moexamples_8py_source_1l00055"/><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1afe0c63d30f32fb147496ac8bca27fac1">00055</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1afe0c63d30f32fb147496ac8bca27fac1">bounds</link>&#32;=&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a49461f4cddd036d9842f2b3e1f9744ea">base</link>.bounds
<anchor xml:id="_moexamples_8py_source_1l00056"/><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a75ed6fe8d453400c0418ff0c203cc2a8">00056</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a75ed6fe8d453400c0418ff0c203cc2a8">weight_bounds</link>&#32;=&#32;Bounds([1,&#32;0.01],&#32;[100,&#32;1])&#32;<emphasis role="comment">#&#32;weighting&#32;of&#32;objectives</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00057"/><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a40aea611c7f988552c37e232a801358c">00057</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a40aea611c7f988552c37e232a801358c">name</link>&#32;=&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a49461f4cddd036d9842f2b3e1f9744ea">base</link>.name
<anchor xml:id="_moexamples_8py_source_1l00058"/>00058 &#32;
<anchor xml:id="_moexamples_8py_source_1l00059"/><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1ada76a55bc7d5657dd4ad6085cb39dbdc">00059</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1ada76a55bc7d5657dd4ad6085cb39dbdc">fun</link>(self,&#32;x):
<anchor xml:id="_moexamples_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dv&#32;=&#32;self.<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1a49461f4cddd036d9842f2b3e1f9744ea">base</link>.<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo_1ada76a55bc7d5657dd4ad6085cb39dbdc">fun</link>(np.array(x))&#32;<emphasis role="comment">#&#32;delta&#32;velocity,&#32;original&#32;objective&#32;(km/s)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mission_time&#32;=&#32;sum(x[4:9])&#32;<emphasis role="comment">#&#32;mission&#32;time&#32;(days)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;np.empty(2)
<anchor xml:id="_moexamples_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y[0]&#32;=&#32;dv&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y[1]&#32;=&#32;mission_time
<anchor xml:id="_moexamples_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y
<anchor xml:id="_moexamples_8py_source_1l00066"/>00066 
<anchor xml:id="_moexamples_8py_source_1l00067"/><link linkend="_classexamples_1_1moexamples_1_1tandem__mo">00067</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1tandem__mo">tandem_mo</link>:&#32;
<anchor xml:id="_moexamples_8py_source_1l00068"/>00068 
<anchor xml:id="_moexamples_8py_source_1l00069"/><link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a1aa1a50748e860b0e2feef50d2b07b28">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a1aa1a50748e860b0e2feef50d2b07b28">__init__</link>(self,&#32;constrained=False):
<anchor xml:id="_moexamples_8py_source_1l00070"/><link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a09dc9402019380ff93e28961b4414d7f">00070</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a09dc9402019380ff93e28961b4414d7f">base</link>&#32;=&#32;<link linkend="_classfcmaes_1_1astro_1_1_tandem">Tandem</link>(5,&#32;constrained=constrained)
<anchor xml:id="_moexamples_8py_source_1l00071"/><link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a511846a5c1b27e20e4b6ea0359bfff1a">00071</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a511846a5c1b27e20e4b6ea0359bfff1a">bounds</link>&#32;=&#32;self.<link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a09dc9402019380ff93e28961b4414d7f">base</link>.bounds
<anchor xml:id="_moexamples_8py_source_1l00072"/><link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1aace3ae9d7607ceab95180da983ee6619">00072</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1aace3ae9d7607ceab95180da983ee6619">weight_bounds</link>&#32;=&#32;Bounds([1,&#32;0],&#32;[1,&#32;0])&#32;<emphasis role="comment">#&#32;ignore&#32;2nd&#32;objective</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00073"/><link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1aab019d0f29632f3b7ea8644864e1efdd">00073</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1aab019d0f29632f3b7ea8644864e1efdd">name</link>&#32;=&#32;self.<link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a09dc9402019380ff93e28961b4414d7f">base</link>.name
<anchor xml:id="_moexamples_8py_source_1l00074"/>00074 &#32;
<anchor xml:id="_moexamples_8py_source_1l00075"/><link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a3cbef98aa5fbd416a6b5344a14de9ee1">00075</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a3cbef98aa5fbd416a6b5344a14de9ee1">fun</link>(self,&#32;x):
<anchor xml:id="_moexamples_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;final_mass&#32;=&#32;self.<link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a09dc9402019380ff93e28961b4414d7f">base</link>.<link linkend="_classexamples_1_1moexamples_1_1tandem__mo_1a3cbef98aa5fbd416a6b5344a14de9ee1">fun</link>(np.array(x))&#32;<emphasis role="comment">#&#32;original&#32;objective&#32;(-kg)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mission_time&#32;=&#32;sum(x[4:8])&#32;<emphasis role="comment">#&#32;mission&#32;time&#32;(days)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;np.empty(2)
<anchor xml:id="_moexamples_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y[0]&#32;=&#32;final_mass&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y[1]&#32;=&#32;mission_time
<anchor xml:id="_moexamples_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y
<anchor xml:id="_moexamples_8py_source_1l00082"/>00082 
<anchor xml:id="_moexamples_8py_source_1l00083"/><link linkend="_classexamples_1_1moexamples_1_1zdt1">00083</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1zdt1">zdt1</link>:&#32;
<anchor xml:id="_moexamples_8py_source_1l00084"/>00084 
<anchor xml:id="_moexamples_8py_source_1l00085"/><link linkend="_classexamples_1_1moexamples_1_1zdt1_1ae3d3f7a58a4898aa81ba42d29206f98c">00085</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1zdt1_1ae3d3f7a58a4898aa81ba42d29206f98c">__init__</link>(self,&#32;dim):
<anchor xml:id="_moexamples_8py_source_1l00086"/><link linkend="_classexamples_1_1moexamples_1_1zdt1_1a9a9c87ca31e4550f14b56938ffe925b8">00086</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1zdt1_1a9a9c87ca31e4550f14b56938ffe925b8">fun</link>&#32;=&#32;db.zdt1
<anchor xml:id="_moexamples_8py_source_1l00087"/><link linkend="_classexamples_1_1moexamples_1_1zdt1_1aac2d76839129a0fdb5773c341f2c42aa">00087</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1zdt1_1aac2d76839129a0fdb5773c341f2c42aa">bounds</link>&#32;=&#32;Bounds([0]*dim,&#32;[1]*dim)
<anchor xml:id="_moexamples_8py_source_1l00088"/><link linkend="_classexamples_1_1moexamples_1_1zdt1_1aac22d2604374b3ba9b344c0b67a52e80">00088</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1zdt1_1aac22d2604374b3ba9b344c0b67a52e80">weight_bounds</link>&#32;=&#32;Bounds([0.01,&#32;0.01],&#32;[1,&#32;1])&#32;
<anchor xml:id="_moexamples_8py_source_1l00089"/><link linkend="_classexamples_1_1moexamples_1_1zdt1_1ad9e1b4d020b56c11b9b98a6016ca05be">00089</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1zdt1_1ad9e1b4d020b56c11b9b98a6016ca05be">name</link>&#32;=&#32;<emphasis role="stringliteral">&apos;zdt1(&apos;</emphasis>&#32;+&#32;str(dim)&#32;+&#32;<emphasis role="stringliteral">&apos;)&apos;</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00090"/>00090 
<anchor xml:id="_moexamples_8py_source_1l00091"/><link linkend="_classexamples_1_1moexamples_1_1schaffer">00091</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1schaffer">schaffer</link>:&#32;
<anchor xml:id="_moexamples_8py_source_1l00092"/>00092 
<anchor xml:id="_moexamples_8py_source_1l00093"/><link linkend="_classexamples_1_1moexamples_1_1schaffer_1a9efabe9057767de2d571212041ea1c4f">00093</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1schaffer_1a9efabe9057767de2d571212041ea1c4f">__init__</link>(self,&#32;dim):
<anchor xml:id="_moexamples_8py_source_1l00094"/><link linkend="_classexamples_1_1moexamples_1_1schaffer_1a10b328eef7be3135910830a565a6ab45">00094</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1schaffer_1a10b328eef7be3135910830a565a6ab45">fun</link>&#32;=&#32;db.schaffer_mo
<anchor xml:id="_moexamples_8py_source_1l00095"/><link linkend="_classexamples_1_1moexamples_1_1schaffer_1a6882de61351bdf964ae5347711e33bc7">00095</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1schaffer_1a6882de61351bdf964ae5347711e33bc7">bounds</link>&#32;=&#32;Bounds([-1000]*dim,&#32;[1000]*dim)
<anchor xml:id="_moexamples_8py_source_1l00096"/><link linkend="_classexamples_1_1moexamples_1_1schaffer_1a58532071f4503f6238ffb52863e7642a">00096</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1schaffer_1a58532071f4503f6238ffb52863e7642a">weight_bounds</link>&#32;=&#32;Bounds([0.01,&#32;0.01],&#32;[1,&#32;1])&#32;
<anchor xml:id="_moexamples_8py_source_1l00097"/><link linkend="_classexamples_1_1moexamples_1_1schaffer_1ab4968ea95226652ae3aea20bf8211c4a">00097</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1schaffer_1ab4968ea95226652ae3aea20bf8211c4a">name</link>&#32;=&#32;<emphasis role="stringliteral">&apos;schaffer(&apos;</emphasis>&#32;+&#32;str(dim)&#32;+&#32;<emphasis role="stringliteral">&apos;)&apos;</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00098"/>00098 
<anchor xml:id="_moexamples_8py_source_1l00099"/><link linkend="_classexamples_1_1moexamples_1_1poloni">00099</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1poloni">poloni</link>:&#32;
<anchor xml:id="_moexamples_8py_source_1l00100"/>00100 
<anchor xml:id="_moexamples_8py_source_1l00101"/><link linkend="_classexamples_1_1moexamples_1_1poloni_1a811f372af3678355144708e348f2ff4d">00101</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1poloni_1a811f372af3678355144708e348f2ff4d">__init__</link>(self,&#32;dim):
<anchor xml:id="_moexamples_8py_source_1l00102"/><link linkend="_classexamples_1_1moexamples_1_1poloni_1af982af89da67c6ffab1c741d968d2ad1">00102</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1poloni_1af982af89da67c6ffab1c741d968d2ad1">fun</link>&#32;=&#32;db.poloni
<anchor xml:id="_moexamples_8py_source_1l00103"/><link linkend="_classexamples_1_1moexamples_1_1poloni_1a7ce92402006f09357b0a77fcc410d5ab">00103</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1poloni_1a7ce92402006f09357b0a77fcc410d5ab">bounds</link>&#32;=&#32;Bounds([-math.pi]*dim,&#32;[math.pi]*dim)
<anchor xml:id="_moexamples_8py_source_1l00104"/><link linkend="_classexamples_1_1moexamples_1_1poloni_1a632a5db6aaebbf3cc20ec04cb185cc52">00104</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1poloni_1a632a5db6aaebbf3cc20ec04cb185cc52">weight_bounds</link>&#32;=&#32;Bounds([0.01,&#32;0.01],&#32;[1,&#32;1])&#32;
<anchor xml:id="_moexamples_8py_source_1l00105"/><link linkend="_classexamples_1_1moexamples_1_1poloni_1a976e67b737c31d4ca1a27b6243ebe06e">00105</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1poloni_1a976e67b737c31d4ca1a27b6243ebe06e">name</link>&#32;=&#32;<emphasis role="stringliteral">&apos;poloni(&apos;</emphasis>&#32;+&#32;str(dim)&#32;+&#32;<emphasis role="stringliteral">&apos;)&apos;</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00106"/>00106 
<anchor xml:id="_moexamples_8py_source_1l00107"/><link linkend="_classexamples_1_1moexamples_1_1fonseca">00107</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1fonseca">fonseca</link>:&#32;
<anchor xml:id="_moexamples_8py_source_1l00108"/>00108 
<anchor xml:id="_moexamples_8py_source_1l00109"/><link linkend="_classexamples_1_1moexamples_1_1fonseca_1a5f6984293aa62e0a2fabab192af1e03d">00109</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1moexamples_1_1fonseca_1a5f6984293aa62e0a2fabab192af1e03d">__init__</link>(self,&#32;dim):
<anchor xml:id="_moexamples_8py_source_1l00110"/><link linkend="_classexamples_1_1moexamples_1_1fonseca_1accb4f09ab7849d699dd3c6f56d07b7bc">00110</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1fonseca_1accb4f09ab7849d699dd3c6f56d07b7bc">fun</link>&#32;=&#32;db.fonseca
<anchor xml:id="_moexamples_8py_source_1l00111"/><link linkend="_classexamples_1_1moexamples_1_1fonseca_1a1ba2328495976cd1c3f907a00489b375">00111</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1fonseca_1a1ba2328495976cd1c3f907a00489b375">bounds</link>&#32;=&#32;Bounds([-4]*dim,&#32;[4]*dim)&#32;
<anchor xml:id="_moexamples_8py_source_1l00112"/><link linkend="_classexamples_1_1moexamples_1_1fonseca_1aeb26e7f492c7cd21f1fe27e2b9703834">00112</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1fonseca_1aeb26e7f492c7cd21f1fe27e2b9703834">weight_bounds</link>&#32;=&#32;Bounds([0.01,&#32;0.01],&#32;[1,&#32;1])&#32;
<anchor xml:id="_moexamples_8py_source_1l00113"/><link linkend="_classexamples_1_1moexamples_1_1fonseca_1a7de3207828b60ce92238ee3582c073e9">00113</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1moexamples_1_1fonseca_1a7de3207828b60ce92238ee3582c073e9">name</link>&#32;=&#32;<emphasis role="stringliteral">&apos;fonseca(&apos;</emphasis>&#32;+&#32;str(dim)&#32;+&#32;<emphasis role="stringliteral">&apos;)&apos;</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00114"/>00114 &#32;
<anchor xml:id="_moexamples_8py_source_1l00115"/>00115 
<anchor xml:id="_moexamples_8py_source_1l00116"/><link linkend="_namespaceexamples_1_1moexamples_1ac65511f1250e7d476d1dbefa6a1383d6">00116</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1moexamples_1ac65511f1250e7d476d1dbefa6a1383d6">uniform</link>(bounds):
<anchor xml:id="_moexamples_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[random.uniform(b[0],&#32;b[1])&#32;<emphasis role="keywordflow">for</emphasis>&#32;b&#32;<emphasis role="keywordflow">in</emphasis>&#32;bounds]
<anchor xml:id="_moexamples_8py_source_1l00118"/>00118 
<anchor xml:id="_moexamples_8py_source_1l00119"/><link linkend="_namespaceexamples_1_1moexamples_1acbff63ac4ca44b2c8d090f13e6a24d1d">00119</link> FirstCall&#32;=&#32;<emphasis role="keyword">True</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00120"/>00120 <emphasis role="comment">#&#32;adapted&#32;copy&#32;from&#32;https://github.com/ppgaluzio/MOBOpt/blob/master/mobopt/_NSGA2.py</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00121"/><link linkend="_namespaceexamples_1_1moexamples_1a4053ac1d24b537d2435005c9f7be9ccd">00121</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1moexamples_1a4053ac1d24b537d2435005c9f7be9ccd">nsgaII</link>(NObj,&#32;objective,&#32;pbounds,&#32;seed=None,&#32;NGEN=20000,&#32;MU=400,&#32;CXPB=0.9):
<anchor xml:id="_moexamples_8py_source_1l00122"/>00122 &#32;&#32;&#32;&#32;random.seed(seed)
<anchor xml:id="_moexamples_8py_source_1l00123"/>00123 
<anchor xml:id="_moexamples_8py_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="keyword">global</emphasis>&#32;FirstCall
<anchor xml:id="_moexamples_8py_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;FirstCall:
<anchor xml:id="_moexamples_8py_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creator.create(<emphasis role="stringliteral">&apos;FitnessMin&apos;</emphasis>,&#32;base.Fitness,&#32;weights=(-1.0,)*NObj)
<anchor xml:id="_moexamples_8py_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creator.create(<emphasis role="stringliteral">&apos;Individual&apos;</emphasis>,&#32;array.array,&#32;typecode=<emphasis role="stringliteral">&apos;d&apos;</emphasis>,
<anchor xml:id="_moexamples_8py_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fitness=creator.FitnessMin)
<anchor xml:id="_moexamples_8py_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FirstCall&#32;=&#32;<emphasis role="keyword">False</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00130"/>00130 &#32;&#32;&#32;&#32;toolbox&#32;=&#32;base.Toolbox()
<anchor xml:id="_moexamples_8py_source_1l00131"/>00131 
<anchor xml:id="_moexamples_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;NDIM&#32;=&#32;len(pbounds)
<anchor xml:id="_moexamples_8py_source_1l00133"/>00133 
<anchor xml:id="_moexamples_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;toolbox.register(<emphasis role="stringliteral">&apos;attr_float&apos;</emphasis>,&#32;uniform,&#32;pbounds)
<anchor xml:id="_moexamples_8py_source_1l00135"/>00135 
<anchor xml:id="_moexamples_8py_source_1l00136"/>00136 &#32;&#32;&#32;&#32;toolbox.register(<emphasis role="stringliteral">&apos;individual&apos;</emphasis>,
<anchor xml:id="_moexamples_8py_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tools.initIterate,
<anchor xml:id="_moexamples_8py_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;creator.Individual,
<anchor xml:id="_moexamples_8py_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toolbox.attr_float)
<anchor xml:id="_moexamples_8py_source_1l00140"/>00140 
<anchor xml:id="_moexamples_8py_source_1l00141"/>00141 &#32;&#32;&#32;&#32;toolbox.register(<emphasis role="stringliteral">&apos;population&apos;</emphasis>,&#32;tools.initRepeat,&#32;list,&#32;toolbox.individual)
<anchor xml:id="_moexamples_8py_source_1l00142"/>00142 
<anchor xml:id="_moexamples_8py_source_1l00143"/>00143 &#32;&#32;&#32;&#32;toolbox.register(<emphasis role="stringliteral">&apos;evaluate&apos;</emphasis>,&#32;objective)
<anchor xml:id="_moexamples_8py_source_1l00144"/>00144 
<anchor xml:id="_moexamples_8py_source_1l00145"/>00145 &#32;&#32;&#32;&#32;toolbox.register(<emphasis role="stringliteral">&apos;mate&apos;</emphasis>,
<anchor xml:id="_moexamples_8py_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tools.cxSimulatedBinaryBounded,
<anchor xml:id="_moexamples_8py_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;low=pbounds[:,&#32;0].tolist(),
<anchor xml:id="_moexamples_8py_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;up=pbounds[:,&#32;1].tolist(),
<anchor xml:id="_moexamples_8py_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eta=20.0)
<anchor xml:id="_moexamples_8py_source_1l00150"/>00150 
<anchor xml:id="_moexamples_8py_source_1l00151"/>00151 &#32;&#32;&#32;&#32;toolbox.register(<emphasis role="stringliteral">&apos;mutate&apos;</emphasis>,
<anchor xml:id="_moexamples_8py_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tools.mutPolynomialBounded,
<anchor xml:id="_moexamples_8py_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;low=pbounds[:,&#32;0].tolist(),
<anchor xml:id="_moexamples_8py_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;up=pbounds[:,&#32;1].tolist(),
<anchor xml:id="_moexamples_8py_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eta=20.0,
<anchor xml:id="_moexamples_8py_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indpb=1.0/NDIM)
<anchor xml:id="_moexamples_8py_source_1l00157"/>00157 
<anchor xml:id="_moexamples_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;toolbox.register(<emphasis role="stringliteral">&apos;select&apos;</emphasis>,&#32;tools.selNSGA2)
<anchor xml:id="_moexamples_8py_source_1l00159"/>00159 
<anchor xml:id="_moexamples_8py_source_1l00160"/>00160 &#32;&#32;&#32;&#32;stats&#32;=&#32;tools.Statistics(<emphasis role="keyword">lambda</emphasis>&#32;ind:&#32;ind.fitness.values)
<anchor xml:id="_moexamples_8py_source_1l00161"/>00161 &#32;&#32;&#32;&#32;stats.register(<emphasis role="stringliteral">&apos;min&apos;</emphasis>,&#32;np.min,&#32;axis=0)
<anchor xml:id="_moexamples_8py_source_1l00162"/>00162 &#32;&#32;&#32;&#32;stats.register(<emphasis role="stringliteral">&apos;max&apos;</emphasis>,&#32;np.max,&#32;axis=0)
<anchor xml:id="_moexamples_8py_source_1l00163"/>00163 
<anchor xml:id="_moexamples_8py_source_1l00164"/>00164 &#32;&#32;&#32;&#32;logbook&#32;=&#32;tools.Logbook()
<anchor xml:id="_moexamples_8py_source_1l00165"/>00165 &#32;&#32;&#32;&#32;logbook.header&#32;=&#32;<emphasis role="stringliteral">&apos;gen&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;evals&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;std&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;min&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;avg&apos;</emphasis>,&#32;<emphasis role="stringliteral">&apos;max&apos;</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00166"/>00166 
<anchor xml:id="_moexamples_8py_source_1l00167"/>00167 &#32;&#32;&#32;&#32;pop&#32;=&#32;toolbox.population(n=MU)
<anchor xml:id="_moexamples_8py_source_1l00168"/>00168 
<anchor xml:id="_moexamples_8py_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Evaluate&#32;the&#32;individuals&#32;with&#32;an&#32;invalid&#32;fitness</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00170"/>00170 &#32;&#32;&#32;&#32;invalid_ind&#32;=&#32;[ind&#32;<emphasis role="keywordflow">for</emphasis>&#32;ind&#32;<emphasis role="keywordflow">in</emphasis>&#32;pop&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;ind.fitness.valid]
<anchor xml:id="_moexamples_8py_source_1l00171"/>00171 &#32;&#32;&#32;&#32;fitnesses&#32;=&#32;toolbox.map(toolbox.evaluate,&#32;invalid_ind)
<anchor xml:id="_moexamples_8py_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;ind,&#32;fit&#32;<emphasis role="keywordflow">in</emphasis>&#32;zip(invalid_ind,&#32;fitnesses):
<anchor xml:id="_moexamples_8py_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ind.fitness.values&#32;=&#32;fit
<anchor xml:id="_moexamples_8py_source_1l00174"/>00174 &#32;&#32;&#32;&#32;pop&#32;=&#32;toolbox.select(pop,&#32;len(pop))
<anchor xml:id="_moexamples_8py_source_1l00175"/>00175 
<anchor xml:id="_moexamples_8py_source_1l00176"/>00176 &#32;&#32;&#32;&#32;record&#32;=&#32;stats.compile(pop)
<anchor xml:id="_moexamples_8py_source_1l00177"/>00177 &#32;&#32;&#32;&#32;logbook.record(gen=0,&#32;evals=len(invalid_ind),&#32;**record)
<anchor xml:id="_moexamples_8py_source_1l00178"/>00178 
<anchor xml:id="_moexamples_8py_source_1l00179"/>00179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;gen&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(1,&#32;NGEN):
<anchor xml:id="_moexamples_8py_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Vary&#32;the&#32;population</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offspring&#32;=&#32;tools.selTournamentDCD(pop,&#32;len(pop))
<anchor xml:id="_moexamples_8py_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offspring&#32;=&#32;[toolbox.clone(ind)&#32;<emphasis role="keywordflow">for</emphasis>&#32;ind&#32;<emphasis role="keywordflow">in</emphasis>&#32;offspring]
<anchor xml:id="_moexamples_8py_source_1l00183"/>00183 
<anchor xml:id="_moexamples_8py_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;ind1,&#32;ind2&#32;<emphasis role="keywordflow">in</emphasis>&#32;zip(offspring[::2],&#32;offspring[1::2]):
<anchor xml:id="_moexamples_8py_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;random.random()&#32;&lt;=&#32;CXPB:
<anchor xml:id="_moexamples_8py_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toolbox.mate(ind1,&#32;ind2)
<anchor xml:id="_moexamples_8py_source_1l00187"/>00187 
<anchor xml:id="_moexamples_8py_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toolbox.mutate(ind1)
<anchor xml:id="_moexamples_8py_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toolbox.mutate(ind2)
<anchor xml:id="_moexamples_8py_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;del&#32;ind1.fitness.values,&#32;ind2.fitness.values
<anchor xml:id="_moexamples_8py_source_1l00191"/>00191 
<anchor xml:id="_moexamples_8py_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Evaluate&#32;the&#32;individuals&#32;with&#32;an&#32;invalid&#32;fitness</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invalid_ind&#32;=&#32;[ind&#32;<emphasis role="keywordflow">for</emphasis>&#32;ind&#32;<emphasis role="keywordflow">in</emphasis>&#32;offspring&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;ind.fitness.valid]
<anchor xml:id="_moexamples_8py_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fitnesses&#32;=&#32;toolbox.map(toolbox.evaluate,&#32;invalid_ind)
<anchor xml:id="_moexamples_8py_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;ind,&#32;fit&#32;<emphasis role="keywordflow">in</emphasis>&#32;zip(invalid_ind,&#32;fitnesses):
<anchor xml:id="_moexamples_8py_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ind.fitness.values&#32;=&#32;fit
<anchor xml:id="_moexamples_8py_source_1l00197"/>00197 
<anchor xml:id="_moexamples_8py_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Select&#32;the&#32;next&#32;generation&#32;population</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pop&#32;=&#32;toolbox.select(pop&#32;+&#32;offspring,&#32;MU)
<anchor xml:id="_moexamples_8py_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;record&#32;=&#32;stats.compile(pop)
<anchor xml:id="_moexamples_8py_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logbook.record(gen=gen,&#32;evals=len(invalid_ind),&#32;**record)
<anchor xml:id="_moexamples_8py_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;print(logbook.stream)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00203"/>00203 
<anchor xml:id="_moexamples_8py_source_1l00204"/>00204 &#32;&#32;&#32;&#32;front&#32;=&#32;np.array([ind.fitness.values&#32;<emphasis role="keywordflow">for</emphasis>&#32;ind&#32;<emphasis role="keywordflow">in</emphasis>&#32;pop])
<anchor xml:id="_moexamples_8py_source_1l00205"/>00205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pop,&#32;logbook,&#32;front
<anchor xml:id="_moexamples_8py_source_1l00206"/>00206 &#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00207"/><link linkend="_namespaceexamples_1_1moexamples_1a565f7101212f4770069ca2b305bfb10f">00207</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1moexamples_1a565f7101212f4770069ca2b305bfb10f">nsgaII_test</link>(problem,&#32;fname,&#32;NGEN=2000,&#32;MU=100,&#32;value_limits&#32;=&#32;None):
<anchor xml:id="_moexamples_8py_source_1l00208"/>00208 &#32;&#32;&#32;&#32;time0&#32;=&#32;time.perf_counter()&#32;<emphasis role="comment">#&#32;optimization&#32;start&#32;time</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00209"/>00209 &#32;&#32;&#32;&#32;name&#32;=&#32;problem.name&#32;
<anchor xml:id="_moexamples_8py_source_1l00210"/>00210 &#32;&#32;&#32;&#32;logger.info(<emphasis role="stringliteral">&apos;optimize&#32;&apos;</emphasis>&#32;+&#32;name&#32;+&#32;<emphasis role="stringliteral">&apos;&#32;nsgaII&apos;</emphasis>)&#32;
<anchor xml:id="_moexamples_8py_source_1l00211"/>00211 &#32;&#32;&#32;&#32;pbounds&#32;=&#32;np.array(list(zip(problem.bounds.lb,&#32;problem.bounds.ub)))
<anchor xml:id="_moexamples_8py_source_1l00212"/>00212 &#32;&#32;&#32;&#32;pop,&#32;logbook,&#32;front&#32;=&#32;<link linkend="_namespaceexamples_1_1moexamples_1a4053ac1d24b537d2435005c9f7be9ccd">nsgaII</link>(2,&#32;problem.fun,&#32;pbounds,&#32;NGEN=NGEN,&#32;MU=MU)&#32;
<anchor xml:id="_moexamples_8py_source_1l00213"/>00213 &#32;&#32;&#32;&#32;logger.info(name&#32;+&#32;<emphasis role="stringliteral">&apos;&#32;nsgaII&#32;time&#32;&apos;</emphasis>&#32;+&#32;str(dtime(time0)))&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00214"/>00214 &#32;&#32;&#32;&#32;name&#32;=&#32;<emphasis role="stringliteral">&apos;nsgaII_&apos;</emphasis>&#32;+&#32;str(NGEN)&#32;+&#32;<emphasis role="stringliteral">&apos;_&apos;</emphasis>&#32;+&#32;str(MU)&#32;+&#32;name&#32;+&#32;<emphasis role="stringliteral">&apos;_&apos;</emphasis>&#32;+&#32;fname
<anchor xml:id="_moexamples_8py_source_1l00215"/>00215 &#32;&#32;&#32;&#32;np.savez_compressed(name,&#32;xs=pop,&#32;ys=front)
<anchor xml:id="_moexamples_8py_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;value_limits&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_moexamples_8py_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;front&#32;=&#32;np.array(
<anchor xml:id="_moexamples_8py_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[y&#32;<emphasis role="keywordflow">for</emphasis>&#32;y&#32;<emphasis role="keywordflow">in</emphasis>&#32;front&#32;<emphasis role="keywordflow">if</emphasis>&#32;all([y[i]&#32;&lt;&#32;value_limits[i]&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(y))])])
<anchor xml:id="_moexamples_8py_source_1l00219"/>00219 &#32;&#32;&#32;&#32;retry.plot(front,&#32;name)
<anchor xml:id="_moexamples_8py_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00221"/><link linkend="_namespaceexamples_1_1moexamples_1a4599740480fba54da22dd17058b73c76">00221</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1moexamples_1a4599740480fba54da22dd17058b73c76">plot_all</link>(folder,&#32;fname):
<anchor xml:id="_moexamples_8py_source_1l00222"/>00222 &#32;&#32;&#32;&#32;files&#32;=&#32;glob.glob(folder&#32;+&#32;<emphasis role="stringliteral">&apos;/*.npz&apos;</emphasis>,&#32;recursive=<emphasis role="keyword">True</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00223"/>00223 &#32;&#32;&#32;&#32;xs&#32;=&#32;[]
<anchor xml:id="_moexamples_8py_source_1l00224"/>00224 &#32;&#32;&#32;&#32;ys&#32;=&#32;[]
<anchor xml:id="_moexamples_8py_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;file&#32;<emphasis role="keywordflow">in</emphasis>&#32;files:
<anchor xml:id="_moexamples_8py_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;np.load(file)&#32;<emphasis role="keyword">as</emphasis>&#32;data:
<anchor xml:id="_moexamples_8py_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;+=&#32;list(data[<emphasis role="stringliteral">&apos;xs&apos;</emphasis>])
<anchor xml:id="_moexamples_8py_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;+=&#32;list(data[<emphasis role="stringliteral">&apos;ys&apos;</emphasis>])
<anchor xml:id="_moexamples_8py_source_1l00229"/>00229 &#32;&#32;&#32;&#32;xs&#32;=&#32;np.array(xs);&#32;ys&#32;=&#32;np.array(ys)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00230"/>00230 &#32;&#32;&#32;&#32;xs,&#32;front&#32;=&#32;moretry.pareto(xs,&#32;ys)
<anchor xml:id="_moexamples_8py_source_1l00231"/>00231 &#32;&#32;&#32;&#32;retry.plot(ys,&#32;fname&#32;+&#32;<emphasis role="stringliteral">&apos;_all.png&apos;</emphasis>,&#32;interp=<emphasis role="keyword">False</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00232"/>00232 &#32;&#32;&#32;&#32;retry.plot(front,&#32;fname&#32;+&#32;<emphasis role="stringliteral">&apos;_front.png&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00233"/>00233 
<anchor xml:id="_moexamples_8py_source_1l00234"/>00234 &#32;
<anchor xml:id="_moexamples_8py_source_1l00235"/><link linkend="_namespaceexamples_1_1moexamples_1aea4afb4ee1738276b6d3458681f545cf">00235</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1moexamples_1aea4afb4ee1738276b6d3458681f545cf">decpp_minimize_plot</link>(problem,&#32;name,&#32;popsize&#32;=&#32;64,&#32;max_eval&#32;=&#32;100000,&#32;nobj&#32;=&#32;2):
<anchor xml:id="_moexamples_8py_source_1l00236"/>00236 &#32;&#32;&#32;&#32;plot_name&#32;=&#32;problem.name&#32;+&#32;<emphasis role="stringliteral">&apos;_&apos;</emphasis>&#32;+&#32;name
<anchor xml:id="_moexamples_8py_source_1l00237"/>00237 &#32;&#32;&#32;&#32;modecpp.minimize(problem.fun,&#32;nobj,&#32;0,&#32;problem.bounds,&#32;popsize&#32;=&#32;popsize,&#32;
<anchor xml:id="_moexamples_8py_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers=32,&#32;max_evaluations&#32;=&#32;max_eval,&#32;nsga_update=<emphasis role="keyword">True</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00239"/>00239 
<anchor xml:id="_moexamples_8py_source_1l00240"/><link linkend="_namespaceexamples_1_1moexamples_1aea8fa426f342d5569c78b2f502d23d5d">00240</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1moexamples_1aea8fa426f342d5569c78b2f502d23d5d">de_minimize_plot</link>(problem,&#32;name,&#32;popsize&#32;=&#32;64,&#32;max_eval&#32;=&#32;100000,&#32;nobj&#32;=&#32;2):
<anchor xml:id="_moexamples_8py_source_1l00241"/>00241 &#32;&#32;&#32;&#32;mode.minimize_plot(problem.name&#32;+&#32;<emphasis role="stringliteral">&apos;_&apos;</emphasis>&#32;+&#32;name,&#32;problem.fun,&#32;nobj,&#32;0,&#32;problem.bounds,&#32;popsize&#32;=&#32;popsize,&#32;
<anchor xml:id="_moexamples_8py_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers&#32;=&#32;32,&#32;max_evaluations&#32;=&#32;max_eval,&#32;nsga_update=<emphasis role="keyword">False</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00243"/>00243 
<anchor xml:id="_moexamples_8py_source_1l00244"/><link linkend="_namespaceexamples_1_1moexamples_1acab1d97a5dc64a2c9ab558c3638986e7">00244</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1moexamples_1acab1d97a5dc64a2c9ab558c3638986e7">nsga_minimize_plot</link>(problem,&#32;name,&#32;popsize&#32;=&#32;64,&#32;max_eval&#32;=&#32;100000,&#32;nobj&#32;=&#32;2):
<anchor xml:id="_moexamples_8py_source_1l00245"/>00245 &#32;&#32;&#32;&#32;mode.minimize_plot(problem.name&#32;+&#32;<emphasis role="stringliteral">&apos;_&apos;</emphasis>&#32;+&#32;name,&#32;problem.fun,&#32;nobj,&#32;0,&#32;problem.bounds,&#32;popsize&#32;=&#32;popsize,&#32;
<anchor xml:id="_moexamples_8py_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;=&#32;max_eval,&#32;nsga_update=<emphasis role="keyword">True</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00247"/>00247 
<anchor xml:id="_moexamples_8py_source_1l00248"/><link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">00248</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(problem,&#32;opt,&#32;name,&#32;exp&#32;=&#32;2.0,&#32;num_retries&#32;=&#32;1024,&#32;value_limits=None):
<anchor xml:id="_moexamples_8py_source_1l00249"/>00249 &#32;&#32;&#32;&#32;moretry.minimize_plot(problem.name&#32;+&#32;<emphasis role="stringliteral">&apos;_&apos;</emphasis>&#32;+&#32;name,&#32;opt,&#32;
<anchor xml:id="_moexamples_8py_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;problem.fun,&#32;problem.bounds,&#32;problem.weight_bounds,&#32;
<anchor xml:id="_moexamples_8py_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries&#32;=&#32;num_retries,&#32;exp&#32;=&#32;exp,&#32;value_limits&#32;=&#32;value_limits)
<anchor xml:id="_moexamples_8py_source_1l00252"/>00252 
<anchor xml:id="_moexamples_8py_source_1l00253"/><link linkend="_namespaceexamples_1_1moexamples_1ac27d609cba5e248a69559de25efe9a26">00253</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1moexamples_1ac27d609cba5e248a69559de25efe9a26">adv_minimize_plot</link>(problem,&#32;opt,&#32;name,&#32;value_limit&#32;=&#32;np.inf,&#32;num_retries&#32;=&#32;10240):
<anchor xml:id="_moexamples_8py_source_1l00254"/>00254 &#32;&#32;&#32;&#32;moretry.adv_minimize_plot(problem.name&#32;+&#32;<emphasis role="stringliteral">&apos;_&apos;</emphasis>&#32;+&#32;name,&#32;opt,&#32;
<anchor xml:id="_moexamples_8py_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;problem.fun,&#32;problem.bounds,&#32;value_limit&#32;=&#32;value_limit,
<anchor xml:id="_moexamples_8py_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries&#32;=&#32;num_retries)
<anchor xml:id="_moexamples_8py_source_1l00257"/>00257 
<anchor xml:id="_moexamples_8py_source_1l00258"/>00258 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_moexamples_8py_source_1l00259"/>00259 &#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00260"/>00260 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;decpp_minimize_plot(zdt1(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00261"/>00261 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;decpp_minimize_plot(schaffer(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00262"/>00262 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;decpp_minimize_plot(poloni(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00263"/>00263 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;decpp_minimize_plot(fonseca(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00264"/>00264 &#32;&#32;&#32;&#32;<emphasis role="comment">#</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00265"/>00265 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;de_minimize_plot(zdt1(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00266"/>00266 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;de_minimize_plot(schaffer(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00267"/>00267 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;de_minimize_plot(poloni(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00268"/>00268 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;de_minimize_plot(fonseca(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00269"/>00269 &#32;&#32;&#32;&#32;<emphasis role="comment">#</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00270"/>00270 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;nsga_minimize_plot(zdt1(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;nsga_minimize_plot(schaffer(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00272"/>00272 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;nsga_minimize_plot(poloni(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00273"/>00273 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;nsga_minimize_plot(fonseca(20),&#32;&apos;100k64&apos;)</emphasis>
<anchor xml:id="_moexamples_8py_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00275"/>00275 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1zdt1">zdt1</link>(20),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(M=16),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00276"/>00276 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1schaffer">schaffer</link>(20),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(M=16),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00277"/><link linkend="_namespaceexamples_1_1moexamples_1a2613f239ece1c033a7e0a1e5c2977a09">00277</link> &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1poloni">poloni</link>(20),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(M=16),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>,&#32;exp=1.0)
<anchor xml:id="_moexamples_8py_source_1l00278"/>00278 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1fonseca">fonseca</link>(20),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(M=16),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>,&#32;exp=3.0)
<anchor xml:id="_moexamples_8py_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00280"/>00280 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1zdt1">zdt1</link>(20),&#32;de_cma(),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00281"/>00281 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1schaffer">schaffer</link>(20),&#32;de_cma(),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00282"/>00282 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1poloni">poloni</link>(20),&#32;de_cma(),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>,&#32;exp=1.0)
<anchor xml:id="_moexamples_8py_source_1l00283"/>00283 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1fonseca">fonseca</link>(20),&#32;de_cma(),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>,&#32;exp=3.0)
<anchor xml:id="_moexamples_8py_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00285"/>00285 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1zdt1">zdt1</link>(20),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1random__search">random_search</link>(),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00286"/>00286 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1schaffer">schaffer</link>(20),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1random__search">random_search</link>(),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1poloni">poloni</link>(20),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1random__search">random_search</link>(),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>,&#32;exp=1.0)
<anchor xml:id="_moexamples_8py_source_1l00288"/>00288 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1fonseca">fonseca</link>(20),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1random__search">random_search</link>(),&#32;<emphasis role="stringliteral">&apos;50k1k&apos;</emphasis>,&#32;exp=3.0)
<anchor xml:id="_moexamples_8py_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00290"/><link linkend="_namespaceexamples_1_1moexamples_1ae8e0a9288b0247d89e562a088db4166a">00290</link> &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo">cassini1_mo</link>(),&#32;de_cma(50000),&#32;<emphasis role="stringliteral">&apos;50k4k&apos;</emphasis>,&#32;num_retries=4096,&#32;value_limits=[40,&#32;7000])&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00291"/>00291 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo">cassini1_mo</link>(),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(50000,&#32;M=16),&#32;<emphasis role="stringliteral">&apos;50k4k&apos;</emphasis>,&#32;num_retries=4096,&#32;value_limits=[40,&#32;7000])
<anchor xml:id="_moexamples_8py_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1cassini1__mo">cassini1_mo</link>(),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1random__search">random_search</link>(50000),&#32;<emphasis role="stringliteral">&apos;50k4k&apos;</emphasis>,&#32;num_retries=4096,&#32;value_limits=[40,&#32;7000])
<anchor xml:id="_moexamples_8py_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00294"/>00294 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo">cassini2_mo</link>(),&#32;de_cma(50000),&#32;<emphasis role="stringliteral">&apos;50k4k&apos;</emphasis>,&#32;num_retries=4096,&#32;value_limits=[40,&#32;7000])&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00295"/>00295 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo">cassini2_mo</link>(),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(50000,&#32;M=16),&#32;<emphasis role="stringliteral">&apos;50k4k&apos;</emphasis>,&#32;num_retries=4096,&#32;value_limits=[40,&#32;7000])
<anchor xml:id="_moexamples_8py_source_1l00296"/>00296 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1cassini2__mo">cassini2_mo</link>(),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1random__search">random_search</link>(50000),&#32;<emphasis role="stringliteral">&apos;50k4k&apos;</emphasis>,&#32;num_retries=4096,&#32;value_limits=[40,&#32;7000])
<anchor xml:id="_moexamples_8py_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00298"/>00298 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1tandem__mo">tandem_mo</link>(),&#32;de_cma(100000),&#32;<emphasis role="stringliteral">&apos;100k10k&apos;</emphasis>,&#32;num_retries=10240,&#32;exp=1.0)
<anchor xml:id="_moexamples_8py_source_1l00299"/>00299 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1tandem__mo">tandem_mo</link>(),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(100000,&#32;M=16),&#32;<emphasis role="stringliteral">&apos;100k10k&apos;</emphasis>,&#32;num_retries=10240,&#32;exp=1.0)
<anchor xml:id="_moexamples_8py_source_1l00300"/>00300 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a566fc7b1e3a68cda7c9b396dda6ce003">minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1tandem__mo">tandem_mo</link>(),&#32;<link linkend="_classfcmaes_1_1optimizer_1_1random__search">random_search</link>(100000),&#32;<emphasis role="stringliteral">&apos;100k10k&apos;</emphasis>,&#32;num_retries=10240,&#32;exp=1.0)
<anchor xml:id="_moexamples_8py_source_1l00301"/>00301 &#32;&#32;&#32;&#32;
<anchor xml:id="_moexamples_8py_source_1l00302"/>00302 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a565f7101212f4770069ca2b305bfb10f">nsgaII_test</link>(<link linkend="_classexamples_1_1moexamples_1_1zdt1">zdt1</link>(20),&#32;<emphasis role="stringliteral">&apos;_front.png&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00303"/>00303 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a565f7101212f4770069ca2b305bfb10f">nsgaII_test</link>(<link linkend="_classexamples_1_1moexamples_1_1schaffer">schaffer</link>(20),&#32;<emphasis role="stringliteral">&apos;_front.png&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00304"/>00304 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a565f7101212f4770069ca2b305bfb10f">nsgaII_test</link>(<link linkend="_classexamples_1_1moexamples_1_1poloni">poloni</link>(20),&#32;&#32;<emphasis role="stringliteral">&apos;_front.png&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00305"/>00305 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1a565f7101212f4770069ca2b305bfb10f">nsgaII_test</link>(<link linkend="_classexamples_1_1moexamples_1_1fonseca">fonseca</link>(20),&#32;<emphasis role="stringliteral">&apos;_front.png&apos;</emphasis>)
<anchor xml:id="_moexamples_8py_source_1l00306"/>00306 
<anchor xml:id="_moexamples_8py_source_1l00307"/><link linkend="_namespaceexamples_1_1moexamples_1a56a3887777d5069db3de8ea51f916347">00307</link> &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1moexamples_1ac27d609cba5e248a69559de25efe9a26">adv_minimize_plot</link>(<link linkend="_classexamples_1_1moexamples_1_1tandem__mo">tandem_mo</link>(),&#32;de_cma(1500),&#32;<emphasis role="stringliteral">&apos;_smart&apos;</emphasis>,&#32;value_limit&#32;=&#32;0,&#32;num_retries&#32;=&#32;60000)
<anchor xml:id="_moexamples_8py_source_1l00308"/>00308 
<anchor xml:id="_moexamples_8py_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;
</programlisting></section>
