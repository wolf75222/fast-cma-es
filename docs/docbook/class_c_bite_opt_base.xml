<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_c_bite_opt_base" xml:lang="en-US">
<title>CBiteOptBase&lt; ptype &gt; Class Template Reference</title>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;biteaux.h&gt;</computeroutput>
</para>
Inheritance diagram for CBiteOptBase&lt; ptype &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for CBiteOptBase&lt; ptype &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_base_1af11515f00a0a685516aa9cc3daf7f603">CBiteOptBase</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_opt_base_1abc6be9a0740c36dfadb4ec3508dc0d65">~CBiteOptBase</link> ()</para>
</listitem>
            <listitem><para>virtual const double * <link linkend="_class_c_bite_opt_base_1abbed35653d8765915efc675204c19bb2">getBestParams</link> () const</para>
</listitem>
            <listitem><para>virtual double <link linkend="_class_c_bite_opt_base_1a4b2d3669723dbe251cf391cc10dd4f5c">getBestCost</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> ** <link linkend="_class_c_bite_opt_base_1a2eaae4dd1761eaef42ead68546994c12">getSels</link> ()</para>
</listitem>
            <listitem><para>const char ** <link linkend="_class_c_bite_opt_base_1afd1006a5d6154064115a205b54ecaa8c">getSelNames</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1a96f3b9e0a82d830bc34c17a5d0f8fa19">getSelCount</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_c_bite_opt_interface">CBiteOptInterface</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_interface_1a0155b3fcab9eeb2d7505c0326e12e809">CBiteOptInterface</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_opt_interface_1a070d1317053ec55bbe7d8ddde32076ce">~CBiteOptInterface</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_interface_1ae7f8adaf2fd8acb10ccf057592a6229d">getMinValues</link> (double *const p) const =0</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_interface_1a9debe40625c2bc248a4ffd12a9197a4d">getMaxValues</link> (double *const p) const =0</para>
</listitem>
            <listitem><para>virtual double <link linkend="_class_c_bite_opt_interface_1a45d7e2c9ea31b6f8bb23758a6879df9d">optcost</link> (const double *const p)=0</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link> = 64</para>

<para>that can be added to *this object (for static arrays). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_base_1a5c53a8eb3a4269a746d990282452d71e">initBuffers</link> (const int aParamCount, const int aPopSize, const int aCnsCount=0, const int aObjCount=1)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_base_1aed59421f7102fb6921e4af39acfb8369">deleteBuffers</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a768362da5c773eea5a8649d44676eeed">initCommonVars</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1ac2ee22488c24887a922a30dd15d898e6">updateDiffValues</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a9e49b98f5f6a2470d060282b2fd26a53">updateBestCost</link> (const double UpdCost, const double *const UpdValues, const int p=-1)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a7b849dbede3dc6be555a4197541fad51">getRealValue</link> (const ptype *const NormParams, const int i) const</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a634a498e8ebd71bbf87fd1df02f178e0">wrapParamReal</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v, const int i) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a5d8710f00b828beca21c0d2699ae340d">addSel</link> (<link linkend="_class_c_bite_sel_base">CBiteSelBase</link> &amp;s, const char *const sname)</para>
</listitem>
            <listitem><para>template&lt;class T&gt; </para><para>int <link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select</link> (T &amp;Sel, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1aa08dcfff8871910e4d01a94f261ee752">applySelsIncr</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v=1.0)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a47acdb7a495f75170b0eb457e0dc950e">applySelsDecr</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; ptype &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_par_pops_1a24cc3d1978b4dbe57fad8a6f6d7efd8a">setParPopCount</link> (const int NewCount)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_par_pops_1afa8a97732cea882b664c2d0fbedf2289">getMinDistParPop</link> (const double Cost, const ptype *const Params) const</para>
</listitem>
        </itemizedlist>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_par_pops_1a1d00195283da4d97f648da706e5c5cec">CBiteParPops</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_par_pops_1a772516362f17b8e5790596740ce355ba">~CBiteParPops</link> ()</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; ptype &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a0d5ab322641bb1a091df91ff7ee630c4">zeroParams</link> (ptype *const dst) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a24130fea35014433f142e3b9ed0f8929">copyParams</link> (ptype *const dst, const ptype *const src) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a57e751582761922bbabff1ddb7af277b">copyValues</link> (double *const dst, const double *const src) const</para>
</listitem>
        </itemizedlist>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop_1ad427518ed1d47fbe3c2222b3a11badb7">CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop_1a73402384f4b75abf6d956dc086ccf36e">CBitePop</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_pop_1ac386e4638d6fc6bd5370eeae895347c3">~CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_pop_1ab18cf322db6ab186db1e19b53e34c232">operator=</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a3fc2d887ae91be62fd9fc3100268e53c">copy</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a7850902dad276dcecea68559eaccc168">updateCentroid</link> ()</para>
</listitem>
            <listitem><para>const ptype * <link linkend="_class_c_bite_pop_1a5e6ccebb178353b084084f841b09042d">getCentroid</link> () const</para>
</listitem>
            <listitem><para>const ptype * <link linkend="_class_c_bite_pop_1aaa8e3f180accfedf21218cbed8ffbb79">getParamsOrdered</link> (const int i) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad38d886687357797479e69098759476a">getCnsPtr</link> (ptype *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad6cbe6cfbf9954dcb6f8a223a5e1f36b">getObjPtr</link> (ptype *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1aa4f3255c9607f72eff280f8c3c09143f">getRankPtr</link> (ptype *const pp) const</para>
</listitem>
            <listitem><para>const ptype ** <link linkend="_class_c_bite_pop_1ac2a01e9eb6b884a0b318e4b914273acf">getPopParams</link> () const</para>
</listitem>
            <listitem><para>ptype * <link linkend="_class_c_bite_pop_1a0053ae41c70babe967c5931f491ea865">getCurParams</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a5aef425d751172e1fff38a455cb51d34">getCurPopSize</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a7e1fbb7f7e9aaf8f73eb865fa4610185">getCurPopPos</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a767519aa2fcc2667dc135a131bc9fd85">resetCurPopPos</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a48d6ede5c82534c973e0458726e820dd">incrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a4656171c63f1944ae045d6f222d9d33a">decrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aad999ddc8a2ed72ffaee0db7732c9f76">updatePop</link> (double UpdCost, const ptype *const UpdParams, const bool DoUpdateCentroid, const bool CanRejectCost=true)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a07d5b7c3007f79c7dc1f6106d9832dc6">MinValues</link></para>

<para>Minimal parameter values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a9b100a7afa3bdcb3684383ff2df7867a">MaxValues</link></para>

<para>Maximal parameter values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a70f5211fb9521491b0e6a336e21dd7bc">DiffValues</link></para>

<para>values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1ad5c0fe9c5312847158a6df8f4639de23">DiffValuesI</link></para>

<para>Inverse DiffValues. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a0fbab700b9d9c5c36d5ef664540efad0">BestValues</link></para>

<para>Best parameter vector. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1adc4dfe02978fd4ed460f49c7e9a01633">BestCost</link></para>

<para>Cost of the best parameter vector. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a0a97be5c42eed6fbaffba04c8720e6ce">NewValues</link></para>

<para>Temporary new parameter buffer, with real values. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1ab756659a8ba09ba42ffa3d207564fdd8">StallCount</link></para>

<para>The number of iterations without improvement. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a48296b534db162fa0007ff83757cb84b">HiBound</link></para>

<para>be used by the optimizer. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1acc0aa62d6125bd03d3baae22b0bf0467">AvgCost</link></para>

<para>the optimizer. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> * <link linkend="_class_c_bite_opt_base_1aebc1904c883f8b4dafefeda608c4536b">Sels</link> [<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]</para>

<para>indexed access in some cases. </para>
</listitem>
            <listitem><para>const char * <link linkend="_class_c_bite_opt_base_1a43d69538ae5aa7d78d8b3a3e821902b7">SelNames</link> [<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]</para>

<para>Selector names. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1ae9b284aca73ab2f6784f12174e391f7b">SelCount</link></para>

<para>The number of selectors in use. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> * <link linkend="_class_c_bite_opt_base_1a3922d6b29602643882d3212071a5e679">ApplySels</link> [<link linkend="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba">MaxApplySels</link>]</para>

<para><link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select()</link> function calls during the optimize() function call. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1afc2d6ec2c61d8f41bd39bb99632cf12e">ApplySelsCount</link></para>

<para>optimize() function call. </para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Attributes inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; ptype &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link>&lt; ptype &gt; * <link linkend="_class_c_bite_par_pops_1a79983cca58bd18a6ff73120e65a976dd">ParPops</link> [<link linkend="_class_c_bite_par_pops_1a451f5fa8bb3503f9c344fe03f46ffcc9">MaxParPopCount</link>]</para>

<para>orbiting *this population. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_par_pops_1aea59bf6c1cf9894f944d07cec99882ee">ParPopCount</link></para>

<para>be changed via the <link linkend="_class_c_bite_par_pops_1a24cc3d1978b4dbe57fad8a6f6d7efd8a">setParPopCount()</link> function. </para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; ptype &gt;</link>        <itemizedlist>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0dc6f7b3a19db513e349e68c3471f9fa">ParamCount</link></para>

<para>The total number of internal parameter values in use. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1a884c9ad4c0327aaa0110a23a89f5697a">ParamCountI</link></para>

<para>= 1.0 / ParamCount. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a58e3bf5abc2fb4b1e173aa6cb3477bfb">PopSize</link></para>

<para>The size of population in use (maximal). </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0b64743a84d5af143d44e7f6e9f02ada">PopSize1</link></para>

<para>= PopSize - 1. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1adc98fbdebc2671ef0826245d8c472cc5">CurPopSize</link></para>

<para>Current population size. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a26b81c70200085e410cf83258e139f9b">CurPopSize1</link></para>

<para>= CurPopSize - 1. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1aa5105ca75379f9a760dc9f0b9ea30ea7">CurPopSizeI</link></para>

<para>= 1.0 / CurPopSize. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aa7c87b9148768d6104f8d3dfb5abebce">CurPopPos</link></para>

<para>update. This variable should be initialized by the optimizer. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2bf725291723a8dcaa215496e3175471">CnsCount</link></para>

<para>The number of constraints per solution. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2f7c6a4707e23c21197ab32b71d900c7">ObjCount</link></para>

<para>The number of objectives per solution. </para>
</listitem>
            <listitem><para>uint8_t * <link linkend="_class_c_bite_pop_1ac69b014720b11a472509b22588eaf6c3">PopParamsBuf</link></para>

<para>Buffer for all PopParams vectors. </para>
</listitem>
            <listitem><para>ptype ** <link linkend="_class_c_bite_pop_1a0c41790e473b70c5ec37986d0fb1f9a2">PopParams</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a6d4a3479ca9e60de6cf4667d5b2937a5">PopCnsOffs</link></para>

<para>a population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a98e2af75120c4184b271c14d22acf9d4">PopObjOffs</link></para>

<para>population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3ecc4ffcf1c6f3f9b4e4e5a873c481fe">PopRankOffs</link></para>

<para>item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3cdac0ad2cf5c8403f1f7676171f4e76">PopItemSize</link></para>

<para>Size in bytes of population item. </para>
</listitem>
            <listitem><para>ptype * <link linkend="_class_c_bite_pop_1ac31d95bc1f383828e72bcf1eb499e949">CentParams</link></para>

<para>Centroid of the parameter vectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_pop_1a41f29468becc588bea6ff3f842db93ea">NeedCentUpdate</link></para>

<para>&quot;True&quot; if centroid update is needed. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1ab6dec63b0ee3955563c2a3f815614f31">CentLPC</link></para>

<para>Centroid averaging filter coefficient. </para>
</listitem>
            <listitem><para>ptype * <link linkend="_class_c_bite_pop_1acae90e3584dca8b6c08c70d7bd317729">TmpParams</link></para>

<para>element of the PopParams array. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Static Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba">MaxApplySels</link> = 32</para>

<para>that can be used during a single optimize() function call. </para>
</listitem>
        </itemizedlist>
</simplesect>
Static Protected Attributes inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; ptype &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_par_pops_1a451f5fa8bb3503f9c344fe03f46ffcc9">MaxParPopCount</link> = 8</para>

<para>population supported. </para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; ptype &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76">IntOverBits</link> = ( sizeof( ptype ) &gt; 4 ? 5 : 3 )</para>
</listitem>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8">IntMantBits</link> = sizeof( ptype ) * 8 - 1 - <link linkend="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76">IntOverBits</link></para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link> = 1LL &lt;&lt; <link linkend="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8">IntMantBits</link></para>

<para>multiplier. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1aeba03d86b17ed01a97dc8225c5598b2d">IntMantMultM</link> = -<link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link></para>

<para>IntMantMult. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a8c64d2e83f225b034df818b06b09ecd2">IntMantMult2</link> = ( <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link> &lt;&lt; 1 )</para>

<para>IntMantMult * 2. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a27448c9be1bed517e4a48aa656ca4f76">IntMantMask</link> = <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link> - 1</para>

<para>corresponds to mantissa. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_base_1a424395289a687d98b8d27cbd828dbc6c">CBiteOptBase</link> (const <link linkend="_class_c_bite_opt_base">CBiteOptBase</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_opt_base">CBiteOptBase</link> &amp; <link linkend="_class_c_bite_opt_base_1a8b1b8265762299edcd1714553ce2104d">operator=</link> (const <link linkend="_class_c_bite_opt_base">CBiteOptBase</link> &amp;)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
Static Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; ptype &gt;</link>        <itemizedlist>
            <listitem><para>static ptype <link linkend="_class_c_bite_pop_1a3b7e8d2276455475bd761e29c8c72ac6">wrapParam</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const ptype v)</para>
</listitem>
            <listitem><para>static ptype <link linkend="_class_c_bite_pop_1aecaac61269e65bda93cb2dc1a3a26091">getGaussianInt</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double sd, const ptype meanInt)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1ad4e3a3c5b7a25ad02ef0231bd3fe8388">calcLP1Coeff</link> (const double Count)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename ptype&gt;<?linebreak?>class CBiteOptBase&lt; ptype &gt;</title></simplesect>

<para>The base class for optimizers of the &quot;biteopt&quot; project.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ptype</entry><entry>
<para>Parameter value storage type. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01577">1577</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_c_bite_opt_base_1a424395289a687d98b8d27cbd828dbc6c"/><section>
    <title>CBiteOptBase()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>CBiteOptBase</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>CBiteOptBase</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput><link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;<link linkend="_class_c_bite_opt_base">::CBiteOptBase</link> (const <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt; &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteaux_8h_source_1l01581">1581</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base_a424395289a687d98b8d27cbd828dbc6c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base_a424395289a687d98b8d27cbd828dbc6c_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1af11515f00a0a685516aa9cc3daf7f603"/><section>
    <title>CBiteOptBase()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>CBiteOptBase</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>CBiteOptBase</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput><link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;<link linkend="_class_c_bite_opt_base">::CBiteOptBase</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteaux_8h_source_1l01593">1593</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1abc6be9a0740c36dfadb4ec3508dc0d65"/><section>
    <title>~CBiteOptBase()</title>
<indexterm><primary>~CBiteOptBase</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>~CBiteOptBase</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::~<link linkend="_class_c_bite_opt_base">CBiteOptBase</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteaux_8h_source_1l01604">1604</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_c_bite_opt_base_1a5d8710f00b828beca21c0d2699ae340d"/><section>
    <title>addSel()</title>
<indexterm><primary>addSel</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>addSel</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::addSel (<link linkend="_class_c_bite_sel_base">CBiteSelBase</link> &amp; s, const char *const sname)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function adds a selector to the Sels list.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>s</entry><entry>
<para>Selector object to add. </para>
</entry>
                            </row>
                            <row>
<entry>sname</entry><entry>
<para>Selector&apos;s name, should be a static constant. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01859">1859</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a47acdb7a495f75170b0eb457e0dc950e"/><section>
    <title>applySelsDecr()</title>
<indexterm><primary>applySelsDecr</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>applySelsDecr</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::applySelsDecr (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function applies selector decrements on optimization fail.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rnd</entry><entry>
<para>PRNG object. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01909">1909</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1aa08dcfff8871910e4d01a94f261ee752"/><section>
    <title>applySelsIncr()</title>
<indexterm><primary>applySelsIncr</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>applySelsIncr</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::applySelsIncr (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, const double v = <computeroutput>1.0</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function applies selector increments on optimization success.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rnd</entry><entry>
<para>PRNG object. </para>
</entry>
                            </row>
                            <row>
<entry>v</entry><entry>
<para>Increment value, [0; 1]. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01890">1890</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1aed59421f7102fb6921e4af39acfb8369"/><section>
    <title>deleteBuffers()</title>
<indexterm><primary>deleteBuffers</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>deleteBuffers</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>virtual void <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::deleteBuffers ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Function deletes buffers previously allocated via the <link linkend="_class_c_bite_opt_base_1a5c53a8eb3a4269a746d990282452d71e">initBuffers()</link> function. Derived classes should call this function of the base class. </para>
<para>
Reimplemented from <link linkend="_class_c_bite_pop_1a47de1dedd30171e9fc9ae9475998d51d">CBitePop&lt; ptype &gt;</link>.</para>
<para>
Reimplemented in <link linkend="_class_c_n_m_seq_opt_1a76ae39736ff317e9aa048d24872e7084">CNMSeqOpt</link>, and <link linkend="_class_c_spher_opt_1a6491915dd708c2791682a529005c035e">CSpherOpt</link>.</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01698">1698</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base_aed59421f7102fb6921e4af39acfb8369_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a4b2d3669723dbe251cf391cc10dd4f5c"/><section>
    <title>getBestCost()</title>
<indexterm><primary>getBestCost</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>getBestCost</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>virtual double <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::getBestCost ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para><formalpara><title>Returns</title>

<para>Cost of the best parameter vector. </para>
</formalpara>
</para>
<para>
Implements <link linkend="_class_c_bite_opt_interface_1a79e5a8cdcdf2c9a12f16e4aeba49c75f">CBiteOptInterface</link>.</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01619">1619</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1abbed35653d8765915efc675204c19bb2"/><section>
    <title>getBestParams()</title>
<indexterm><primary>getBestParams</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>getBestParams</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>virtual const double * <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::getBestParams ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para><formalpara><title>Returns</title>

<para>Best parameter vector. </para>
</formalpara>
</para>
<para>
Implements <link linkend="_class_c_bite_opt_interface_1a2da6e8d4cfb2ecc8380b0cd220d1aeac">CBiteOptInterface</link>.</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01614">1614</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a7b849dbede3dc6be555a4197541fad51"/><section>
    <title>getRealValue()</title>
<indexterm><primary>getRealValue</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>getRealValue</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::getRealValue (const ptype *const NormParams, const int i) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function returns specified parameter&apos;s value taking into account minimal and maximal value range.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NormParams</entry><entry>
<para>Parameter vector of interest, in normalized scale. </para>
</entry>
                            </row>
                            <row>
<entry>i</entry><entry>
<para>Parameter index. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01803">1803</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a96f3b9e0a82d830bc34c17a5d0f8fa19"/><section>
    <title>getSelCount()</title>
<indexterm><primary>getSelCount</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>getSelCount</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::getSelCount ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns the number of selectors in use. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01649">1649</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1afd1006a5d6154064115a205b54ecaa8c"/><section>
    <title>getSelNames()</title>
<indexterm><primary>getSelNames</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>getSelNames</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const char ** <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::getSelNames ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns a pointer to an array of selector names. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01640">1640</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a2eaae4dd1761eaef42ead68546994c12"/><section>
    <title>getSels()</title>
<indexterm><primary>getSels</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>getSels</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> ** <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::getSels ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function returns a pointer to an array of selectors in use. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01631">1631</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a5c53a8eb3a4269a746d990282452d71e"/><section>
    <title>initBuffers()</title>
<indexterm><primary>initBuffers</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>initBuffers</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>virtual void <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::initBuffers (const int aParamCount, const int aPopSize, const int aCnsCount = <computeroutput>0</computeroutput>
, const int aObjCount = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Function initializes all common buffers, and &quot;PopSize&quot; variables. This function should be called when population&apos;s dimensions were changed. This function calls the <link linkend="_class_c_bite_opt_base_1aed59421f7102fb6921e4af39acfb8369">deleteBuffers()</link> function to release any derived classes&apos; allocated buffers. Allocates an additional vector for temporary use, which is at the same the last vector in the PopParams array. Derived classes should call this function of the base class.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aParamCount</entry><entry>
<para>New parameter count. </para>
</entry>
                            </row>
                            <row>
<entry>aPopSize</entry><entry>
<para>New population size. If &lt;= 0, population buffers will not be allocated. </para>
</entry>
                            </row>
                            <row>
<entry>aCnsCount</entry><entry>
<para>New constraint value count. </para>
</entry>
                            </row>
                            <row>
<entry>aObjCount</entry><entry>
<para>New objective value count. If equals 0, a rank element will not be auto-added. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_class_c_bite_pop_1a7488531e6b12accb61f068bbe654f580">CBitePop&lt; ptype &gt;</link>.</para>
<para>
Reimplemented in <link linkend="_class_c_n_m_seq_opt_1a523bc7d383b7a2cfeef8d2a4edc12b5f">CNMSeqOpt</link>, and <link linkend="_class_c_spher_opt_1a00c0facb71cb0ef24498e77ce68e6c04">CSpherOpt</link>.</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01684">1684</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base_a5c53a8eb3a4269a746d990282452d71e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a768362da5c773eea5a8649d44676eeed"/><section>
    <title>initCommonVars()</title>
<indexterm><primary>initCommonVars</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>initCommonVars</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::initCommonVars (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function initializes or resets common variables used by optimizers, to their default values, including value bounds, registered selectors, calls the <link linkend="_class_c_bite_pop_1a767519aa2fcc2667dc135a131bc9fd85">resetCurPopPos()</link> and <link linkend="_class_c_bite_opt_base_1ac2ee22488c24887a922a30dd15d898e6">updateDiffValues()</link> functions. This function is usually called in the init() function of an optimizer. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01717">1717</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base_a768362da5c773eea5a8649d44676eeed_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a8b1b8265762299edcd1714553ce2104d"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput><link linkend="_class_c_bite_opt_base">CBiteOptBase</link> &amp; <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::operator= (const <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt; &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteaux_8h_source_1l01586">1586</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base_a8b1b8265762299edcd1714553ce2104d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69"/><section>
    <title>select()</title>
<indexterm><primary>select</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>select</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><computeroutput>template&lt;class T&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::select (T &amp; Sel, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function performs choice selection based on the specified selector, and adds the selector to apply list.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sel</entry><entry>
<para>Selector object. </para>
</entry>
                            </row>
                            <row>
<entry>rnd</entry><entry>
<para>PRNG object. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01875">1875</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a9e49b98f5f6a2470d060282b2fd26a53"/><section>
    <title>updateBestCost()</title>
<indexterm><primary>updateBestCost</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>updateBestCost</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::updateBestCost (const double UpdCost, const double *const UpdValues, const int p = <computeroutput>-1</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function updates BestCost value and BestValues array, if the specified NewCost is better.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>UpdCost</entry><entry>
<para>New solution&apos;s cost. </para>
</entry>
                            </row>
                            <row>
<entry>UpdValues</entry><entry>
<para>New solution&apos;s values. The values should be in the &quot;real&quot; value range. </para>
</entry>
                            </row>
                            <row>
<entry>p</entry><entry>
<para>New solution&apos;s position within population. If &lt;0, position unknown, and the UpdCost should be evaluated. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01779">1779</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base_a9e49b98f5f6a2470d060282b2fd26a53_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1ac2ee22488c24887a922a30dd15d898e6"/><section>
    <title>updateDiffValues()</title>
<indexterm><primary>updateDiffValues</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>updateDiffValues</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>void <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::updateDiffValues ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function updates values in the DiffValues array, based on values in the MinValues and MaxValues arrays. </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01744">1744</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base_ac2ee22488c24887a922a30dd15d898e6_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a634a498e8ebd71bbf87fd1df02f178e0"/><section>
    <title>wrapParamReal()</title>
<indexterm><primary>wrapParamReal</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>wrapParamReal</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::wrapParamReal (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, const double v, const int i) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function wraps the specified parameter value so that it stays in the [MinValue; MaxValue] real range, by wrapping it over the boundaries using random operator. This operation improves convergence in comparison to clamping.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>v</entry><entry>
<para>Parameter value to wrap. </para>
</entry>
                            </row>
                            <row>
<entry>i</entry><entry>
<para>Parameter index. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Wrapped parameter value. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01819">1819</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_base_a634a498e8ebd71bbf87fd1df02f178e0_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_c_bite_opt_base_1a3922d6b29602643882d3212071a5e679"/><section>
    <title>ApplySels</title>
<indexterm><primary>ApplySels</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>ApplySels</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput><link linkend="_class_c_bite_sel_base">CBiteSelBase</link>* <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::ApplySels[<link linkend="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba">MaxApplySels</link>]<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select()</link> function calls during the optimize() function call. </para>
</para>

<para>Selectors that were used in </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01679">1679</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1afc2d6ec2c61d8f41bd39bb99632cf12e"/><section>
    <title>ApplySelsCount</title>
<indexterm><primary>ApplySelsCount</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>ApplySelsCount</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::ApplySelsCount<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>optimize() function call. </para>
</para>

<para>The number of <link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select()</link> calls performed during the </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01681">1681</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1acc0aa62d6125bd03d3baae22b0bf0467"/><section>
    <title>AvgCost</title>
<indexterm><primary>AvgCost</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>AvgCost</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::AvgCost<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>the optimizer. </para>
</para>

<para>Average cost in the latest batch. May not be used by </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01671">1671</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1adc4dfe02978fd4ed460f49c7e9a01633"/><section>
    <title>BestCost</title>
<indexterm><primary>BestCost</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>BestCost</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::BestCost<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Cost of the best parameter vector. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01666">1666</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a0fbab700b9d9c5c36d5ef664540efad0"/><section>
    <title>BestValues</title>
<indexterm><primary>BestValues</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>BestValues</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double* <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::BestValues<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Best parameter vector. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01665">1665</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a70f5211fb9521491b0e6a336e21dd7bc"/><section>
    <title>DiffValues</title>
<indexterm><primary>DiffValues</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>DiffValues</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double* <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::DiffValues<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>values. </para>
</para>

<para>Difference between maximal and minimal parameter </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01662">1662</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1ad5c0fe9c5312847158a6df8f4639de23"/><section>
    <title>DiffValuesI</title>
<indexterm><primary>DiffValuesI</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>DiffValuesI</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double* <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::DiffValuesI<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Inverse DiffValues. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01664">1664</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a48296b534db162fa0007ff83757cb84b"/><section>
    <title>HiBound</title>
<indexterm><primary>HiBound</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>HiBound</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::HiBound<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>be used by the optimizer. </para>
</para>

<para>Higher cost bound, for StallCount estimation. May not </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01669">1669</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba"/><section>
    <title>MaxApplySels</title>
<indexterm><primary>MaxApplySels</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>MaxApplySels</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const int <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::MaxApplySels = 32<computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>that can be used during a single optimize() function call. </para>
</para>

<para>The maximal number of selections </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01677">1677</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f"/><section>
    <title>MaxSelCount</title>
<indexterm><primary>MaxSelCount</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>MaxSelCount</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const int <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::MaxSelCount = 64<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>that can be added to *this object (for static arrays). </para>
</para>

<para>The maximal number of selectors </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01624">1624</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a9b100a7afa3bdcb3684383ff2df7867a"/><section>
    <title>MaxValues</title>
<indexterm><primary>MaxValues</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>MaxValues</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double* <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::MaxValues<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Maximal parameter values. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01661">1661</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a07d5b7c3007f79c7dc1f6106d9832dc6"/><section>
    <title>MinValues</title>
<indexterm><primary>MinValues</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>MinValues</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double* <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::MinValues<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Minimal parameter values. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01660">1660</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a0a97be5c42eed6fbaffba04c8720e6ce"/><section>
    <title>NewValues</title>
<indexterm><primary>NewValues</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>NewValues</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>double* <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::NewValues<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Temporary new parameter buffer, with real values. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01667">1667</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1ae9b284aca73ab2f6784f12174e391f7b"/><section>
    <title>SelCount</title>
<indexterm><primary>SelCount</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>SelCount</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::SelCount<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>The number of selectors in use. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01676">1676</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1a43d69538ae5aa7d78d8b3a3e821902b7"/><section>
    <title>SelNames</title>
<indexterm><primary>SelNames</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>SelNames</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>const char* <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::SelNames[<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Selector names. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01675">1675</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1aebc1904c883f8b4dafefeda608c4536b"/><section>
    <title>Sels</title>
<indexterm><primary>Sels</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>Sels</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput><link linkend="_class_c_bite_sel_base">CBiteSelBase</link>* <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::Sels[<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>indexed access in some cases. </para>
</para>

<para>Pointers to selector objects, for </para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01673">1673</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_opt_base_1ab756659a8ba09ba42ffa3d207564fdd8"/><section>
    <title>StallCount</title>
<indexterm><primary>StallCount</primary><secondary>CBiteOptBase&lt; ptype &gt;</secondary></indexterm>
<indexterm><primary>CBiteOptBase&lt; ptype &gt;</primary><secondary>StallCount</secondary></indexterm>
<computeroutput>template&lt;typename ptype&gt; </computeroutput><para><computeroutput>int <link linkend="_class_c_bite_opt_base">CBiteOptBase</link>&lt; ptype &gt;::StallCount<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>The number of iterations without improvement. </para>
</para>
<para>
Definition at line <link linkend="_biteaux_8h_source_1l01668">1668</link> of file <link linkend="_biteaux_8h_source">biteaux.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
_fcmaescpp/include/<link linkend="_biteaux_8h">biteaux.h</link></section>
</section>
