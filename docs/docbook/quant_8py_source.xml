<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_quant_8py_source" xml:lang="en-US">
<title>quant.py</title>
<indexterm><primary>examples/quant.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_quant_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1quant">00001</link> <emphasis role="stringliteral">&apos;&apos;&apos;</emphasis>
<anchor xml:id="_quant_8py_source_1l00002"/>00002 <emphasis role="stringliteral">Adapted&#32;from&#32;&quot;Example&#32;with&#32;a&#32;Single&#32;Qubit&#32;Variational&#32;Form&quot;</emphasis>
<anchor xml:id="_quant_8py_source_1l00003"/>00003 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quant_8py_source_1l00004"/>00004 <emphasis role="stringliteral">https://qiskit.org/textbook/ch-applications/vqe-molecules.html#Example-with-a-Single-Qubit-Variational-Form</emphasis>
<anchor xml:id="_quant_8py_source_1l00005"/>00005 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quant_8py_source_1l00006"/>00006 <emphasis role="stringliteral">Read&#32;https://qiskit.org/documentation/getting_started.html&#32;about&#32;setting&#32;up&#32;your&#32;environment</emphasis>
<anchor xml:id="_quant_8py_source_1l00007"/>00007 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quant_8py_source_1l00008"/>00008 <emphasis role="stringliteral">Install&#32;dependencies:</emphasis>
<anchor xml:id="_quant_8py_source_1l00009"/>00009 <emphasis role="stringliteral">pip&#32;install&#32;qiskit</emphasis>
<anchor xml:id="_quant_8py_source_1l00010"/>00010 <emphasis role="stringliteral">pip&#32;install&#32;qiskit-aer-gpu&#32;(doesn&apos;t&#32;work&#32;on&#32;AMD&#32;GPUs&#32;and&#32;is&#32;not&#32;required&#32;for&#32;executing&#32;this&#32;file)</emphasis>
<anchor xml:id="_quant_8py_source_1l00011"/>00011 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_quant_8py_source_1l00012"/>00012 <emphasis role="stringliteral">See&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Quant.adoc&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_quant_8py_source_1l00013"/>00013 <emphasis role="stringliteral">&apos;&apos;&apos;</emphasis>
<anchor xml:id="_quant_8py_source_1l00014"/>00014 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_quant_8py_source_1l00015"/>00015 
<anchor xml:id="_quant_8py_source_1l00016"/>00016 <emphasis role="keyword">from</emphasis>&#32;qiskit&#32;<emphasis role="keyword">import</emphasis>&#32;QuantumCircuit,&#32;assemble,&#32;Aer,&#32;transpile,&#32;ClassicalRegister,&#32;QuantumRegister
<anchor xml:id="_quant_8py_source_1l00017"/>00017 <emphasis role="keyword">from</emphasis>&#32;qiskit.algorithms.optimizers&#32;<emphasis role="keyword">import</emphasis>&#32;COBYLA
<anchor xml:id="_quant_8py_source_1l00018"/>00018 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_quant_8py_source_1l00019"/>00019 <emphasis role="keyword">from</emphasis>&#32;time&#32;<emphasis role="keyword">import</emphasis>&#32;perf_counter
<anchor xml:id="_quant_8py_source_1l00020"/>00020 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;Bite_cpp,&#32;dtime,&#32;wrapper
<anchor xml:id="_quant_8py_source_1l00021"/>00021 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds
<anchor xml:id="_quant_8py_source_1l00022"/>00022 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;retry,&#32;de,&#32;cmaes,&#32;bitecpp,&#32;cmaescpp,&#32;decpp
<anchor xml:id="_quant_8py_source_1l00023"/>00023 
<anchor xml:id="_quant_8py_source_1l00024"/><link linkend="_namespaceexamples_1_1quant_1a65c7b887b7f7367afcbfd16db3d1c42d">00024</link> backend&#32;=&#32;Aer.get_backend(<emphasis role="stringliteral">&quot;qasm_simulator&quot;</emphasis>,&#32;max_parallel_threads=1)
<anchor xml:id="_quant_8py_source_1l00025"/>00025 <emphasis role="comment">#backend.set_options(device=&apos;GPU&apos;)&#32;#&#32;if&#32;you&#32;switch&#32;GPU&#32;on,&#32;parallel&#32;simulation&#32;will&#32;crash</emphasis>
<anchor xml:id="_quant_8py_source_1l00026"/>00026 
<anchor xml:id="_quant_8py_source_1l00027"/>00027 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_quant_8py_source_1l00028"/>00028 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_quant_8py_source_1l00029"/>00029 
<anchor xml:id="_quant_8py_source_1l00030"/>00030 logger.remove()
<anchor xml:id="_quant_8py_source_1l00031"/><link linkend="_namespaceexamples_1_1quant_1a7cb7bd52f8064e1948012d4cf23aba31">00031</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_quant_8py_source_1l00032"/>00032 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_quant_8py_source_1l00033"/>00033 
<anchor xml:id="_quant_8py_source_1l00034"/><link linkend="_namespaceexamples_1_1quant_1ad4a54ae9ebc5e270133852a96105cf56">00034</link> NUM_SHOTS&#32;=&#32;10000
<anchor xml:id="_quant_8py_source_1l00035"/>00035 
<anchor xml:id="_quant_8py_source_1l00036"/><link linkend="_namespaceexamples_1_1quant_1a9072d95c70ea7d05b666c80254547034">00036</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1quant_1a9072d95c70ea7d05b666c80254547034">get_var_form</link>(params):
<anchor xml:id="_quant_8py_source_1l00037"/>00037 &#32;&#32;&#32;&#32;qr&#32;=&#32;QuantumRegister(1,&#32;name=<emphasis role="stringliteral">&quot;q&quot;</emphasis>)
<anchor xml:id="_quant_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;cr&#32;=&#32;ClassicalRegister(1,&#32;name=<emphasis role="stringliteral">&apos;c&apos;</emphasis>)
<anchor xml:id="_quant_8py_source_1l00039"/>00039 &#32;&#32;&#32;&#32;qc&#32;=&#32;QuantumCircuit(qr,&#32;cr)
<anchor xml:id="_quant_8py_source_1l00040"/>00040 &#32;&#32;&#32;&#32;qc.u(params[0],&#32;params[1],&#32;params[2],&#32;qr[0])
<anchor xml:id="_quant_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;qc.measure(qr,&#32;cr[0])
<anchor xml:id="_quant_8py_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qc
<anchor xml:id="_quant_8py_source_1l00043"/>00043 
<anchor xml:id="_quant_8py_source_1l00044"/><link linkend="_namespaceexamples_1_1quant_1a9757373bc2b175a335aa0d5f752dcd78">00044</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1quant_1a9757373bc2b175a335aa0d5f752dcd78">get_probability_distribution</link>(counts):
<anchor xml:id="_quant_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;output_distr&#32;=&#32;[v&#32;/&#32;NUM_SHOTS&#32;<emphasis role="keywordflow">for</emphasis>&#32;v&#32;<emphasis role="keywordflow">in</emphasis>&#32;counts.values()]
<anchor xml:id="_quant_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;len(output_distr)&#32;==&#32;1:
<anchor xml:id="_quant_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_distr.append(1&#32;-&#32;output_distr[0])
<anchor xml:id="_quant_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;output_distr
<anchor xml:id="_quant_8py_source_1l00049"/>00049 
<anchor xml:id="_quant_8py_source_1l00050"/><link linkend="_namespaceexamples_1_1quant_1ada40b79fd0f923b6c0b1757cdafd4603">00050</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1quant_1ada40b79fd0f923b6c0b1757cdafd4603">random_target_distr</link>():
<anchor xml:id="_quant_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;target_distr&#32;=&#32;np.random.rand(2)
<anchor xml:id="_quant_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;We&#32;now&#32;convert&#32;the&#32;random&#32;vector&#32;into&#32;a&#32;valid&#32;probability&#32;vector</emphasis>
<anchor xml:id="_quant_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;target_distr&#32;/=&#32;sum(target_distr)
<anchor xml:id="_quant_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;target_distr
<anchor xml:id="_quant_8py_source_1l00055"/>00055 
<anchor xml:id="_quant_8py_source_1l00056"/><link linkend="_namespaceexamples_1_1quant_1ab0e48a116239e90fe916567c6a16fb23">00056</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1quant_1ab0e48a116239e90fe916567c6a16fb23">objective_function</link>(params,&#32;target_distr):
<anchor xml:id="_quant_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Obtain&#32;a&#32;quantum&#32;circuit&#32;instance&#32;from&#32;the&#32;parameters</emphasis>
<anchor xml:id="_quant_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;qc&#32;=&#32;<link linkend="_namespaceexamples_1_1quant_1a9072d95c70ea7d05b666c80254547034">get_var_form</link>(params)
<anchor xml:id="_quant_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Execute&#32;the&#32;quantum&#32;circuit&#32;to&#32;obtain&#32;the&#32;probability&#32;distribution&#32;associated&#32;with&#32;the&#32;current&#32;parameters</emphasis>
<anchor xml:id="_quant_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;t_qc&#32;=&#32;transpile(qc,&#32;backend)
<anchor xml:id="_quant_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;qobj&#32;=&#32;assemble(t_qc,&#32;shots=NUM_SHOTS)
<anchor xml:id="_quant_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;result&#32;=&#32;backend.run(qobj).result()
<anchor xml:id="_quant_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Obtain&#32;the&#32;counts&#32;for&#32;each&#32;measured&#32;state,&#32;and&#32;convert&#32;those&#32;counts&#32;into&#32;a&#32;probability&#32;vector</emphasis>
<anchor xml:id="_quant_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;output_distr&#32;=&#32;<link linkend="_namespaceexamples_1_1quant_1a9757373bc2b175a335aa0d5f752dcd78">get_probability_distribution</link>(result.get_counts(qc))
<anchor xml:id="_quant_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Calculate&#32;the&#32;cost&#32;as&#32;the&#32;distance&#32;between&#32;the&#32;output&#32;distribution&#32;and&#32;the&#32;target&#32;distribution</emphasis>
<anchor xml:id="_quant_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;cost&#32;=&#32;sum([np.abs(output_distr[i]&#32;-&#32;target_distr[i])&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(2)])
<anchor xml:id="_quant_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cost
<anchor xml:id="_quant_8py_source_1l00068"/>00068 
<anchor xml:id="_quant_8py_source_1l00069"/><link linkend="_classexamples_1_1quant_1_1_fitness">00069</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1quant_1_1_fitness">Fitness</link>(object):
<anchor xml:id="_quant_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00071"/><link linkend="_classexamples_1_1quant_1_1_fitness_1ab9f14ed15a75c6f2dd7a8031eadd7ddf">00071</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1quant_1_1_fitness_1ab9f14ed15a75c6f2dd7a8031eadd7ddf">__init__</link>(self,&#32;target_distr):
<anchor xml:id="_quant_8py_source_1l00072"/><link linkend="_classexamples_1_1quant_1_1_fitness_1ae776c81b56af72978888efa1e430e0c1">00072</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1quant_1_1_fitness_1ae776c81b56af72978888efa1e430e0c1">target_distr</link>&#32;=&#32;target_distr
<anchor xml:id="_quant_8py_source_1l00073"/><link linkend="_classexamples_1_1quant_1_1_fitness_1a505efb4be4047efca40ea53ae1b3b1c1">00073</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1quant_1_1_fitness_1a505efb4be4047efca40ea53ae1b3b1c1">bounds</link>&#32;=&#32;Bounds([0]*3,&#32;[2]*3)&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00075"/><link linkend="_classexamples_1_1quant_1_1_fitness_1a83ad6e774865c0d543ab7f356378e48a">00075</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1quant_1_1_fitness_1a83ad6e774865c0d543ab7f356378e48a">__call__</link>(self,&#32;x):
<anchor xml:id="_quant_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;<link linkend="_namespaceexamples_1_1quant_1ab0e48a116239e90fe916567c6a16fb23">objective_function</link>(x,&#32;self.<link linkend="_classexamples_1_1quant_1_1_fitness_1ae776c81b56af72978888efa1e430e0c1">target_distr</link>)
<anchor xml:id="_quant_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;np.isfinite(y)&#32;<emphasis role="keywordflow">or</emphasis>&#32;y&#32;&gt;&#32;1E9:&#32;
<anchor xml:id="_quant_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1E9
<anchor xml:id="_quant_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_quant_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y
<anchor xml:id="_quant_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_quant_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(str(ex))&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1E9
<anchor xml:id="_quant_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00086"/><link linkend="_namespaceexamples_1_1quant_1a27dda8d7474d2d824515d4e27ee7c1e4">00086</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1quant_1a27dda8d7474d2d824515d4e27ee7c1e4">opt_differential_evolution_loop</link>(fits):
<anchor xml:id="_quant_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;t0&#32;=&#32;perf_counter()
<anchor xml:id="_quant_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;distances&#32;=&#32;[]
<anchor xml:id="_quant_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;fit&#32;<emphasis role="keywordflow">in</emphasis>&#32;fits:&#32;
<anchor xml:id="_quant_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;de.minimize(fit,&#32;3,&#32;fit.bounds,&#32;max_evaluations&#32;=&#32;1000,&#32;
<anchor xml:id="_quant_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_fitness&#32;=&#32;0.00001,&#32;workers=16)
<anchor xml:id="_quant_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;de&#32;time&quot;</emphasis>,&#32;dtime(t0),&#32;<emphasis role="stringliteral">&quot;distance&quot;</emphasis>,&#32;ret.fun)
<anchor xml:id="_quant_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distances.append(ret.fun)
<anchor xml:id="_quant_8py_source_1l00094"/>00094 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;de&#32;mean&#32;distance&#32;=&#32;&quot;</emphasis>&#32;+&#32;&#32;str(np.mean(distances)))
<anchor xml:id="_quant_8py_source_1l00095"/>00095 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;de&#32;std&#32;distance&#32;=&#32;&quot;</emphasis>&#32;+&#32;&#32;str(np.std(distances)))
<anchor xml:id="_quant_8py_source_1l00096"/>00096 
<anchor xml:id="_quant_8py_source_1l00097"/><link linkend="_namespaceexamples_1_1quant_1a308d4239e56d47cf999cd1b6ed9925f5">00097</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1quant_1a308d4239e56d47cf999cd1b6ed9925f5">opt_cmaes_loop</link>(fits):
<anchor xml:id="_quant_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;t0&#32;=&#32;perf_counter()
<anchor xml:id="_quant_8py_source_1l00099"/>00099 &#32;&#32;&#32;&#32;distances&#32;=&#32;[]
<anchor xml:id="_quant_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;fit&#32;<emphasis role="keywordflow">in</emphasis>&#32;fits:&#32;
<anchor xml:id="_quant_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;cmaes.minimize(fit,&#32;fit.bounds,&#32;input_sigma=0.7,&#32;max_evaluations&#32;=&#32;1000,&#32;
<anchor xml:id="_quant_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_fitness&#32;=&#32;0.00001,&#32;workers=16)
<anchor xml:id="_quant_8py_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;cmaes&#32;time&quot;</emphasis>,&#32;dtime(t0),&#32;<emphasis role="stringliteral">&quot;distance&quot;</emphasis>,&#32;ret.fun)
<anchor xml:id="_quant_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distances.append(ret.fun)
<anchor xml:id="_quant_8py_source_1l00105"/>00105 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;cmaes&#32;mean&#32;distance&#32;=&#32;&quot;</emphasis>&#32;+&#32;&#32;str(np.mean(distances)))
<anchor xml:id="_quant_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;cmaes&#32;std&#32;distance&#32;=&#32;&quot;</emphasis>&#32;+&#32;&#32;str(np.std(distances)))
<anchor xml:id="_quant_8py_source_1l00107"/>00107 &#32;
<anchor xml:id="_quant_8py_source_1l00108"/><link linkend="_namespaceexamples_1_1quant_1a9bdd19a5ca466377aa79f0d5eb64da2a">00108</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1quant_1a9bdd19a5ca466377aa79f0d5eb64da2a">opt_biteopt_loop</link>(fits):
<anchor xml:id="_quant_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;t0&#32;=&#32;perf_counter()
<anchor xml:id="_quant_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;distances&#32;=&#32;[]
<anchor xml:id="_quant_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;fit&#32;<emphasis role="keywordflow">in</emphasis>&#32;fits:&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;retry.minimize(fit,&#32;fit.bounds,
<anchor xml:id="_quant_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries=16,&#32;optimizer=<link linkend="_classfcmaes_1_1optimizer_1_1_bite__cpp">Bite_cpp</link>(100),&#32;workers=16)
<anchor xml:id="_quant_8py_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;bite&#32;time&quot;</emphasis>,&#32;dtime(t0),&#32;<emphasis role="stringliteral">&quot;distance&quot;</emphasis>,&#32;ret.fun)
<anchor xml:id="_quant_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distances.append(ret.fun)
<anchor xml:id="_quant_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;bite&#32;mean&#32;distance&#32;=&#32;&quot;</emphasis>&#32;+&#32;&#32;str(np.mean(distances)))
<anchor xml:id="_quant_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;bite&#32;std&#32;distance&#32;=&#32;&quot;</emphasis>&#32;+&#32;&#32;str(np.std(distances)))
<anchor xml:id="_quant_8py_source_1l00118"/>00118 
<anchor xml:id="_quant_8py_source_1l00119"/><link linkend="_namespaceexamples_1_1quant_1a59120aaeb10828e4a2d789db7e1895af">00119</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1quant_1a59120aaeb10828e4a2d789db7e1895af">opt_COBYLA_evolution_loop</link>(fits):
<anchor xml:id="_quant_8py_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Initialize&#32;the&#32;COBYLA&#32;optimizer</emphasis>
<anchor xml:id="_quant_8py_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Create&#32;the&#32;initial&#32;parameters&#32;(noting&#32;that&#32;our&#32;single&#32;qubit&#32;variational&#32;form&#32;has&#32;3&#32;parameters)</emphasis>
<anchor xml:id="_quant_8py_source_1l00122"/>00122 &#32;&#32;&#32;&#32;t0&#32;=&#32;perf_counter()
<anchor xml:id="_quant_8py_source_1l00123"/>00123 &#32;&#32;&#32;&#32;distances&#32;=&#32;[]
<anchor xml:id="_quant_8py_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;fit&#32;<emphasis role="keywordflow">in</emphasis>&#32;fits:
<anchor xml:id="_quant_8py_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;params&#32;=&#32;np.random.rand(3)
<anchor xml:id="_quant_8py_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optimizer&#32;=&#32;COBYLA(maxiter=50000,&#32;tol=0.00001)
<anchor xml:id="_quant_8py_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;optimizer.minimize(fun=fit,&#32;x0=params)
<anchor xml:id="_quant_8py_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;COBYLA&#32;time&quot;</emphasis>,&#32;dtime(t0),&#32;<emphasis role="stringliteral">&quot;distance&quot;</emphasis>,&#32;ret.fun)
<anchor xml:id="_quant_8py_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distances.append(ret.fun)
<anchor xml:id="_quant_8py_source_1l00130"/>00130 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;COBYLA&#32;mean&#32;distance&#32;=&#32;&quot;</emphasis>&#32;+&#32;&#32;str(np.mean(distances)))
<anchor xml:id="_quant_8py_source_1l00131"/>00131 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;COBYLA&#32;std&#32;distance&#32;=&#32;&quot;</emphasis>&#32;+&#32;&#32;str(np.std(distances)))
<anchor xml:id="_quant_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00133"/><link linkend="_namespaceexamples_1_1quant_1aa8a413cdec1ed5fb8fd269635d471ce2">00133</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1quant_1aa8a413cdec1ed5fb8fd269635d471ce2">find_COBYLA_weakness</link>():
<anchor xml:id="_quant_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis>fitness(x):
<anchor xml:id="_quant_8py_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;params&#32;=&#32;x[:3]&#32;<emphasis role="comment">#&#32;use&#32;first&#32;three&#32;decision&#32;variables&#32;as&#32;guess&#32;for&#32;COBYLA</emphasis>
<anchor xml:id="_quant_8py_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;target_distr&#32;=&#32;&#32;x[3:]&#32;<emphasis role="comment">#&#32;use&#32;two&#32;decision&#32;variables&#32;as&#32;target</emphasis>
<anchor xml:id="_quant_8py_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;min(target_distr)&#32;&lt;&#32;0.01:&#32;<emphasis role="keywordflow">return</emphasis>&#32;0&#32;<emphasis role="comment">#&#32;avoid&#32;division&#32;by&#32;0</emphasis>
<anchor xml:id="_quant_8py_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;target_distr&#32;/=&#32;sum(target_distr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fit&#32;=&#32;<link linkend="_classexamples_1_1quant_1_1_fitness">Fitness</link>(target_distr)
<anchor xml:id="_quant_8py_source_1l00141"/>00141 
<anchor xml:id="_quant_8py_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;COBYLA(maxiter=50000,&#32;tol=0.00001).minimize(fun=fit,&#32;x0=params)
<anchor xml:id="_quant_8py_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;bitecpp.minimize(fit,&#32;fit.bounds,&#32;x0=params,&#32;max_evaluations=1000,&#32;M=6)</emphasis>
<anchor xml:id="_quant_8py_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;bitecpp.minimize(fit,&#32;fit.bounds,&#32;x0=params,&#32;max_evaluations=300,&#32;stop_fitness=0.05)</emphasis>
<anchor xml:id="_quant_8py_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;cmaescpp.minimize(fit,&#32;fit.bounds,&#32;x0=params,&#32;max_evaluations=300,&#32;stop_fitness=0.05)</emphasis>
<anchor xml:id="_quant_8py_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;decpp.minimize(fit,&#32;3,&#32;fit.bounds,&#32;max_evaluations=300,&#32;stop_fitness=0.05)</emphasis>
<anchor xml:id="_quant_8py_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-ret.fun&#32;<emphasis role="comment">#&#32;we&#32;maximize&#32;the&#32;distance</emphasis>
<anchor xml:id="_quant_8py_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00150"/>00150 &#32;&#32;&#32;&#32;bounds&#32;=&#32;Bounds([0]*5,&#32;[2]*3&#32;+&#32;[1]*2)
<anchor xml:id="_quant_8py_source_1l00151"/>00151 &#32;&#32;&#32;&#32;ret&#32;=&#32;de.minimize(<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">wrapper</link>(fitness),&#32;5,&#32;bounds,&#32;max_evaluations&#32;=&#32;300,&#32;workers=16)
<anchor xml:id="_quant_8py_source_1l00152"/>00152 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;worst&#32;COBYLA&#32;distance&#32;=&#32;&quot;</emphasis>&#32;+&#32;&#32;str(ret.fun))
<anchor xml:id="_quant_8py_source_1l00153"/>00153 &#32;
<anchor xml:id="_quant_8py_source_1l00154"/>00154 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_quant_8py_source_1l00155"/>00155 &#32;&#32;&#32;&#32;
<anchor xml:id="_quant_8py_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;generate&#32;Fitness&#32;objects&#32;associated&#32;to&#32;random&#32;target&#32;distributions</emphasis>
<anchor xml:id="_quant_8py_source_1l00157"/><link linkend="_namespaceexamples_1_1quant_1a7749e368860b241dc9bdd4d28b06f835">00157</link> &#32;&#32;&#32;&#32;fits&#32;=&#32;[<link linkend="_classexamples_1_1quant_1_1_fitness">Fitness</link>(<link linkend="_namespaceexamples_1_1quant_1ada40b79fd0f923b6c0b1757cdafd4603">random_target_distr</link>())&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(10)]
<anchor xml:id="_quant_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1quant_1a27dda8d7474d2d824515d4e27ee7c1e4">opt_differential_evolution_loop</link>(fits)
<anchor xml:id="_quant_8py_source_1l00159"/>00159 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1quant_1a308d4239e56d47cf999cd1b6ed9925f5">opt_cmaes_loop</link>(fits)
<anchor xml:id="_quant_8py_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1quant_1a9bdd19a5ca466377aa79f0d5eb64da2a">opt_biteopt_loop</link>(fits)
<anchor xml:id="_quant_8py_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1quant_1a59120aaeb10828e4a2d789db7e1895af">opt_COBYLA_evolution_loop</link>(fits)
<anchor xml:id="_quant_8py_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;find_COBYLA_weakness()&#32;#&#32;check&#32;for&#32;weaknesses&#32;of&#32;COBYLA</emphasis>
<anchor xml:id="_quant_8py_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
</programlisting></section>
