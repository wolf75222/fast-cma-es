<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_cmaescpp_8py_source" xml:lang="en-US">
<title>cmaescpp.py</title>
<indexterm><primary>fcmaes/cmaescpp.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_cmaescpp_8py_source_1l00001"/><link linkend="_namespacefcmaes_1_1cmaescpp">00001</link> <emphasis role="comment">#&#32;-*-&#32;coding:&#32;utf-8&#32;-*-</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00002"/>00002 <emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00003"/>00003 <emphasis role="stringliteral">=============================================================================</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00004"/>00004 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00005"/>00005 <emphasis role="stringliteral">&#32;Fast&#32;CMA-ES&#32;-&#32;version&#32;1.6.11</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00006"/>00006 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00007"/>00007 <emphasis role="stringliteral">&#32;(c)&#32;2025&#32;–&#32;Dietmar&#32;Wolz</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00008"/>00008 <emphasis role="stringliteral">&#32;(c)&#32;2025&#32;–&#32;Latitude</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00009"/>00009 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00010"/>00010 <emphasis role="stringliteral">&#32;License:&#32;MIT</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00011"/>00011 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00012"/>00012 <emphasis role="stringliteral">&#32;File:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00013"/>00013 <emphasis role="stringliteral">&#32;&#32;-&#32;cmaescpp.py</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00014"/>00014 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00015"/>00015 <emphasis role="stringliteral">&#32;Description:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00016"/>00016 <emphasis role="stringliteral">&#32;&#32;-&#32;Eigen&#32;based&#32;implementation&#32;of&#32;active&#32;CMA-ES.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00017"/>00017 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00018"/>00018 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00019"/>00019 <emphasis role="stringliteral">&#32;Authors:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00020"/>00020 <emphasis role="stringliteral">&#32;&#32;-&#32;Dietmar&#32;Wolz</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00021"/>00021 <emphasis role="stringliteral">&#32;&#32;-&#32;romain.despoullains@latitude.eu</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00022"/>00022 <emphasis role="stringliteral">&#32;&#32;-&#32;corentin.generet@latitude.eu</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00023"/>00023 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00024"/>00024 <emphasis role="stringliteral">&#32;References:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00025"/>00025 <emphasis role="stringliteral">&#32;&#32;-&#32;[1]&#32;https://github.com/dietmarwo/fast-cma-es</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00026"/>00026 <emphasis role="stringliteral">&#32;&#32;-&#32;[2]&#32;http://cma.gforge.inria.fr/cmaes.m</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00027"/>00027 <emphasis role="stringliteral">&#32;&#32;-&#32;[3]&#32;https://www.researchgate.net/publication/227050324_The_CMA_Evolution_Strategy_A_Comparing_Review</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00028"/>00028 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00029"/>00029 <emphasis role="stringliteral">&#32;Documentation:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00030"/>00030 <emphasis role="stringliteral">&#32;&#32;-</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00031"/>00031 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00032"/>00032 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00033"/>00033 <emphasis role="stringliteral">=============================================================================</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00034"/>00034 <emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00035"/>00035 
<anchor xml:id="_cmaescpp_8py_source_1l00036"/>00036 
<anchor xml:id="_cmaescpp_8py_source_1l00037"/>00037 <emphasis role="keyword">import</emphasis>&#32;sys
<anchor xml:id="_cmaescpp_8py_source_1l00038"/>00038 <emphasis role="keyword">import</emphasis>&#32;os
<anchor xml:id="_cmaescpp_8py_source_1l00039"/>00039 <emphasis role="keyword">import</emphasis>&#32;math
<anchor xml:id="_cmaescpp_8py_source_1l00040"/>00040 <emphasis role="keyword">import</emphasis>&#32;ctypes&#32;<emphasis role="keyword">as</emphasis>&#32;ct
<anchor xml:id="_cmaescpp_8py_source_1l00041"/>00041 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_cmaescpp_8py_source_1l00042"/>00042 <emphasis role="keyword">from</emphasis>&#32;numpy.random&#32;<emphasis role="keyword">import</emphasis>&#32;PCG64DXSM,&#32;Generator
<anchor xml:id="_cmaescpp_8py_source_1l00043"/>00043 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;OptimizeResult,&#32;Bounds
<anchor xml:id="_cmaescpp_8py_source_1l00044"/>00044 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1evaluator">fcmaes.evaluator</link>&#32;<emphasis role="keyword">import</emphasis>&#32;_check_bounds,&#32;_get_bounds,&#32;mo_call_back_type,&#32;callback_so,&#32;callback_par,&#32;call_back_par,&#32;parallel,&#32;libcmalib
<anchor xml:id="_cmaescpp_8py_source_1l00045"/>00045 
<anchor xml:id="_cmaescpp_8py_source_1l00046"/>00046 <emphasis role="keyword">from</emphasis>&#32;typing&#32;<emphasis role="keyword">import</emphasis>&#32;Optional,&#32;Callable,&#32;Union
<anchor xml:id="_cmaescpp_8py_source_1l00047"/>00047 <emphasis role="keyword">from</emphasis>&#32;numpy.typing&#32;<emphasis role="keyword">import</emphasis>&#32;ArrayLike
<anchor xml:id="_cmaescpp_8py_source_1l00048"/>00048 
<anchor xml:id="_cmaescpp_8py_source_1l00049"/>00049 os.environ[<emphasis role="stringliteral">&apos;MKL_DEBUG_CPU_TYPE&apos;</emphasis>]&#32;=&#32;<emphasis role="stringliteral">&apos;5&apos;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00050"/>00050 
<anchor xml:id="_cmaescpp_8py_source_1l00051"/>00051 <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespacefcmaes_1_1cmaescpp_1a625d259f091b81159e59b47837722d4e">minimize</link>(fun:&#32;Callable[[ArrayLike],&#32;float],&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds:&#32;Optional[Bounds]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x0:&#32;Optional[ArrayLike]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,
<anchor xml:id="_cmaescpp_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_sigma:&#32;Optional[Union[float,&#32;ArrayLike,&#32;Callable]]&#32;=&#32;0.3,
<anchor xml:id="_cmaescpp_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize:&#32;Optional[int]&#32;=&#32;31,
<anchor xml:id="_cmaescpp_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations:&#32;Optional[int]&#32;&#32;=&#32;100000,
<anchor xml:id="_cmaescpp_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accuracy:&#32;Optional[float]&#32;=&#32;1.0,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_fitness:&#32;Optional[float]&#32;=&#32;-np.inf,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_hist:&#32;Optional[float]&#32;=&#32;-1,
<anchor xml:id="_cmaescpp_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg:&#32;Optional[Generator]&#32;=&#32;Generator(PCG64DXSM()),
<anchor xml:id="_cmaescpp_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;runid:&#32;Optional[int]&#32;=&#32;0,
<anchor xml:id="_cmaescpp_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers:&#32;Optional[int]&#32;=&#32;1,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalize:&#32;Optional[bool]&#32;=&#32;<emphasis role="keyword">True</emphasis>,
<anchor xml:id="_cmaescpp_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delayed_update:&#32;Optional[bool]&#32;=&#32;<emphasis role="keyword">True</emphasis>,
<anchor xml:id="_cmaescpp_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_gap:&#32;Optional[int]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;-&gt;&#32;OptimizeResult:
<anchor xml:id="_cmaescpp_8py_source_1l00067"/>00067 
<anchor xml:id="_cmaescpp_8py_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00069"/>00069 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Optimizes&#32;a&#32;given&#32;objective&#32;function&#32;using&#32;an&#32;adaptive&#32;CMA-ES&#32;algorithm&#32;under&#32;specified&#32;constraints</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00070"/>00070 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;and&#32;parameters.&#32;This&#32;method&#32;allows&#32;for&#32;advanced&#32;customization&#32;in&#32;algorithm&#32;behavior,&#32;enabling</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00071"/>00071 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;stochastic&#32;optimization&#32;of&#32;complex,&#32;possibly&#32;non-linear&#32;functions.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00072"/>00072 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00073"/>00073 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00074"/>00074 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fun&#32;(Callable[[ArrayLike],&#32;float]):&#32;The&#32;objective&#32;function&#32;to&#32;be&#32;minimized.&#32;It&#32;must&#32;accept&#32;a</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00075"/>00075 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;single&#32;argument,&#32;the&#32;candidate&#32;solution,&#32;and&#32;return&#32;a&#32;scalar&#32;fitness&#32;value.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00076"/>00076 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds&#32;(Optional[Bounds]):&#32;The&#32;bounds&#32;within&#32;which&#32;the&#32;optimization&#32;search&#32;is&#32;conducted.&#32;If&#32;None,</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00077"/>00077 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;no&#32;boundaries&#32;are&#32;enforced.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00078"/>00078 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x0&#32;(Optional[ArrayLike]):&#32;Initial&#32;guess&#32;for&#32;the&#32;solution.&#32;If&#32;None,&#32;an&#32;initial&#32;guess&#32;will&#32;be&#32;randomly&#32;generated.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00079"/>00079 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_sigma&#32;(Optional[Union[float,&#32;ArrayLike,&#32;Callable]]):&#32;Initial&#32;step&#32;size&#32;for&#32;the&#32;search,&#32;defining</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00080"/>00080 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strategy&#32;parameter&#32;for&#32;standard&#32;deviations.&#32;Can&#32;also&#32;be&#32;an&#32;array&#32;indicating&#32;sigma&#32;per&#32;dimension</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00081"/>00081 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;or&#32;a&#32;callable&#32;returning&#32;sigma.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00082"/>00082 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;(Optional[int]):&#32;Size&#32;of&#32;the&#32;population&#32;per&#32;generation.&#32;Affects&#32;the&#32;sampling&#32;process&#32;in&#32;each&#32;iteration.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00083"/>00083 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;(Optional[int]):&#32;Maximum&#32;number&#32;of&#32;function&#32;evaluations&#32;to&#32;perform&#32;before&#32;termination.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00084"/>00084 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accuracy&#32;(Optional[float]):&#32;Desired&#32;accuracy&#32;of&#32;the&#32;solution&#32;or&#32;tolerance&#32;level&#32;for&#32;convergence&#32;checks.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00085"/>00085 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_fitness&#32;(Optional[float]):&#32;Threshold&#32;fitness&#32;value.&#32;If&#32;reached,&#32;the&#32;optimization&#32;process&#32;halts.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00086"/>00086 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_hist&#32;(Optional[float]):&#32;Historical&#32;improvement-based&#32;stopping&#32;condition.&#32;If&#32;None&#32;or&#32;negative,&#32;this</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00087"/>00087 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;criterion&#32;is&#32;disabled.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00088"/>00088 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg&#32;(Optional[Generator]):&#32;Random&#32;number&#32;generator&#32;for&#32;stochastic&#32;sampling.&#32;Provides&#32;reproducibility</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00089"/><link linkend="_namespacefcmaes_1_1cmaescpp_1a625d259f091b81159e59b47837722d4e">00089</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;when&#32;a&#32;specific&#32;generator&#32;seed&#32;is&#32;used.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00090"/>00090 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;runid&#32;(Optional[int]):&#32;Unique&#32;identifier&#32;for&#32;the&#32;optimization&#32;run,&#32;allowing&#32;for&#32;comparisons&#32;across&#32;runs.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00091"/>00091 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers&#32;(Optional[int]):&#32;Number&#32;of&#32;worker&#32;threads/processes&#32;for&#32;parallel&#32;evaluation&#32;of&#32;the&#32;objective</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00092"/>00092 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;function.&#32;If&#32;set&#32;to&#32;0,&#32;it&#32;defaults&#32;to&#32;non-parallel&#32;execution.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00093"/>00093 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalize&#32;(Optional[bool]):&#32;Indicates&#32;whether&#32;solutions&#32;are&#32;normalized&#32;during&#32;the&#32;optimization&#32;process.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00094"/>00094 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delayed_update&#32;(Optional[bool]):&#32;Specifies&#32;whether&#32;the&#32;algorithm&#32;updates&#32;the&#32;internal&#32;state&#32;of&#32;the</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00095"/>00095 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;covariance&#32;matrix&#32;immediately&#32;or&#32;after&#32;a&#32;delay.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00096"/>00096 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_gap&#32;(Optional[int]):&#32;Gap&#32;between&#32;covariance&#32;matrix&#32;updates.&#32;If&#32;None,&#32;a&#32;default&#32;gap&#32;is&#32;used.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00097"/>00097 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00098"/>00098 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00099"/>00099 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OptimizeResult:&#32;An&#32;object&#32;containing&#32;the&#32;optimization&#32;result,&#32;including&#32;the&#32;best&#32;solution&#32;`x`,&#32;the</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00100"/>00100 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;of&#32;the&#32;objective&#32;function&#32;`fun`&#32;at&#32;`x`,&#32;the&#32;number&#32;of&#32;function&#32;evaluations&#32;`nfev`,&#32;the&#32;number</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00101"/>00101 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;of&#32;iterations&#32;performed&#32;`nit`,&#32;the&#32;optimizer&apos;s&#32;termination&#32;status&#32;`status`,&#32;and&#32;a&#32;boolean&#32;`success`</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00102"/>00102 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indicating&#32;whether&#32;the&#32;optimization&#32;was&#32;successful.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00103"/>00103 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00105"/>00105 &#32;&#32;&#32;&#32;lower,&#32;upper,&#32;guess&#32;=&#32;_check_bounds(bounds,&#32;x0,&#32;rg)&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;dim&#32;=&#32;guess.size&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;workers&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers&#32;=&#32;0
<anchor xml:id="_cmaescpp_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;mu&#32;=&#32;int(popsize/2)
<anchor xml:id="_cmaescpp_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;callable(input_sigma):
<anchor xml:id="_cmaescpp_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_sigma=input_sigma()
<anchor xml:id="_cmaescpp_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;np.ndim(input_sigma)&#32;==&#32;0:
<anchor xml:id="_cmaescpp_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_sigma&#32;=&#32;[input_sigma]&#32;*&#32;dim
<anchor xml:id="_cmaescpp_8py_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;stop_hist&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_hist&#32;=&#32;-1;
<anchor xml:id="_cmaescpp_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;array_type&#32;=&#32;ct.c_double&#32;*&#32;dim&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;c_callback&#32;=&#32;mo_call_back_type(<link linkend="_classfcmaes_1_1evaluator_1_1callback__so">callback_so</link>(fun,&#32;dim))
<anchor xml:id="_cmaescpp_8py_source_1l00118"/>00118 &#32;&#32;&#32;&#32;parfun&#32;=&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;delayed_update&#32;==&#32;<emphasis role="keyword">True</emphasis>&#32;<emphasis role="keywordflow">or</emphasis>&#32;workers&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">or</emphasis>&#32;workers&#32;&lt;=&#32;1&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_classfcmaes_1_1evaluator_1_1parallel">parallel</link>(fun,&#32;workers)
<anchor xml:id="_cmaescpp_8py_source_1l00119"/>00119 &#32;&#32;&#32;&#32;c_callback_par&#32;=&#32;call_back_par(<link linkend="_classfcmaes_1_1evaluator_1_1callback__par">callback_par</link>(fun,&#32;parfun))
<anchor xml:id="_cmaescpp_8py_source_1l00120"/>00120 &#32;&#32;&#32;&#32;res&#32;=&#32;np.empty(dim+4)
<anchor xml:id="_cmaescpp_8py_source_1l00121"/>00121 &#32;&#32;&#32;&#32;res_p&#32;=&#32;res.ctypes.data_as(ct.POINTER(ct.c_double))
<anchor xml:id="_cmaescpp_8py_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacefcmaes_1_1cmaescpp_1a869b80a999c8dbaafec9a1e836b441b7">optimizeACMA_C</link>(runid,&#32;c_callback,&#32;c_callback_par,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim,&#32;array_type(*guess),&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;lower&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">else</emphasis>&#32;array_type(*lower),&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;upper&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">else</emphasis>&#32;array_type(*upper),&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type(*input_sigma),&#32;max_evaluations,&#32;stop_fitness,&#32;stop_hist,&#32;mu,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize,&#32;accuracy,&#32;int(rg.uniform(0,&#32;2**32&#32;-&#32;1)),&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalize,&#32;delayed_update,&#32;-1&#32;<emphasis role="keywordflow">if</emphasis>&#32;update_gap&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">else</emphasis>&#32;update_gap,
<anchor xml:id="_cmaescpp_8py_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers,&#32;res_p)
<anchor xml:id="_cmaescpp_8py_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;res[:dim]
<anchor xml:id="_cmaescpp_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val&#32;=&#32;res[dim]
<anchor xml:id="_cmaescpp_8py_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals&#32;=&#32;int(res[dim+1])
<anchor xml:id="_cmaescpp_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterations&#32;=&#32;int(res[dim+2])
<anchor xml:id="_cmaescpp_8py_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop&#32;=&#32;int(res[dim+3])
<anchor xml:id="_cmaescpp_8py_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;OptimizeResult(x=x,&#32;fun=val,&#32;nfev=evals,&#32;nit=iterations,&#32;status=stop,&#32;success=<emphasis role="keyword">True</emphasis>)
<anchor xml:id="_cmaescpp_8py_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_cmaescpp_8py_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;OptimizeResult(x=<emphasis role="keywordtype">None</emphasis>,&#32;fun=sys.float_info.max,&#32;nfev=0,&#32;nit=0,&#32;status=-1,&#32;success=<emphasis role="keyword">False</emphasis>)
<anchor xml:id="_cmaescpp_8py_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;parfun&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parfun.stop()
<anchor xml:id="_cmaescpp_8py_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res
<anchor xml:id="_cmaescpp_8py_source_1l00142"/>00142 
<anchor xml:id="_cmaescpp_8py_source_1l00143"/>00143 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c">ACMA_C</link>:
<anchor xml:id="_cmaescpp_8py_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00145"/>00145 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Implementation&#32;of&#32;the&#32;ACMA-C&#32;algorithm&#32;for&#32;optimization.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00146"/>00146 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00147"/>00147 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;This&#32;class&#32;provides&#32;functionalities&#32;for&#32;using&#32;the&#32;ACMA-C&#32;optimization&#32;algorithm,</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00148"/>00148 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;enabling&#32;the&#32;user&#32;to&#32;define&#32;the&#32;problem&apos;s&#32;dimensions,&#32;bounds,&#32;initial&#32;guesses,</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00149"/>00149 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;population&#32;size,&#32;and&#32;more.&#32;It&#32;integrates&#32;with&#32;ctypes&#32;to&#32;leverage&#32;C-based</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00150"/>00150 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;implementations&#32;for&#32;efficiency.&#32;The&#32;algorithm&#32;supports&#32;customizable&#32;stopping&#32;criteria</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00151"/>00151 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;such&#32;as&#32;fitness&#32;value&#32;thresholds&#32;and&#32;history-based&#32;progress&#32;termination&#32;limits.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00152"/>00152 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00153"/>00153 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Attributes:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00154"/>00154 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;(int):&#32;CMA-ES&#32;population&#32;size.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00155"/>00155 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim&#32;(int):&#32;Dimensionality&#32;of&#32;the&#32;optimization&#32;problem.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00156"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c">00156</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a30b1141e99acc21b94e2366bad21dc78">__init__</link>(self,
<anchor xml:id="_cmaescpp_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds:&#32;Optional[Bounds]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x0:&#32;Optional[ArrayLike]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>,
<anchor xml:id="_cmaescpp_8py_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_sigma:&#32;Optional[Union[float,&#32;ArrayLike,&#32;Callable]]&#32;=&#32;0.3,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize:&#32;Optional[int]&#32;=&#32;31,&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations:&#32;Optional[int]&#32;=&#32;100000,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accuracy:&#32;Optional[float]&#32;=&#32;1.0,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_fitness:&#32;Optional[float]&#32;=&#32;-np.inf,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_hist:&#32;Optional[float]&#32;=&#32;-1,
<anchor xml:id="_cmaescpp_8py_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg:&#32;Optional[Generator]&#32;=&#32;Generator(PCG64DXSM()),
<anchor xml:id="_cmaescpp_8py_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;runid:&#32;Optional[int]&#32;=&#32;0,
<anchor xml:id="_cmaescpp_8py_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalize:&#32;Optional[bool]&#32;=&#32;<emphasis role="keyword">True</emphasis>,
<anchor xml:id="_cmaescpp_8py_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delayed_update:&#32;Optional[bool]&#32;=&#32;<emphasis role="keyword">True</emphasis>,
<anchor xml:id="_cmaescpp_8py_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_gap:&#32;Optional[int]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;):
<anchor xml:id="_cmaescpp_8py_source_1l00173"/>00173 
<anchor xml:id="_cmaescpp_8py_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00175"/>00175 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Initializes&#32;the&#32;object&#32;with&#32;parameters&#32;for&#32;the&#32;Adaptive&#32;Covariance&#32;Matrix&#32;Evolution&#32;Strategy&#32;(A-CMA).</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00176"/>00176 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00177"/>00177 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;initialization&#32;method&#32;configures&#32;the&#32;bounds,&#32;population&#32;size,&#32;adaptive&#32;mechanisms,</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00178"/>00178 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;termination&#32;criteria,&#32;and&#32;various&#32;other&#32;parameters&#32;essential&#32;for&#32;the&#32;A-CMA&#32;optimization&#32;process.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00179"/>00179 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;The&#32;initialization&#32;sets&#32;up&#32;the&#32;internal&#32;configuration&#32;and&#32;prepares&#32;the&#32;underlying&#32;pointer</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00180"/>00180 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;interface&#32;with&#32;the&#32;A-CMA&#32;C&#32;backend.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00181"/>00181 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00182"/>00182 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00183"/>00183 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim&#32;(int):&#32;Dimensionality&#32;of&#32;the&#32;problem.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00184"/>00184 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds&#32;(Optional[Bounds]):&#32;The&#32;boundary&#32;constraints&#32;for&#32;each&#32;dimension.&#32;It&#32;can&#32;be&#32;None&#32;if</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00185"/>00185 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;no&#32;bounds&#32;are&#32;specified.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00186"/>00186 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x0&#32;(Optional[ArrayLike]):&#32;The&#32;initial&#32;guess&#32;or&#32;starting&#32;point&#32;for&#32;the&#32;optimizer.&#32;Can&#32;be&#32;None</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00187"/>00187 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;a&#32;default&#32;starting&#32;point&#32;is&#32;desired.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00188"/>00188 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_sigma&#32;(Optional[Union[float,&#32;ArrayLike,&#32;Callable]]):&#32;Initial&#32;step&#32;size&#32;for&#32;the&#32;optimizer.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00189"/>00189 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;It&#32;can&#32;be&#32;a&#32;float,&#32;an&#32;array&#32;of&#32;floats&#32;(one&#32;per&#32;dimension),&#32;or&#32;a&#32;callable&#32;returning&#32;a&#32;float.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00190"/>00190 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;(Optional[int]):&#32;Population&#32;size&#32;for&#32;the&#32;optimization&#32;process.&#32;Defaults&#32;to&#32;31.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00191"/>00191 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;(Optional[int]):&#32;The&#32;maximum&#32;number&#32;of&#32;objective&#32;function&#32;evaluations&#32;allowed&#32;for</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00192"/>00192 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;optimization&#32;process.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00193"/>00193 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accuracy&#32;(Optional[float]):&#32;Accuracy&#32;level&#32;for&#32;convergence.&#32;A&#32;smaller&#32;value&#32;indicates&#32;stricter</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00194"/>00194 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;convergence&#32;criteria.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00195"/>00195 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_fitness&#32;(Optional[float]):&#32;The&#32;fitness&#32;value&#32;at&#32;which&#32;the&#32;optimization&#32;process&#32;should&#32;stop.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00196"/>00196 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Defaults&#32;to&#32;negative&#32;infinity.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00197"/>00197 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_hist&#32;(Optional[float]):&#32;Number&#32;of&#32;historical&#32;steps&#32;to&#32;consider&#32;for&#32;stagnation&#32;checks.&#32;Defaults</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00198"/>00198 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;-1.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00199"/>00199 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rg&#32;(Optional[Generator]):&#32;Random&#32;number&#32;generator&#32;to&#32;use&#32;for&#32;sampling.&#32;Defaults&#32;to&#32;a&#32;PCG64DXSM-based</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00200"/>00200 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;generator.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00201"/>00201 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;runid&#32;(Optional[int]):&#32;Unique&#32;identifier&#32;for&#32;the&#32;optimization&#32;run.&#32;Useful&#32;for&#32;debugging&#32;or</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00202"/>00202 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;differentiating&#32;among&#32;runs.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00203"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a30b1141e99acc21b94e2366bad21dc78">00203</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalize&#32;(Optional[bool]):&#32;Whether&#32;or&#32;not&#32;to&#32;normalize&#32;the&#32;input&#32;coordinates.&#32;Defaults&#32;to&#32;True.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00204"/>00204 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delayed_update&#32;(Optional[bool]):&#32;Enable&#32;or&#32;disable&#32;delayed&#32;covariance&#32;matrix&#32;updates&#32;for&#32;computational</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00205"/>00205 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;efficiency.&#32;Defaults&#32;to&#32;True.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00206"/>00206 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_gap&#32;(Optional[int]):&#32;Number&#32;of&#32;iterations&#32;between&#32;updates&#32;to&#32;the&#32;covariance&#32;matrix.&#32;If&#32;None,</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00207"/>00207 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updates&#32;are&#32;performed&#32;without&#32;a&#32;fixed&#32;gap.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00208"/>00208 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00209"/>00209 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Raises:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00210"/>00210 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Exception:&#32;If&#32;there&#32;is&#32;an&#32;error&#32;during&#32;the&#32;initialization&#32;of&#32;the&#32;A-CMA&#32;C&#32;backend.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00211"/>00211 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lower,&#32;upper,&#32;guess&#32;=&#32;_get_bounds(dim,&#32;bounds,&#32;x0,&#32;rg)
<anchor xml:id="_cmaescpp_8py_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu&#32;=&#32;int(popsize/2)
<anchor xml:id="_cmaescpp_8py_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;callable(input_sigma):
<anchor xml:id="_cmaescpp_8py_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_sigma=input_sigma()
<anchor xml:id="_cmaescpp_8py_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;np.ndim(input_sigma)&#32;==&#32;0:
<anchor xml:id="_cmaescpp_8py_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_sigma&#32;=&#32;[input_sigma]&#32;*&#32;dim
<anchor xml:id="_cmaescpp_8py_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;stop_hist&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_hist&#32;=&#32;-1;
<anchor xml:id="_cmaescpp_8py_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type&#32;=&#32;ct.c_double&#32;*&#32;dim&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c">ptr</link>&#32;=&#32;<link linkend="_namespacefcmaes_1_1cmaescpp_1a5f13d5d8f530e90f5b93f5bacf82dfef">initACMA_C</link>(runid,
<anchor xml:id="_cmaescpp_8py_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim,&#32;array_type(*guess),&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;lower&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">else</emphasis>&#32;array_type(*lower),&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;upper&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">else</emphasis>&#32;array_type(*upper),&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type(*input_sigma),&#32;max_evaluations,&#32;stop_fitness,&#32;stop_hist,&#32;mu,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize,&#32;accuracy,&#32;int(rg.uniform(0,&#32;2**32&#32;-&#32;1)),&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normalize,&#32;delayed_update,&#32;-1&#32;<emphasis role="keywordflow">if</emphasis>&#32;update_gap&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">else</emphasis>&#32;update_gap)
<anchor xml:id="_cmaescpp_8py_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193">popsize</link>&#32;=&#32;popsize
<anchor xml:id="_cmaescpp_8py_source_1l00231"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c">00231</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">dim</link>&#32;=&#32;dim&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_cmaescpp_8py_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(ex)
<anchor xml:id="_cmaescpp_8py_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00235"/>00235 &#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00236"/>00236 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ae55112db9f934ddf1d3d01a09b812adb">__del__</link>(self):
<anchor xml:id="_cmaescpp_8py_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00238"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193">00238</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Deletes&#32;the&#32;instance&#32;and&#32;performs&#32;necessary&#32;cleanup.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00239"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">00239</link> <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00240"/>00240 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;destructor&#32;method&#32;ensures&#32;that&#32;the&#32;resources&#32;allocated&#32;or&#32;managed&#32;by&#32;the</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00241"/>00241 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;class&#32;are&#32;properly&#32;released.&#32;It&#32;is&#32;automatically&#32;invoked&#32;when&#32;the&#32;object&#32;is</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00242"/>00242 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;no&#32;longer&#32;in&#32;use&#32;or&#32;explicitly&#32;deleted.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00243"/>00243 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00244"/>00244 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Raises:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00245"/>00245 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Any&#32;exceptions&#32;that&#32;might&#32;be&#32;raised&#32;during&#32;the&#32;execution&#32;of&#32;the&#32;cleanup</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00246"/>00246 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process&#32;are&#32;dependent&#32;on&#32;the&#32;underlying&#32;`destroyACMA_C`&#32;function.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00247"/>00247 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00248"/>00248 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacefcmaes_1_1cmaescpp_1a19d6ee3b1a025b0c87e16121a77e8afa">destroyACMA_C</link>(self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c">ptr</link>)
<anchor xml:id="_cmaescpp_8py_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00251"/>00251 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ad7ca82faa65b471b66977e2f18676025">ask</link>(self)&#32;-&gt;&#32;np.array:
<anchor xml:id="_cmaescpp_8py_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00253"/>00253 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generates&#32;and&#32;retrieves&#32;a&#32;population&#32;of&#32;candidate&#32;solutions.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00254"/>00254 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00255"/>00255 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;calls&#32;a&#32;low-level&#32;C&#32;function&#32;to&#32;generate&#32;new&#32;candidate&#32;solutions</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00256"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ae55112db9f934ddf1d3d01a09b812adb">00256</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;based&#32;on&#32;the&#32;current&#32;state&#32;of&#32;the&#32;optimization&#32;process.&#32;These&#32;solutions&#32;are</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00257"/>00257 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;returned&#32;as&#32;a&#32;numpy&#32;array.&#32;If&#32;an&#32;error&#32;occurs&#32;during&#32;the&#32;process,&#32;the&#32;method</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00258"/>00258 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prints&#32;the&#32;exception&#32;and&#32;returns&#32;None.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00259"/>00259 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00260"/>00260 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00261"/>00261 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;np.array:&#32;A&#32;2D&#32;array&#32;of&#32;generated&#32;candidate&#32;solutions&#32;with&#32;shape</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00262"/>00262 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(popsize,&#32;dim),&#32;where&#32;`popsize`&#32;is&#32;the&#32;population&#32;size&#32;and&#32;`dim`</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00263"/>00263 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is&#32;the&#32;dimensionality&#32;of&#32;each&#32;candidate&#32;solution.&#32;Returns&#32;None</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00264"/>00264 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;an&#32;exception&#32;occurs.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00265"/>00265 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00266"/>00266 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Raises:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00267"/>00267 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Exception:&#32;Prints&#32;the&#32;exception&#32;message&#32;if&#32;an&#32;error&#32;occurs&#32;during&#32;the</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00268"/>00268 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00269"/>00269 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;=&#32;self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193">popsize</link>
<anchor xml:id="_cmaescpp_8py_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">dim</link>
<anchor xml:id="_cmaescpp_8py_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;np.empty(popsize*n)
<anchor xml:id="_cmaescpp_8py_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res_p&#32;=&#32;res.ctypes.data_as(ct.POINTER(ct.c_double))
<anchor xml:id="_cmaescpp_8py_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacefcmaes_1_1cmaescpp_1a5d24fbafb1f6010caa637d9318fe88e2">askACMA_C</link>(self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c">ptr</link>,&#32;res_p)
<anchor xml:id="_cmaescpp_8py_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;np.empty((popsize,&#32;n))
<anchor xml:id="_cmaescpp_8py_source_1l00277"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ad7ca82faa65b471b66977e2f18676025">00277</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;p&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(popsize):
<anchor xml:id="_cmaescpp_8py_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs[p,:]&#32;=&#32;res[p*n&#32;:&#32;(p+1)*n]
<anchor xml:id="_cmaescpp_8py_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xs
<anchor xml:id="_cmaescpp_8py_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_cmaescpp_8py_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(ex)
<anchor xml:id="_cmaescpp_8py_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00283"/>00283 
<anchor xml:id="_cmaescpp_8py_source_1l00284"/>00284 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a4677822852841d0e52baa48fa91cbcb8">tell</link>(self,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys:&#32;np.ndarray,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs:&#32;Optional[np.ndarray]&#32;=&#32;<emphasis role="keywordtype">None</emphasis>)&#32;-&gt;&#32;int:
<anchor xml:id="_cmaescpp_8py_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00288"/>00288 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Provides&#32;functionality&#32;to&#32;handle&#32;processed&#32;arrays&#32;and&#32;manage&#32;operations</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00289"/>00289 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;the&#32;given&#32;inputs.&#32;It&#32;determines&#32;the&#32;execution&#32;path&#32;based&#32;on&#32;the</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00290"/>00290 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;presence&#32;of&#32;optional&#32;parameters&#32;and&#32;interacts&#32;with&#32;external&#32;components.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00291"/>00291 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00292"/>00292 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00293"/>00293 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;(np.ndarray):&#32;A&#32;numpy&#32;array&#32;with&#32;processed&#32;data&#32;that&#32;serves</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00294"/>00294 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;as&#32;the&#32;primary&#32;input&#32;for&#32;internal&#32;operations.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00295"/>00295 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;(Optional[np.ndarray]):&#32;An&#32;optional&#32;numpy&#32;array&#32;that,&#32;if&#32;provided,</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00296"/>00296 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modifies&#32;the&#32;internal&#32;operation&#32;and&#32;enables&#32;additional&#32;functionality.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00297"/>00297 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00298"/>00298 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00299"/>00299 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int:&#32;Represents&#32;the&#32;status&#32;or&#32;result&#32;of&#32;the&#32;operation.&#32;A&#32;successful</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00300"/>00300 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;execution&#32;returns&#32;a&#32;non-negative&#32;integer,&#32;whereas&#32;a&#32;failure&#32;or</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00301"/>00301 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception&#32;may&#32;result&#32;in&#32;a&#32;negative&#32;value.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00302"/>00302 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;xs&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a344851d94557ce52f99da907ee61590d">tell_x_</link>(ys,&#32;xs)
<anchor xml:id="_cmaescpp_8py_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type_ys&#32;=&#32;ct.c_double&#32;*&#32;len(ys)
<anchor xml:id="_cmaescpp_8py_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacefcmaes_1_1cmaescpp_1ae19b39d0288c14daa4d7db903c4285d6">tellACMA_C</link>(self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c">ptr</link>,&#32;array_type_ys(*ys))
<anchor xml:id="_cmaescpp_8py_source_1l00308"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a4677822852841d0e52baa48fa91cbcb8">00308</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_cmaescpp_8py_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(ex)
<anchor xml:id="_cmaescpp_8py_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1&#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00311"/>00311 
<anchor xml:id="_cmaescpp_8py_source_1l00312"/>00312 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a344851d94557ce52f99da907ee61590d">tell_x_</link>(self,&#32;ys:&#32;np.ndarray,&#32;xs:&#32;np.ndarray):
<anchor xml:id="_cmaescpp_8py_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00314"/>00314 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Passes&#32;flattened&#32;numpy&#32;arrays&#32;and&#32;interacts&#32;with&#32;an&#32;external&#32;C&#32;function&#32;using&#32;ctypes.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00315"/>00315 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00316"/>00316 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;takes&#32;numpy&#32;arrays&#32;as&#32;input,&#32;flattens&#32;one&#32;of&#32;them,&#32;converts&#32;both&#32;arrays</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00317"/>00317 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;ctypes-compatible&#32;types,&#32;and&#32;then&#32;passes&#32;them&#32;to&#32;a&#32;C&#32;function.&#32;Any&#32;exceptions</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00318"/>00318 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encountered&#32;during&#32;this&#32;process&#32;are&#32;handled&#32;and&#32;logged.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00319"/>00319 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00320"/>00320 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Args:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00321"/>00321 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys&#32;(np.ndarray):&#32;A&#32;numpy&#32;array&#32;representing&#32;the&#32;first&#32;input&#32;data.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00322"/>00322 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;(np.ndarray):&#32;A&#32;numpy&#32;array&#32;representing&#32;the&#32;second&#32;input&#32;data,&#32;which&#32;gets&#32;flattened</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00323"/>00323 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;before&#32;being&#32;passed&#32;to&#32;the&#32;external&#32;C&#32;function.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00324"/>00324 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00325"/>00325 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00326"/>00326 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int:&#32;The&#32;return&#32;value&#32;from&#32;the&#32;external&#32;C&#32;function&#32;`tellXACMA_C`&#32;or&#32;-1&#32;in&#32;case&#32;of&#32;an</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00327"/>00327 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exception.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00328"/>00328 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flat_xs&#32;=&#32;xs.flatten()
<anchor xml:id="_cmaescpp_8py_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type_xs&#32;=&#32;ct.c_double&#32;*&#32;len(flat_xs)
<anchor xml:id="_cmaescpp_8py_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_type_ys&#32;=&#32;ct.c_double&#32;*&#32;len(ys)
<anchor xml:id="_cmaescpp_8py_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacefcmaes_1_1cmaescpp_1a72633ee9a21ca3a356464d6c570b0237">tellXACMA_C</link>(self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c">ptr</link>,&#32;array_type_ys(*ys),&#32;array_type_xs(*flat_xs))
<anchor xml:id="_cmaescpp_8py_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_cmaescpp_8py_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(ex)
<anchor xml:id="_cmaescpp_8py_source_1l00336"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a344851d94557ce52f99da907ee61590d">00336</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00338"/>00338 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a348ca090a0116efc16fce6a4bd180871">population</link>(self)&#32;-&gt;&#32;np.array:
<anchor xml:id="_cmaescpp_8py_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00340"/>00340 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Retrieve&#32;the&#32;current&#32;population&#32;of&#32;solutions.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00341"/>00341 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00342"/>00342 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;fetches&#32;the&#32;entire&#32;population&#32;of&#32;solutions&#32;from&#32;the&#32;underlying</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00343"/>00343 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ACMA&#32;instance,&#32;represented&#32;as&#32;a&#32;2D&#32;numpy&#32;array.&#32;Each&#32;row&#32;in&#32;the&#32;array&#32;corresponds</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00344"/>00344 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;an&#32;individual&#32;solution&#32;in&#32;the&#32;population.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00345"/>00345 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00346"/>00346 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Raises:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00347"/>00347 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Exception:&#32;If&#32;an&#32;error&#32;occurs&#32;in&#32;retrieving&#32;the&#32;population,&#32;the&#32;exception</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00348"/>00348 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;details&#32;are&#32;printed&#32;and&#32;None&#32;is&#32;returned.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00349"/>00349 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00350"/>00350 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00351"/>00351 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;np.array:&#32;A&#32;2D&#32;numpy&#32;array&#32;where&#32;each&#32;row&#32;is&#32;an&#32;individual&#32;solution&#32;in</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00352"/>00352 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;current&#32;population.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00353"/>00353 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;=&#32;self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a5eb8c3128844a551ffed31779aa12193">popsize</link>
<anchor xml:id="_cmaescpp_8py_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">dim</link>
<anchor xml:id="_cmaescpp_8py_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;np.empty(popsize*n)
<anchor xml:id="_cmaescpp_8py_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res_p&#32;=&#32;res.ctypes.data_as(ct.POINTER(ct.c_double))
<anchor xml:id="_cmaescpp_8py_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacefcmaes_1_1cmaescpp_1a7f7e4ef0af633235aa443b759dba5ed9">populationACMA_C</link>(self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c">ptr</link>,&#32;res_p)
<anchor xml:id="_cmaescpp_8py_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs&#32;=&#32;np.array(popsize,&#32;n)
<anchor xml:id="_cmaescpp_8py_source_1l00361"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a348ca090a0116efc16fce6a4bd180871">00361</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;p&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(popsize):
<anchor xml:id="_cmaescpp_8py_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xs[p]&#32;=&#32;res[p*n&#32;:&#32;(p+1)*n]
<anchor xml:id="_cmaescpp_8py_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xs
<anchor xml:id="_cmaescpp_8py_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_cmaescpp_8py_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(ex)
<anchor xml:id="_cmaescpp_8py_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00367"/>00367 
<anchor xml:id="_cmaescpp_8py_source_1l00368"/>00368 &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1aaf2e40c524b9a8b328decb0b798bd695">result</link>(self)&#32;-&gt;&#32;OptimizeResult:
<anchor xml:id="_cmaescpp_8py_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00370"/>00370 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Computes&#32;and&#32;returns&#32;the&#32;result&#32;of&#32;an&#32;optimization&#32;process.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00371"/>00371 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00372"/>00372 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;function&#32;utilizes&#32;a&#32;low-level&#32;C&#32;library&#32;function&#32;to&#32;process&#32;optimization</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00373"/>00373 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;results.&#32;It&#32;retrieves&#32;the&#32;optimization&#32;results,&#32;such&#32;as&#32;the&#32;optimized&#32;variable,</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00374"/>00374 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;objective&#32;function&#32;value,&#32;evaluation&#32;count,&#32;iteration&#32;count,&#32;and&#32;stop&#32;status,</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00375"/>00375 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;packages&#32;them&#32;into&#32;an&#32;`OptimizeResult`&#32;object.</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00376"/>00376 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00377"/>00377 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Returns:</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00378"/>00378 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OptimizeResult:&#32;An&#32;object&#32;containing&#32;the&#32;results&#32;of&#32;the&#32;optimization</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00379"/>00379 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process,&#32;including&#32;the&#32;optimized&#32;variable&#32;(`x`),&#32;objective&#32;function&#32;value</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00380"/>00380 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(`fun`),&#32;evaluation&#32;count&#32;(`nfev`),&#32;iteration&#32;count&#32;(`nit`),&#32;stop</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00381"/>00381 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;(`status`),&#32;and&#32;a&#32;success&#32;flag&#32;(`success`).</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00382"/>00382 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_cmaescpp_8py_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;np.empty(self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">dim</link>+4)
<anchor xml:id="_cmaescpp_8py_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res_p&#32;=&#32;res.ctypes.data_as(ct.POINTER(ct.c_double))
<anchor xml:id="_cmaescpp_8py_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_cmaescpp_8py_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacefcmaes_1_1cmaescpp_1aeecf9aa46c0d9cbb7e56087c5d7f0fef">resultACMA_C</link>(self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1a8398ead8fd8f0556d524477a60a8c76c">ptr</link>,&#32;res_p)
<anchor xml:id="_cmaescpp_8py_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;res[:self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">dim</link>]
<anchor xml:id="_cmaescpp_8py_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val&#32;=&#32;res[self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">dim</link>]
<anchor xml:id="_cmaescpp_8py_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evals&#32;=&#32;int(res[self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">dim</link>+1])
<anchor xml:id="_cmaescpp_8py_source_1l00390"/><link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1aaf2e40c524b9a8b328decb0b798bd695">00390</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterations&#32;=&#32;int(res[self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">dim</link>+2])
<anchor xml:id="_cmaescpp_8py_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop&#32;=&#32;int(res[self.<link linkend="_classfcmaes_1_1cmaescpp_1_1_a_c_m_a___c_1ace85988c36f223610752fe5c5bbfbeef">dim</link>+3])
<anchor xml:id="_cmaescpp_8py_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;OptimizeResult(x=x,&#32;fun=val,&#32;nfev=evals,&#32;nit=iterations,&#32;status=stop,&#32;success=<emphasis role="keyword">True</emphasis>)
<anchor xml:id="_cmaescpp_8py_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_cmaescpp_8py_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;OptimizeResult(x=<emphasis role="keywordtype">None</emphasis>,&#32;fun=sys.float_info.max,&#32;nfev=0,&#32;nit=0,&#32;status=-1,&#32;success=<emphasis role="keyword">False</emphasis>)
<anchor xml:id="_cmaescpp_8py_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res
<anchor xml:id="_cmaescpp_8py_source_1l00396"/>00396 
<anchor xml:id="_cmaescpp_8py_source_1l00397"/>00397 <emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keywordflow">not</emphasis>&#32;libcmalib&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00398"/>00398 
<anchor xml:id="_cmaescpp_8py_source_1l00399"/>00399 &#32;&#32;&#32;&#32;optimizeACMA_C&#32;=&#32;libcmalib.optimizeACMA_C
<anchor xml:id="_cmaescpp_8py_source_1l00400"/>00400 &#32;&#32;&#32;&#32;optimizeACMA_C.argtypes&#32;=&#32;[ct.c_long,&#32;mo_call_back_type,&#32;call_back_par,&#32;ct.c_int,&#32;\
<anchor xml:id="_cmaescpp_8py_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.POINTER(ct.c_double),&#32;ct.POINTER(ct.c_double),&#32;ct.POINTER(ct.c_double),&#32;\
<anchor xml:id="_cmaescpp_8py_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.POINTER(ct.c_double),&#32;ct.c_int,&#32;ct.c_double,&#32;ct.c_double,&#32;ct.c_int,&#32;ct.c_int,&#32;\
<anchor xml:id="_cmaescpp_8py_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.c_double,&#32;ct.c_long,&#32;ct.c_bool,&#32;ct.c_bool,&#32;ct.c_int,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.c_int,&#32;ct.POINTER(ct.c_double)]
<anchor xml:id="_cmaescpp_8py_source_1l00405"/>00405 &#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00406"/>00406 &#32;&#32;&#32;&#32;initACMA_C&#32;=&#32;libcmalib.initACMA_C
<anchor xml:id="_cmaescpp_8py_source_1l00407"/><link linkend="_namespacefcmaes_1_1cmaescpp_1a869b80a999c8dbaafec9a1e836b441b7">00407</link> &#32;&#32;&#32;&#32;initACMA_C.argtypes&#32;=&#32;[ct.c_long,&#32;ct.c_int,&#32;\
<anchor xml:id="_cmaescpp_8py_source_1l00408"/><link linkend="_namespacefcmaes_1_1cmaescpp_1a4b4bc53bc7ff4a07bc165c3b3ede4e02">00408</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.POINTER(ct.c_double),&#32;ct.POINTER(ct.c_double),&#32;ct.POINTER(ct.c_double),&#32;\
<anchor xml:id="_cmaescpp_8py_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.POINTER(ct.c_double),&#32;ct.c_int,&#32;ct.c_double,&#32;ct.c_double,&#32;ct.c_int,&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ct.c_int,&#32;ct.c_double,&#32;ct.c_long,&#32;ct.c_bool,&#32;ct.c_bool,&#32;ct.c_int]
<anchor xml:id="_cmaescpp_8py_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00412"/>00412 &#32;&#32;&#32;&#32;initACMA_C.restype&#32;=&#32;ct.c_void_p&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00413"/>00413 &#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00414"/><link linkend="_namespacefcmaes_1_1cmaescpp_1a5f13d5d8f530e90f5b93f5bacf82dfef">00414</link> &#32;&#32;&#32;&#32;destroyACMA_C&#32;=&#32;libcmalib.destroyACMA_C
<anchor xml:id="_cmaescpp_8py_source_1l00415"/>00415 &#32;&#32;&#32;&#32;destroyACMA_C.argtypes&#32;=&#32;[ct.c_void_p]
<anchor xml:id="_cmaescpp_8py_source_1l00416"/>00416 &#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00417"/>00417 &#32;&#32;&#32;&#32;askACMA_C&#32;=&#32;libcmalib.askACMA_C
<anchor xml:id="_cmaescpp_8py_source_1l00418"/>00418 &#32;&#32;&#32;&#32;askACMA_C.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.POINTER(ct.c_double)]
<anchor xml:id="_cmaescpp_8py_source_1l00419"/>00419 &#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00420"/><link linkend="_namespacefcmaes_1_1cmaescpp_1a02a0f73f01d725c0440ce1cbe96fc018">00420</link> &#32;&#32;&#32;&#32;tellACMA_C&#32;=&#32;libcmalib.tellACMA_C
<anchor xml:id="_cmaescpp_8py_source_1l00421"/>00421 &#32;&#32;&#32;&#32;tellACMA_C.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.POINTER(ct.c_double)]
<anchor xml:id="_cmaescpp_8py_source_1l00422"/><link linkend="_namespacefcmaes_1_1cmaescpp_1a19d6ee3b1a025b0c87e16121a77e8afa">00422</link> &#32;&#32;&#32;&#32;tellACMA_C.restype&#32;=&#32;ct.c_int
<anchor xml:id="_cmaescpp_8py_source_1l00423"/>00423 &#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00424"/>00424 &#32;&#32;&#32;&#32;tellXACMA_C&#32;=&#32;libcmalib.tellXACMA_C
<anchor xml:id="_cmaescpp_8py_source_1l00425"/><link linkend="_namespacefcmaes_1_1cmaescpp_1a5d24fbafb1f6010caa637d9318fe88e2">00425</link> &#32;&#32;&#32;&#32;tellXACMA_C.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.POINTER(ct.c_double),&#32;ct.POINTER(ct.c_double)]
<anchor xml:id="_cmaescpp_8py_source_1l00426"/>00426 &#32;&#32;&#32;&#32;tellXACMA_C.restype&#32;=&#32;ct.c_int
<anchor xml:id="_cmaescpp_8py_source_1l00427"/>00427 &#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00428"/><link linkend="_namespacefcmaes_1_1cmaescpp_1ae19b39d0288c14daa4d7db903c4285d6">00428</link> &#32;&#32;&#32;&#32;populationACMA_C&#32;=&#32;libcmalib.populationACMA_C
<anchor xml:id="_cmaescpp_8py_source_1l00429"/>00429 &#32;&#32;&#32;&#32;populationACMA_C.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.POINTER(ct.c_double)]
<anchor xml:id="_cmaescpp_8py_source_1l00430"/>00430 &#32;&#32;&#32;&#32;
<anchor xml:id="_cmaescpp_8py_source_1l00431"/>00431 &#32;&#32;&#32;&#32;resultACMA_C&#32;=&#32;libcmalib.resultACMA_C
<anchor xml:id="_cmaescpp_8py_source_1l00432"/><link linkend="_namespacefcmaes_1_1cmaescpp_1a72633ee9a21ca3a356464d6c570b0237">00432</link> &#32;&#32;&#32;&#32;resultACMA_C.argtypes&#32;=&#32;[ct.c_void_p,&#32;ct.POINTER(ct.c_double)]
</programlisting></section>
