<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_interferometry_8py_source" xml:lang="en-US">
<title>interferometry.py</title>
<indexterm><primary>examples/interferometry.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_interferometry_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1interferometry">00001</link> <emphasis role="comment">#&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00002"/>00002 <emphasis role="comment">#</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00005"/>00005 
<anchor xml:id="_interferometry_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;This&#32;code&#32;was&#32;posted&#32;on&#32;https://gitter.im/pagmo2/Lobby&#32;by&#32;</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00007"/>00007 <emphasis role="comment">#&#32;Markus&#32;MÃ¤rtens&#32;@CoolRunning&#32;and&#32;is&#32;extended&#32;here&#32;by&#32;a&#32;</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00008"/>00008 <emphasis role="comment">#&#32;fcmaes&#32;parallel&#32;differential&#32;evolution&#32;solver&#32;for&#32;comparison&#32;with&#32;the&#32;pagmo&#32;island&#32;concept.</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00009"/>00009 <emphasis role="comment">#&#32;Tested&#32;with&#32;miniconda&#32;using&#32;Python&#32;3.8/3.10&#32;on&#32;Linux</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00010"/>00010 <emphasis role="comment">#&#32;Corresponds&#32;to&#32;the&#32;equivalent&#32;python&#32;example</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00011"/>00011 <emphasis role="comment">#&#32;https://github.com/dietmarwo/fcmaes-java/blob/master/src/main/java/fcmaes/examples/Interferometry.java</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00012"/>00012 <emphasis role="comment">#&#32;The&#32;test&#32;image&#32;used&#32;is&#32;here:&#32;https://api.optimize.esa.int/data/interferometry/orion.jpg</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00013"/>00013 
<anchor xml:id="_interferometry_8py_source_1l00014"/>00014 <emphasis role="comment">#&#32;Install&#32;dependencies:</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00015"/>00015 <emphasis role="comment">#&#32;do&#32;&quot;pip&#32;install&#32;scikit-image&quot;</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00016"/>00016 
<anchor xml:id="_interferometry_8py_source_1l00017"/>00017 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00018"/>00018 
<anchor xml:id="_interferometry_8py_source_1l00019"/>00019 <emphasis role="keyword">import</emphasis>&#32;pygmo&#32;<emphasis role="keyword">as</emphasis>&#32;pg
<anchor xml:id="_interferometry_8py_source_1l00020"/>00020 <emphasis role="keyword">from</emphasis>&#32;time&#32;<emphasis role="keyword">import</emphasis>&#32;time
<anchor xml:id="_interferometry_8py_source_1l00021"/>00021 <emphasis role="keyword">from</emphasis>&#32;interferometry_udp&#32;<emphasis role="keyword">import</emphasis>&#32;Interferometry
<anchor xml:id="_interferometry_8py_source_1l00022"/>00022 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;de,&#32;cmaes,&#32;retry,&#32;advretry
<anchor xml:id="_interferometry_8py_source_1l00023"/>00023 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;single_objective,&#32;de_cma_py,&#32;Cma_python,&#32;De_python,&#32;Cma_cpp,&#32;De_cpp,&#32;de_cma,&#32;Bite_cpp
<anchor xml:id="_interferometry_8py_source_1l00024"/>00024 
<anchor xml:id="_interferometry_8py_source_1l00025"/>00025 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_interferometry_8py_source_1l00026"/>00026 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_interferometry_8py_source_1l00027"/>00027 
<anchor xml:id="_interferometry_8py_source_1l00028"/>00028 logger.remove()
<anchor xml:id="_interferometry_8py_source_1l00029"/><link linkend="_namespaceexamples_1_1interferometry_1a4f82e920edf90012be4468c9b2ca878f">00029</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_interferometry_8py_source_1l00030"/>00030 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_interferometry_8py_source_1l00031"/>00031 
<anchor xml:id="_interferometry_8py_source_1l00032"/><link linkend="_namespaceexamples_1_1interferometry_1a58061aa172c8b7502b21a633b5e32e77">00032</link> udp&#32;=&#32;<link linkend="_classexamples_1_1interferometry__udp_1_1_interferometry">Interferometry</link>(11,&#32;<emphasis role="stringliteral">&apos;./img/orion.jpg&apos;</emphasis>,&#32;512)&#32;
<anchor xml:id="_interferometry_8py_source_1l00033"/>00033 <emphasis role="comment">#udp&#32;=&#32;Interferometry(5,&#32;&apos;./img/orion.jpg&apos;,&#32;32)</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00034"/>00034 
<anchor xml:id="_interferometry_8py_source_1l00035"/><link linkend="_namespaceexamples_1_1interferometry_1a4d145c826df624e173c54c792e88ebe8">00035</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1interferometry_1a4d145c826df624e173c54c792e88ebe8">archipelago</link>():&#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00036"/>00036 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&apos;interferometer&#32;sga&#32;archipelago&apos;</emphasis>)
<anchor xml:id="_interferometry_8py_source_1l00037"/>00037 &#32;&#32;&#32;&#32;uda&#32;=&#32;pg.sga(gen&#32;=&#32;50000)
<anchor xml:id="_interferometry_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;instantiate&#32;an&#32;unconnected&#32;archipelago</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00039"/>00039 &#32;&#32;&#32;&#32;archi&#32;=&#32;pg.archipelago(t&#32;=&#32;pg.topologies.unconnected())
<anchor xml:id="_interferometry_8py_source_1l00040"/>00040 &#32;&#32;&#32;&#32;t&#32;=&#32;time()
<anchor xml:id="_interferometry_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;_&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(8):
<anchor xml:id="_interferometry_8py_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alg&#32;=&#32;pg.algorithm(uda)
<anchor xml:id="_interferometry_8py_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#alg.set_verbosity(1)&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prob&#32;=&#32;pg.problem(udp)
<anchor xml:id="_interferometry_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pop&#32;=&#32;pg.population(prob,&#32;20)&#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isl&#32;=&#32;pg.island(algo=alg,&#32;pop=pop)
<anchor xml:id="_interferometry_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;archi.push_back(isl)&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;archi.evolve()
<anchor xml:id="_interferometry_8py_source_1l00050"/>00050 &#32;&#32;&#32;&#32;archi.wait_check()
<anchor xml:id="_interferometry_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;print(f<emphasis role="stringliteral">&apos;archi:&#32;{time()&#32;-&#32;t:0.3f}s&apos;</emphasis>)
<anchor xml:id="_interferometry_8py_source_1l00052"/>00052 
<anchor xml:id="_interferometry_8py_source_1l00053"/>00053 
<anchor xml:id="_interferometry_8py_source_1l00054"/><link linkend="_namespaceexamples_1_1interferometry_1a73aab1174c417c8b5a55b336f223f95d">00054</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1interferometry_1a73aab1174c417c8b5a55b336f223f95d">check_good_solution</link>():
<anchor xml:id="_interferometry_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;fprob&#32;=&#32;<link linkend="_classfcmaes_1_1optimizer_1_1single__objective">single_objective</link>(pg.problem(udp))
<anchor xml:id="_interferometry_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;fval&#32;=&#32;98.086&#32;can&#32;you&#32;find&#32;a&#32;better&#32;solution?</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;x&#32;=&#32;[&#32;-0.5016772016823452,&#32;0.30751689551825745,&#32;0.4323143278123409,&#32;0.4588915028506375,&#32;0.2935318720729294,&#32;
<anchor xml:id="_interferometry_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.35501406938728586,&#32;-0.12561001993113785,&#32;0.49885034791382843,&#32;0.624893109559642,&#32;-0.3038874087002077,&#32;
<anchor xml:id="_interferometry_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0.03467743910056187,&#32;0.6006883618631653,&#32;0.37736802000765257,&#32;0.37867502641967277,&#32;0.3714318987537504,&#32;
<anchor xml:id="_interferometry_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.3753384727157436,&#32;0.3994622345786947,&#32;0.3566850399605477,&#32;0.36146540697265817,&#32;0.547468916941172,&#32;
<anchor xml:id="_interferometry_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.38332007285093006,&#32;0.37488058793892387&#32;]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00062"/>00062 &#32;&#32;&#32;&#32;y&#32;=&#32;fprob.fun(x)
<anchor xml:id="_interferometry_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&apos;fval&#32;=&#32;&apos;</emphasis>&#32;+&#32;str(y))
<anchor xml:id="_interferometry_8py_source_1l00064"/>00064 
<anchor xml:id="_interferometry_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00066"/><link linkend="_namespaceexamples_1_1interferometry_1add210e1c8397b3514e0f8db7459e950f">00066</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceexamples_1_1interferometry_1add210e1c8397b3514e0f8db7459e950f">optimize</link>():&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;fprob&#32;=&#32;<link linkend="_classfcmaes_1_1optimizer_1_1single__objective">single_objective</link>(pg.problem(udp))
<anchor xml:id="_interferometry_8py_source_1l00068"/>00068 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&apos;interferometer&#32;optimization&apos;</emphasis>)
<anchor xml:id="_interferometry_8py_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Python&#32;Differential&#32;Evolution&#32;implementation,&#32;uses&#32;ask/tell&#32;for&#32;parallel&#32;function&#32;evaluation.</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;ret&#32;=&#32;de.minimize(fprob.fun,&#32;bounds=fprob.bounds,&#32;workers=16,&#32;popsize=32,&#32;max_evaluations=50000)
<anchor xml:id="_interferometry_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Python&#32;CMAES&#32;implementation,&#32;uses&#32;ask/tell&#32;for&#32;parallel&#32;function&#32;evaluation.</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;cmaes.minimize(fprob.fun,&#32;bounds=fprob.bounds,&#32;workers=16,&#32;popsize=32,&#32;max_evaluations=50000)</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Parallel&#32;retry&#32;using&#32;DE&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;retry.minimize(fprob.fun,&#32;bounds=fprob.bounds,&#32;optimizer=De_cpp(20000,&#32;popsize=32),&#32;workers=16,&#32;num_retries=64)</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00078"/>00078 
<anchor xml:id="_interferometry_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Parallel&#32;retry&#32;using&#32;Bite&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;ret&#32;=&#32;retry.minimize(fprob.fun,&#32;bounds=fprob.bounds,&#32;optimizer=Bite_cpp(20000,&#32;M=1),&#32;workers=16,&#32;num_retries=64)</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00081"/>00081 
<anchor xml:id="_interferometry_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Parallel&#32;retry&#32;using&#32;CMA-ES</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;retry.minimize(udp.fitness,&#32;bounds=bounds,&#32;optimizer=Cma_cpp(20000,&#32;popsize=32),&#32;workers=16,&#32;num_retries=64)</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00084"/>00084 &#32;
<anchor xml:id="_interferometry_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Smart&#32;retry&#32;using&#32;DE</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;advretry.minimize(fprob.fun,&#32;bounds=fprob.bounds,&#32;optimizer=De_cpp(1500,&#32;popsize=32),&#32;workers=16)</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00087"/>00087 
<anchor xml:id="_interferometry_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Smart&#32;retry&#32;using&#32;CMA-ES&#32;&#32;</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;advretry.minimize(fprob.fun,&#32;bounds=fprob.bounds,&#32;optimizer=Cma_cpp(1500,&#32;popsize=32),&#32;workers=16)</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00090"/>00090 &#32;
<anchor xml:id="_interferometry_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Smart&#32;retry&#32;using&#32;DE-&gt;CMA&#32;sequence&#32;&#32;</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="comment">#ret&#32;=&#32;advretry.minimize(fprob.fun,&#32;bounds=fprob.bounds,&#32;optimizer=de_cma(1500,&#32;popsize=32),&#32;workers=16)</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;
<anchor xml:id="_interferometry_8py_source_1l00094"/>00094 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;best&#32;result&#32;is&#32;&quot;</emphasis>&#32;+&#32;str(ret.fun)&#32;+&#32;<emphasis role="stringliteral">&apos;&#32;x&#32;=&#32;&apos;</emphasis>&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>.join(str(x)&#32;<emphasis role="keywordflow">for</emphasis>&#32;x&#32;<emphasis role="keywordflow">in</emphasis>&#32;ret.x))
<anchor xml:id="_interferometry_8py_source_1l00095"/>00095 
<anchor xml:id="_interferometry_8py_source_1l00096"/>00096 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_interferometry_8py_source_1l00097"/>00097 &#32;&#32;&#32;&#32;<link linkend="_namespaceexamples_1_1interferometry_1add210e1c8397b3514e0f8db7459e950f">optimize</link>()
<anchor xml:id="_interferometry_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="comment">#archipelago()</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;check_good_solution()</emphasis>
<anchor xml:id="_interferometry_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
</programlisting></section>
