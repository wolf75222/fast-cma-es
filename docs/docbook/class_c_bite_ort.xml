<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_c_bite_ort" xml:lang="en-US">
<title>CBiteOrt Class Reference</title>
<indexterm><primary>CBiteOrt</primary></indexterm>
<para>
<computeroutput>#include &lt;biteort.h&gt;</computeroutput>
</para>
Inheritance diagram for CBiteOrt:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for CBiteOrt:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_ort_1a449fc81d0f3149cf3dcc1aed45b7a75f">CBiteOrt</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1ac3418aa5bb3f4e2735409038b56f98be">updateDims</link> (const int aParamCount, const int aPopSize)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1a2470177aa3f85af2a5a3daf548b7166e">updateWeights</link> (const int UsePopSize)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1ac052c94187f7b767dbf31cb8c72e8914">init</link> (const double *const InitCent=NULL, const double *const InitSigma=NULL)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1ab718877f7b3014357fc44bc34391d827">update</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;ExtPop)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1a89dfc6c4e11b5e752b95d8e80f961a98">ort</link> (const double *const ip, double *const op)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1a4e3cc10dcabfd6b1eb1ebf586b2670b0">ortnc</link> (const double *const ip, double *const op)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1a955555215281014f61c914f71963009c">unort</link> (const double *const ip, double *const op)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1a0687c4810cab96a266d421eec88368fb">sample</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, double *const op) const</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; double &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop_1ad427518ed1d47fbe3c2222b3a11badb7">CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop_1a73402384f4b75abf6d956dc086ccf36e">CBitePop</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_pop_1ac386e4638d6fc6bd5370eeae895347c3">~CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_pop_1ab18cf322db6ab186db1e19b53e34c232">operator=</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a3fc2d887ae91be62fd9fc3100268e53c">copy</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a7850902dad276dcecea68559eaccc168">updateCentroid</link> ()</para>
</listitem>
            <listitem><para>const double * <link linkend="_class_c_bite_pop_1a5e6ccebb178353b084084f841b09042d">getCentroid</link> () const</para>
</listitem>
            <listitem><para>const double * <link linkend="_class_c_bite_pop_1aaa8e3f180accfedf21218cbed8ffbb79">getParamsOrdered</link> (const int i) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad38d886687357797479e69098759476a">getCnsPtr</link> (double *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad6cbe6cfbf9954dcb6f8a223a5e1f36b">getObjPtr</link> (double *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1aa4f3255c9607f72eff280f8c3c09143f">getRankPtr</link> (double *const pp) const</para>
</listitem>
            <listitem><para>const double ** <link linkend="_class_c_bite_pop_1ac2a01e9eb6b884a0b318e4b914273acf">getPopParams</link> () const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1a0053ae41c70babe967c5931f491ea865">getCurParams</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a5aef425d751172e1fff38a455cb51d34">getCurPopSize</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a7e1fbb7f7e9aaf8f73eb865fa4610185">getCurPopPos</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a767519aa2fcc2667dc135a131bc9fd85">resetCurPopPos</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a48d6ede5c82534c973e0458726e820dd">incrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a4656171c63f1944ae045d6f222d9d33a">decrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aad999ddc8a2ed72ffaee0db7732c9f76">updatePop</link> (double UpdCost, const double *const UpdParams, const bool DoUpdateCentroid, const bool CanRejectCost=true)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>double <link linkend="_class_c_bite_ort_1a274b976da955293465fc9e49ae0a7d9c">CentPow</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_ort_1a2cf9763b9162a1095afbff15239dfc6b">CovUpdSlow</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_ort_1a22c0f31f0b3b89b84de05419c3f755c8">CovUpdFast</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_ort_1a0a177a216c024c0a9ceef4b191959958">SigmaMulBase1</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_ort_1a7031aaff7a449354b8b9a4ad59d2f5ee">SigmaMulBase2</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_ort_1aed92d35956a184cc13ad74c74821ffa4">SigmaMulExp2</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_ort_1af963cd0c9988f31971e375bd2aedf30d">EvalFac</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_c_bite_ort_1a7f99eac373be63d512a4660ea9eaf040">initBuffers</link> (const int aParamCount, const int aPopSize, const int aCnsCount=0, const int aObjCount=0)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_ort_1a34a09edcccffb93ecb83ad4f8cd8365d">deleteBuffers</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1a77ae9fd22421595707c336bf14d3931a">eigen</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_ort_1a0d9cf0f06f8e894e9432fdc4486bc24b">calcCent</link> (const double **const SortedParams, const int UsePopSize)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_ort_1a51833c929e82998422cb7c0910378d62">dotp</link> (const double *const p1, const double *const p2, const int c) const</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a0d5ab322641bb1a091df91ff7ee630c4">zeroParams</link> (double *const dst) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a24130fea35014433f142e3b9ed0f8929">copyParams</link> (double *const dst, const double *const src) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a57e751582761922bbabff1ddb7af277b">copyValues</link> (double *const dst, const double *const src) const</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Static Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_class_c_bite_ort_1a5415d9c622dbc0b03f32c0f105a9169a">tred2</link> (const int n, double *d, double **V, double *e)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_ort_1a5196abda80a361c2d6f40a9a79773123">hypot_</link> (double a, double b)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_ort_1a1e68e963eb443af650525cd0d58ba57a">max_</link> (const double a, const double b)</para>
</listitem>
            <listitem><para>static void <link linkend="_class_c_bite_ort_1a33285821015e487d6c933ed1d6385144">tql2</link> (const int n, double *d, double **V, double *e)</para>
</listitem>
        </itemizedlist>
</simplesect>
Static Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1a3b7e8d2276455475bd761e29c8c72ac6">wrapParam</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1aecaac61269e65bda93cb2dc1a3a26091">getGaussianInt</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double sd, const double meanInt)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1ad4e3a3c5b7a25ad02ef0231bd3fe8388">calcLP1Coeff</link> (const double Count)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>double * <link linkend="_class_c_bite_ort_1a957515315eac19649dcc69f57ecefa88">CovParamsBuf</link></para>
</listitem>
            <listitem><para>double ** <link linkend="_class_c_bite_ort_1ae8c61d66cc14d42b4bc24ccc1b51fdde">CovParams</link></para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_ort_1a5bcc49be8d7e1b368a313ae2dd91063e">BParamsBuf</link></para>
</listitem>
            <listitem><para>double ** <link linkend="_class_c_bite_ort_1af37edb8ec1a7cec8f88169539952a1bb">BParams</link></para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_ort_1a6c75959d8b2bd12b909f4637eeb16db7">DParams</link></para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_ort_1a73f4b5a868ea4cc2ef2f22c6841c263a">DParamsN</link></para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_ort_1abcfbd9fc0b1d9620ad4fb8d396742f7c">PrevCentParams</link></para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_ort_1ae73996fe205afb75041aa1d9d7ad473d">WPopCent</link></para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_ort_1a05fb4a934fae2cc11a491463cffbdbd5">WPopCov</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_ort_1a8323d1f7c3504e784d6a92682e54a97b">spc</link></para>

<para>spherical. </para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0dc6f7b3a19db513e349e68c3471f9fa">ParamCount</link></para>

<para>The total number of internal parameter values in use. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1a884c9ad4c0327aaa0110a23a89f5697a">ParamCountI</link></para>

<para>= 1.0 / ParamCount. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a58e3bf5abc2fb4b1e173aa6cb3477bfb">PopSize</link></para>

<para>The size of population in use (maximal). </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0b64743a84d5af143d44e7f6e9f02ada">PopSize1</link></para>

<para>= PopSize - 1. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1adc98fbdebc2671ef0826245d8c472cc5">CurPopSize</link></para>

<para>Current population size. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a26b81c70200085e410cf83258e139f9b">CurPopSize1</link></para>

<para>= CurPopSize - 1. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1aa5105ca75379f9a760dc9f0b9ea30ea7">CurPopSizeI</link></para>

<para>= 1.0 / CurPopSize. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aa7c87b9148768d6104f8d3dfb5abebce">CurPopPos</link></para>

<para>update. This variable should be initialized by the optimizer. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2bf725291723a8dcaa215496e3175471">CnsCount</link></para>

<para>The number of constraints per solution. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2f7c6a4707e23c21197ab32b71d900c7">ObjCount</link></para>

<para>The number of objectives per solution. </para>
</listitem>
            <listitem><para>uint8_t * <link linkend="_class_c_bite_pop_1ac69b014720b11a472509b22588eaf6c3">PopParamsBuf</link></para>

<para>Buffer for all PopParams vectors. </para>
</listitem>
            <listitem><para>double ** <link linkend="_class_c_bite_pop_1a0c41790e473b70c5ec37986d0fb1f9a2">PopParams</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a6d4a3479ca9e60de6cf4667d5b2937a5">PopCnsOffs</link></para>

<para>a population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a98e2af75120c4184b271c14d22acf9d4">PopObjOffs</link></para>

<para>population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3ecc4ffcf1c6f3f9b4e4e5a873c481fe">PopRankOffs</link></para>

<para>item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3cdac0ad2cf5c8403f1f7676171f4e76">PopItemSize</link></para>

<para>Size in bytes of population item. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ac31d95bc1f383828e72bcf1eb499e949">CentParams</link></para>

<para>Centroid of the parameter vectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_pop_1a41f29468becc588bea6ff3f842db93ea">NeedCentUpdate</link></para>

<para>&quot;True&quot; if centroid update is needed. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1ab6dec63b0ee3955563c2a3f815614f31">CentLPC</link></para>

<para>Centroid averaging filter coefficient. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1acae90e3584dca8b6c08c70d7bd317729">TmpParams</link></para>

<para>element of the PopParams array. </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_ort_1a023600358736dab27643a71154164b8e">CBiteOrt</link> (const <link linkend="_class_c_bite_ort">CBiteOrt</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_ort">CBiteOrt</link> &amp; <link linkend="_class_c_bite_ort_1a9aac149388364c2c183f6a3c39d69d9d">operator=</link> (const <link linkend="_class_c_bite_ort">CBiteOrt</link> &amp;)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
Static Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; double &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76">IntOverBits</link></para>
</listitem>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8">IntMantBits</link></para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link></para>

<para>multiplier. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1aeba03d86b17ed01a97dc8225c5598b2d">IntMantMultM</link></para>

<para>IntMantMult. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a8c64d2e83f225b034df818b06b09ecd2">IntMantMult2</link></para>

<para>IntMantMult * 2. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a27448c9be1bed517e4a48aa656ca4f76">IntMantMask</link></para>

<para>corresponds to mantissa. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Rotation matrix calculation class, based on the Eigen decomposition of the covariance matrix. Used to &quot;orthogonalize&quot; sample population. Applies weighting to population. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00044">44</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_c_bite_ort_1a023600358736dab27643a71154164b8e"/><section>
    <title>CBiteOrt()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>CBiteOrt</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>CBiteOrt</secondary></indexterm>
<para><computeroutput>CBiteOrt::CBiteOrt (const <link linkend="_class_c_bite_ort">CBiteOrt</link> &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteort_8h_source_1l00047">47</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a023600358736dab27643a71154164b8e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a023600358736dab27643a71154164b8e_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a449fc81d0f3149cf3dcc1aed45b7a75f"/><section>
    <title>CBiteOrt()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>CBiteOrt</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>CBiteOrt</secondary></indexterm>
<para><computeroutput>CBiteOrt::CBiteOrt ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteort_8h_source_1l00075">75</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_c_bite_ort_1a0d9cf0f06f8e894e9432fdc4486bc24b"/><section>
    <title>calcCent()</title>
<indexterm><primary>calcCent</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>calcCent</secondary></indexterm>
<para><computeroutput>void CBiteOrt::calcCent (const double **const SortedParams, const int UsePopSize)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function calculates centroid vector of population, with weighting.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>SortedParams</entry><entry>
<para>Array of sorted population vectors. </para>
</entry>
                            </row>
                            <row>
<entry>UsePopSize</entry><entry>
<para>Population size to use. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00787">787</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a0d9cf0f06f8e894e9432fdc4486bc24b_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a34a09edcccffb93ecb83ad4f8cd8365d"/><section>
    <title>deleteBuffers()</title>
<indexterm><primary>deleteBuffers</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>deleteBuffers</secondary></indexterm>
<para><computeroutput>virtual void CBiteOrt::deleteBuffers ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Function deletes buffers previously allocated via the <link linkend="_class_c_bite_ort_1a7f99eac373be63d512a4660ea9eaf040">initBuffers()</link> function. Derived classes should call this function of the base class. </para>
<para>
Reimplemented from <link linkend="_class_c_bite_pop_1a47de1dedd30171e9fc9ae9475998d51d">CBitePop&lt; double &gt;</link>.</para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00474">474</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a51833c929e82998422cb7c0910378d62"/><section>
    <title>dotp()</title>
<indexterm><primary>dotp</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>dotp</secondary></indexterm>
<para><computeroutput>double CBiteOrt::dotp (const double *const p1, const double *const p2, const int c) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function calculates dot product of two per-parameter population vectors.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>p1</entry><entry>
<para>Parameter A&apos;s population vector. </para>
</entry>
                            </row>
                            <row>
<entry>p2</entry><entry>
<para>Parameter B&apos;s population vector. </para>
</entry>
                            </row>
                            <row>
<entry>c</entry><entry>
<para>Element count. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00821">821</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a51833c929e82998422cb7c0910378d62_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a77ae9fd22421595707c336bf14d3931a"/><section>
    <title>eigen()</title>
<indexterm><primary>eigen</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>eigen</secondary></indexterm>
<para><computeroutput>void CBiteOrt::eigen ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function calculates eigenpairs of the current covariance matrix and updates DParams standard deviations vector. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00747">747</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a77ae9fd22421595707c336bf14d3931a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a77ae9fd22421595707c336bf14d3931a_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a5196abda80a361c2d6f40a9a79773123"/><section>
    <title>hypot_()</title>
<indexterm><primary>hypot_</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>hypot_</secondary></indexterm>
<para><computeroutput>static double CBiteOrt::hypot_ (double a, double b)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>sqrt(a^2 + b^2) without under/overflow. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00612">612</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a5196abda80a361c2d6f40a9a79773123_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1ac052c94187f7b767dbf31cb8c72e8914"/><section>
    <title>init()</title>
<indexterm><primary>init</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>init</secondary></indexterm>
<para><computeroutput>void CBiteOrt::init (const double *const InitCent = <computeroutput>NULL</computeroutput>
, const double *const InitSigma = <computeroutput>NULL</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function initializes *this object to &quot;no rotation&quot; state, with the specified initial centroid and sigma.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>InitCent</entry><entry>
<para>Initial centroids per parameter (NULL for origin). </para>
</entry>
                            </row>
                            <row>
<entry>InitSigma</entry><entry>
<para>Initial sigmas per parameter (NULL for 0.25). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00151">151</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a7f99eac373be63d512a4660ea9eaf040"/><section>
    <title>initBuffers()</title>
<indexterm><primary>initBuffers</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>initBuffers</secondary></indexterm>
<para><computeroutput>virtual void CBiteOrt::initBuffers (const int aParamCount, const int aPopSize, const int aCnsCount = <computeroutput>0</computeroutput>
, const int aObjCount = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Function initializes all common buffers, and &quot;PopSize&quot; variables. This function should be called when population&apos;s dimensions were changed. This function calls the <link linkend="_class_c_bite_ort_1a34a09edcccffb93ecb83ad4f8cd8365d">deleteBuffers()</link> function to release any derived classes&apos; allocated buffers. Allocates an additional vector for temporary use, which is at the same the last vector in the PopParams array. Derived classes should call this function of the base class.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aParamCount</entry><entry>
<para>New parameter count. </para>
</entry>
                            </row>
                            <row>
<entry>aPopSize</entry><entry>
<para>New population size. If &lt;= 0, population buffers will not be allocated. </para>
</entry>
                            </row>
                            <row>
<entry>aCnsCount</entry><entry>
<para>New constraint value count. </para>
</entry>
                            </row>
                            <row>
<entry>aObjCount</entry><entry>
<para>New objective value count. If equals 0, a rank element will not be auto-added. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_class_c_bite_pop_1a7488531e6b12accb61f068bbe654f580">CBitePop&lt; double &gt;</link>.</para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00447">447</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a7f99eac373be63d512a4660ea9eaf040_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a1e68e963eb443af650525cd0d58ba57a"/><section>
    <title>max_()</title>
<indexterm><primary>max_</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>max_</secondary></indexterm>
<para><computeroutput>static double CBiteOrt::max_ (const double a, const double b)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Function returns maximum of 2 values. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00639">639</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a1e68e963eb443af650525cd0d58ba57a_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a9aac149388364c2c183f6a3c39d69d9d"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_ort">CBiteOrt</link> &amp; CBiteOrt::operator= (const <link linkend="_class_c_bite_ort">CBiteOrt</link> &amp; )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteort_8h_source_1l00052">52</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a9aac149388364c2c183f6a3c39d69d9d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a89dfc6c4e11b5e752b95d8e80f961a98"/><section>
    <title>ort()</title>
<indexterm><primary>ort</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>ort</secondary></indexterm>
<para><computeroutput>void CBiteOrt::ort (const double *const ip, double *const op)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function applies orthogonalization (rotation) to the parameter vector, subtracting centroid vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry><entry>ip</entry><entry>
<para>Input unorthogonalized vector. </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>op</entry><entry>
<para>Output orthogonalized vector, can be equal to &quot;ip&quot;. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00308">308</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a4e3cc10dcabfd6b1eb1ebf586b2670b0"/><section>
    <title>ortnc()</title>
<indexterm><primary>ortnc</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>ortnc</secondary></indexterm>
<para><computeroutput>void CBiteOrt::ortnc (const double *const ip, double *const op)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function applies orthogonalization (rotation) to the parameter vector, without subtracting centroid vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry><entry>ip</entry><entry>
<para>Input unorthogonalized vector. </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>op</entry><entry>
<para>Output orthogonalized vector, should not be equal to &quot;ip&quot;. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00340">340</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a4e3cc10dcabfd6b1eb1ebf586b2670b0_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a0687c4810cab96a266d421eec88368fb"/><section>
    <title>sample()</title>
<indexterm><primary>sample</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>sample</secondary></indexterm>
<para><computeroutput>void CBiteOrt::sample (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp; rnd, double *const op) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function &quot;samples&quot; new random population vector making a random draw from the current distribution.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rnd</entry><entry>
<para>Random number generator. </para>
</entry>
                            </row>
                            <row>
<entry>op</entry><entry>
<para>Resulting vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00397">397</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a0687c4810cab96a266d421eec88368fb_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a33285821015e487d6c933ed1d6385144"/><section>
    <title>tql2()</title>
<indexterm><primary>tql2</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>tql2</secondary></indexterm>
<para><computeroutput>static void CBiteOrt::tql2 (const int n, double * d, double ** V, double * e)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Symmetric tridiagonal QL algorithm from JAMA package. Std. deviation vector sorting removed. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00649">649</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a33285821015e487d6c933ed1d6385144_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a33285821015e487d6c933ed1d6385144_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a5415d9c622dbc0b03f32c0f105a9169a"/><section>
    <title>tred2()</title>
<indexterm><primary>tred2</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>tred2</secondary></indexterm>
<para><computeroutput>static void CBiteOrt::tred2 (const int n, double * d, double ** V, double * e)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Householder triagonalization routine from JAMA package. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00493">493</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a5415d9c622dbc0b03f32c0f105a9169a_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a955555215281014f61c914f71963009c"/><section>
    <title>unort()</title>
<indexterm><primary>unort</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>unort</secondary></indexterm>
<para><computeroutput>void CBiteOrt::unort (const double *const ip, double *const op)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function undos orthogonalization (rotation) of the parameter vector, adding centroid vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry><entry>ip</entry><entry>
<para>Input orthogonalized vector. </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>op</entry><entry>
<para>Output unorthogonalized vector, can be equal to &quot;ip&quot;. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00366">366</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1ab718877f7b3014357fc44bc34391d827"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void CBiteOrt::update (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp; ExtPop)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function performs rotation matrix update.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ExtPop</entry><entry>
<para>External population. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00180">180</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_ab718877f7b3014357fc44bc34391d827_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1ac3418aa5bb3f4e2735409038b56f98be"/><section>
    <title>updateDims()</title>
<indexterm><primary>updateDims</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>updateDims</secondary></indexterm>
<para><computeroutput>void CBiteOrt::updateDims (const int aParamCount, const int aPopSize)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function updates dimensions of *this object.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>aParamCount</entry><entry>
<para>The number of elements in the parameter vector. </para>
</entry>
                            </row>
                            <row>
<entry>aPopSize</entry><entry>
<para>Size of population used to calculate the rotation matrix. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00103">103</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_ac3418aa5bb3f4e2735409038b56f98be_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a2470177aa3f85af2a5a3daf548b7166e"/><section>
    <title>updateWeights()</title>
<indexterm><primary>updateWeights</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>updateWeights</secondary></indexterm>
<para><computeroutput>void CBiteOrt::updateWeights (const int UsePopSize)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Function updates centroid and covariance estimation weights.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>UsePopSize</entry><entry>
<para>Population size to use. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00119">119</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_ort_a2470177aa3f85af2a5a3daf548b7166e_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_c_bite_ort_1af37edb8ec1a7cec8f88169539952a1bb"/><section>
    <title>BParams</title>
<indexterm><primary>BParams</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>BParams</secondary></indexterm>
<para><computeroutput>double** CBiteOrt::BParams<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Rotation matrix. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00430">430</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a5bcc49be8d7e1b368a313ae2dd91063e"/><section>
    <title>BParamsBuf</title>
<indexterm><primary>BParamsBuf</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>BParamsBuf</secondary></indexterm>
<para><computeroutput>double* CBiteOrt::BParamsBuf<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>BParams buffer. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00428">428</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a274b976da955293465fc9e49ae0a7d9c"/><section>
    <title>CentPow</title>
<indexterm><primary>CentPow</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>CentPow</secondary></indexterm>
<para><computeroutput>double CBiteOrt::CentPow</computeroutput></para>
<para>Centroid weighting power coefficient. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00059">59</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1ae8c61d66cc14d42b4bc24ccc1b51fdde"/><section>
    <title>CovParams</title>
<indexterm><primary>CovParams</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>CovParams</secondary></indexterm>
<para><computeroutput>double** CBiteOrt::CovParams<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Covariance matrix. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00426">426</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a957515315eac19649dcc69f57ecefa88"/><section>
    <title>CovParamsBuf</title>
<indexterm><primary>CovParamsBuf</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>CovParamsBuf</secondary></indexterm>
<para><computeroutput>double* CBiteOrt::CovParamsBuf<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>CovParams buffer. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00424">424</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a22c0f31f0b3b89b84de05419c3f755c8"/><section>
    <title>CovUpdFast</title>
<indexterm><primary>CovUpdFast</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>CovUpdFast</secondary></indexterm>
<para><computeroutput>double CBiteOrt::CovUpdFast</computeroutput></para>
<para>Covariance matrix update rate, fast. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00063">63</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a2cf9763b9162a1095afbff15239dfc6b"/><section>
    <title>CovUpdSlow</title>
<indexterm><primary>CovUpdSlow</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>CovUpdSlow</secondary></indexterm>
<para><computeroutput>double CBiteOrt::CovUpdSlow</computeroutput></para>
<para>Covariance matrix update rate, slow. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00061">61</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a6c75959d8b2bd12b909f4637eeb16db7"/><section>
    <title>DParams</title>
<indexterm><primary>DParams</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>DParams</secondary></indexterm>
<para><computeroutput>double* CBiteOrt::DParams<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Std. deviations vector. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00432">432</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a73f4b5a868ea4cc2ef2f22c6841c263a"/><section>
    <title>DParamsN</title>
<indexterm><primary>DParamsN</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>DParamsN</secondary></indexterm>
<para><computeroutput>double* CBiteOrt::DParamsN<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Std. deviations vector, for negative values. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00434">434</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1af963cd0c9988f31971e375bd2aedf30d"/><section>
    <title>EvalFac</title>
<indexterm><primary>EvalFac</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>EvalFac</secondary></indexterm>
<para><computeroutput>double CBiteOrt::EvalFac</computeroutput></para>
<para>The multiplier of the population size, affects the actual number of function evaluations performed, &gt;=1. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00071">71</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1abcfbd9fc0b1d9620ad4fb8d396742f7c"/><section>
    <title>PrevCentParams</title>
<indexterm><primary>PrevCentParams</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>PrevCentParams</secondary></indexterm>
<para><computeroutput>double* CBiteOrt::PrevCentParams<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Previous centroid vector. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00436">436</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a0a177a216c024c0a9ceef4b191959958"/><section>
    <title>SigmaMulBase1</title>
<indexterm><primary>SigmaMulBase1</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>SigmaMulBase1</secondary></indexterm>
<para><computeroutput>double CBiteOrt::SigmaMulBase1</computeroutput></para>
<para>Sigma damping multiplier, for sphere. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00065">65</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a7031aaff7a449354b8b9a4ad59d2f5ee"/><section>
    <title>SigmaMulBase2</title>
<indexterm><primary>SigmaMulBase2</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>SigmaMulBase2</secondary></indexterm>
<para><computeroutput>double CBiteOrt::SigmaMulBase2</computeroutput></para>
<para>Sigma damping multiplier, for needle. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00067">67</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1aed92d35956a184cc13ad74c74821ffa4"/><section>
    <title>SigmaMulExp2</title>
<indexterm><primary>SigmaMulExp2</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>SigmaMulExp2</secondary></indexterm>
<para><computeroutput>double CBiteOrt::SigmaMulExp2</computeroutput></para>
<para>Sigma expansion multiplier, for needle. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00069">69</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a8323d1f7c3504e784d6a92682e54a97b"/><section>
    <title>spc</title>
<indexterm><primary>spc</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>spc</secondary></indexterm>
<para><computeroutput>double CBiteOrt::spc<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>spherical. </para>
</para>

<para>Distribution&apos;s sphericity coefficient. 1 - fully </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00444">444</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1ae73996fe205afb75041aa1d9d7ad473d"/><section>
    <title>WPopCent</title>
<indexterm><primary>WPopCent</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>WPopCent</secondary></indexterm>
<para><computeroutput>double* CBiteOrt::WPopCent<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Weighting coefficients for ordered population, for centroid calculation. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00438">438</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<anchor xml:id="_class_c_bite_ort_1a05fb4a934fae2cc11a491463cffbdbd5"/><section>
    <title>WPopCov</title>
<indexterm><primary>WPopCov</primary><secondary>CBiteOrt</secondary></indexterm>
<indexterm><primary>CBiteOrt</primary><secondary>WPopCov</secondary></indexterm>
<para><computeroutput>double* CBiteOrt::WPopCov<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Weighting coefficients for covariance calculation, squared. </para>
<para>
Definition at line <link linkend="_biteort_8h_source_1l00441">441</link> of file <link linkend="_biteort_8h_source">biteort.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
_fcmaescpp/include/<link linkend="_biteort_8h">biteort.h</link></section>
</section>
