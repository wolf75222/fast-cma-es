<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_edgecover_8py_source" xml:lang="en-US">
<title>edgecover.py</title>
<indexterm><primary>examples/fb/edgecover.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_edgecover_8py_source_1l00001"/><link linkend="_namespaceedgecover">00001</link> <emphasis role="comment">#&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00002"/>00002 <emphasis role="comment">#</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00005"/>00005 
<anchor xml:id="_edgecover_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;See&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Media.adoc&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00007"/>00007 
<anchor xml:id="_edgecover_8py_source_1l00008"/>00008 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00009"/>00009 
<anchor xml:id="_edgecover_8py_source_1l00010"/>00010 <emphasis role="keyword">import</emphasis>&#32;networkx&#32;<emphasis role="keyword">as</emphasis>&#32;nx
<anchor xml:id="_edgecover_8py_source_1l00011"/>00011 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_edgecover_8py_source_1l00012"/>00012 <emphasis role="keyword">from</emphasis>&#32;numba&#32;<emphasis role="keyword">import</emphasis>&#32;njit
<anchor xml:id="_edgecover_8py_source_1l00013"/>00013 <emphasis role="keyword">import</emphasis>&#32;numba
<anchor xml:id="_edgecover_8py_source_1l00014"/>00014 <emphasis role="keyword">from</emphasis>&#32;<link linkend="_namespacefcmaes_1_1optimizer">fcmaes.optimizer</link>&#32;<emphasis role="keyword">import</emphasis>&#32;De_cpp,&#32;wrapper
<anchor xml:id="_edgecover_8py_source_1l00015"/>00015 <emphasis role="keyword">from</emphasis>&#32;scipy.optimize&#32;<emphasis role="keyword">import</emphasis>&#32;Bounds&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00016"/>00016 <emphasis role="keyword">import</emphasis>&#32;random
<anchor xml:id="_edgecover_8py_source_1l00017"/>00017 <emphasis role="keyword">import</emphasis>&#32;time,&#32;math
<anchor xml:id="_edgecover_8py_source_1l00018"/>00018 <emphasis role="keyword">from</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">import</emphasis>&#32;Pool
<anchor xml:id="_edgecover_8py_source_1l00019"/>00019 <emphasis role="keyword">import</emphasis>&#32;multiprocessing&#32;<emphasis role="keyword">as</emphasis>&#32;mp
<anchor xml:id="_edgecover_8py_source_1l00020"/>00020 <emphasis role="keyword">import</emphasis>&#32;ctypes&#32;<emphasis role="keyword">as</emphasis>&#32;ct
<anchor xml:id="_edgecover_8py_source_1l00021"/>00021 
<anchor xml:id="_edgecover_8py_source_1l00022"/>00022 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_edgecover_8py_source_1l00023"/>00023 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_edgecover_8py_source_1l00024"/>00024 
<anchor xml:id="_edgecover_8py_source_1l00025"/>00025 logger.remove()
<anchor xml:id="_edgecover_8py_source_1l00026"/><link linkend="_namespaceedgecover_1a71246da8be12458f566ebd391e820de8">00026</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_edgecover_8py_source_1l00027"/>00027 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_edgecover_8py_source_1l00028"/>00028 
<anchor xml:id="_edgecover_8py_source_1l00029"/><link linkend="_namespaceedgecover_1a744dda64b530055628154923fb165b02">00029</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a744dda64b530055628154923fb165b02">plot_graph</link>(g):
<anchor xml:id="_edgecover_8py_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">import</emphasis>&#32;matplotlib.pyplot&#32;<emphasis role="keyword">as</emphasis>&#32;plt
<anchor xml:id="_edgecover_8py_source_1l00031"/>00031 &#32;&#32;&#32;&#32;pos&#32;=&#32;nx.circular_layout(g)
<anchor xml:id="_edgecover_8py_source_1l00032"/>00032 &#32;&#32;&#32;&#32;nx.draw(g,&#32;pos,&#32;with_labels=<emphasis role="keyword">True</emphasis>)
<anchor xml:id="_edgecover_8py_source_1l00033"/>00033 &#32;&#32;&#32;&#32;labels&#32;=&#32;nx.get_edge_attributes(g,&#32;<emphasis role="stringliteral">&apos;weight&apos;</emphasis>)
<anchor xml:id="_edgecover_8py_source_1l00034"/>00034 &#32;&#32;&#32;&#32;nx.draw_networkx_edge_labels(g,&#32;pos,&#32;edge_labels=labels)
<anchor xml:id="_edgecover_8py_source_1l00035"/>00035 &#32;&#32;&#32;&#32;plt.show()
<anchor xml:id="_edgecover_8py_source_1l00036"/>00036 
<anchor xml:id="_edgecover_8py_source_1l00037"/>00037 <emphasis role="stringliteral">&apos;&apos;&apos;apply&#32;jgrapht</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00038"/>00038 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_edgecover_8py_source_1l00039"/>00039 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;inspired&#32;by&#32;https://github.com/danielslz/minimum-vertex-cover/blob/main/utils.py</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00040"/>00040 <emphasis role="stringliteral">&apos;&apos;&apos;</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00041"/>00041 
<anchor xml:id="_edgecover_8py_source_1l00042"/><link linkend="_namespaceedgecover_1adacf3d39b139b421f2b14f266963dcc9">00042</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1adacf3d39b139b421f2b14f266963dcc9">nx_to_jgraph</link>(g):
<anchor xml:id="_edgecover_8py_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keyword">import</emphasis>&#32;jgrapht
<anchor xml:id="_edgecover_8py_source_1l00044"/>00044 &#32;&#32;&#32;&#32;jg&#32;=&#32;jgrapht.create_graph(directed=<emphasis role="keyword">False</emphasis>,&#32;weighted=<emphasis role="keyword">False</emphasis>,
<anchor xml:id="_edgecover_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allowing_self_loops=<emphasis role="keyword">False</emphasis>,&#32;allowing_multiple_edges=<emphasis role="keyword">False</emphasis>)
<anchor xml:id="_edgecover_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;jg.add_vertices_from(list(g.nodes))
<anchor xml:id="_edgecover_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;jg.add_edges_from(list(g.edges))
<anchor xml:id="_edgecover_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;jg
<anchor xml:id="_edgecover_8py_source_1l00049"/>00049 
<anchor xml:id="_edgecover_8py_source_1l00050"/><link linkend="_namespaceedgecover_1a2727ccaa79bc6d32ce044e9677314496">00050</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a2727ccaa79bc6d32ce044e9677314496">solve_jg</link>(g):
<anchor xml:id="_edgecover_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keyword">import</emphasis>&#32;jgrapht
<anchor xml:id="_edgecover_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;jg&#32;=&#32;<link linkend="_namespaceedgecover_1adacf3d39b139b421f2b14f266963dcc9">nx_to_jgraph</link>(g)
<anchor xml:id="_edgecover_8py_source_1l00053"/>00053 &#32;&#32;&#32;&#32;start_time&#32;=&#32;time.time()
<anchor xml:id="_edgecover_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;mvc&#32;=&#32;jgrapht.algorithms.vertexcover.greedy(jg)
<anchor xml:id="_edgecover_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="comment">#mvc&#32;=&#32;jgrapht.algorithms.vertexcover.edgebased(jg)</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="comment">#mvc&#32;=&#32;jgrapht.algorithms.vertexcover.clarkson(jg)</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="comment">#mvc&#32;=&#32;jgrapht.algorithms.vertexcover.baryehuda_even(jg)</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;mvc_size&#32;=&#32;int(mvc[0])
<anchor xml:id="_edgecover_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(<emphasis role="stringliteral">&quot;jgraph&#32;mvc&#32;size&quot;</emphasis>,&#32;mvc_size&#32;,&#32;<emphasis role="stringliteral">&apos;&#32;of&#32;nodes:&#32;&apos;</emphasis>,&#32;len(list(g.nodes())),&#32;
<anchor xml:id="_edgecover_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&apos;&#32;time&#32;=&#32;&apos;</emphasis>,&#32;round(time.time()-start_time,&#32;3),&#32;<emphasis role="stringliteral">&apos;&#32;sec&apos;</emphasis>)
<anchor xml:id="_edgecover_8py_source_1l00061"/>00061 
<anchor xml:id="_edgecover_8py_source_1l00062"/>00062 <emphasis role="stringliteral">&apos;&apos;&apos;greedy&#32;algorithm</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00063"/>00063 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="_edgecover_8py_source_1l00064"/>00064 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;inspired&#32;by&#32;https://github.com/sliao7/CSE6140-Final-Project-Minimum-Vertex-Cover/blob/main/code/SA.py</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00065"/>00065 <emphasis role="stringliteral">&apos;&apos;&apos;</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00067"/><link linkend="_namespaceedgecover_1a010150d32280d804796dadb5edda4711">00067</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a010150d32280d804796dadb5edda4711">initial_solution</link>(g):
<anchor xml:id="_edgecover_8py_source_1l00068"/>00068 &#32;&#32;&#32;&#32;solution&#32;=&#32;list(g.nodes())
<anchor xml:id="_edgecover_8py_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;sort&#32;nodes&#32;for&#32;degree,&#32;low&#32;degree&#32;has&#32;better&#32;chance&#32;not&#32;to&#32;uncover&#32;an&#32;edge</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;_,&#32;node&#32;<emphasis role="keywordflow">in</emphasis>&#32;\
<anchor xml:id="_edgecover_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sorted(list(zip(list(dict(g.degree(solution)).values()),&#32;solution))):
<anchor xml:id="_edgecover_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remove&#32;=&#32;<emphasis role="keyword">True</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;neigbor&#32;<emphasis role="keywordflow">in</emphasis>&#32;g.neighbors(node):&#32;<emphasis role="comment">#&#32;all&#32;neighbors&#32;covered?</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;neigbor&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;solution:
<anchor xml:id="_edgecover_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remove&#32;=&#32;<emphasis role="keyword">False</emphasis>&#32;<emphasis role="comment">#&#32;bad&#32;luck,&#32;would&#32;uncover&#32;an&#32;edge</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;remove:&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution.remove(node)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;solution
<anchor xml:id="_edgecover_8py_source_1l00079"/>00079 
<anchor xml:id="_edgecover_8py_source_1l00080"/><link linkend="_namespaceedgecover_1a73da3a94d91f82f192729ac189e39276">00080</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a73da3a94d91f82f192729ac189e39276">remove_node</link>(g,&#32;solution,&#32;mean,&#32;start_time,&#32;max_time):
<anchor xml:id="_edgecover_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;solution&#32;=&#32;solution.copy()
<anchor xml:id="_edgecover_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;uncovered&#32;=&#32;[]
<anchor xml:id="_edgecover_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;len(uncovered)&#32;==&#32;0:
<anchor xml:id="_edgecover_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to_delete&#32;=&#32;random.choice(solution)
<anchor xml:id="_edgecover_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;neighbor&#32;<emphasis role="keywordflow">in</emphasis>&#32;g.neighbors(to_delete):
<anchor xml:id="_edgecover_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;neighbor&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;solution:
<anchor xml:id="_edgecover_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uncovered.append(neighbor)
<anchor xml:id="_edgecover_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uncovered.append(to_delete)
<anchor xml:id="_edgecover_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution.remove(to_delete)&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;i&#32;=&#32;0
<anchor xml:id="_edgecover_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;max_i&#32;=&#32;mean&#32;*&#32;10
<anchor xml:id="_edgecover_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;len(uncovered)&#32;&gt;&#32;0&#32;<emphasis role="keywordflow">and</emphasis>&#32;i&#32;&lt;&#32;max_i&#32;<emphasis role="keywordflow">and</emphasis>&#32;\
<anchor xml:id="_edgecover_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time.time()&#32;-&#32;start_time&#32;&lt;&#32;max_time:
<anchor xml:id="_edgecover_8py_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;+=&#32;1
<anchor xml:id="_edgecover_8py_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;delete&#32;node&#32;from&#32;solution</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_solution&#32;=&#32;solution.copy()
<anchor xml:id="_edgecover_8py_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_uncovered&#32;=&#32;uncovered.copy()
<anchor xml:id="_edgecover_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to_delete&#32;=&#32;random.choice(solution)
<anchor xml:id="_edgecover_8py_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution.remove(to_delete)&#32;
<anchor xml:id="_edgecover_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;neighbor&#32;<emphasis role="keywordflow">in</emphasis>&#32;g.neighbors(to_delete):
<anchor xml:id="_edgecover_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;neighbor&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;solution:
<anchor xml:id="_edgecover_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uncovered.append(neighbor)
<anchor xml:id="_edgecover_8py_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uncovered.append(to_delete)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;add&#32;node&#32;to&#32;solution</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to_add&#32;=&#32;random.choice(uncovered)
<anchor xml:id="_edgecover_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution.append(to_add)
<anchor xml:id="_edgecover_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;neighbor&#32;<emphasis role="keywordflow">in</emphasis>&#32;g.neighbors(to_add):
<anchor xml:id="_edgecover_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;neighbor&#32;<emphasis role="keywordflow">not</emphasis>&#32;<emphasis role="keywordflow">in</emphasis>&#32;solution:
<anchor xml:id="_edgecover_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uncovered.remove(neighbor)
<anchor xml:id="_edgecover_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uncovered.remove(to_add)&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;update&#32;solution&#32;if&#32;uncovered&#32;shrink&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;len(next_uncovered)&#32;&lt;&#32;len(uncovered)&#32;<emphasis role="keywordflow">or</emphasis>&#32;\
<anchor xml:id="_edgecover_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(len(next_uncovered)&#32;==&#32;len(uncovered)&#32;<emphasis role="keywordflow">and</emphasis>&#32;\
<anchor xml:id="_edgecover_8py_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;&gt;&#32;mean&#32;<emphasis role="keywordflow">and</emphasis>&#32;random.random()&#32;&lt;&#32;1.0/mean):&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution&#32;=&#32;next_solution.copy()
<anchor xml:id="_edgecover_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uncovered&#32;=&#32;next_uncovered.copy()
<anchor xml:id="_edgecover_8py_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;solution,&#32;uncovered,&#32;i
<anchor xml:id="_edgecover_8py_source_1l00118"/>00118 
<anchor xml:id="_edgecover_8py_source_1l00119"/><link linkend="_namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f">00119</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f">solve_greedy</link>(g,&#32;seed,&#32;max_time):
<anchor xml:id="_edgecover_8py_source_1l00120"/>00120 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&quot;seed&quot;</emphasis>,&#32;seed)
<anchor xml:id="_edgecover_8py_source_1l00121"/>00121 &#32;&#32;&#32;&#32;random.seed(seed)
<anchor xml:id="_edgecover_8py_source_1l00122"/>00122 &#32;&#32;&#32;&#32;start_time&#32;=&#32;time.time()
<anchor xml:id="_edgecover_8py_source_1l00123"/>00123 &#32;&#32;&#32;&#32;solution&#32;=&#32;<link linkend="_namespaceedgecover_1a010150d32280d804796dadb5edda4711">initial_solution</link>(g)
<anchor xml:id="_edgecover_8py_source_1l00124"/>00124 &#32;&#32;&#32;&#32;iters&#32;=&#32;[]
<anchor xml:id="_edgecover_8py_source_1l00125"/>00125 &#32;&#32;&#32;&#32;mean&#32;=&#32;10000
<anchor xml:id="_edgecover_8py_source_1l00126"/>00126 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;time.time()&#32;-&#32;start_time&#32;&lt;&#32;max_time:
<anchor xml:id="_edgecover_8py_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_solution,&#32;uncovered,&#32;i&#32;=&#32;<link linkend="_namespaceedgecover_1a73da3a94d91f82f192729ac189e39276">remove_node</link>(g,&#32;solution,&#32;mean,&#32;start_time,&#32;max_time)
<anchor xml:id="_edgecover_8py_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iters.append(i)
<anchor xml:id="_edgecover_8py_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mean&#32;=&#32;np.mean(iters)
<anchor xml:id="_edgecover_8py_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;len(uncovered)&#32;==&#32;0:&#32;&#32;<emphasis role="comment">#&#32;all&#32;covered&#32;?</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution&#32;=&#32;next_solution
<anchor xml:id="_edgecover_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(round(time.time()-start_time,3),&#32;len(solution),&#32;i,&#32;int(mean))&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00133"/>00133 
<anchor xml:id="_edgecover_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;print(round(time.time()-start_time,3),&#32;len(solution))
<anchor xml:id="_edgecover_8py_source_1l00135"/>00135 &#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&apos;Solution:&#32;({})&#32;{}&apos;</emphasis>.<link linkend="_namespaceedgecover_1a71246da8be12458f566ebd391e820de8">format</link>(
<anchor xml:id="_edgecover_8py_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;len(solution),&#32;solution))
<anchor xml:id="_edgecover_8py_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;solution
<anchor xml:id="_edgecover_8py_source_1l00138"/>00138 
<anchor xml:id="_edgecover_8py_source_1l00139"/><link linkend="_namespaceedgecover_1a2db8017a9662aa750e8fd49a9d7c1d68">00139</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a2db8017a9662aa750e8fd49a9d7c1d68">run_solve</link>(g,&#32;max_time):
<anchor xml:id="_edgecover_8py_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceedgecover_1ab2c2a9dd447db5ff8c3125389066708f">solve_greedy</link>(g,&#32;random.randint(0,&#32;100000000),&#32;max_time)
<anchor xml:id="_edgecover_8py_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00142"/><link linkend="_namespaceedgecover_1a2f9e9af0dbf9169e251c131f7402f6fa">00142</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a2f9e9af0dbf9169e251c131f7402f6fa">solve_multiprocessing</link>(g,&#32;num,&#32;max_time):&#32;
<anchor xml:id="_edgecover_8py_source_1l00143"/>00143 &#32;&#32;&#32;&#32;<emphasis role="keyword">with</emphasis>&#32;Pool(processes=num)&#32;<emphasis role="keyword">as</emphasis>&#32;pool:
<anchor xml:id="_edgecover_8py_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solutions&#32;=&#32;pool.starmap(run_solve,&#32;[[g,&#32;max_time]&#32;<emphasis role="keywordflow">for</emphasis>&#32;_&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(num)])
<anchor xml:id="_edgecover_8py_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;solutions
<anchor xml:id="_edgecover_8py_source_1l00146"/>00146 
<anchor xml:id="_edgecover_8py_source_1l00147"/><link linkend="_namespaceedgecover_1a669278e054d76bef7dce46109d141905">00147</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a669278e054d76bef7dce46109d141905">add_vertice</link>(v,&#32;vmap):
<anchor xml:id="_edgecover_8py_source_1l00148"/>00148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;v&#32;<emphasis role="keywordflow">in</emphasis>&#32;vmap:
<anchor xml:id="_edgecover_8py_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vmap[v]
<anchor xml:id="_edgecover_8py_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_edgecover_8py_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;len(vmap)
<anchor xml:id="_edgecover_8py_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vmap[v]&#32;=&#32;i
<anchor xml:id="_edgecover_8py_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i
<anchor xml:id="_edgecover_8py_source_1l00154"/>00154 &#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00155"/><link linkend="_namespaceedgecover_1a9860d907cb65923b50ef1dd1b9761143">00155</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a9860d907cb65923b50ef1dd1b9761143">nx_graph</link>(filename):
<anchor xml:id="_edgecover_8py_source_1l00156"/>00156 &#32;&#32;&#32;&#32;g&#32;=&#32;nx.Graph()
<anchor xml:id="_edgecover_8py_source_1l00157"/>00157 &#32;&#32;&#32;&#32;vmap&#32;=&#32;{}
<anchor xml:id="_edgecover_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;lines&#32;=&#32;open(filename,&#32;<emphasis role="stringliteral">&apos;r&apos;</emphasis>).readlines()
<anchor xml:id="_edgecover_8py_source_1l00159"/>00159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;line&#32;<emphasis role="keywordflow">in</emphasis>&#32;lines:
<anchor xml:id="_edgecover_8py_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vs&#32;=&#32;line.split()
<anchor xml:id="_edgecover_8py_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source&#32;=&#32;<link linkend="_namespaceedgecover_1a669278e054d76bef7dce46109d141905">add_vertice</link>(vs[0],&#32;vmap)
<anchor xml:id="_edgecover_8py_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;target&#32;=&#32;<link linkend="_namespaceedgecover_1a669278e054d76bef7dce46109d141905">add_vertice</link>(vs[1],&#32;vmap)
<anchor xml:id="_edgecover_8py_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g.add_edge(source,&#32;target)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;g
<anchor xml:id="_edgecover_8py_source_1l00165"/>00165 
<anchor xml:id="_edgecover_8py_source_1l00166"/>00166 <emphasis role="stringliteral">&apos;&apos;&apos;&#32;optimization&#32;approach&#32;using&#32;numba&apos;&apos;&apos;</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00167"/>00167 
<anchor xml:id="_edgecover_8py_source_1l00168"/>00168 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00169"/><link linkend="_namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2">00169</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2">num_true</link>(nodes):
<anchor xml:id="_edgecover_8py_source_1l00170"/>00170 &#32;&#32;&#32;&#32;n&#32;=&#32;0
<anchor xml:id="_edgecover_8py_source_1l00171"/>00171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;b&#32;<emphasis role="keywordflow">in</emphasis>&#32;nodes:
<anchor xml:id="_edgecover_8py_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;b:
<anchor xml:id="_edgecover_8py_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;+=&#32;1
<anchor xml:id="_edgecover_8py_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n
<anchor xml:id="_edgecover_8py_source_1l00175"/>00175 
<anchor xml:id="_edgecover_8py_source_1l00176"/>00176 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00177"/><link linkend="_namespaceedgecover_1a9247b4fa16dbb502c6e5e1bd0c30ca12">00177</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a9247b4fa16dbb502c6e5e1bd0c30ca12">numba_covered</link>(source,&#32;target,&#32;nodes):
<anchor xml:id="_edgecover_8py_source_1l00178"/>00178 &#32;&#32;&#32;&#32;num&#32;=&#32;0
<anchor xml:id="_edgecover_8py_source_1l00179"/>00179 &#32;&#32;&#32;&#32;nedges&#32;=&#32;len(source)
<anchor xml:id="_edgecover_8py_source_1l00180"/>00180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(nedges):
<anchor xml:id="_edgecover_8py_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;nodes[source[i]]&#32;<emphasis role="keywordflow">or</emphasis>&#32;nodes[target[i]]:
<anchor xml:id="_edgecover_8py_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num&#32;+=&#32;1
<anchor xml:id="_edgecover_8py_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nedges&#32;-&#32;num&#32;
<anchor xml:id="_edgecover_8py_source_1l00184"/>00184 
<anchor xml:id="_edgecover_8py_source_1l00185"/><link linkend="_namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333">00185</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333">not_covered</link>(g,&#32;nodes):
<anchor xml:id="_edgecover_8py_source_1l00186"/>00186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceedgecover_1a9247b4fa16dbb502c6e5e1bd0c30ca12">numba_covered</link>(g.source,&#32;g.target,&#32;nodes)
<anchor xml:id="_edgecover_8py_source_1l00187"/>00187 
<anchor xml:id="_edgecover_8py_source_1l00188"/>00188 <emphasis role="preprocessor">@njit(fastmath=True)</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00189"/><link linkend="_namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e">00189</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e">nodes</link>(x):&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00190"/>00190 &#32;&#32;&#32;&#32;nds&#32;=&#32;np.empty(len(x),&#32;dtype=numba.boolean)
<anchor xml:id="_edgecover_8py_source_1l00191"/>00191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(x)):
<anchor xml:id="_edgecover_8py_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nds[i]&#32;=&#32;<emphasis role="keyword">True</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;x[i]&#32;&gt;&#32;0.5&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keyword">False</emphasis>&#32;
<anchor xml:id="_edgecover_8py_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nds
<anchor xml:id="_edgecover_8py_source_1l00194"/>00194 
<anchor xml:id="_edgecover_8py_source_1l00195"/><link linkend="_classedgecover_1_1graph">00195</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classedgecover_1_1graph">graph</link>():
<anchor xml:id="_edgecover_8py_source_1l00196"/>00196 &#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00197"/><link linkend="_classedgecover_1_1graph_1ab949ce0b99bb4cd1ef8257c1360fb528">00197</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classedgecover_1_1graph_1ab949ce0b99bb4cd1ef8257c1360fb528">__init__</link>(self,&#32;g):
<anchor xml:id="_edgecover_8py_source_1l00198"/><link linkend="_classedgecover_1_1graph_1ab1c2291dc3aca604a76b86f29abe3dc4">00198</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classedgecover_1_1graph_1ab1c2291dc3aca604a76b86f29abe3dc4">nodes</link>&#32;=&#32;np.array(g.nodes(),&#32;dtype=int)
<anchor xml:id="_edgecover_8py_source_1l00199"/><link linkend="_classedgecover_1_1graph_1ad44bc611ea2c7acc18d393800c6f3c54">00199</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classedgecover_1_1graph_1ad44bc611ea2c7acc18d393800c6f3c54">source</link>&#32;=&#32;np.array([n&#32;<emphasis role="keywordflow">for</emphasis>&#32;n,&#32;_&#32;<emphasis role="keywordflow">in</emphasis>&#32;g.edges()],&#32;dtype=int)
<anchor xml:id="_edgecover_8py_source_1l00200"/><link linkend="_classedgecover_1_1graph_1aa4d72257e78cc1597ae73f6cb0e104ad">00200</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classedgecover_1_1graph_1aa4d72257e78cc1597ae73f6cb0e104ad">target</link>&#32;=&#32;np.array([n&#32;<emphasis role="keywordflow">for</emphasis>&#32;_,&#32;n&#32;<emphasis role="keywordflow">in</emphasis>&#32;g.edges()],&#32;dtype=int)&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00201"/>00201 
<anchor xml:id="_edgecover_8py_source_1l00202"/><link linkend="_classedgecover_1_1problem">00202</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classedgecover_1_1problem">problem</link>():
<anchor xml:id="_edgecover_8py_source_1l00203"/>00203 &#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00204"/><link linkend="_classedgecover_1_1problem_1a7e56f4392b466592b5be52005fb1bd4a">00204</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classedgecover_1_1problem_1a7e56f4392b466592b5be52005fb1bd4a">__init__</link>(self,&#32;g):
<anchor xml:id="_edgecover_8py_source_1l00205"/><link linkend="_classedgecover_1_1problem_1a076d2450c80fd6459cb257188c1afc83">00205</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classedgecover_1_1problem_1a076d2450c80fd6459cb257188c1afc83">dim</link>&#32;=&#32;len(g.nodes())
<anchor xml:id="_edgecover_8py_source_1l00206"/><link linkend="_classedgecover_1_1problem_1ace89b603f11f12ce781bb6e2b1a27d5f">00206</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classedgecover_1_1problem_1ace89b603f11f12ce781bb6e2b1a27d5f">bounds</link>&#32;=&#32;Bounds([0]*self.<link linkend="_classedgecover_1_1problem_1a076d2450c80fd6459cb257188c1afc83">dim</link>,&#32;[1.999999999999]*self.<link linkend="_classedgecover_1_1problem_1a076d2450c80fd6459cb257188c1afc83">dim</link>)&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00207"/><link linkend="_classedgecover_1_1problem_1acaf0cb6b366623d1b0bea27a3bcbb743">00207</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classedgecover_1_1problem_1acaf0cb6b366623d1b0bea27a3bcbb743">g</link>&#32;=&#32;<link linkend="_classedgecover_1_1graph">graph</link>(g)&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00208"/><link linkend="_classedgecover_1_1problem_1af5df7f082a9a6052bab659374db8b08c">00208</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classedgecover_1_1problem_1af5df7f082a9a6052bab659374db8b08c">best_n</link>&#32;=&#32;mp.RawValue(ct.c_double,&#32;np.inf)&#32;
<anchor xml:id="_edgecover_8py_source_1l00209"/>00209 &#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00210"/><link linkend="_classedgecover_1_1problem_1a8ad14faff9c46c2d1da7ddf258b015b2">00210</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classedgecover_1_1problem_1a8ad14faff9c46c2d1da7ddf258b015b2">fitness</link>(self,&#32;x):
<anchor xml:id="_edgecover_8py_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nds&#32;=&#32;<link linkend="_namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e">nodes</link>(x.astype(int))
<anchor xml:id="_edgecover_8py_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ncov&#32;=&#32;<link linkend="_namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333">not_covered</link>(self.<link linkend="_classedgecover_1_1problem_1acaf0cb6b366623d1b0bea27a3bcbb743">g</link>,&#32;nds)
<anchor xml:id="_edgecover_8py_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;<link linkend="_namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2">num_true</link>(nds)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n&#32;+&#32;2*ncov
<anchor xml:id="_edgecover_8py_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00216"/><link linkend="_namespaceedgecover_1a182ff9dbc428e26929d7fa0413315027">00216</link> <emphasis role="keyword">def&#32;</emphasis><link linkend="_namespaceedgecover_1a182ff9dbc428e26929d7fa0413315027">solve_opt</link>(g):&#32;
<anchor xml:id="_edgecover_8py_source_1l00217"/>00217 &#32;&#32;&#32;&#32;prob&#32;=&#32;<link linkend="_classedgecover_1_1problem">problem</link>(g)&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00218"/>00218 &#32;&#32;&#32;&#32;res&#32;=&#32;retry.minimize(<link linkend="_classfcmaes_1_1optimizer_1_1wrapper">wrapper</link>(prob.fitness),&#32;
<anchor xml:id="_edgecover_8py_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prob.bounds,&#32;
<anchor xml:id="_edgecover_8py_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optimizer=<link linkend="_classfcmaes_1_1optimizer_1_1_de__cpp">De_cpp</link>(500000,&#32;ints&#32;=&#32;[<emphasis role="keyword">True</emphasis>]*prob.dim),&#32;
<anchor xml:id="_edgecover_8py_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_retries=32)
<anchor xml:id="_edgecover_8py_source_1l00222"/>00222 &#32;&#32;&#32;&#32;nds&#32;=&#32;<link linkend="_namespaceedgecover_1ac5b3a2a87224ba1241ca69d49adc5c3e">nodes</link>(res.x.astype(int))
<anchor xml:id="_edgecover_8py_source_1l00223"/>00223 &#32;&#32;&#32;&#32;ncov&#32;=&#32;<link linkend="_namespaceedgecover_1ad20c66f5851e97419ed4bda2ef1aa333">not_covered</link>(prob.g,&#32;nds)
<anchor xml:id="_edgecover_8py_source_1l00224"/>00224 &#32;&#32;&#32;&#32;n&#32;=&#32;<link linkend="_namespaceedgecover_1a1b8b28cc53b6df88c1a30a41217fe0a2">num_true</link>(nds)&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">print</emphasis>&#32;(<emphasis role="stringliteral">&quot;nodes&#32;=&#32;&quot;</emphasis>,&#32;n,&#32;<emphasis role="stringliteral">&quot;&#32;of&#32;population&#32;=&#32;&quot;</emphasis>,&#32;len(nds),
<anchor xml:id="_edgecover_8py_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;%&#32;=&#32;&quot;</emphasis>,&#32;int(100*n/len(nds)),&#32;<emphasis role="stringliteral">&quot;&#32;edges&#32;not&#32;covered&#32;=&#32;&quot;</emphasis>,&#32;ncov)
<anchor xml:id="_edgecover_8py_source_1l00227"/>00227 
<anchor xml:id="_edgecover_8py_source_1l00228"/>00228 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_edgecover_8py_source_1l00229"/>00229 
<anchor xml:id="_edgecover_8py_source_1l00230"/><link linkend="_namespaceedgecover_1a1258e4ccc07f1c0a31fe912e53cf08ca">00230</link> &#32;&#32;&#32;&#32;g&#32;=&#32;<link linkend="_namespaceedgecover_1a9860d907cb65923b50ef1dd1b9761143">nx_graph</link>(<emphasis role="stringliteral">&quot;1912.edges&quot;</emphasis>)
<anchor xml:id="_edgecover_8py_source_1l00231"/>00231 &#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00232"/>00232 &#32;&#32;&#32;&#32;<emphasis role="comment">#solve_jg(g)</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<emphasis role="comment">#solve_greedy(g,&#32;47,&#32;1)</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00234"/>00234 &#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00235"/>00235 &#32;&#32;&#32;&#32;<link linkend="_namespaceedgecover_1a2f9e9af0dbf9169e251c131f7402f6fa">solve_multiprocessing</link>(g,&#32;16,&#32;10)
<anchor xml:id="_edgecover_8py_source_1l00236"/>00236 
<anchor xml:id="_edgecover_8py_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<emphasis role="comment">#solve_opt(g)</emphasis>
<anchor xml:id="_edgecover_8py_source_1l00238"/>00238 &#32;&#32;&#32;&#32;
<anchor xml:id="_edgecover_8py_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="comment">#plot_graph(g)</emphasis>
</programlisting></section>
