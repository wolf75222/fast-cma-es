<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap" xml:lang="en-US">
<title>CBiteOptDeep::CBiteOptWrap Class Reference</title>
<indexterm><primary>CBiteOptDeep::CBiteOptWrap</primary></indexterm>
<para>
<computeroutput>#include &lt;biteopt.h&gt;</computeroutput>
</para>
Inheritance diagram for CBiteOptDeep::CBiteOptWrap:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_deep_1_1_c_bite_opt_wrap__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for CBiteOptDeep::CBiteOptWrap:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_deep_1_1_c_bite_opt_wrap__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a8f0f4ade1c6e99b3f0efc94670d3ae8f">CBiteOptWrap</link> (<link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link> *const aOwner)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a2b9e245cc0cdb32268e01c0ec406fe63">getMinValues</link> (double *const p) const</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a2f9fc126b59988b4a0812d87b3d6fdfd">getMaxValues</link> (double *const p) const</para>
</listitem>
            <listitem><para>virtual double <link linkend="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a881038400bff3e6d813fcb4304a9bac0">optcost</link> (const double *const p)</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_c_bite_opt">CBiteOpt</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_1a5f4640ecb94e39ea475d71ca2234bc39">CBiteOpt</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a73dc570985bec54dc288690c31a8d8c7">updateDims</link> (const int aParamCount, const int PopSize0=0)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a24a8733fc9dbb2c7e314b699fc360d7b">init</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double *const InitParams=NULL, const double InitRadius=1.0)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_1a2f56a9d5d682c92e2da1234ed68d54ed">optimize</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, <link linkend="_class_c_bite_opt">CBiteOpt</link> *const PushOpt=NULL)</para>
</listitem>
        </itemizedlist>
Public Member Functions inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_base_1af11515f00a0a685516aa9cc3daf7f603">CBiteOptBase</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_opt_base_1abc6be9a0740c36dfadb4ec3508dc0d65">~CBiteOptBase</link> ()</para>
</listitem>
            <listitem><para>virtual const double * <link linkend="_class_c_bite_opt_base_1abbed35653d8765915efc675204c19bb2">getBestParams</link> () const</para>
</listitem>
            <listitem><para>virtual double <link linkend="_class_c_bite_opt_base_1a4b2d3669723dbe251cf391cc10dd4f5c">getBestCost</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> ** <link linkend="_class_c_bite_opt_base_1a2eaae4dd1761eaef42ead68546994c12">getSels</link> ()</para>
</listitem>
            <listitem><para>const char ** <link linkend="_class_c_bite_opt_base_1afd1006a5d6154064115a205b54ecaa8c">getSelNames</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1a96f3b9e0a82d830bc34c17a5d0f8fa19">getSelCount</link> () const</para>
</listitem>
        </itemizedlist>
Public Member Functions inherited from <link linkend="_class_c_bite_opt_interface">CBiteOptInterface</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_interface_1a0155b3fcab9eeb2d7505c0326e12e809">CBiteOptInterface</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_opt_interface_1a070d1317053ec55bbe7d8ddde32076ce">~CBiteOptInterface</link> ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link> * <link linkend="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1aababa20b5a32983ebfc89e2d14cfe72c">Owner</link></para>

<para>Owner object. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
Public Types inherited from <link linkend="_class_c_bite_opt">CBiteOpt</link>        <itemizedlist>
            <listitem><para>typedef int64_t <link linkend="_class_c_bite_opt_1a80651b5ffb10feccb67729f4c472a5dd">ptype</link></para>

<para>signed integer type, same as <link linkend="_class_c_bite_opt_base">CBiteOptBase</link> template parameter). </para>
</listitem>
        </itemizedlist>
</simplesect>
Static Public Attributes inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link></para>

<para>that can be added to *this object (for static arrays). </para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class_c_bite_opt">CBiteOpt</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a168cd86a91750b0548698f046e4b6d83">updateParPop</link> (const double UpdCost, const <link linkend="_class_c_bite_opt_1a80651b5ffb10feccb67729f4c472a5dd">ptype</link> *const UpdParams)</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_opt_1a344271b2490d03eaa0c8e1ab062d916d">selectParPop</link> (const int gi, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_opt_1ab98060db69130d7610818bddda8c7115">selectAltPop</link> (const int gi, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_1af25cdfb71a0ad9081148c31da58fe949">getMinSolIndex</link> (const int gi, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const int ps)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1aaf2f5bc8a214a95532426c9a9b38fdb8">generateSol1</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1ab6de0da3b279e77788efed7d3e05a0e2">generateSol2</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1abd6c435c82a97476332139663d9a1c82">generateSol2b</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a2363863090db7154792f78ec46abcf47">generateSol2c</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a76fa9d8bf4abde13b69e06761acc82f5">generateSol2d</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a2babc6c08dad9718d349683242805bc0">generateSol3</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1ae48399aea9fc3c2e01b370b846d88c82">generateSol4</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a01e7f5a94a2ae837844f8c60ddf21db6">generateSol5</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1aac1bd4dd832e20880872b94b07773946">generateSol5b</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a001440627928387b57b5f266696ba330">generateSol6</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a6766fe9d56bee1f623d297b2f9cf8500">generateSol7</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a332b03425de84b8ef8eb362af8e75e78">generateSol8</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1adca09db7345122f1da38d8f5c1800d83">generateSol9</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1a8a5048dc4357f48344cf5ade0757ae2b">generateSol10</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_1aee604953caf90013f483d9f77fd3881c">generateSolPar</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_base_1a5c53a8eb3a4269a746d990282452d71e">initBuffers</link> (const int aParamCount, const int aPopSize, const int aCnsCount=0, const int aObjCount=1)</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_c_bite_opt_base_1aed59421f7102fb6921e4af39acfb8369">deleteBuffers</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a768362da5c773eea5a8649d44676eeed">initCommonVars</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1ac2ee22488c24887a922a30dd15d898e6">updateDiffValues</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a9e49b98f5f6a2470d060282b2fd26a53">updateBestCost</link> (const double UpdCost, const double *const UpdValues, const int p=-1)</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a7b849dbede3dc6be555a4197541fad51">getRealValue</link> (const int64_t *const NormParams, const int i) const</para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a634a498e8ebd71bbf87fd1df02f178e0">wrapParamReal</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v, const int i) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a5d8710f00b828beca21c0d2699ae340d">addSel</link> (<link linkend="_class_c_bite_sel_base">CBiteSelBase</link> &amp;s, const char *const sname)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select</link> (T &amp;Sel, <link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1aa08dcfff8871910e4d01a94f261ee752">applySelsIncr</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double v=1.0)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_opt_base_1a47acdb7a495f75170b0eb457e0dc950e">applySelsDecr</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd)</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_par_pops_1a24cc3d1978b4dbe57fad8a6f6d7efd8a">setParPopCount</link> (const int NewCount)</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_par_pops_1afa8a97732cea882b664c2d0fbedf2289">getMinDistParPop</link> (const double Cost, const int64_t *const Params) const</para>
</listitem>
        </itemizedlist>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_par_pops_1a1d00195283da4d97f648da706e5c5cec">CBiteParPops</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_par_pops_1a772516362f17b8e5790596740ce355ba">~CBiteParPops</link> ()</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a0d5ab322641bb1a091df91ff7ee630c4">zeroParams</link> (int64_t *const dst) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a24130fea35014433f142e3b9ed0f8929">copyParams</link> (int64_t *const dst, const int64_t *const src) const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a57e751582761922bbabff1ddb7af277b">copyValues</link> (double *const dst, const double *const src) const</para>
</listitem>
        </itemizedlist>
        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop_1ad427518ed1d47fbe3c2222b3a11badb7">CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop_1a73402384f4b75abf6d956dc086ccf36e">CBitePop</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_c_bite_pop_1ac386e4638d6fc6bd5370eeae895347c3">~CBitePop</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> &amp; <link linkend="_class_c_bite_pop_1ab18cf322db6ab186db1e19b53e34c232">operator=</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a3fc2d887ae91be62fd9fc3100268e53c">copy</link> (const <link linkend="_class_c_bite_pop">CBitePop</link> &amp;s)</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a7850902dad276dcecea68559eaccc168">updateCentroid</link> ()</para>
</listitem>
            <listitem><para>const int64_t * <link linkend="_class_c_bite_pop_1a5e6ccebb178353b084084f841b09042d">getCentroid</link> () const</para>
</listitem>
            <listitem><para>const int64_t * <link linkend="_class_c_bite_pop_1aaa8e3f180accfedf21218cbed8ffbb79">getParamsOrdered</link> (const int i) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad38d886687357797479e69098759476a">getCnsPtr</link> (int64_t *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1ad6cbe6cfbf9954dcb6f8a223a5e1f36b">getObjPtr</link> (int64_t *const pp) const</para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_pop_1aa4f3255c9607f72eff280f8c3c09143f">getRankPtr</link> (int64_t *const pp) const</para>
</listitem>
            <listitem><para>const int64_t ** <link linkend="_class_c_bite_pop_1ac2a01e9eb6b884a0b318e4b914273acf">getPopParams</link> () const</para>
</listitem>
            <listitem><para>int64_t * <link linkend="_class_c_bite_pop_1a0053ae41c70babe967c5931f491ea865">getCurParams</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a5aef425d751172e1fff38a455cb51d34">getCurPopSize</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a7e1fbb7f7e9aaf8f73eb865fa4610185">getCurPopPos</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a767519aa2fcc2667dc135a131bc9fd85">resetCurPopPos</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a48d6ede5c82534c973e0458726e820dd">incrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_c_bite_pop_1a4656171c63f1944ae045d6f222d9d33a">decrCurPopSize</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aad999ddc8a2ed72ffaee0db7732c9f76">updatePop</link> (double UpdCost, const int64_t *const UpdParams, const bool DoUpdateCentroid, const bool CanRejectCost=true)</para>
</listitem>
        </itemizedlist>
Static Protected Member Functions inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static int64_t <link linkend="_class_c_bite_pop_1a3b7e8d2276455475bd761e29c8c72ac6">wrapParam</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const int64_t v)</para>
</listitem>
            <listitem><para>static int64_t <link linkend="_class_c_bite_pop_1aecaac61269e65bda93cb2dc1a3a26091">getGaussianInt</link> (<link linkend="_class_c_bite_rnd">CBiteRnd</link> &amp;rnd, const double sd, const int64_t meanInt)</para>
</listitem>
            <listitem><para>static double <link linkend="_class_c_bite_pop_1ad4e3a3c5b7a25ad02ef0231bd3fe8388">calcLP1Coeff</link> (const double Count)</para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_c_bite_opt">CBiteOpt</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a91a52c9eab07a265fce92f0ba0ec0d03">MethodSel</link></para>

<para>Population generator 4-method selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a03f51391b90a59f023178008e3d27746">M1Sel</link></para>

<para>Method 1&apos;s sub-method selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 3 &gt; <link linkend="_class_c_bite_opt_1a3af3717f98de343325970c75aca0845c">M1ASel</link></para>

<para>Method 1&apos;s sub-sub-method A selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a7e0f0eb4591c8c8f0a0147324e91e9e1">M1BSel</link></para>

<para>Method 1&apos;s sub-sub-method B selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a19ae8f821f9f26a9c0e01870bad6c42a">M1CSel</link></para>

<para>Method 1&apos;s sub-sub-method C selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a7d27a27405a83e13d6674d22e22c4f4f">M2Sel</link></para>

<para>Method 2&apos;s sub-method selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a7f28d33448459a4a860f6df420333afc">M2BSel</link></para>

<para>Method 2&apos;s sub-sub-method B selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1acac20a0af0c58f4aa58fb20bf4be11d5">PopChangeIncrSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1acd43fdffae9a65684c1436aaee087fd1">PopChangeDecrSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a1926decbab37c16bdf14787724e875d6">ParOpt2Sel</link></para>

<para>Parallel optimizer 2 use selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a47f66536806d836d1ec0ee5926995c0d">ParPopPSel</link> [4]</para>

<para>probability selectors. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a7c38e45fe68be8f7f9e6cbb4f1ec7e50">AltPopPSel</link></para>

<para>Alternative population use selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1abdbe1b2dca3680429d01e33ad78e0588">AltPopSel</link> [4]</para>

<para>selectors. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a1f08554f3c3fffb89fafd91104d6ac5d">MinSolPwrSel</link> [4]</para>

<para>least-cost population index selection. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a26719d83668ff3b3cce919878c358967">MinSolMulSel</link> [4]</para>

<para>least-cost population index selection. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1aabfab1d71a0563959f94970b250c5df9">Gen1AllpSel</link></para>

<para>Generator method 1&apos;s Allp selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a4cb14ff23736a5a74987504f94f1bf4b">Gen1MoveAsyncSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1a88b8c7fcc43de72d390950fbfdc86cad">Gen1MoveSpanSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1aa05a9c04ac6d2a2ec6b679abd789df64">Gen2ModeSel</link></para>

<para>Generator method 2&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a8d6a5b4fd019d8aa73529c1fda6e91d5">Gen2bModeSel</link></para>

<para>Generator method 2b&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a96dbb17248d735d60d10b6ef4be3b7c5">Gen2cModeSel</link></para>

<para>Generator method 2c&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a1db3ecb43fe42f89db5b8dc1644baad6">Gen2dModeSel</link></para>

<para>Generator method 2d&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1abe8a0cedf383e8d0b272e779c2c8c6a4">Gen3ModeSel</link></para>

<para>Generator method 3&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1adf6acc728abfdec9b464d4a3c37b6a82">Gen4MixFacSel</link></para>

<para>selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1af0f831fa6f9105ecab62be7bbb2c79b8">Gen5bModeSel</link></para>

<para>Generator method 5b&apos;s Mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1aad5bacfdff08b09d2834231c17bab4a2">Gen7PowFacSel</link></para>

<para>Generator method 7&apos;s Power selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 2 &gt; <link linkend="_class_c_bite_opt_1a44981d73146ac3b77f4c7283af776473">Gen8ModeSel</link></para>

<para>Generator method 8&apos;s mode selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1af4e31b724cbc2a4e859ebd205e5cfd25">Gen8NumSel</link></para>

<para>Generator method 8&apos;s NumSols selector. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel">CBiteSel</link>&lt; 4 &gt; <link linkend="_class_c_bite_opt_1ada28884009d78c2651d1b68dd3f6e1ba">Gen8SpanSel</link> [2]</para>

<para>selectors. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> <link linkend="_class_c_bite_opt_1a7c347ab2966fe6e79a9022fb136d25fc">OldPop</link></para>

<para>probabilistically. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_opt_1af14783d4853d9e7e207f00788583a42e">DoInitEvals</link></para>

<para>&quot;True&quot; if initial evaluations should be performed. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_opt_1ae7df30b17e5821498b7284e182425cdf">DoEval</link></para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_1a764c6c8faa178116999c26b3866f8189">NewCost</link></para>

<para>value (cost). </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_opt_1_1_c_par_opt">CParOpt</link>&lt; <link linkend="_class_c_spher_opt">CSpherOpt</link> &gt; <link linkend="_class_c_bite_opt_1aa2ca8983a05dc599ff5a5f47d3af16b4">ParOpt</link></para>

<para>Parallel optimizer. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> <link linkend="_class_c_bite_opt_1a93a88d27436aa1660edea574fea346ef">ParOptPop</link></para>

<para>Includes only its solutions. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_opt_1_1_c_par_opt">CParOpt</link>&lt; <link linkend="_class_c_n_m_seq_opt">CNMSeqOpt</link> &gt; <link linkend="_class_c_bite_opt_1a2ddf8b2ba7691dc249b50baab668a5c8">ParOpt2</link></para>

<para>Parallel optimizer2. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link> <link linkend="_class_c_bite_opt_1afb37a6bb1eacba21280536ee17511830">ParOpt2Pop</link></para>

<para>Includes only its solutions. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_1ab3a911c7924b1a55c9a38365ea1e60ef">UseParOpt</link></para>

<para>Parallel optimizer currently being in use. </para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a07d5b7c3007f79c7dc1f6106d9832dc6">MinValues</link></para>

<para>Minimal parameter values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a9b100a7afa3bdcb3684383ff2df7867a">MaxValues</link></para>

<para>Maximal parameter values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a70f5211fb9521491b0e6a336e21dd7bc">DiffValues</link></para>

<para>values. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1ad5c0fe9c5312847158a6df8f4639de23">DiffValuesI</link></para>

<para>Inverse DiffValues. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a0fbab700b9d9c5c36d5ef664540efad0">BestValues</link></para>

<para>Best parameter vector. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1adc4dfe02978fd4ed460f49c7e9a01633">BestCost</link></para>

<para>Cost of the best parameter vector. </para>
</listitem>
            <listitem><para>double * <link linkend="_class_c_bite_opt_base_1a0a97be5c42eed6fbaffba04c8720e6ce">NewValues</link></para>

<para>Temporary new parameter buffer, with real values. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1ab756659a8ba09ba42ffa3d207564fdd8">StallCount</link></para>

<para>The number of iterations without improvement. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1a48296b534db162fa0007ff83757cb84b">HiBound</link></para>

<para>be used by the optimizer. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_opt_base_1acc0aa62d6125bd03d3baae22b0bf0467">AvgCost</link></para>

<para>the optimizer. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> * <link linkend="_class_c_bite_opt_base_1aebc1904c883f8b4dafefeda608c4536b">Sels</link> [<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]</para>

<para>indexed access in some cases. </para>
</listitem>
            <listitem><para>const char * <link linkend="_class_c_bite_opt_base_1a43d69538ae5aa7d78d8b3a3e821902b7">SelNames</link> [<link linkend="_class_c_bite_opt_base_1ad4c10c5958656e9ad5bb0073415b9c9f">MaxSelCount</link>]</para>

<para>Selector names. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1ae9b284aca73ab2f6784f12174e391f7b">SelCount</link></para>

<para>The number of selectors in use. </para>
</listitem>
            <listitem><para><link linkend="_class_c_bite_sel_base">CBiteSelBase</link> * <link linkend="_class_c_bite_opt_base_1a3922d6b29602643882d3212071a5e679">ApplySels</link> [<link linkend="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba">MaxApplySels</link>]</para>

<para><link linkend="_class_c_bite_opt_base_1abf93d2e584756812ad210f86e4f84a69">select()</link> function calls during the optimize() function call. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_opt_base_1afc2d6ec2c61d8f41bd39bb99632cf12e">ApplySelsCount</link></para>

<para>optimize() function call. </para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class_c_bite_pop">CBitePop</link>&lt; int64_t &gt; * <link linkend="_class_c_bite_par_pops_1a79983cca58bd18a6ff73120e65a976dd">ParPops</link> [<link linkend="_class_c_bite_par_pops_1a451f5fa8bb3503f9c344fe03f46ffcc9">MaxParPopCount</link>]</para>

<para>orbiting *this population. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_par_pops_1aea59bf6c1cf9894f944d07cec99882ee">ParPopCount</link></para>

<para>be changed via the <link linkend="_class_c_bite_par_pops_1a24cc3d1978b4dbe57fad8a6f6d7efd8a">setParPopCount()</link> function. </para>
</listitem>
        </itemizedlist>
Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0dc6f7b3a19db513e349e68c3471f9fa">ParamCount</link></para>

<para>The total number of internal parameter values in use. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1a884c9ad4c0327aaa0110a23a89f5697a">ParamCountI</link></para>

<para>= 1.0 / ParamCount. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a58e3bf5abc2fb4b1e173aa6cb3477bfb">PopSize</link></para>

<para>The size of population in use (maximal). </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a0b64743a84d5af143d44e7f6e9f02ada">PopSize1</link></para>

<para>= PopSize - 1. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1adc98fbdebc2671ef0826245d8c472cc5">CurPopSize</link></para>

<para>Current population size. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a26b81c70200085e410cf83258e139f9b">CurPopSize1</link></para>

<para>= CurPopSize - 1. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1aa5105ca75379f9a760dc9f0b9ea30ea7">CurPopSizeI</link></para>

<para>= 1.0 / CurPopSize. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1aa7c87b9148768d6104f8d3dfb5abebce">CurPopPos</link></para>

<para>update. This variable should be initialized by the optimizer. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2bf725291723a8dcaa215496e3175471">CnsCount</link></para>

<para>The number of constraints per solution. </para>
</listitem>
            <listitem><para>int <link linkend="_class_c_bite_pop_1a2f7c6a4707e23c21197ab32b71d900c7">ObjCount</link></para>

<para>The number of objectives per solution. </para>
</listitem>
            <listitem><para>uint8_t * <link linkend="_class_c_bite_pop_1ac69b014720b11a472509b22588eaf6c3">PopParamsBuf</link></para>

<para>Buffer for all PopParams vectors. </para>
</listitem>
            <listitem><para>int64_t ** <link linkend="_class_c_bite_pop_1a0c41790e473b70c5ec37986d0fb1f9a2">PopParams</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a6d4a3479ca9e60de6cf4667d5b2937a5">PopCnsOffs</link></para>

<para>a population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a98e2af75120c4184b271c14d22acf9d4">PopObjOffs</link></para>

<para>population item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3ecc4ffcf1c6f3f9b4e4e5a873c481fe">PopRankOffs</link></para>

<para>item. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_c_bite_pop_1a3cdac0ad2cf5c8403f1f7676171f4e76">PopItemSize</link></para>

<para>Size in bytes of population item. </para>
</listitem>
            <listitem><para>int64_t * <link linkend="_class_c_bite_pop_1ac31d95bc1f383828e72bcf1eb499e949">CentParams</link></para>

<para>Centroid of the parameter vectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_c_bite_pop_1a41f29468becc588bea6ff3f842db93ea">NeedCentUpdate</link></para>

<para>&quot;True&quot; if centroid update is needed. </para>
</listitem>
            <listitem><para>double <link linkend="_class_c_bite_pop_1ab6dec63b0ee3955563c2a3f815614f31">CentLPC</link></para>

<para>Centroid averaging filter coefficient. </para>
</listitem>
            <listitem><para>int64_t * <link linkend="_class_c_bite_pop_1acae90e3584dca8b6c08c70d7bd317729">TmpParams</link></para>

<para>element of the PopParams array. </para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_opt_base">CBiteOptBase&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_opt_base_1ab1e0b2f8caf76a2a75401e2f6bc913ba">MaxApplySels</link></para>

<para>that can be used during a single optimize() function call. </para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_par_pops">CBiteParPops&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_par_pops_1a451f5fa8bb3503f9c344fe03f46ffcc9">MaxParPopCount</link></para>

<para>population supported. </para>
</listitem>
        </itemizedlist>
Static Protected Attributes inherited from <link linkend="_class_c_bite_pop">CBitePop&lt; int64_t &gt;</link>        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1a8009a96dd8a678daaefc9410ba2e0a76">IntOverBits</link></para>
</listitem>
            <listitem><para>static const int <link linkend="_class_c_bite_pop_1ac9adf8849ed7251dadd94815e20bdee8">IntMantBits</link></para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a1302e3c2e578dd650aedb57e18645092">IntMantMult</link></para>

<para>multiplier. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1aeba03d86b17ed01a97dc8225c5598b2d">IntMantMultM</link></para>

<para>IntMantMult. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a8c64d2e83f225b034df818b06b09ecd2">IntMantMult2</link></para>

<para>IntMantMult * 2. </para>
</listitem>
            <listitem><para>static const int64_t <link linkend="_class_c_bite_pop_1a27448c9be1bed517e4a48aa656ca4f76">IntMantMask</link></para>

<para>corresponds to mantissa. </para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>

<para>Wrapper class for <link linkend="_class_c_bite_opt">CBiteOpt</link> class. </para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01616">1616</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a8f0f4ade1c6e99b3f0efc94670d3ae8f"/><section>
    <title>CBiteOptWrap()</title>
<indexterm><primary>CBiteOptWrap</primary><secondary>CBiteOptDeep::CBiteOptWrap</secondary></indexterm>
<indexterm><primary>CBiteOptDeep::CBiteOptWrap</primary><secondary>CBiteOptWrap</secondary></indexterm>
<para><computeroutput>CBiteOptDeep::CBiteOptWrap::CBiteOptWrap (<link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link> *const aOwner)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_biteopt_8h_source_1l01621">1621</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_a8f0f4ade1c6e99b3f0efc94670d3ae8f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a2f9fc126b59988b4a0812d87b3d6fdfd"/><section>
    <title>getMaxValues()</title>
<indexterm><primary>getMaxValues</primary><secondary>CBiteOptDeep::CBiteOptWrap</secondary></indexterm>
<indexterm><primary>CBiteOptDeep::CBiteOptWrap</primary><secondary>getMaxValues</secondary></indexterm>
<para><computeroutput>virtual void CBiteOptDeep::CBiteOptWrap::getMaxValues (double *const p) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Virtual function that should fill maximal parameter value vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>out</entry><entry>p</entry><entry>
<para>Maximal value vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implements <link linkend="_class_c_bite_opt_interface_1a9debe40625c2bc248a4ffd12a9197a4d">CBiteOptInterface</link>.</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01631">1631</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_a2f9fc126b59988b4a0812d87b3d6fdfd_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_a2f9fc126b59988b4a0812d87b3d6fdfd_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a2b9e245cc0cdb32268e01c0ec406fe63"/><section>
    <title>getMinValues()</title>
<indexterm><primary>getMinValues</primary><secondary>CBiteOptDeep::CBiteOptWrap</secondary></indexterm>
<indexterm><primary>CBiteOptDeep::CBiteOptWrap</primary><secondary>getMinValues</secondary></indexterm>
<para><computeroutput>virtual void CBiteOptDeep::CBiteOptWrap::getMinValues (double *const p) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Virtual function that should fill minimal parameter value vector.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>out</entry><entry>p</entry><entry>
<para>Minimal value vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implements <link linkend="_class_c_bite_opt_interface_1ae7f8adaf2fd8acb10ccf057592a6229d">CBiteOptInterface</link>.</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01626">1626</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_a2b9e245cc0cdb32268e01c0ec406fe63_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_a2b9e245cc0cdb32268e01c0ec406fe63_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1a881038400bff3e6d813fcb4304a9bac0"/><section>
    <title>optcost()</title>
<indexterm><primary>optcost</primary><secondary>CBiteOptDeep::CBiteOptWrap</secondary></indexterm>
<indexterm><primary>CBiteOptDeep::CBiteOptWrap</primary><secondary>optcost</secondary></indexterm>
<para><computeroutput>virtual double CBiteOptDeep::CBiteOptWrap::optcost (const double *const p)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Virtual function (objective function) that should calculate parameter vector&apos;s optimization cost.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>p</entry><entry>
<para>Parameter vector to evaluate. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Optimized cost. </para>
</formalpara>
</para>
<para>
Implements <link linkend="_class_c_bite_opt_interface_1a45d7e2c9ea31b6f8bb23758a6879df9d">CBiteOptInterface</link>.</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01636">1636</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_a881038400bff3e6d813fcb4304a9bac0_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_c_bite_opt_deep_1_1_c_bite_opt_wrap_a881038400bff3e6d813fcb4304a9bac0_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_c_bite_opt_deep_1_1_c_bite_opt_wrap_1aababa20b5a32983ebfc89e2d14cfe72c"/><section>
    <title>Owner</title>
<indexterm><primary>Owner</primary><secondary>CBiteOptDeep::CBiteOptWrap</secondary></indexterm>
<indexterm><primary>CBiteOptDeep::CBiteOptWrap</primary><secondary>Owner</secondary></indexterm>
<para><computeroutput><link linkend="_class_c_bite_opt_deep">CBiteOptDeep</link>* CBiteOptDeep::CBiteOptWrap::Owner</computeroutput></para><para>

<para>Owner object. </para>
</para>
<para>
Definition at line <link linkend="_biteopt_8h_source_1l01619">1619</link> of file <link linkend="_biteopt_8h_source">biteopt.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
_fcmaescpp/include/<link linkend="_biteopt_8h">biteopt.h</link></section>
</section>
