<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_filter_8py_source" xml:lang="en-US">
<title>filter.py</title>
<indexterm><primary>examples/filter.py</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_filter_8py_source_1l00001"/><link linkend="_namespaceexamples_1_1filter">00001</link> <emphasis role="comment">#&#32;Copyright&#32;(c)&#32;Dietmar&#32;Wolz.</emphasis>
<anchor xml:id="_filter_8py_source_1l00002"/>00002 <emphasis role="comment">#</emphasis>
<anchor xml:id="_filter_8py_source_1l00003"/>00003 <emphasis role="comment">#&#32;This&#32;source&#32;code&#32;is&#32;licensed&#32;under&#32;the&#32;MIT&#32;license&#32;found&#32;in&#32;the</emphasis>
<anchor xml:id="_filter_8py_source_1l00004"/>00004 <emphasis role="comment">#&#32;LICENSE&#32;file&#32;in&#32;the&#32;root&#32;directory.</emphasis>
<anchor xml:id="_filter_8py_source_1l00005"/>00005 
<anchor xml:id="_filter_8py_source_1l00006"/>00006 <emphasis role="comment">#&#32;This&#32;example&#32;uses&#32;the&#32;&quot;noisy&#32;Travelers&#32;Salesman&#32;Problem&quot;&#32;and&#32;applies&#32;a&#32;machine&#32;learning</emphasis>
<anchor xml:id="_filter_8py_source_1l00007"/>00007 <emphasis role="comment">#&#32;approach&#32;to&#32;avoid&#32;unnecessary&#32;function&#32;calls.&#32;Works&#32;only&#32;with&#32;the&#32;Python&#32;variant&#32;of</emphasis>
<anchor xml:id="_filter_8py_source_1l00008"/>00008 <emphasis role="comment">#&#32;differential&#32;evolution,&#32;both&#32;single&#32;threaded&#32;or&#32;with&#32;parallel&#32;function&#32;evaluation.&#32;</emphasis>
<anchor xml:id="_filter_8py_source_1l00009"/>00009 <emphasis role="comment">#&#32;A&#32;machine&#32;learning&#32;based&#32;filter&#32;should&#32;only&#32;be&#32;used&#32;with&#32;expensive&#32;objective&#32;functions.&#32;</emphasis>
<anchor xml:id="_filter_8py_source_1l00010"/>00010 
<anchor xml:id="_filter_8py_source_1l00011"/>00011 <emphasis role="comment">#&#32;See&#32;https://github.com/dietmarwo/fast-cma-es/blob/master/tutorials/Filter.adoc&#32;for&#32;a&#32;detailed&#32;description.</emphasis>
<anchor xml:id="_filter_8py_source_1l00012"/>00012 
<anchor xml:id="_filter_8py_source_1l00013"/>00013 <emphasis role="comment">#&#32;Tested&#32;using&#32;https://docs.conda.io/en/main/miniconda.html&#32;on&#32;Linux&#32;Mint&#32;21.2</emphasis>
<anchor xml:id="_filter_8py_source_1l00014"/>00014 
<anchor xml:id="_filter_8py_source_1l00015"/>00015 <emphasis role="keyword">import</emphasis>&#32;numpy&#32;<emphasis role="keyword">as</emphasis>&#32;np
<anchor xml:id="_filter_8py_source_1l00016"/>00016 <emphasis role="keyword">from</emphasis>&#32;fcmaes&#32;<emphasis role="keyword">import</emphasis>&#32;de
<anchor xml:id="_filter_8py_source_1l00017"/>00017 <emphasis role="keyword">import</emphasis>&#32;xgboost
<anchor xml:id="_filter_8py_source_1l00018"/>00018 <emphasis role="keyword">from</emphasis>&#32;collections&#32;<emphasis role="keyword">import</emphasis>&#32;deque&#32;&#32;&#32;&#32;
<anchor xml:id="_filter_8py_source_1l00019"/>00019 <emphasis role="keyword">from</emphasis>&#32;noisy_tsp&#32;<emphasis role="keyword">import</emphasis>&#32;TSP,&#32;load_tsplib
<anchor xml:id="_filter_8py_source_1l00020"/>00020 
<anchor xml:id="_filter_8py_source_1l00021"/>00021 <emphasis role="keyword">import</emphasis>&#32;sys&#32;
<anchor xml:id="_filter_8py_source_1l00022"/>00022 <emphasis role="keyword">from</emphasis>&#32;loguru&#32;<emphasis role="keyword">import</emphasis>&#32;logger
<anchor xml:id="_filter_8py_source_1l00023"/>00023 
<anchor xml:id="_filter_8py_source_1l00024"/>00024 logger.remove()
<anchor xml:id="_filter_8py_source_1l00025"/><link linkend="_namespaceexamples_1_1filter_1a5e54718cf5871a3bfa2e5838228cfb21">00025</link> logger.add(sys.stdout,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_filter_8py_source_1l00026"/>00026 logger.add(<emphasis role="stringliteral">&quot;log_{time}.txt&quot;</emphasis>,&#32;format=<emphasis role="stringliteral">&quot;{time:HH:mm:ss.SS}&#32;|&#32;{process}&#32;|&#32;{level}&#32;|&#32;{message}&quot;</emphasis>,&#32;level=<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>)
<anchor xml:id="_filter_8py_source_1l00027"/>00027 
<anchor xml:id="_filter_8py_source_1l00028"/>00028 <emphasis role="comment">#&#32;do&#32;&apos;pip&#32;install&#32;tsplib95&apos;</emphasis>
<anchor xml:id="_filter_8py_source_1l00029"/>00029 
<anchor xml:id="_filter_8py_source_1l00030"/><link linkend="_classexamples_1_1filter_1_1filter">00030</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classexamples_1_1filter_1_1filter">filter</link>():
<anchor xml:id="_filter_8py_source_1l00031"/>00031 &#32;&#32;&#32;&#32;
<anchor xml:id="_filter_8py_source_1l00032"/><link linkend="_classexamples_1_1filter_1_1filter_1a712effcfdc121fa169216b6da13b8804">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1filter_1_1filter_1a712effcfdc121fa169216b6da13b8804">__init__</link>(self,&#32;size,&#32;interval,&#32;filter_prob&#32;=&#32;0.9):
<anchor xml:id="_filter_8py_source_1l00033"/><link linkend="_classexamples_1_1filter_1_1filter_1a8ad591c512301f38d81a6a82fbeffa17">00033</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a8ad591c512301f38d81a6a82fbeffa17">xq</link>&#32;=&#32;deque(maxlen=size)
<anchor xml:id="_filter_8py_source_1l00034"/><link linkend="_classexamples_1_1filter_1_1filter_1a2f0c39484ec15dfac7bb8bbca564900b">00034</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a2f0c39484ec15dfac7bb8bbca564900b">yq</link>&#32;=&#32;deque(maxlen=size)
<anchor xml:id="_filter_8py_source_1l00035"/><link linkend="_classexamples_1_1filter_1_1filter_1af14d776abf955fec0431001f762f8241">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1af14d776abf955fec0431001f762f8241">interval</link>&#32;=&#32;interval
<anchor xml:id="_filter_8py_source_1l00036"/><link linkend="_classexamples_1_1filter_1_1filter_1a66bb43de44afa0e7eae5c2fefa043be8">00036</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a66bb43de44afa0e7eae5c2fefa043be8">filter_prob</link>&#32;=&#32;filter_prob&#32;<emphasis role="comment">#&#32;probability&#32;filter&#32;is&#32;applied</emphasis>
<anchor xml:id="_filter_8py_source_1l00037"/><link linkend="_classexamples_1_1filter_1_1filter_1af1b8bdeda2c1216fc8da8624bc6a87a8">00037</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1af1b8bdeda2c1216fc8da8624bc6a87a8">num</link>&#32;=&#32;0
<anchor xml:id="_filter_8py_source_1l00038"/><link linkend="_classexamples_1_1filter_1_1filter_1a47e2e8a924524873f6cef322c647680d">00038</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a47e2e8a924524873f6cef322c647680d">model</link>&#32;=&#32;<emphasis role="keywordtype">None</emphasis>
<anchor xml:id="_filter_8py_source_1l00039"/>00039 &#32;&#32;&#32;&#32;
<anchor xml:id="_filter_8py_source_1l00040"/><link linkend="_classexamples_1_1filter_1_1filter_1a287ca08f91dae8ebd0b9c6b24d30adb3">00040</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1filter_1_1filter_1a287ca08f91dae8ebd0b9c6b24d30adb3">add</link>(self,&#32;x,&#32;y):
<anchor xml:id="_filter_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a8ad591c512301f38d81a6a82fbeffa17">xq</link>.append(x)
<anchor xml:id="_filter_8py_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a2f0c39484ec15dfac7bb8bbca564900b">yq</link>.append(y)
<anchor xml:id="_filter_8py_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1af1b8bdeda2c1216fc8da8624bc6a87a8">num</link>&#32;+=&#32;1
<anchor xml:id="_filter_8py_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1af1b8bdeda2c1216fc8da8624bc6a87a8">num</link>&#32;%&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1af14d776abf955fec0431001f762f8241">interval</link>&#32;==&#32;0:
<anchor xml:id="_filter_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_filter_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a903971b343ce5a832f74e1e25c1de308">learn</link>()
<anchor xml:id="_filter_8py_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_filter_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(ex)
<anchor xml:id="_filter_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;
<anchor xml:id="_filter_8py_source_1l00050"/><link linkend="_classexamples_1_1filter_1_1filter_1a663125c6add024d2eb1284f57ca8ad09">00050</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1filter_1_1filter_1a663125c6add024d2eb1284f57ca8ad09">x</link>(self):
<anchor xml:id="_filter_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;np.array(self.<link linkend="_classexamples_1_1filter_1_1filter_1a8ad591c512301f38d81a6a82fbeffa17">xq</link>)
<anchor xml:id="_filter_8py_source_1l00052"/>00052 &#32;&#32;&#32;&#32;
<anchor xml:id="_filter_8py_source_1l00053"/><link linkend="_classexamples_1_1filter_1_1filter_1aef3f67bb7fc5993c23a17a5c9e137b19">00053</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1filter_1_1filter_1aef3f67bb7fc5993c23a17a5c9e137b19">y</link>(self):
<anchor xml:id="_filter_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;np.array(self.<link linkend="_classexamples_1_1filter_1_1filter_1a2f0c39484ec15dfac7bb8bbca564900b">yq</link>)
<anchor xml:id="_filter_8py_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_filter_8py_source_1l00056"/><link linkend="_classexamples_1_1filter_1_1filter_1a903971b343ce5a832f74e1e25c1de308">00056</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1filter_1_1filter_1a903971b343ce5a832f74e1e25c1de308">learn</link>(self):
<anchor xml:id="_filter_8py_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a47e2e8a924524873f6cef322c647680d">model</link>&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>:
<anchor xml:id="_filter_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a47e2e8a924524873f6cef322c647680d">model</link>&#32;=&#32;xgboost.XGBRegressor(objective=<emphasis role="stringliteral">&apos;rank:pairwise&apos;</emphasis>)
<anchor xml:id="_filter_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a47e2e8a924524873f6cef322c647680d">model</link>.fit(self.<link linkend="_classexamples_1_1filter_1_1filter_1a663125c6add024d2eb1284f57ca8ad09">x</link>(),&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1aef3f67bb7fc5993c23a17a5c9e137b19">y</link>())
<anchor xml:id="_filter_8py_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
<anchor xml:id="_filter_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_filter_8py_source_1l00062"/><link linkend="_classexamples_1_1filter_1_1filter_1a2637d39a182439a38c218519cca3aa70">00062</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1filter_1_1filter_1a2637d39a182439a38c218519cca3aa70">is_improve</link>(self,&#32;x,&#32;x_old,&#32;y_old):
<anchor xml:id="_filter_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a47e2e8a924524873f6cef322c647680d">model</link>&#32;<emphasis role="keywordflow">is</emphasis>&#32;<emphasis role="keywordtype">None</emphasis>&#32;<emphasis role="keywordflow">or</emphasis>&#32;np.random.random()&#32;&gt;&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a66bb43de44afa0e7eae5c2fefa043be8">filter_prob</link>&#32;:
<anchor xml:id="_filter_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">True</emphasis>
<anchor xml:id="_filter_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_filter_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>:
<anchor xml:id="_filter_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;self.<link linkend="_classexamples_1_1filter_1_1filter_1a47e2e8a924524873f6cef322c647680d">model</link>.<link linkend="_namespacepredict">predict</link>([x,&#32;x_old])
<anchor xml:id="_filter_8py_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y[0]&#32;&lt;&#32;y[1]
<anchor xml:id="_filter_8py_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">except</emphasis>&#32;Exception&#32;<emphasis role="keyword">as</emphasis>&#32;ex:
<anchor xml:id="_filter_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(ex)
<anchor xml:id="_filter_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">True</emphasis>
<anchor xml:id="_filter_8py_source_1l00072"/>00072 
<anchor xml:id="_filter_8py_source_1l00073"/><link linkend="_classexamples_1_1filter_1_1filter_1af57658df88f14f3e05d2c535f9763a7f">00073</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classexamples_1_1filter_1_1filter_1af57658df88f14f3e05d2c535f9763a7f">optimize</link>(self,&#32;problem):
<anchor xml:id="_filter_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_filter_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;de.minimize(problem,&#32;
<anchor xml:id="_filter_8py_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dim&#32;=&#32;problem.d,
<anchor xml:id="_filter_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bounds&#32;=&#32;problem.bounds(),&#32;
<anchor xml:id="_filter_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;popsize&#32;=&#32;16,&#32;
<anchor xml:id="_filter_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_evaluations&#32;=&#32;60000,&#32;
<anchor xml:id="_filter_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;workers&#32;=&#32;32,
<anchor xml:id="_filter_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filter&#32;=&#32;self
<anchor xml:id="_filter_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;logger&#32;=&#32;logger()</emphasis>
<anchor xml:id="_filter_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="_filter_8py_source_1l00084"/>00084 &#32;
<anchor xml:id="_filter_8py_source_1l00085"/>00085 <emphasis role="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis role="stringliteral">&apos;__main__&apos;</emphasis>:
<anchor xml:id="_filter_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;
<anchor xml:id="_filter_8py_source_1l00087"/><link linkend="_namespaceexamples_1_1filter_1aefed5bb18a20cf853dc9f9b21f2c7294">00087</link> &#32;&#32;&#32;&#32;filter&#32;=&#32;<link linkend="_classexamples_1_1filter_1_1filter">filter</link>(96,32)
<anchor xml:id="_filter_8py_source_1l00088"/><link linkend="_namespaceexamples_1_1filter_1a10af08ebae43e244b283744e19d8d40e">00088</link> &#32;&#32;&#32;&#32;tsp&#32;=&#32;load_tsplib(<emphasis role="stringliteral">&apos;data/tsp/br17.tsp&apos;</emphasis>)
<anchor xml:id="_filter_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;filter.optimize(tsp)
<anchor xml:id="_filter_8py_source_1l00090"/>00090 
<anchor xml:id="_filter_8py_source_1l00091"/>00091 
<anchor xml:id="_filter_8py_source_1l00092"/>00092 
</programlisting></section>
